




cases_dict ={
    'case if': 
'''
//@version=5
indicator("My script")

ma = if (open > close)
	1
else if (high > low)
	2
else
	3

plot(ma)

'''
,

'case switch': 
'''
//@version=5
indicator("My script")

ma = switch "qasdfghj"
	"EMA" => ta.ema(close, 10)
	"SMA" => ta.sma(close, 10)
	"RMA" => ta.rma(close, 10)
	// Default used when the three first cases do not match.
	=> ta.wma(close, 10)

plot(ma)
'''
,

'case for': 
'''
//@version=5
indicator("My script")

result = 0
for i = 1 to 10
	i = 2*i
	result += i
	result

plot(result)
'''
,

'case while': 
'''
//@version=5
indicator("while")
int counter   = 10
int factorial = 1
while counter > 0
	factorial := factorial * counter
	counter   := counter - 1

plot(factorial)
'''
,

'case funDef': 
'''
//@version=5
indicator("My script")

// @function Fun from script
fun(float x) =>
	x+2

plot(fun(open))
'''
,

'definition test':
'''
//@version=5
indicator("My script")
var x = high
plot(x)
// @function Fun from script
fun(float x) =>
	x+2
	y = x + 2

type Pivot
    bool  isHigh
	
plot(fun(open))
'''
,
'case funDef overloads':
'''
//@version=5
indicator("My script")

// @function float overload of fun
fun(float x) =>
	x+2

// @function int overload of fun
fun(int x) =>
    x+2

plot(fun(open))
plot(fun(1))
'''
,
"case import":
'''
//@version=5
indicator("My script")
import Batut/MyLibrar234/1 as q
// @function Fun from script
fun(float x) =>
	x+2+q.fun(4)

plot(fun(open))
'''
,
'case method': 
'''
//@version=5
indicator("My script",max_labels_count = 500)
var series float[] array_close = array.new<float>()
array_close.push(close)
f(int)=>
    if int > 0
        int * int
    else
        if int == 0
            int *0 
        else
            switch int
                int == -1 => -1
                int == int(na) => int(-1)
                => na
method method(int int)=>
    switch int
        not na(int) => bar_index %2 == 0? 1:0
        => f(int)
varip series int a = bar_index

var simple int b = 1
const int c = 0
plot((a+b+c).method())

    
if array_close.size() >0
    if label.all.size() < 500
        label.new(bar_index,close,str.format("{0}",int(array_close.last()).method()))
    else
        label.delete(label.all.get(0))
'''
,
'case user_type': 
'''
//@version=5
indicator("My script")
type test
    string a = na
    test b = na
defin = test.new("a")
str = defin.a
users = defin.b
if na(users)
    label.new(bar_index,close,str)
'''
,
'case error': 
'''
//@version=5
indicator("My script")
float a = na
if bar_index % 2 == 0
    a:=open
else
    a:= close

label.new(bar_index,close,a)
'''
}

really_big_cases = {
1:
'''
// This source code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/
// Â© Kred-Allino

//@version=5
indicator("Kred-Allino Multisignal Premium Pro", "Kred-Allino MSP Pro"
    , overlay = true
    , max_labels_count = 500
    , max_lines_count = 500
    , max_boxes_count = 500
    , max_bars_back = 5000)
//-----------------------------------------------------------------------------{
//Constants
//-----------------------------------------------------------------------------{
color TRANSP_CSS = #ffffff00

//Tooltips
string MODE_TOOLTIP          = 'Allows to display historical Structure or only the recent ones'
string STYLE_TOOLTIP         = 'Indicator color theme'
string COLOR_CANDLES_TOOLTIP = 'Display additional candles with a color reflecting the current trend detected by structure'
string SHOW_INTERNAL         = 'Display internal market structure'
string CONFLUENCE_FILTER     = 'Filter non significant internal structure breakouts'
string SHOW_SWING            = 'Display swing market Structure'
string SHOW_SWING_POINTS     = 'Display swing point as labels on the chart'
string SHOW_SWHL_POINTS      = 'Highlight most recent strong and weak high/low points on the chart'
string INTERNAL_OB           = 'Display internal order blocks on the chart\n\nNumber of internal order blocks to display on the chart'
string SWING_OB              = 'Display swing order blocks on the chart\n\nNumber of internal swing blocks to display on the chart'
string FILTER_OB             = 'Method used to filter out volatile order blocks \n\nIt is recommended to use the cumulative mean range method when a low amount of data is available'
string SHOW_EQHL             = 'Display equal highs and equal lows on the chart'
string EQHL_BARS             = 'Number of bars used to confirm equal highs and equal lows'
string EQHL_THRESHOLD        = 'Sensitivity threshold in a range (0, 1) used for the detection of equal highs & lows\n\nLower values will return fewer but more pertinent results'
string SHOW_FVG              = 'Display fair values gaps on the chart'
string AUTO_FVG              = 'Filter out non significant fair value gaps'
string FVG_TF                = 'Fair value gaps timeframe'
string EXTEND_FVG            = 'Determine how many bars to extend the Fair Value Gap boxes on chart'
string PED_ZONES             = 'Display premium, discount, and equilibrium zones on chart'

//-----------------------------------------------------------------------------{
//Settings
//////////////////////////LOGO////////////////////
var table logo = table.new(position.bottom_right, 1, 1)
if barstate.islast
    table.cell(logo, 0, 0, 'Powered By KredAllino Technologies', text_size=size.tiny, text_color=#FF0000)
//-----------------------------------------------------------------------------{

//////////////////////////LOGO////////////////////
var table logo1 = table.new(position.top_right, 1, 1)
if barstate.islast
    table.cell(logo1, 0, 0, 'Powered By KredAllino Technologies', text_size=size.tiny, text_color=color.rgb(8, 225, 228))

//////////////////////////////////smc starts here/////////////////////////
//General
//----------------------------------------{
mode = input.string('Present'
    , options = ['Historical', 'Present']
    , group = 'KredAllino Intelligent Money Concepts'
    , tooltip = MODE_TOOLTIP)

style = input.string('Colored'
    , options = ['Colored', 'Monochrome']
    , group = 'KredAllino Intelligent Money Concepts'
    , tooltip = STYLE_TOOLTIP)

show_trend = input(false, 'Color Candles'
    , group = 'KredAllino Intelligent Money Concepts'
    , tooltip = COLOR_CANDLES_TOOLTIP)

//----------------------------------------}
//Internal Structure
//----------------------------------------{
show_internals = input(true, 'Show Internal Structure'
    , group = 'Real Time Internal Structure'
    , tooltip = SHOW_INTERNAL)

show_ibull = input.string('All', 'Bullish Structure'
    , options = ['All', 'Break of Structure', 'Change of Charactor']
    , inline = 'ibull'
    , group = 'Real Time Internal Structure')

swing_ibull_css = input(#089981, ''
    , inline = 'ibull'
    , group = 'Real Time Internal Structure')

//Bear Structure
show_ibear = input.string('All', 'Bearish Structure'
    , options = ['All', 'Break of Structure', 'Change of Charactor']
    , inline = 'ibear'
    , group = 'Real Time Internal Structure')

swing_ibear_css = input(#f23645, ''
    , inline = 'ibear'
    , group = 'Real Time Internal Structure')

ifilter_confluence = input(true, 'Confluence Filter'
    , group = 'Real Time Internal Structure'
    , tooltip = CONFLUENCE_FILTER)

//----------------------------------------}
//Swing Structure
//----------------------------------------{
show_Structure = input(true, 'Show Swing Structure'
    , group = 'Real Time Swing Structure'
    , tooltip = SHOW_SWING)

//Bull Structure
show_bull = input.string('All', 'Bullish Structure'
    , options = ['All', 'Break Of Structure', 'hange of Charactor']
    , inline = 'bull'
    , group = 'Real Time Swing Structure')

swing_bull_css = input(#006400, ''
    , inline = 'bull'
    , group = 'Real Time Swing Structure')

//Bear Structure
show_bear = input.string('All', 'Bearish Structure'
    , options = ['All', 'Break of Structure', 'Change of Charactor']
    , inline = 'bear'
    , group = 'Real Time Swing Structure')

swing_bear_css = input(#8b0000, ''
    , inline = 'bear'
    , group = 'Real Time Swing Structure')

//Swings
show_swings = input(true, 'Show Swings Points'
    , inline = 'swings'
    , group = 'Real Time Swing Structure'
    , tooltip = SHOW_SWING_POINTS)

length = input.int(50, ''
    , minval = 10
    , inline = 'swings'
    , group = 'Real Time Swing Structure')

show_hl_swings = input(true, 'Show Strong/Weak High/Low'
    , group = 'Real Time Swing Structure'
    , tooltip = SHOW_SWHL_POINTS)

//----------------------------------------}
//Order Blocks
//----------------------------------------{
show_iob = input(true, 'Internal Order Blocks'
    , inline = 'iob'
    , group = 'Order Blocks'
    , tooltip = INTERNAL_OB)

iob_showlast = input.int(5, ''
    , minval = 1
    , inline = 'iob'
    , group = 'Order Blocks')

show_ob = input(true, 'Swing Order Blocks'
    , inline = 'ob'
    , group = 'Order Blocks'
    , tooltip = SWING_OB)

ob_showlast = input.int(5, ''
    , minval = 1
    , inline = 'ob'
    , group = 'Order Blocks')

ob_filter = input.string('Atr', 'Order Block Filter'
    , options = ['Atr', 'Cumulative Mean Range']
    , group = 'Order Blocks'
    , tooltip = FILTER_OB)

ibull_ob_css = input.color(color.new(#00cc9c, 90), 'Internal Bullish OB'
    , group = 'Order Blocks')

ibear_ob_css = input.color(color.new(#f3ed07, 90), 'Internal Bearish OB'
    , group = 'Order Blocks')

bull_ob_css = input.color(color.new(#00cc9c, 80), 'Bullish OB'
    , group = 'Order Blocks')

bear_ob_css = input.color(color.new(#f3ed07, 80), 'Bearish OB'
    , group = 'Order Blocks')

//----------------------------------------}
//EQH/EQL
//----------------------------------------{
show_eq = input(true, 'Equal High/Low'
    , group = 'EQH/EQL'
    , tooltip = SHOW_EQHL)

eq_len = input.int(8, 'Bars Confirmation'
    , minval = 1
    , group = 'EQH/EQL'
    , tooltip = EQHL_BARS)

eq_threshold = input.float(0.5, 'Threshold'
    , minval = 0
    , maxval = 0.5
    , step = 0.1
    , group = 'EQH/EQL'
    , tooltip = EQHL_THRESHOLD)

//----------------------------------------}
//Fair Value Gaps
//----------------------------------------{
show_fvg = input(false, 'Fair Value Gaps'
    , group = 'Fair Value Gaps'
    , tooltip = SHOW_FVG)
    
fvg_auto = input(true, "Auto Threshold"
    , group = 'Fair Value Gaps'
    , tooltip = AUTO_FVG)

fvg_tf = input.timeframe('', "Timeframe"
    , group = 'Fair Value Gaps'
    , tooltip = FVG_TF)

bull_fvg_css = input.color(color.new(#00ff68, 70), 'Bullish FVG'
    , group = 'Fair Value Gaps')

bear_fvg_css = input.color(color.new(#ff0008, 70), 'Bearish FVG'
    , group = 'Fair Value Gaps')

fvg_extend = input.int(1, "Extend FVG"
    , minval = 0
    , group = 'Fair Value Gaps'
    , tooltip = EXTEND_FVG)

//----------------------------------------}
//Previous day/week high/low
//----------------------------------------{
//Daily
show_pdhl = input(true, 'Daily'
    , inline = 'daily'
    , group = 'Highs & Lows MTF')

pdhl_style = input.string('â¯â¯â¯', ''
    , options = ['â¯â¯â¯', '----', 'Â·Â·Â·Â·']
    , inline = 'daily'
    , group = 'Highs & Lows MTF')

pdhl_css = input(#2157f3, ''
    , inline = 'daily'
    , group = 'Highs & Lows MTF')

//Weekly
show_pwhl = input(false, 'Weekly'
    , inline = 'weekly'
    , group = 'Highs & Lows MTF')

pwhl_style = input.string('â¯â¯â¯', ''
    , options = ['â¯â¯â¯', '----', 'Â·Â·Â·Â·']
    , inline = 'weekly'
    , group = 'Highs & Lows MTF')

pwhl_css = input(#2157f3, ''
    , inline = 'weekly'
    , group = 'Highs & Lows MTF')

//Monthly
show_pmhl = input(false, 'Monthly'
    , inline = 'monthly'
    , group = 'Highs & Lows MTF')

pmhl_style = input.string('â¯â¯â¯', ''
    , options = ['â¯â¯â¯', '----', 'Â·Â·Â·Â·']
    , inline = 'monthly'
    , group = 'Highs & Lows MTF')

pmhl_css = input(#2157f3, ''
    , inline = 'monthly'
    , group = 'Highs & Lows MTF')

//----------------------------------------}
//Premium/Discount zones
//----------------------------------------{
show_sd = input(true, 'Premium/Discount Zones'
    , group = 'Premium & Discount Zones'
    , tooltip = PED_ZONES)

premium_css = input.color(#8b0000, 'Premium Zone'
    , group = 'Premium & Discount Zones')

eq_css = input.color(#b2b5be, 'Equilibrium Zone'
    , group = 'Premium & Discount Zones')

discount_css = input.color(#006400, 'Discount Zone'
    , group = 'Premium & Discount Zones')

//-----------------------------------------------------------------------------}
//Functions
//-----------------------------------------------------------------------------{
n = bar_index

atr = ta.atr(200)
cmean_range = ta.cum(high - low) / n

//HL Output function
hl() => [high, low]

//Get ohlc values function
get_ohlc()=> [close[1], open[1], high, low, high[2], low[2]]

//Display Structure function
display_Structure(x, y, txt, css, dashed, down, lbl_size)=>
    structure_line = line.new(x, y, n, y
        , color = css
        , style = dashed ? line.style_dashed : line.style_solid)

    structure_lbl = label.new(int(math.avg(x, n)), y, txt
        , color = TRANSP_CSS
        , textcolor = css
        , style = down ? label.style_label_down : label.style_label_up
        , size = lbl_size)

    if mode == 'Present'
        line.delete(structure_line[1])
        label.delete(structure_lbl[1])

//Swings detection/measurements
swings(len)=>
    var os = 0
    
    upper = ta.highest(len)
    lower = ta.lowest(len)

    os := high[len] > upper ? 0 : low[len] < lower ? 1 : os[1]

    top = os == 0 and os[1] != 0 ? high[len] : 0
    btm = os == 1 and os[1] != 1 ? low[len] : 0

    [top, btm]

//Order block coordinates function
ob_coord(use_max, loc, target_top, target_btm, target_left, target_type)=>
    min = 99999999.
    max = 0.
    idx = 1

    ob_threshold = ob_filter == 'Atr' ? atr : cmean_range 

    //Search for highest/lowest high within the structure interval and get range
    if use_max
        for i = 1 to (n - loc)-1
            if (high[i] - low[i]) < ob_threshold[i] * 2
                max := math.max(high[i], max)
                min := max == high[i] ? low[i] : min
                idx := max == high[i] ? i : idx
    else
        for i = 1 to (n - loc)-1
            if (high[i] - low[i]) < ob_threshold[i] * 2
                min := math.min(low[i], min)
                max := min == low[i] ? high[i] : max
                idx := min == low[i] ? i : idx

    array.unshift(target_top, max)
    array.unshift(target_btm, min)
    array.unshift(target_left, time[idx])
    array.unshift(target_type, use_max ? -1 : 1)

//Set order blocks
display_ob(boxes, target_top, target_btm, target_left, target_type, show_last, swing, size)=>
    for i = 0 to math.min(show_last-1, size-1)
        get_box = array.get(boxes, i)

        box.set_lefttop(get_box, array.get(target_left, i), array.get(target_top, i))
        box.set_rightbottom(get_box, array.get(target_left, i), array.get(target_btm, i))
        box.set_extend(get_box, extend.right)

        color css = na
        
        if swing 
            if style == 'Monochrome'
                css := array.get(target_type, i) == 1 ? color.new(#b2b5be, 80) : color.new(#5d606b, 80)
                border_css = array.get(target_type, i) == 1 ? #b2b5be : #5d606b
                box.set_border_color(get_box, border_css)
            else
                css := array.get(target_type, i) == 1 ? bull_ob_css : bear_ob_css
                box.set_border_color(get_box, css)

            box.set_bgcolor(get_box, css)
        else
            if style == 'Monochrome'
                css := array.get(target_type, i) == 1 ? color.new(#b2b5be, 80) : color.new(#5d606b, 80)
            else
                css := array.get(target_type, i) == 1 ? ibull_ob_css : ibear_ob_css
            
            box.set_border_color(get_box, css)
            box.set_bgcolor(get_box, css)
        
//Line Style function
get_line_style(style) =>
    out = switch style
        'â¯â¯â¯'  => line.style_solid
        '----' => line.style_dashed
        'Â·Â·Â·Â·' => line.style_dotted

//Set line/labels function for previous high/lows
phl(h, l, tf, css)=>
    var line high_line = line.new(na,na,na,na
        , xloc = xloc.bar_time
        , color = pdhl_css
        , style = get_line_style(pdhl_style))

    var label high_lbl = label.new(na,na
        , xloc = xloc.bar_time
        , text = str.format('P{0}H', tf)
        , color = TRANSP_CSS
        , textcolor = css
        , size = size.small
        , style = label.style_label_left)

    var line low_line = line.new(na,na,na,na
        , xloc = xloc.bar_time
        , color = css
        , style = get_line_style(pdhl_style))

    var label low_lbl = label.new(na,na
        , xloc = xloc.bar_time
        , text = str.format('P{0}L', tf)
        , color = TRANSP_CSS
        , textcolor = css
        , size = size.small
        , style = label.style_label_left)

    hy = ta.valuewhen(h != h[1], h, 1)
    hx = ta.valuewhen(h == high, time, 1)

    ly = ta.valuewhen(l != l[1], l, 1)
    lx = ta.valuewhen(l == low, time, 1)

    if barstate.islast
        ext = time + (time - time[1])*20

        //High
        line.set_xy1(high_line, hx, hy)
        line.set_xy2(high_line, ext, hy)

        label.set_xy(high_lbl, ext, hy)

        //Low
        line.set_xy1(low_line, lx, ly)
        line.set_xy2(low_line, ext, ly)

        label.set_xy(low_lbl, ext, ly)

//-----------------------------------------------------------------------------}
//Global variables
//-----------------------------------------------------------------------------{
var trend = 0, var itrend = 0

var top_y = 0., var top_x = 0
var btm_y = 0., var btm_x = 0

var itop_y = 0., var itop_x = 0
var ibtm_y = 0., var ibtm_x = 0

var trail_up = high, var trail_dn = low
var trail_up_x = 0,  var trail_dn_x = 0

var top_cross = true,  var btm_cross = true
var itop_cross = true, var ibtm_cross = true

var txt_top = '',  var txt_btm = ''

//Alerts
bull_choch_alert = false 
bull_bos_alert   = false 

bear_choch_alert = false 
bear_bos_alert   = false 

bull_ichoch_alert = false 
bull_ibos_alert   = false 

bear_ichoch_alert = false 
bear_ibos_alert   = false 

bull_iob_break = false 
bear_iob_break = false

bull_ob_break = false 
bear_ob_break = false

eqh_alert = false 
eql_alert = false 

//Structure colors
var bull_css = style == 'Monochrome' ? #b2b5be 
    : swing_bull_css

var bear_css = style == 'Monochrome' ? #b2b5be 
    : swing_bear_css

var ibull_css = style == 'Monochrome' ? #b2b5be 
    : swing_ibull_css

var ibear_css = style == 'Monochrome' ? #b2b5be 
    : swing_ibear_css

//Swings
[top, btm] = swings(length)

[itop, ibtm] = swings(5)

//-----------------------------------------------------------------------------}
//Pivot High
//-----------------------------------------------------------------------------{
var line extend_top = na

var label extend_top_lbl = label.new(na, na
    , color = TRANSP_CSS
    , textcolor = bear_css
    , style = label.style_label_down
    , size = size.tiny)

if top
    top_cross := true
    txt_top := top > top_y ? 'HH' : 'LH'

    if show_swings
        top_lbl = label.new(n-length, top, txt_top
            , color = TRANSP_CSS
            , textcolor = bear_css
            , style = label.style_label_down
            , size = size.small)

        if mode == 'Present'
            label.delete(top_lbl[1])

    //Extend recent top to last bar
    line.delete(extend_top[1])
    extend_top := line.new(n-length, top, n, top
        , color = bear_css)

    top_y := top
    top_x := n - length

    trail_up := top
    trail_up_x := n - length

if itop
    itop_cross := true

    itop_y := itop
    itop_x := n - 5

//Trailing maximum
trail_up := math.max(high, trail_up)
trail_up_x := trail_up == high ? n : trail_up_x

//Set top extension label/line
if barstate.islast and show_hl_swings
    line.set_xy1(extend_top, trail_up_x, trail_up)
    line.set_xy2(extend_top, n + 20, trail_up)

    label.set_x(extend_top_lbl, n + 20)
    label.set_y(extend_top_lbl, trail_up)
    label.set_text(extend_top_lbl, trend < 0 ? 'Strong High' : 'Weak High')

//-----------------------------------------------------------------------------}
//Pivot Low
//-----------------------------------------------------------------------------{
var line extend_btm = na 

var label extend_btm_lbl = label.new(na, na
    , color = TRANSP_CSS
    , textcolor = bull_css
    , style = label.style_label_up
    , size = size.tiny)

if btm
    btm_cross := true
    txt_btm := btm < btm_y ? 'LL' : 'HL'
    
    if show_swings
        btm_lbl = label.new(n - length, btm, txt_btm
            , color = TRANSP_CSS
            , textcolor = bull_css
            , style = label.style_label_up
            , size = size.small)

        if mode == 'Present'
            label.delete(btm_lbl[1])
    
    //Extend recent btm to last bar
    line.delete(extend_btm[1])
    extend_btm := line.new(n - length, btm, n, btm
        , color = bull_css)

    btm_y := btm
    btm_x := n-length

    trail_dn := btm
    trail_dn_x := n-length

if ibtm
    ibtm_cross := true

    ibtm_y := ibtm
    ibtm_x := n - 5

//Trailing minimum
trail_dn := math.min(low, trail_dn)
trail_dn_x := trail_dn == low ? n : trail_dn_x

//Set btm extension label/line
if barstate.islast and show_hl_swings
    line.set_xy1(extend_btm, trail_dn_x, trail_dn)
    line.set_xy2(extend_btm, n + 20, trail_dn)

    label.set_x(extend_btm_lbl, n + 20)
    label.set_y(extend_btm_lbl, trail_dn)
    label.set_text(extend_btm_lbl, trend > 0 ? 'Strong Low' : 'Weak Low')

//-----------------------------------------------------------------------------}
//Order Blocks Arrays
//-----------------------------------------------------------------------------{
var iob_top = array.new_float(0)
var iob_btm = array.new_float(0)
var iob_left = array.new_int(0)
var iob_type = array.new_int(0)

var ob_top = array.new_float(0)
var ob_btm = array.new_float(0)
var ob_left = array.new_int(0)
var ob_type = array.new_int(0)

//-----------------------------------------------------------------------------}
//Pivot High BOS/CHoCH
//-----------------------------------------------------------------------------{
//Filtering
var bull_concordant = true

if ifilter_confluence
    bull_concordant := high - math.max(close, open) > math.min(close, open - low)

//Detect internal bullish Structure
if ta.crossover(close, itop_y) and itop_cross and top_y != itop_y and bull_concordant
    bool choch = na
    
    if itrend < 0
        choch := true
        bull_ichoch_alert := true
    else 
        bull_ibos_alert := true
    
    txt = choch ? 'Charactor Change' : 'Structure Break'

    if show_internals
        if show_ibull == 'All' or (show_ibull == 'BOS' and not choch) or (show_ibull == 'CHoCH' and choch)
            display_Structure(itop_x, itop_y, txt, ibull_css, true, true, size.tiny)
    
    itop_cross := false
    itrend := 1
    
    //Internal Order Block
    if show_iob
        ob_coord(false, itop_x, iob_top, iob_btm, iob_left, iob_type)

//Detect bullish Structure
if ta.crossover(close, top_y) and top_cross
    bool choch = na
    
    if trend < 0
        choch := true
        bull_choch_alert := true
    else 
        bull_bos_alert := true

    txt = choch ? 'Charactor Change' : 'Structure Change'
    
    if show_Structure
        if show_bull == 'All' or (show_bull == 'BOS' and not choch) or (show_bull == 'CHoCH' and choch)
            display_Structure(top_x, top_y, txt, bull_css, false, true, size.small)
    
    //Order Block
    if show_ob
        ob_coord(false, top_x, ob_top, ob_btm, ob_left, ob_type)

    top_cross := false
    trend := 1

//-----------------------------------------------------------------------------}
//Pivot Low BOS/CHoCH
//-----------------------------------------------------------------------------{
var bear_concordant = true

if ifilter_confluence
    bear_concordant := high - math.max(close, open) < math.min(close, open - low)

//Detect internal bearish Structure
if ta.crossunder(close, ibtm_y) and ibtm_cross and btm_y != ibtm_y and bear_concordant
    bool choch = false
    
    if itrend > 0
        choch := true
        bear_ichoch_alert := true
    else 
        bear_ibos_alert := true
    
    txt = choch ? 'Charactor Change' : 'Structure Break'

    if show_internals
        if show_ibear == 'All' or (show_ibear == 'BOS' and not choch) or (show_ibear == 'CHoCH' and choch)
            display_Structure(ibtm_x, ibtm_y, txt, ibear_css, true, false, size.tiny)
    
    ibtm_cross := false
    itrend := -1
    
    //Internal Order Block
    if show_iob
        ob_coord(true, ibtm_x, iob_top, iob_btm, iob_left, iob_type)

//Detect bearish Structure
if ta.crossunder(close, btm_y) and btm_cross
    bool choch = na
    
    if trend > 0
        choch := true
        bear_choch_alert := true
    else 
        bear_bos_alert := true

    txt = choch ? 'Charactor Change' : 'Structure Break'
    
    if show_Structure
        if show_bear == 'All' or (show_bear == 'BOS' and not choch) or (show_bear == 'CHoCH' and choch)
            display_Structure(btm_x, btm_y, txt, bear_css, false, false, size.tiny)
    
    //Order Block
    if show_ob
        ob_coord(true, btm_x, ob_top, ob_btm, ob_left, ob_type)

    btm_cross := false
    trend := -1

//-----------------------------------------------------------------------------}
//Order Blocks
//-----------------------------------------------------------------------------{
//Delete internal order blocks box coordinates if top/bottom is broken
for element in iob_type
    index = array.indexof(iob_type, element)

    if close < array.get(iob_btm, index) and element == 1
        array.remove(iob_top, index) 
        array.remove(iob_btm, index) 
        array.remove(iob_left, index) 
        array.remove(iob_type, index)
    else if close > array.get(iob_top, index) and element == -1
        array.remove(iob_top, index) 
        array.remove(iob_btm, index)
        array.remove(iob_left, index) 
        array.remove(iob_type, index)

//Delete internal order blocks box coordinates if top/bottom is broken
for element in ob_type
    index = array.indexof(ob_type, element)

    if close < array.get(ob_btm, index) and element == 1
        array.remove(ob_top, index) 
        array.remove(ob_btm, index) 
        array.remove(ob_left, index) 
        array.remove(ob_type, index)
    else if close > array.get(ob_top, index) and element == -1
        array.remove(ob_top, index) 
        array.remove(ob_btm, index)
        array.remove(ob_left, index) 
        array.remove(ob_type, index)

iob_size = array.size(iob_type)
ob_size = array.size(ob_type)

//Set order blocks
var iob_boxes = array.new_box(0)
var ob_boxes = array.new_box(0)

if barstate.isfirst
    if show_iob
        for i = 0 to iob_showlast-1
            array.push(iob_boxes, box.new(na,na,na,na, xloc = xloc.bar_time))
    if show_ob
        for i = 0 to ob_showlast-1
            array.push(ob_boxes, box.new(na,na,na,na, xloc = xloc.bar_time))

if iob_size > 0
    if barstate.islastconfirmedhistory or (barstate.islast and iob_size != iob_size[1])
        display_ob(iob_boxes, iob_top, iob_btm, iob_left, iob_type, iob_showlast, false, iob_size)

if ob_size > 0
    if barstate.islastconfirmedhistory or (barstate.islast and ob_size != ob_size[1])
        display_ob(ob_boxes, ob_top, ob_btm, ob_left, ob_type, ob_showlast, true, ob_size)

//-----------------------------------------------------------------------------}
//EQH/EQL
//-----------------------------------------------------------------------------{
var eq_prev_top = 0.
var eq_top_x = 0

var eq_prev_btm = 0.
var eq_btm_x = 0

if show_eq
    eq_top = ta.pivothigh(eq_len, eq_len)
    eq_btm = ta.pivotlow(eq_len, eq_len)

    if eq_top 
        max = math.max(eq_top, eq_prev_top)
        min = math.min(eq_top, eq_prev_top)
        
        if max < min + atr * eq_threshold
            eqh_line = line.new(eq_top_x, eq_prev_top, n-eq_len, eq_top
                , color = bear_css
                , style = line.style_dotted)

            eqh_lbl = label.new(int(math.avg(n-eq_len, eq_top_x)), eq_top, 'Equal High'
                , color = #00000000
                , textcolor = bear_css
                , style = label.style_label_down
                , size = size.tiny)

            if mode == 'Present'
                line.delete(eqh_line[1])
                label.delete(eqh_lbl[1])
            
            eqh_alert := true

        eq_prev_top := eq_top
        eq_top_x := n-eq_len

    if eq_btm 
        max = math.max(eq_btm, eq_prev_btm)
        min = math.min(eq_btm, eq_prev_btm)
        
        if min > max - atr * eq_threshold
            eql_line = line.new(eq_btm_x, eq_prev_btm, n-eq_len, eq_btm
                , color = bull_css
                , style = line.style_dotted)

            eql_lbl = label.new(int(math.avg(n-eq_len, eq_btm_x)), eq_btm, 'Equal Low'
                , color = #00000000
                , textcolor = bull_css
                , style = label.style_label_up
                , size = size.tiny)

            eql_alert := true

            if mode == 'Present'
                line.delete(eql_line[1])
                label.delete(eql_lbl[1])

        eq_prev_btm := eq_btm
        eq_btm_x := n-eq_len

//-----------------------------------------------------------------------------}
//Fair Value Gaps
//-----------------------------------------------------------------------------{
var bullish_fvg_max = array.new_box(0)
var bullish_fvg_min = array.new_box(0)

var bearish_fvg_max = array.new_box(0)
var bearish_fvg_min = array.new_box(0)

float bullish_fvg_avg = na
float bearish_fvg_avg = na

bullish_fvg_cnd = false
bearish_fvg_cnd = false

[src_c1, src_o1, src_h, src_l, src_h2, src_l2] =
    request.security(syminfo.tickerid, fvg_tf, get_ohlc())

if show_fvg
    delta_per = (src_c1 - src_o1) / src_o1 * 100

    change_tf = timeframe.change(fvg_tf)

    threshold = fvg_auto ? ta.cum(math.abs(change_tf ? delta_per : 0)) / n * 2 
        : 0

    //FVG conditions
    bullish_fvg_cnd := src_l > src_h2
        and src_c1 > src_h2 
        and delta_per > threshold
        and change_tf

    bearish_fvg_cnd := src_h < src_l2 
        and src_c1 < src_l2 
        and -delta_per > threshold
        and change_tf

    //FVG Areas
    if bullish_fvg_cnd
        array.unshift(bullish_fvg_max, box.new(n-1, src_l, n + fvg_extend, math.avg(src_l, src_h2)
            , border_color = bull_fvg_css
            , bgcolor = bull_fvg_css))
        
        array.unshift(bullish_fvg_min, box.new(n-1, math.avg(src_l, src_h2), n + fvg_extend, src_h2
            , border_color = bull_fvg_css
            , bgcolor = bull_fvg_css))
    
    if bearish_fvg_cnd
        array.unshift(bearish_fvg_max, box.new(n-1, src_h, n + fvg_extend, math.avg(src_h, src_l2)
            , border_color = bear_fvg_css
            , bgcolor = bear_fvg_css))
        
        array.unshift(bearish_fvg_min, box.new(n-1, math.avg(src_h, src_l2), n + fvg_extend, src_l2
            , border_color = bear_fvg_css
            , bgcolor = bear_fvg_css))

    for bx in bullish_fvg_min
        if low < box.get_bottom(bx)
            box.delete(bx)
            box.delete(array.get(bullish_fvg_max, array.indexof(bullish_fvg_min, bx)))
    
    for bx in bearish_fvg_max
        if high > box.get_top(bx)
            box.delete(bx)
            box.delete(array.get(bearish_fvg_min, array.indexof(bearish_fvg_max, bx)))

//-----------------------------------------------------------------------------}
//Previous day/week high/lows
//-----------------------------------------------------------------------------{
//Daily high/low
[pdh, pdl] = request.security(syminfo.tickerid, 'D', hl()
    , lookahead = barmerge.lookahead_on)

//Weekly high/low
[pwh, pwl] = request.security(syminfo.tickerid, 'W', hl()
    , lookahead = barmerge.lookahead_on)

//Monthly high/low
[pmh, pml] = request.security(syminfo.tickerid, 'M', hl()
    , lookahead = barmerge.lookahead_on)

//Display Daily
if show_pdhl
    phl(pdh, pdl, 'D', pdhl_css)

//Display Weekly
if show_pwhl
    phl(pwh, pwl, 'W', pwhl_css)
    
//Display Monthly
if show_pmhl
    phl(pmh, pml, 'M', pmhl_css)

//-----------------------------------------------------------------------------}
//Premium/Discount/Equilibrium zones
//-----------------------------------------------------------------------------{
var premium = box.new(na, na, na, na
    , bgcolor = color.new(premium_css, 80)
    , border_color = na)

var premium_lbl = label.new(na, na
    , text = 'Supply/Selling Zone'
    , color = TRANSP_CSS
    , textcolor = premium_css
    , style = label.style_label_down
    , size = size.small)

var eq = box.new(na, na, na, na
    , bgcolor = color.rgb(120, 123, 134, 80)
    , border_color = na)

var eq_lbl = label.new(na, na
    , text = 'Equal Premium'
    , color = TRANSP_CSS
    , textcolor = eq_css
    , style = label.style_label_left
    , size = size.small)

var discount = box.new(na, na, na, na
    , bgcolor = color.new(discount_css, 80)
    , border_color = na)

var discount_lbl = label.new(na, na
    , text = 'Demand/Buying Zone'
    , color = TRANSP_CSS
    , textcolor = discount_css
    , style = label.style_label_up
    , size = size.small)

//Show Premium/Discount Areas
if barstate.islast and show_sd
    avg = math.avg(trail_up, trail_dn)

    box.set_lefttop(premium, math.max(top_x, btm_x), trail_up)
    box.set_rightbottom(premium, n, .95 * trail_up + .05 * trail_dn)

    label.set_xy(premium_lbl, int(math.avg(math.max(top_x, btm_x), n)), trail_up)

    box.set_lefttop(eq, math.max(top_x, btm_x), .525 * trail_up + .475*trail_dn)
    box.set_rightbottom(eq, n, .525 * trail_dn + .475 * trail_up)

    label.set_xy(eq_lbl, n, avg)
    
    box.set_lefttop(discount, math.max(top_x, btm_x), .95 * trail_dn + .05 * trail_up)
    box.set_rightbottom(discount, n, trail_dn)
    label.set_xy(discount_lbl, int(math.avg(math.max(top_x, btm_x), n)), trail_dn)

//-----------------------------------------------------------------------------}
//Trend
//-----------------------------------------------------------------------------{
var color trend_css = na

if show_trend
    if style == 'Colored'
        trend_css := itrend == 1 ? bull_css : bear_css
    else if style == 'Monochrome'
        trend_css := itrend == 1 ? #b2b5be : #5d606b

plotcandle(open, high, low, close
    , color = trend_css
    , wickcolor = trend_css
    , bordercolor = trend_css
    , editable = false)

//-----------------------------------------------------------------------------}
//Alerts
//-----------------------------------------------------------------------------{
//Internal Structure
// alertcondition(bull_ibos_alert, 'Internal Bullish BOS', 'Internal Bullish BOS formed')
// alertcondition(bull_ichoch_alert, 'Internal Bullish CHoCH', 'Internal Bullish CHoCH formed')

// alertcondition(bear_ibos_alert, 'Internal Bearish BOS', 'Internal Bearish BOS formed')
// alertcondition(bear_ichoch_alert, 'Internal Bearish CHoCH', 'Internal Bearish CHoCH formed')

// //Swing Structure
// alertcondition(bull_bos_alert, 'Bullish BOS', 'Internal Bullish BOS formed')
// alertcondition(bull_choch_alert, 'Bullish CHoCH', 'Internal Bullish CHoCH formed')

// alertcondition(bear_bos_alert, 'Bearish BOS', 'Bearish BOS formed')
// alertcondition(bear_choch_alert, 'Bearish CHoCH', 'Bearish CHoCH formed')

//Order Blocks
if iob_size > 0
    bull_iob_break := close > array.get(iob_top, 0) and array.get(iob_type, 0) == -1
    bear_iob_break := close < array.get(iob_btm, 0) and array.get(iob_type, 0) == 1

if ob_size > 0
    bull_ob_break := close > array.get(ob_top, 0) and array.get(ob_type, 0) == -1
    bear_ob_break := close < array.get(ob_btm, 0) and array.get(ob_type, 0) == 1

// alertcondition(bull_iob_break, 'Bearish Internal OB Breakout', 'Price broke bullish iternal OB')
// alertcondition(bear_iob_break, 'Bullish Internal OB Breakout', 'Price broke bearish iternal OB')

// alertcondition(bull_ob_break, 'Bearish OB Breakout', 'Price broke bullish iternal OB')
// alertcondition(bull_ob_break, 'Bullish OB Breakout', 'Price broke bearish iternal OB')

// //EQH/EQL
// alertcondition(eqh_alert, 'Equal Highs', 'Equal highs detected')
// alertcondition(eql_alert, 'Equal Lows', 'Equal lows detected')

// //FVG
// alertcondition(bullish_fvg_cnd, 'Bullish FVG', 'Bullish FVG formed')
// alertcondition(bearish_fvg_cnd, 'Bearish FVG', 'Bearish FVG formed')

/////smc end here/////

///Fibonacci levels start////

devTooltip = "Deviation is a multiplier that affects how much the price should deviate from the previous pivot in order for the bar to become a new pivot."
depthTooltip = "The minimum number of bars that will be taken into account when calculating the indicator."
// pivots threshold
threshold_multiplier = input.float(title="Deviation", defval=3, minval=0, tooltip=devTooltip)
dev_threshold = ta.atr(10) / close * 100 * threshold_multiplier
depth = input.int(title="Depth", defval=10, minval=1, tooltip=depthTooltip)
reverse = input(false, "Reverse")
var extendLeft = input(false, "Extend Leftââââ|ââââExtend Right", inline = "Extend Lines")
var extendRight = input(true, "", inline = "Extend Lines")
var extending = extend.none
if extendLeft and extendRight
    extending := extend.both
if extendLeft and not extendRight
    extending := extend.left
if not extendLeft and extendRight
    extending := extend.right
prices = input(true, "Show Prices")
levels = input(true, "Show Levels", inline = "Levels")
levelsFormat = input.string("Percent", "", options = ["Percent", "Values"], inline = "Levels")
labelsPosition = input.string("Right", "Labels Position", options = ["Right", "Left"])
var int backgroundTransparency = input.int(100, "Background Transparency", minval = 0, maxval = 100)

var line lineLast = na
var int iLast = 0
var int iPrev = 0
var float pLast = 0
var isHighLast = false // otherwise the last pivot is a low pivot

pivots(src, length, isHigh) =>
    l2 = length * 2
    c = nz(src[length])
    ok = true
    for i = 0 to l2
        if isHigh and src[i] > c
            ok := false

        if not isHigh and src[i] < c
            ok := false
    if ok
        [bar_index[length], c]
    else
        [int(na), float(na)]
[iH, pH] = pivots(high, depth / 2, true)
[iL, pL] = pivots(low, depth / 2, false)

calc_dev(base_price, price) =>
    100 * (price - base_price) / price

pivotFound(dev, isHigh, index, price) =>
    if isHighLast == isHigh and not na(lineLast)
        // same direction
        if isHighLast ? price > pLast : price < pLast
            line.set_xy2(lineLast, index, price)
            [lineLast, isHighLast]
        else
            [line(na), bool(na)]
    else // reverse the direction (or create the very first line)
        if math.abs(dev) > dev_threshold
            // price move is significant
            id = line.new(iLast, pLast, index, price, color=color.gray, width=1, style=line.style_dashed)
            [id, isHigh]
        else
            [line(na), bool(na)]

if not na(iH)
    dev = calc_dev(pLast, pH)
    [id, isHigh] = pivotFound(dev, true, iH, pH)
    if not na(id)
        if id != lineLast
            line.delete(lineLast)
        lineLast := id
        isHighLast := isHigh
        iPrev := iLast
        iLast := iH
        pLast := pH
else
    if not na(iL)
        dev = calc_dev(pLast, pL)
        [id, isHigh] = pivotFound(dev, false, iL, pL)
        if not na(id)
            if id != lineLast
                line.delete(lineLast)
            lineLast := id
            isHighLast := isHigh
            iPrev := iLast
            iLast := iL
            pLast := pL

_draw_line(price, col) =>
    var id = line.new(iLast, price, bar_index, price, color=col, width=1, extend=extending)
    if not na(lineLast)
        line.set_xy1(id, line.get_x1(lineLast), price)
        line.set_xy2(id, line.get_x2(lineLast), price)  
    id  

_draw_label(price, txt, txtColor) =>
    x = labelsPosition == "Left" ? line.get_x1(lineLast) : not extendRight ? line.get_x2(lineLast) : bar_index
    labelStyle = labelsPosition == "Left" ? label.style_label_right : label.style_label_left
    align = labelsPosition == "Left" ? text.align_right : text.align_left
    labelsAlignStrLeft = txt + '\n â  â  â  â  â  â  â  â  â  â  â  â  â  â  â  â  â  â  â  â  â  â  â  â  â  â  â  â  â  â  â  â  â  â  â \n'
    labelsAlignStrRight = '       ' + txt + '\n â  â  â  â  â  â  â  â  â  â  â  â  â  â  â  â  â  â  â  â  â  â  â  â  â  â  â  â  â  â  â  â  â  â  â \n'
    labelsAlignStr = labelsPosition == "Left" ? labelsAlignStrLeft : labelsAlignStrRight
    var id = label.new(x=x, y=price, text=labelsAlignStr, textcolor=txtColor, style=labelStyle, textalign=align, color=#00000000, size= size.tiny)
    label.set_xy(id, x, price)
    label.set_text(id, labelsAlignStr)
    label.set_textcolor(id, txtColor)

_wrap(txt) =>
    "(" + str.tostring(txt, format.mintick) + ")"

_label_txt(level, price) =>
    l = levelsFormat == "Values" ? str.tostring(level) : str.tostring(level * 100) + "%"
    (levels ? l : "") + (prices ? _wrap(price) : "")

_crossing_level(sr, r) =>
    (r > sr and r < sr[1]) or (r < sr and r > sr[1])

startPrice = reverse ? line.get_y1(lineLast) : pLast
endPrice = reverse ? pLast : line.get_y1(lineLast)

iHL = startPrice > endPrice
diff = (iHL ? -1 : 1) * math.abs(startPrice - endPrice)

processLevel(show, value, colorL, lineIdOther) =>
    float m = value
    r = startPrice + diff * m
    if show
        lineId = _draw_line(r, colorL)
        _draw_label(r, _label_txt(m, r), colorL)
        if _crossing_level(close, r)
            alert("Autofib: " + syminfo.ticker + " crossing level " + str.tostring(value))
        if not na(lineIdOther)
            linefill.new(lineId, lineIdOther, color = color.new(colorL, backgroundTransparency))
        lineId
    else
        lineIdOther

show_0 = input(true, "", inline = "Level0")
value_0 = input(0, "", inline = "Level0")
color_0 = input(#787b86, "", inline = "Level0")

show_0_236 = input(false, "", inline = "Level0")
value_0_236 = input(0.236, "", inline = "Level0")
color_0_236 = input(#f44336, "", inline = "Level0")

show_0_382 = input(true, "", inline = "Level1")
value_0_382 = input(0.382, "", inline = "Level1")
color_0_382 = input(#81c784, "", inline = "Level1")

show_0_5 = input(true, "", inline = "Level1")
value_0_5 = input(0.5, "", inline = "Level1")
color_0_5 = input(#4caf50, "", inline = "Level1")

show_0_618 = input(true, "", inline = "Level2")
value_0_618 = input(0.618, "", inline = "Level2")
color_0_618 = input(#009688, "", inline = "Level2")

show_0_65 = input(false, "", inline = "Level2")
value_0_65 = input(0.65, "", inline = "Level2")
color_0_65 = input(#009688, "", inline = "Level2")

show_0_786 = input(true, "", inline = "Level3")
value_0_786 = input(0.786, "", inline = "Level3")
color_0_786 = input(#64b5f6, "", inline = "Level3")

show_1 = input(true, "", inline = "Level3")
value_1 = input(1, "", inline = "Level3")
color_1 = input(#787b86, "", inline = "Level3")

show_1_272 = input(false, "", inline = "Level4")
value_1_272 = input(1.272, "", inline = "Level4")
color_1_272 = input(#81c784, "", inline = "Level4")

show_1_414 = input(false, "", inline = "Level4")
value_1_414 = input(1.414, "", inline = "Level4")
color_1_414 = input(#f44336, "", inline = "Level4")

show_1_618 = input(true, "", inline = "Level5")
value_1_618 = input(1.618, "", inline = "Level5")
color_1_618 = input(#2962ff, "", inline = "Level5")

show_1_65 = input(false, "", inline = "Level5")
value_1_65 = input(1.65, "", inline = "Level5")
color_1_65 = input(#2962ff, "", inline = "Level5")

show_2_618 = input(false, "", inline = "Level6")
value_2_618 = input(2.618, "", inline = "Level6")
color_2_618 = input(#f44336, "", inline = "Level6")

show_2_65 = input(false, "", inline = "Level6")
value_2_65 = input(2.65, "", inline = "Level6")
color_2_65 = input(#f44336, "", inline = "Level6")

show_3_618 = input(false, "", inline = "Level7")
value_3_618 = input(3.618, "", inline = "Level7")
color_3_618 = input(#9c27b0, "", inline = "Level7")

show_3_65 = input(false, "", inline = "Level7")
value_3_65 = input(3.65, "", inline = "Level7")
color_3_65 = input(#9c27b0, "", inline = "Level7")

show_4_236 = input(false, "", inline = "Level8")
value_4_236 = input(4.236, "", inline = "Level8")
color_4_236 = input(#e91e63, "", inline = "Level8")

show_4_618 = input(false, "", inline = "Level8")
value_4_618 = input(4.618, "", inline = "Level8")
color_4_618 = input(#81c784, "", inline = "Level8")

show_neg_0_236 = input(false, "", inline = "Level9")
value_neg_0_236 = input(-0.236, "", inline = "Level9")
color_neg_0_236 = input(#f44336, "", inline = "Level9")

show_neg_0_382 = input(false, "", inline = "Level9")
value_neg_0_382 = input(-0.382, "", inline = "Level9")
color_neg_0_382 = input(#81c784, "", inline = "Level9")

show_neg_0_618 = input(false, "", inline = "Level10")
value_neg_0_618 = input(-0.618, "", inline = "Level10")
color_neg_0_618 = input(#009688, "", inline = "Level10")

show_neg_0_65 = input(false, "", inline = "Level10")
value_neg_0_65 = input(-0.65, "", inline = "Level10")
color_neg_0_65 = input(#009688, "", inline = "Level10")

lineId0 = processLevel(show_neg_0_65, value_neg_0_65, color_neg_0_65, line(na))
lineId1 = processLevel(show_neg_0_618, value_neg_0_618, color_neg_0_618, lineId0)
lineId2 = processLevel(show_neg_0_382, value_neg_0_382, color_neg_0_382, lineId1)
lineId3 = processLevel(show_neg_0_236, value_neg_0_236, color_neg_0_236, lineId2)
lineId4 = processLevel(show_0, value_0, color_0, lineId3)
lineId5 = processLevel(show_0_236, value_0_236, color_0_236, lineId4)
lineId6 = processLevel(show_0_382, value_0_382, color_0_382, lineId5)
lineId7 = processLevel(show_0_5, value_0_5, color_0_5, lineId6)
lineId8 = processLevel(show_0_618, value_0_618, color_0_618, lineId7)
lineId9 = processLevel(show_0_65, value_0_65, color_0_65, lineId8)
lineId10 = processLevel(show_0_786, value_0_786, color_0_786, lineId9)
lineId11 = processLevel(show_1, value_1, color_1, lineId10)
lineId12 = processLevel(show_1_272, value_1_272, color_1_272, lineId11)
lineId13 = processLevel(show_1_414, value_1_414, color_1_414, lineId12)
lineId14 = processLevel(show_1_618, value_1_618, color_1_618, lineId13)
lineId15 = processLevel(show_1_65, value_1_65, color_1_65, lineId14)
lineId16 = processLevel(show_2_618, value_2_618, color_2_618, lineId15)
lineId17 = processLevel(show_2_65, value_2_65, color_2_65, lineId16)
lineId18 = processLevel(show_3_618, value_3_618, color_3_618, lineId17)
lineId19 = processLevel(show_3_65, value_3_65, color_3_65, lineId18)
lineId20 = processLevel(show_4_236, value_4_236, color_4_236, lineId19)
lineId21 = processLevel(show_4_618, value_4_618, color_4_618, lineId20)

////Fibinacchi end here/////

/////Double top and Range Start here/////

lengthz = input.int(10, step=5, minval=5)

showZigzag = input(false)
showPivots = input(true)
showStats = input(false)
bullishColor = input.color(color.new(color.green,40))
bullTrapColor = input.color(color.new(color.orange,40))
bearishColor = input.color(color.new(#8b0000,0))
bearTrapColor = input.color(color.new(#006400,0))
textColor = input(color.white)

MaxRiskPerReward = input.int(30, step=5, minval=5, maxval=100)
DisplayRiskPerReward = input(false)
var zigzagvalues = array.new_float(0)
var zigzagindexes = array.new_int(0)
var zigzagdir = array.new_int(0)

var doubleTopBottomValues = array.new_float(3)
var doubleTopBottomIndexes = array.new_int(3)
var doubleTopBottomDir = array.new_int(3)

int max_array_size = 10
max_bars_back(high, 1000)
max_bars_back(low, 1000)

var lineArray = array.new_line(0)
var labelArray = array.new_label(0)
pivots(lengthz) =>
    float ph = ta.highestbars(high, lengthz) == 0 ? high : na
    float pl = ta.lowestbars(low, lengthz) == 0 ? low : na
    dir = 0
    iff_1 = pl and na(ph) ? -1 : dir[1]
    dir := ph and na(pl) ? 1 : iff_1
    [dir, ph, pl]

add_to_array(value, index, dir) =>
    mult = array.size(zigzagvalues) < 2 ? 1 : dir * value > dir * array.get(zigzagvalues, 1) ? 2 : 1
    array.unshift(zigzagindexes, index)
    array.unshift(zigzagvalues, value)
    array.unshift(zigzagdir, dir * mult)
    if array.size(zigzagindexes) > max_array_size
        array.pop(zigzagindexes)
        array.pop(zigzagvalues)
        array.pop(zigzagdir)

add_to_zigzag(dir, dirchanged, ph, pl, index) =>
    value = dir == 1 ? ph : pl
    if array.size(zigzagvalues) == 0 or dirchanged
        add_to_array(value, index, dir)
    else if dir == 1 and value > array.get(zigzagvalues, 0) or dir == -1 and value < array.get(zigzagvalues, 0)
        array.shift(zigzagvalues)
        array.shift(zigzagindexes)
        array.shift(zigzagdir)
        add_to_array(value, index, dir)

zigzag(length) =>
    [dir, ph, pl] = pivots(lengthz)
    dirchanged = ta.change(dir)
    if ph or pl
        add_to_zigzag(dir, dirchanged, ph, pl, bar_index)

calculate_double_pattern() =>
    doubleTop = false
    doubleTopConfirmation = 0
    doubleBottom = false
    doubleBottomConfirmation = 0
    if array.size(zigzagvalues) >= 4
        index = array.get(zigzagindexes, 1)
        value = array.get(zigzagvalues, 1)
        highLow = array.get(zigzagdir, 1)

        lindex = array.get(zigzagindexes, 2)
        lvalue = array.get(zigzagvalues, 2)
        lhighLow = array.get(zigzagdir, 2)

        llindex = array.get(zigzagindexes, 3)
        llvalue = array.get(zigzagvalues, 3)
        llhighLow = array.get(zigzagdir, 3)
        risk = math.abs(value - llvalue)
        reward = math.abs(value - lvalue)
        riskPerReward = risk * 100 / (risk + reward)

        if highLow == 1 and llhighLow == 2 and lhighLow < 0 and riskPerReward < MaxRiskPerReward
            doubleTop := true
            doubleTop
        if highLow == -1 and llhighLow == -2 and lhighLow > 0 and riskPerReward < MaxRiskPerReward
            doubleBottom := true
            doubleBottom

        if doubleTop or doubleBottom
            array.set(doubleTopBottomValues, 0, value)
            array.set(doubleTopBottomValues, 1, lvalue)
            array.set(doubleTopBottomValues, 2, llvalue)

            array.set(doubleTopBottomIndexes, 0, index)
            array.set(doubleTopBottomIndexes, 1, lindex)
            array.set(doubleTopBottomIndexes, 2, llindex)

            array.set(doubleTopBottomDir, 0, highLow)
            array.set(doubleTopBottomDir, 1, lhighLow)
            array.set(doubleTopBottomDir, 2, llhighLow)

    [doubleTop, doubleBottom]

get_crossover_info(doubleTop, doubleBottom) =>
    index = array.get(doubleTopBottomIndexes, 0)
    value = array.get(doubleTopBottomValues, 0)
    highLow = array.get(doubleTopBottomDir, 0)

    lindex = array.get(doubleTopBottomIndexes, 1)
    lvalue = array.get(doubleTopBottomValues, 1)
    lhighLow = array.get(doubleTopBottomDir, 1)

    llindex = array.get(doubleTopBottomIndexes, 2)
    llvalue = array.get(doubleTopBottomValues, 2)
    llhighLow = array.get(doubleTopBottomDir, 2)

    latestDoubleTop = false
    latestDoubleBottom = false
    latestDoubleTop := doubleTop ? true : doubleBottom ? false : latestDoubleTop[1]
    latestDoubleBottom := doubleBottom ? true : doubleTop ? false : latestDoubleBottom[1]

    doubleTopConfirmation = 0
    doubleBottomConfirmation = 0
    doubleTopConfirmation := latestDoubleTop ? ta.crossunder(low, lvalue) ? 1 : ta.crossover(high, llvalue) ? -1 : 0 : 0
    doubleBottomConfirmation := latestDoubleBottom ? ta.crossover(high, lvalue) ? 1 : ta.crossunder(low, llvalue) ? -1 : 0 : 0
    [doubleTopConfirmation, doubleBottomConfirmation]

draw_double_pattern(doubleTop, doubleBottom, doubleTopConfirmation, doubleBottomConfirmation) =>
    index = array.get(doubleTopBottomIndexes, 0)
    value = array.get(doubleTopBottomValues, 0)
    highLow = array.get(doubleTopBottomDir, 0)

    lindex = array.get(doubleTopBottomIndexes, 1)
    lvalue = array.get(doubleTopBottomValues, 1)
    lhighLow = array.get(doubleTopBottomDir, 1)

    llindex = array.get(doubleTopBottomIndexes, 2)
    llvalue = array.get(doubleTopBottomValues, 2)
    llhighLow = array.get(doubleTopBottomDir, 2)

    isBullish = true
    isBullish := doubleTop or doubleBottom ? doubleTop : isBullish[1]

    risk = math.abs(value - llvalue)
    reward = math.abs(value - lvalue)
    riskPerReward = risk * 100 / (risk + reward)

    base = line.new(x1=index, y1=value, x2=llindex, y2=llvalue, color=doubleTop ? bearishColor : bullishColor, width=2, style=line.style_solid)
    l1 = line.new(x1=index, y1=value, x2=lindex, y2=lvalue, color=doubleTop ? bearishColor : bullishColor, width=2, style=line.style_dotted)
    l2 = line.new(x1=lindex, y1=lvalue, x2=llindex, y2=llvalue, color=doubleTop ? bearishColor : bullishColor, width=2, style=line.style_dotted)
    labelText = (doubleTop ? 'Double Top' : 'Double Bottom') + (DisplayRiskPerReward ? ' RR - ' + str.tostring(riskPerReward) : '')

    baseLabel = label.new(x=index, y=value, text=labelText, yloc=doubleTop ? yloc.abovebar : yloc.belowbar, color=doubleTop ? bearishColor : bullishColor, style=doubleTop ? label.style_label_down : label.style_label_up, textcolor=textColor, size=size.normal)

    if not(doubleTop or doubleBottom)
        line.delete(base)
        line.delete(l1)
        line.delete(l2)
        label.delete(baseLabel)

    var doubleTopCount = 0
    var doubleBottomCount = 0
    doubleTopCount := doubleTop ? nz(doubleTopCount[1], 0) + 1 : nz(doubleTopCount[1], 0)
    doubleBottomCount := doubleBottom ? nz(doubleBottomCount[1], 0) + 1 : nz(doubleBottomCount[1], 0)

    if line.get_x2(base) == line.get_x2(base[1])
        line.delete(base[1])
        line.delete(l1[1])
        line.delete(l2[1])
        label.delete(baseLabel[1])
        doubleTopCount := doubleTop ? doubleTopCount - 1 : doubleTopCount
        doubleBottomCount := doubleBottom ? doubleBottomCount - 1 : doubleBottomCount
        doubleBottomCount

    if barstate.islast
        lres = line.new(x1=bar_index, y1=lvalue, x2=lindex, y2=lvalue, color=isBullish ? bearishColor : bullishColor, width=2, style=line.style_dashed, extend=extend.left)
        lsup = line.new(x1=bar_index, y1=llvalue, x2=llindex, y2=llvalue, color=isBullish ? bullishColor : bearishColor, width=2, style=line.style_dashed, extend=extend.left)
        lsup

    doubleTopConfirmationCount = doubleTopConfirmation > 0 ? 1 : 0
    doubleBottomConfirmationCount = doubleBottomConfirmation > 0 ? 1 : 0
    doubleTopInvalidationCount = doubleTopConfirmation < 0 ? 1 : 0
    doubleBottomInvalidationCount = doubleBottomConfirmation < 0 ? 1 : 0

    if doubleTopConfirmation != 0 or doubleBottomConfirmation != 0
        if doubleTopConfirmation > 0 or doubleBottomConfirmation > 0
            lresbreak = line.new(x1=lindex, y1=lvalue, x2=bar_index, y2=lvalue, color=isBullish ? bearishColor : bullishColor, width=2, style=line.style_dashed)
            if line.get_x1(lresbreak[1]) == line.get_x1(lresbreak)
                doubleTopConfirmationCount := 0
                doubleBottomConfirmationCount := 0
                doubleTopInvalidationCount := 0
                doubleBottomInvalidationCount := 0
                line.delete(lresbreak)
                lresbreak := lresbreak[1]
                lresbreak
        else if doubleTopConfirmation < 0 or doubleBottomConfirmation < 0
            lsupbreak = line.new(x1=llindex, y1=llvalue, x2=bar_index, y2=llvalue, color=isBullish ? bullishColor : bearishColor, width=2, style=line.style_dashed)
            if line.get_x1(lsupbreak[1]) == line.get_x1(lsupbreak)
                doubleTopInvalidationCount := 0
                doubleBottomInvalidationCount := 0
                doubleTopConfirmationCount := 0
                doubleBottomConfirmationCount := 0
                line.delete(lsupbreak)
                lsupbreak := lsupbreak[1]
                lsupbreak
    doubleTopConfirmationCount := nz(doubleTopConfirmationCount[1], 0) + doubleTopConfirmationCount
    doubleBottomConfirmationCount := nz(doubleBottomConfirmationCount[1], 0) + doubleBottomConfirmationCount
    doubleTopInvalidationCount := nz(doubleTopInvalidationCount[1], 0) + doubleTopInvalidationCount
    doubleBottomInvalidationCount := nz(doubleBottomInvalidationCount[1], 0) + doubleBottomInvalidationCount
    [doubleTopCount, doubleBottomCount, doubleTopConfirmationCount, doubleBottomConfirmationCount, doubleTopInvalidationCount, doubleBottomInvalidationCount]

zigzag(length)

[doubleTop, doubleBottom] = calculate_double_pattern()
[doubleTopConfirmation, doubleBottomConfirmation] = get_crossover_info(doubleTop, doubleBottom)
[doubleTopCount, doubleBottomCount, doubleTopConfirmationCount, doubleBottomConfirmationCount, doubleTopInvalidationCount, doubleBottomInvalidationCount] = draw_double_pattern(doubleTop, doubleBottom, doubleTopConfirmation, doubleBottomConfirmation)

var stats = table.new(position=position.top_right, columns=5, rows=5, border_width=0)
if barstate.islast and showStats
    colorWorst = color.rgb(255, 153, 51)
    colorBest = color.rgb(51, 204, 51)
    colorBad = color.rgb(255, 204, 153)
    colorGood = color.rgb(49, 255, 204)
    colorNeutral = color.rgb(205, 255, 204)

    dtConfirmationPercent = doubleTopConfirmationCount + doubleTopInvalidationCount == 0 ? 0.5 : doubleTopConfirmationCount / (doubleTopConfirmationCount + doubleTopInvalidationCount)
    dbConfirmationPercent = doubleBottomConfirmationCount + doubleBottomInvalidationCount == 0 ? 0.5 : doubleBottomConfirmationCount / (doubleBottomConfirmationCount + doubleBottomInvalidationCount)

    dtColor = dtConfirmationPercent >= 0.8 ? colorBest : dtConfirmationPercent >= 0.6 ? colorGood : dtConfirmationPercent >= 0.4 ? colorNeutral : dtConfirmationPercent >= 0.2 ? colorBad : colorWorst
    dbColor = dbConfirmationPercent >= 0.8 ? colorBest : dbConfirmationPercent >= 0.6 ? colorGood : dbConfirmationPercent >= 0.4 ? colorNeutral : dbConfirmationPercent >= 0.2 ? colorBad : colorWorst
    table.cell(table_id=stats, column=0, row=0, text='', bgcolor=color.teal, text_color=color.white)
    table.cell(table_id=stats, column=0, row=1, text='Double Top', bgcolor=color.teal, text_color=color.white)
    table.cell(table_id=stats, column=0, row=2, text='Double Bottom', bgcolor=color.teal, text_color=color.white)

    table.cell(table_id=stats, column=1, row=0, text='Count', bgcolor=color.teal, text_color=color.white)
    table.cell(table_id=stats, column=2, row=0, text='Confirmation', bgcolor=color.teal, text_color=color.white)
    table.cell(table_id=stats, column=3, row=0, text='Invalidation', bgcolor=color.teal, text_color=color.white)

    table.cell(table_id=stats, column=1, row=1, text=str.tostring(doubleTopCount), bgcolor=dtColor)
    table.cell(table_id=stats, column=1, row=2, text=str.tostring(doubleBottomCount), bgcolor=dbColor)

    table.cell(table_id=stats, column=2, row=1, text=str.tostring(doubleTopConfirmationCount), bgcolor=dtColor)
    table.cell(table_id=stats, column=3, row=1, text=str.tostring(doubleTopInvalidationCount), bgcolor=dtColor)

    table.cell(table_id=stats, column=2, row=2, text=str.tostring(doubleBottomConfirmationCount), bgcolor=dbColor)
    table.cell(table_id=stats, column=3, row=2, text=str.tostring(doubleBottomInvalidationCount), bgcolor=dbColor)

if barstate.islast and array.size(zigzagindexes) > 1
    lastHigh = 0.0
    lastLow = 0.0
    for x = 0 to array.size(zigzagindexes) - 1 by 1
        i = array.size(zigzagindexes) - 1 - x
        index = array.get(zigzagindexes, i)
        value = array.get(zigzagvalues, i)
        highLow = array.get(zigzagdir, i)
        index_offset = bar_index - index

        labelText = highLow == 2 ? 'HH' : highLow == 1 ? 'LH' : highLow == -1 ? 'HL' : 'LL'
        labelColor = highLow == 2 ? bullishColor : highLow == 1 ? bullTrapColor : highLow == -1 ? bearTrapColor : bearishColor
        labelStyle = highLow > 0 ? label.style_label_down : label.style_label_up
        // labelLocation = highLow > 0? yloc.abovebar : yloc.belowbar
        labelLocation = yloc.price
        if showPivots
            l = label.new(x=index, y=value, text=labelText, xloc=xloc.bar_index, yloc=labelLocation, style=labelStyle, size=size.tiny, color=labelColor, textcolor=textColor)
            array.unshift(labelArray, l)
            if array.size(labelArray) > 100
                label.delete(array.pop(labelArray))
        if i < array.size(zigzagindexes) - 1 and showZigzag
            indexLast = array.get(zigzagindexes, i + 1)
            valueLast = array.get(zigzagvalues, i + 1)
            l = line.new(x1=index, y1=value, x2=indexLast, y2=valueLast, color=labelColor, width=2, style=line.style_solid)

            array.unshift(lineArray, l)
            if array.size(lineArray) > 100
                line.delete(array.pop(lineArray))

        ///////////CCI Trend ///////

period1 = input(50, 'CCI period')
coeff = input(1, 'ATR Multiplier')
AP = input(5, 'ATR Period')
ATR = ta.sma(ta.tr, AP)
src1111 = input(close)
upT = low - ATR * coeff
downT = high + ATR * coeff
MagicTrend = 0.0
MagicTrend := ta.cci(src1111, period1) >= 0 ? upT < nz(MagicTrend[1]) ? nz(MagicTrend[1]) : upT : downT > nz(MagicTrend[1]) ? nz(MagicTrend[1]) : downT
color1 = ta.cci(src1111, period1) >= 0 ? #079400 : #FC0400
plot(MagicTrend, color=color1, linewidth=3,display=display.none)
// alertcondition(ta.cross(close, MagicTrend), title='Cross Alert', message='Price - MagicTrend Crossing!')
// alertcondition(ta.crossover(low, MagicTrend), title='CrossOver Alarm', message='BUY SIGNAL!')
// alertcondition(ta.crossunder(high, MagicTrend), title='CrossUnder Alarm', message='SELL SIGNAL!')

//////////////////////Range Filter///////////////////////////////////
src=hl2
per = input.int(defval=16, minval=1, title='Period')

// Range Multiplier

mult = input.float(defval=3.0, minval=0.1, title='Multiplier')

// Smooth Average Range

smoothrng(x, t, m) =>
    wper = t * 2 - 1
    avrng = ta.ema(math.abs(x - x[1]), t)
    smoothrng = ta.ema(avrng, wper) * m
    smoothrng
smrng = smoothrng(src, per, mult)

// Range Filter

rngfilt(x, r) =>
    rngfilt = x
    rngfilt := x > nz(rngfilt[1]) ? x - r < nz(rngfilt[1]) ? nz(rngfilt[1]) : x - r : x + r > nz(rngfilt[1]) ? nz(rngfilt[1]) : x + r
    rngfilt
filt = rngfilt(src, smrng)

// Filter Direction

upward = 0.0
upward := filt > filt[1] ? nz(upward[1]) + 1 : filt < filt[1] ? 0 : nz(upward[1])
downward = 0.0
downward := filt < filt[1] ? nz(downward[1]) + 1 : filt > filt[1] ? 0 : nz(downward[1])

// Target Bands

hband = filt + smrng
lband = filt - smrng

// Colors

filtcolor = upward > 0 ? color.lime : downward > 0 ? color.red : color.new(#ff9800,0)
barcolor = src > filt and src > src[1] and upward > 0 and close>MagicTrend ? color.new(#006400,0) : src > filt and src < src[1] and upward > 0 ? color.new(#388e3c,0) : src < filt and src < src[1] and downward > 0 and close<MagicTrend? color.new(#8b0000,0) : src < filt and src > src[1] and downward > 0 ? color.new(#b71c1c,0) : color.new(#ff9800,0)

filtplot = plot(filt, color=filtcolor, linewidth=1, title='Range Filter',display=display.all)

// Target

hbandplot = plot(hband, color=color.new(color.aqua, 100), title='H Target')
lbandplot = plot(lband, color=color.new(color.fuchsia, 100), title='L Target')

// Fills

fill(hbandplot, filtplot, color=color.new(color.aqua, 90), title='High Target Limit',display=display.all)
fill(lbandplot, filtplot, color=color.new(color.fuchsia, 90), title='Low Target Limit',display=display.all)

// Bar Color

barcolor(barcolor)

// Break Outs

longCond = bool(na)
shortCond = bool(na)
longCond := src > filt and src > src[1] and upward > 0 or src > filt and src < src[1] and upward > 0
shortCond := src < filt and src < src[1] and downward > 0 or src < filt and src > src[1] and downward > 0

CondIni = 0
CondIni := longCond ? 1 : shortCond ? -1 : CondIni[1]
longCondition = longCond and CondIni[1] == -1
shortCondition = shortCond and CondIni[1] == 1

//Alerts

plotshape(longCondition, title='Buy Signal', text='Buy', textcolor=color.new(color.white, 0), style=shape.labelup, size=size.tiny, location=location.belowbar, color=color.new(color.blue, 0))
plotshape(shortCondition, title='Sell Signal', text='Sell', textcolor=color.new(color.white, 0), style=shape.labeldown, size=size.tiny, location=location.abovebar, color=color.new(color.red, 1))

//Support & Resistance///

prd = input.int(defval=10, title='Pivot Period', minval=4, maxval=30, group='Setup')
ppsrc = input.string(defval='High/Low', title='Source', options=['High/Low', 'Close/Open'], group='Setup')
maxnumpp = input.int(defval=20, title=' Max Pivot', minval=5, maxval=100, group='Setup')
ChannelW = input.int(defval=10, title='Max Channel Width %', minval=1, group='Setup')
maxnumsr = input.int(defval=5, title=' Number of S&R', minval=1, maxval=10, group='Setup')
min_strength = input.int(defval=2, title=' Minimum Strength', minval=1, maxval=10, group='Setup')
labelloc = input.int(defval=20, title='Label Location', group='Colors', tooltip='Positive numbers reference future bars, negative numbers reference histical bars')
linestyle = input.string(defval='Dotted', title='Line Style', options=['Solid', 'Dotted', 'Dashed'], group='Colors')
linewidth = input.int(defval=2, title='Line Width', minval=1, maxval=4, group='Colors')
resistancecolor = input.color(defval=color.new(color.maroon,40), title='Resistance Color', group='Colors')
supportcolor = input.color(defval=color.new(color.blue,40), title='Support Color', group='Colors')
showpp = input(true, title='Show Pivot High Low Points')

float src1 = ppsrc == 'High/Low' ? high : math.max(close, open)
float src2 = ppsrc == 'High/Low' ? low : math.min(close, open)
float ph = ta.pivothigh(src1, prd, prd)
float pl = ta.pivotlow(src2, prd, prd)

plotshape(ph and showpp, text='H', style=shape.labeldown, color=na, textcolor=color.new(color.maroon, 0), location=location.abovebar, size=size.tiny, offset=-prd)
plotshape(pl and showpp, text='L', style=shape.labelup, color=na, textcolor=color.new(color.blue, 0), location=location.belowbar, size=size.tiny, offset=-prd)

Lstyle = linestyle == 'Dashed' ? line.style_dashed : linestyle == 'Solid' ? line.style_solid : line.style_dotted 

//calculate maximum S/R channel zone width
prdhighest = ta.highest(300)
prdlowest = ta.lowest(500)
cwidth = (prdhighest - prdlowest) * ChannelW / 100

var pivotvals = array.new_float(0)

if ph or pl
    array.unshift(pivotvals, ph ? ph : pl)
    if array.size(pivotvals) > maxnumpp  // limit the array size
        array.pop(pivotvals)

get_sr_vals(ind) =>
    float lo = array.get(pivotvals, ind)
    float hi = lo
    int numpp = 0
    for y = 0 to array.size(pivotvals) - 1 by 1
        float cpp = array.get(pivotvals, y)
        float wdth = cpp <= lo ? hi - cpp : cpp - lo
        if wdth <= cwidth  // fits the max channel width?
            lo := cpp <= lo ? cpp : lo
            hi := cpp > lo ? cpp : hi
            numpp += 1
            numpp
    [hi, lo, numpp]

var sr_up_level = array.new_float(0)
var sr_dn_level = array.new_float(0)
sr_strength = array.new_float(0)

find_loc(strength) =>
    ret = array.size(sr_strength)
    for i = ret > 0 ? array.size(sr_strength) - 1 : na to 0 by 1
        if strength <= array.get(sr_strength, i)
            break
        ret := i
        ret
    ret

check_sr(hi, lo, strength) =>
    ret = true
    for i = 0 to array.size(sr_up_level) > 0 ? array.size(sr_up_level) - 1 : na by 1
        //included?
        if array.get(sr_up_level, i) >= lo and array.get(sr_up_level, i) <= hi or array.get(sr_dn_level, i) >= lo and array.get(sr_dn_level, i) <= hi
            if strength >= array.get(sr_strength, i)
                array.remove(sr_strength, i)
                array.remove(sr_up_level, i)
                array.remove(sr_dn_level, i)
                ret
            else
                ret := false
                ret
            break
    ret

var sr_lines = array.new_line(11, na)
var sr_labels = array.new_label(11, na)

for x = 1 to 10 by 1
    rate = 100 * (label.get_y(array.get(sr_labels, x)) - close) / close
    label.set_text(array.get(sr_labels, x), text=str.tostring(label.get_y(array.get(sr_labels, x))) + '(' + str.tostring(rate, '#.##') + '%)')
    label.set_x(array.get(sr_labels, x), x=bar_index + labelloc)
    label.set_color(array.get(sr_labels, x), color=label.get_y(array.get(sr_labels, x)) >= close ? color.new(color.red,40) : color.new(#00e67b, 42))
    label.set_textcolor(array.get(sr_labels, x), textcolor=label.get_y(array.get(sr_labels, x)) >= close ? color.white : color.black)
    label.set_style(array.get(sr_labels, x), style=label.get_y(array.get(sr_labels, x)) >= close ? label.style_label_down : label.style_label_up)
    line.set_color(array.get(sr_lines, x), color=line.get_y1(array.get(sr_lines, x)) >= close ? resistancecolor : supportcolor)

if ph or pl
    //because of new calculation, remove old S/R levels
    array.clear(sr_up_level)
    array.clear(sr_dn_level)
    array.clear(sr_strength)
    //find S/R zones
    for x = 0 to array.size(pivotvals) - 1 by 1
        [hi, lo, strength] = get_sr_vals(x)
        if check_sr(hi, lo, strength)
            loc = find_loc(strength)
            // if strength is in first maxnumsr sr then insert it to the arrays 
            if loc < maxnumsr and strength >= min_strength
                array.insert(sr_strength, loc, strength)
                array.insert(sr_up_level, loc, hi)
                array.insert(sr_dn_level, loc, lo)
                // keep size of the arrays = 5
                if array.size(sr_strength) > maxnumsr
                    array.pop(sr_strength)
                    array.pop(sr_up_level)
                    array.pop(sr_dn_level)

    for x = 1 to 10 by 1
        line.delete(array.get(sr_lines, x))
        label.delete(array.get(sr_labels, x))

    for x = 0 to array.size(sr_up_level) > 0 ? array.size(sr_up_level) - 1 : na by 1
        float mid = math.round_to_mintick((array.get(sr_up_level, x) + array.get(sr_dn_level, x)) / 2)
        rate = 100 * (mid - close) / close
        array.set(sr_labels, x + 1, label.new(x=bar_index + labelloc, y=mid, text=str.tostring(mid) + '(' + str.tostring(rate, '#.##') + '%)', color=mid >= close ? color.red : color.lime, textcolor=mid >= close ? color.white : color.black, style=mid >= close ? label.style_label_down : label.style_label_up, size=size.tiny))

        array.set(sr_lines, x + 1, line.new(x1=bar_index, y1=mid, x2=bar_index - 1, y2=mid, extend=extend.both, color=mid >= close ? resistancecolor : supportcolor, style=Lstyle, width=linewidth))

f_crossed_over() =>
    ret = false
    for x = 0 to array.size(sr_up_level) > 0 ? array.size(sr_up_level) - 1 : na by 1
        float mid = math.round_to_mintick((array.get(sr_up_level, x) + array.get(sr_dn_level, x)) / 2)
        if close[1] <= mid and close > mid
            ret := true
            ret
    ret

    

f_crossed_under() =>

    ret = false
    for x = 0 to array.size(sr_up_level) > 0 ? array.size(sr_up_level) - 1 : na by 1
        float mid = math.round_to_mintick((array.get(sr_up_level, x) + array.get(sr_dn_level, x)) / 2)
        if close[1] >= mid and close < mid
            ret := true
            ret
    ret

// alertcondition(f_crossed_over(), title='Resistance Broken', message='Resistance Broken')
// alertcondition(f_crossed_under(), title='Support Broken', message='Support Broken')

////=========================end s/r====================//
'''
,
2:
'''
// @author Gaurav Mahajan
//
//@version=5
//indicator("Squeeze Study",overlay=false)
strategy("Squeeze Study",overlay=false, process_orders_on_close = false, default_qty_type = strategy.cash, default_qty_value = 4)//, calc_on_order_fills = true)//,calc_on_every_tick = true)//)//, initial_capital = 10000)//,  //, calc_on_every_tick = true
var initial_capital = 10000

var trade_symbol = "GCG3"
var alert_type = "TRADE"
var support_direction=false
var support_enter_1m=0.0
var support_enter_2m=0.0
var support_enter_3m=0.0
var support_enter_4m=0.0
var support_enter_5m=0.0
var support_enter_15m=0.0

bar_closed_2m = minute%2==0?true:false
bar_closed_3m = minute%3==0?true:false
bar_closed_4m = minute%4==0?true:false
bar_closed_5m = minute%5==0?true:false
bar_closed_10m = minute%10==0?true:false
bar_closed_15m = minute%15==0?true:false
bar_closed_30m = minute%30==0?true:false
bar_closed_45m = minute%45==0?true:false
bar_closed_1H = minute%60==0?true:false

var re_entry=0
var re_entry_support=0
var test=0
var max_profit = 0.0
var entry_fired = 0
var exit_fired = 0
var stop_loss_final=0.0
var breach_1m=0
var breach_2m=0
var breach_3m=0
var breach_4m=0
var breach_5m=0
var breach_count=0
var low_to_breach_1min_previous=0.0
var low_to_breach_2min_previous=0.0
var low_to_breach_3min_previous=0.0
var low_to_breach_4min_previous=0.0
var low_to_breach_5min_previous=0.0

// indicator(title="Moving Average Exponential", shorttitle="EMA", overlay=true, timeframe="", timeframe_gaps=true)
// len = input.int(9, minval=1, title="Length")
src = input(close, title="Source")
offset = input.int(title="Offset", defval=0, minval=-500, maxval=500)
Ema_9 = ta.ema(src, 9)
Ema_21 = ta.ema(src, 21)
Ema_34 = ta.ema(src, 34)
Ema_55 = ta.ema(src, 55)
Ema_200 = ta.ema(src, 200)

case_9_34 = Ema_9  >  Ema_34
case_9_55 = Ema_9  >  Ema_55
case_9_200 = Ema_9  >  Ema_200

case_34_55 = Ema_34 > Ema_55
case_34_200 = Ema_34 > Ema_200

case_55_200 = Ema_55 > Ema_200

case_9_34_binary = case_9_34 ? 1:0
case_9_55_binary = case_9_55 ? 1:0
case_9_200_binary = case_9_200 ? 1:0

//case_9_34_binary = case_9_34 ? 1:0
case_34_55_binary = case_34_55 ? 1:0
case_34_200_binary = case_34_200 ? 1:0

// case_9_34_binary = case_9_34 ? 1:0
// case_9_55_binary = case_9_55 ? 1:0
case_55_200_binary = case_55_200 ? 1:0

ema_bias_9 = case_9_34_binary + case_9_55_binary + case_9_200_binary
ema_bias_34 = case_34_55_binary + case_34_200_binary
ema_bias_55 = case_55_200_binary

close_200_crossover = close > Ema_200

close_200_crossover_binary = close_200_crossover ? 1:0

//study("Session bars")
t1 = time(timeframe.period, "0835-1440")
t2 = time(timeframe.period, "0835-1459")
//plot(na(t2) ? 0 : 1)

//decision variables
var atr_to_use = 0.0
var entry_price_long = 0.0
var entry_price_short = 0.0
var profit_target_long = 0.0
var profit_target_short = 1.0
var stop_loss = 0.0
var current_p_l = 0.0
var squeeze_activated = 0
var squeeze_fired = 0
var short_counter = 0
var long_counter = 0
var long_trade_fire = 0
var short_trade_fire = 0
var profit_target_long_previous = 0.0
var profit_target_short_previous = 0.0
var stop = 0.0
var exit_time=0
var support_stop_1_valid = false
var support_stop_2_valid = false
var support_stop_5_valid = false
var support_stop_10_valid = false
var support_stop_15_valid = false
var support_stop_30_valid = false
var support_stop_45_valid = false
var support_stop_60_valid = false
var support_stop_120_valid = false
var support_stop_240_valid = false
var support_stop_180_valid = false
var support_stop_720_valid = false
var last_support_exit=0
var profit_stop=0
var loss_stop=0
// var support_stop_180_valid = false
// var support_stop_210_valid = false
// var support_stop_240_valid = false
var support_stop_360_valid = false
// var support_stop_480_valid = false
var last_resistance_exit=0
var stop_fixed=0
var resistance_hit=0
var last_used_resistance_exit=0
var trade=0
var support_stop=0.0
var trade_reference_numeral_2 = false
var trade_reference_numeral_3 = false
var trade_reference_numeral_5 = false
var trade_reference_numeral_10 = false
var trade_reference_numeral_15 = false
var trade_reference_numeral_30 = false
var trade_reference_numeral_45 = false
var trade_reference_numeral_60 = false
// var trade_reference_numeral_210 = false
// var trade_reference_numeral_240 = false
// trade_reference_numeral_360 := false
// trade_reference_numeral_60 := false
var squeeze_ready_5 =false
var squeeze_ready_10 =false
var squeeze_ready_15 =false
var squeeze_ready_30 =false
var squeeze_ready_45 =false
// var squeeze_ready_60 =false
// var squeeze_ready_210 =false
var setup=0
var ready=0
var ready1=0
var ready2=0
var ready3=0
var ready4=0
var ready5=0
var ready15=0

var set=0
var loss_support_hit=0
var support_re_entry_1_valid=false
var support_re_entry_2_valid=false
var support_re_entry_3_valid=false
var support_re_entry_4_valid=false
var support_re_entry_5_valid=false
var unused_resistance=0
var price_below_entry=0
var price_reversal_from_below=0
var red_fired_support_flag=0

// t1 = time(timeframe.period,"0900-1700")
// bgcolor(not na(t) ? color.green:na)

trade_reference_numeral_10_binary = trade_reference_numeral_10 ? 1:0
trade_reference_numeral_15_binary = trade_reference_numeral_15 ? 1:0
trade_reference_numeral_30_binary = trade_reference_numeral_30 ? 1:0
trade_reference_numeral_45_binary = trade_reference_numeral_45 ? 1:0
trade_reference_numeral_60_binary = trade_reference_numeral_60 ? 1:0
// trade_reference_numeral_210_binary = trade_reference_numeral_210 ? 1:0
// trade_reference_numeral_240_binary = trade_reference_numeral_240 ? 1:0

squeeze_ready_5_binary = squeeze_ready_5 ? 1:0
squeeze_ready_10_binary = squeeze_ready_10 ? 1:0
squeeze_ready_15_binary = squeeze_ready_15 ? 1:0
squeeze_ready_30_binary = squeeze_ready_30 ? 1:0
squeeze_ready_45_binary = squeeze_ready_45 ? 1:0
// squeeze_ready_180_binary = squeeze_ready_180 ? 1:0
// squeeze_ready_210_binary = squeeze_ready_210 ? 1:0

//input variables
quantity = input(2,title="quantity")
Macro_Long_Bias_Count = input(4,title="Macro Long Bias Count")
Micro_Long_Bias_Count = input(0, title="Micro Long Bias Count")
ema_bias_count = input(3, title="ema_bias_count")
Bias_Gold_Count_Input = input(0, title="Bias_Gold_Count_Input")
Bias_Gold_Count_higher_Input  = input(0, title="Bias_Gold_Count_Higer_Input")
Averages_check_count_Input= input(3, title="Averages_check_count Input")
Micro_Support_Count = input(0, title="Micro Support Count") 
Micro_Resistance_Count = input(0, title="Micro Resistance Count") 
Macro_Long_Bias_Reversal_Count = input(0, title="Macro_Long_Bias_Reversal_Count")
atr_multiplier = input(.5, title="atr_multiplier")

Macro_Short_Bias_Count = input(0, title="Macro Short Bias Count")
Micro_Short_Bias_Count = input(0, title="Micro Short Bias Count")
take_long_trades = input(1, title="take_long_trades")
take_short_trades = input(0, title="take_short_trades")

// From Date Inputs
fromDay = input(defval = 20, title = "From Day")
fromMonth = input.int(defval = 12, title = "From Month", minval = 1, maxval = 12)
fromYear = input.int(defval = 2022, title = "From Year", minval = 1970)

// To Date Inputs
toDay = input(defval = 31, title = "To Day")
toMonth = input(defval = 12, title = "To Month")
toYear = input(defval = 2023, title = "To Year")
    
// Calculate start/end date and time condition
startDate = timestamp(fromYear, fromMonth, fromDay, 02, 00)
finishDate = timestamp(toYear, toMonth, toDay, 00, 00)
time_cond = time >= startDate  and time <= finishDate 

// calculation parameters
pd = input(22, title="LookBack Period Standard Deviation High")
bbl = input(20, title="Bolinger Band Length")
mult = input.float(2.0    , minval=1, maxval=5, title="Bollinger Band Standard Devaition Up")
lb = input(50  , title="Look Back Period Percentile High")
ph = input(.85, title="Highest Percentile - 0.90=90%, 0.95=95%, 0.99=99%")
pl = input(1.01, title="Lowest Percentile - 1.10=90%, 1.05=95%, 1.01=99%")
hp = input(false, title="Show High Range - Based on Percentile and LookBack Period?")
sd = input(false, title="Show Standard Deviation Line?")

wvf = ((ta.highest(close, pd)-low)/(ta.highest(close, pd)))*100

sDev = mult * ta.stdev(wvf, bbl)
midLine = ta.sma(wvf, bbl)
lowerBand = midLine - sDev
upperBand = midLine + sDev

rangeHigh = (ta.highest(wvf, lb)) * ph
rangeLow = (ta.lowest(wvf, lb)) * pl

col = wvf >= upperBand or wvf >= rangeHigh ? color.lime : color.gray
support_true = wvf >= upperBand or wvf >= rangeHigh 

SP_Col       = color.green
No_SP_Col    = color.gray

sp_color        = support_true ? SP_Col : No_SP_Col

///////////////////////////////////////////////////////////////

thresh = input.float(1.5, minval=0, step=0.1, title="threshold value")
wvf_inv = ((high-ta.lowest(close[1], pd))/ta.lowest(close[1], pd))*100

sDev_inverse = mult * ta.stdev(wvf_inv, bbl)
midLine_inverse = ta.sma(wvf_inv, bbl)
upperBand_inverse = midLine_inverse + sDev_inverse

golden_cross() => wvf_inv > upperBand_inverse
death_cross() => wvf_inv < upperBand_inverse

Golden() => golden_cross() and death_cross()[1]   // previous was below and now its above.
Death() => death_cross() and golden_cross()[1]   // previous was above and now its below.

//red signifies its coming back below the upper band. Was below; went above and now its back again.
Death_1 = Death()
iff_1_inverse = wvf_inv >= upperBand_inverse and wvf_inv > thresh ? color.orange : color.gray
col_inverse = Death_1 and wvf_inv > thresh ? color.red : iff_1_inverse

resistance_true = wvf_inv >= upperBand_inverse and wvf_inv > thresh

RS_Col       = color.red
No_RS_Col    = color.gray

rs_color        = resistance_true ? RS_Col : No_RS_Col

/////////////////////////////////////////////////////////////
length          = input.int(20, "TTM Squeeze Length")

//BOLLINGER BANDS
BB_mult         = input.float(2.0, "Bollinger Band STD Multiplier")
BB_basis        = ta.sma(close, length)
dev             = BB_mult * ta.stdev(close, length)
BB_upper        = BB_basis + dev
BB_lower        = BB_basis - dev

//KELTNER CHANNELS
KC_mult_high    = input.float(1.0, "Keltner Channel #1")
KC_mult_mid     = input.float(1.5, "Keltner Channel #2")
KC_mult_low     = input.float(2.0, "Keltner Channel #3")
KC_basis        = ta.sma(close, length)
devKC           = ta.sma(ta.tr, length)
KC_upper_high   = KC_basis + devKC * KC_mult_high
KC_lower_high   = KC_basis - devKC * KC_mult_high
KC_upper_mid    = KC_basis + devKC * KC_mult_mid
KC_lower_mid    = KC_basis - devKC * KC_mult_mid
KC_upper_low    = KC_basis + devKC * KC_mult_low
KC_lower_low    = KC_basis - devKC * KC_mult_low

//SQUEEZE CONDITIONS
NoSqz           = BB_lower < KC_lower_low or BB_upper > KC_upper_low //NO SQUEEZE: GREEN
LowSqz          = BB_lower >= KC_lower_low or BB_upper <= KC_upper_low //LOW COMPRESSION: BLACK
MidSqz          = BB_lower >= KC_lower_mid or BB_upper <= KC_upper_mid //MID COMPRESSION: RED
HighSqz         = BB_lower >= KC_lower_high or BB_upper <= KC_upper_high //HIGH COMPRESSION: ORANGE

//MOMENTUM OSCILLATOR
mom             = ta.linreg(close - math.avg(math.avg(ta.highest(high, length), ta.lowest(low, length)), ta.sma(close, length)), length, 0)

//MOMENTUM HISTOGRAM COLOR
mom_up1_col     = color.aqua
mom_up2_col     = #2962ff
mom_down1_col   = color.red
mom_down2_col   = #CCCC00ff

iff_1           = mom > nz(mom[1]) ? mom_up1_col : mom_up2_col
iff_2           = mom < nz(mom[1]) ? mom_down1_col : mom_down2_col
mom_color       = mom > 0 ? iff_1 : iff_2

//SQUEEZE DOTS COLOR
NoSqz_Col       = color.green
LowSqz_Col      = color.black
MidSqz_Col      = color.red
HighSqz_Col     = color.orange

sq_color        = HighSqz ? HighSqz_Col : MidSqz ? MidSqz_Col : LowSqz ? LowSqz_Col : NoSqz_Col

//ALERTS
// Detect_Sqz_Start = input.bool(true, "Alert Price Action Squeeze")
// Detect_Sqz_Fire = input.bool(true, "Alert Squeeze Firing")

// if Detect_Sqz_Start and NoSqz[1] and not NoSqz
//     alert("Squeeze Started")
// else if Detect_Sqz_Fire and NoSqz and not NoSqz[1]
//     alert("Squeeze Fired")

//PLOTS
// plot(mom, title='MOM', color=mom_color, style=plot.style_columns, linewidth=2)
// plot(0, title='SQZ', color=sq_color, style=plot.style_circles, linewidth=3)

//MULTI TIMEFRAME HISTOGRAM COLOR

//[HC_1m]         = request.security(syminfo.tickerid, "1", [mom_color])
// [HC_2m]         = request.security(syminfo.tickerid, "2", [mom_color])
// [HC_3m]         = request.security(syminfo.tickerid, "3", [mom_color])
// [HC_4m]         = request.security(syminfo.tickerid, "4", [mom_color])
// [HC_5m]         = request.security(syminfo.tickerid, "5", [mom_color])
// [HC_10m]         = request.security(syminfo.tickerid, "10", [mom_color])
// [HC_15m]        = request.security(syminfo.tickerid, "15", [mom_color])
// [HC_30m]        = request.security(syminfo.tickerid, "30", [mom_color])
// [HC_1H]         = request.security(syminfo.tickerid, "60", [mom_color])
// [HC_2H]         = request.security(syminfo.tickerid, "120", [mom_color])
// [HC_3H]         = request.security(syminfo.tickerid, "180", [mom_color])
// [HC_4H]         = request.security(syminfo.tickerid, "240", [mom_color])
// [HC_6H]         = request.security(syminfo.tickerid, "360", [mom_color])
// [HC_8H]         = request.security(syminfo.tickerid, "480", [mom_color])
// [HC_12H]         = request.security(syminfo.tickerid, "720", [mom_color])
// [HC_D]          = request.security(syminfo.tickerid, "D"  , [mom_color])
// [HC_10D]          = request.security(syminfo.tickerid, "D"  , [mom_color])
// [HC_W]          = request.security(syminfo.tickerid, "W"  , [mom_color])
// [HC_M]          = request.security(syminfo.tickerid, "M"  , [mom_color])

//activation_squeeze_color_1 = request.security(syminfo.tickerid, "1", sq_color[1])
//to try, take support_true response for any time frame and use comparison operator 
[SC_1m, RS_1m, SP_1m, low_1min, close_1min, high_1min, atr_1m, HC_1m, activation_squeeze_color_1m, HC_1m_previous,SP_1m_previous, low_1min_previous,ema_bias_9_1m, ema_bias_34_1m, ema_bias_55_1m,case_9_200_binary_1m, close_200_crossover_binary_1m, low_1m_previous]  = request.security(syminfo.tickerid, "1", [sq_color, rs_color,sp_color,low, close, high, ta.atr(20), mom_color, sq_color[1], mom_color[1], sp_color[1], low[1],ema_bias_9, ema_bias_34, ema_bias_55, case_9_200_binary, close_200_crossover_binary,low[1]])
[SC_2m, RS_2m, SP_2m, low_2min, close_2min, high_2min, atr_2m, HC_2m, activation_squeeze_color_2m, HC_2m_previous,SP_2m_previous, low_2min_previous,ema_bias_9_2m, ema_bias_34_2m, ema_bias_55_2m, case_9_200_binary_2m, close_200_crossover_binary_2m, low_2m_previous]  = request.security(syminfo.tickerid, "2", [sq_color, rs_color,sp_color,low, close, high, ta.atr(20), mom_color, sq_color[1], mom_color[1], sp_color[1],low[1],ema_bias_9, ema_bias_34, ema_bias_55, case_9_200_binary, close_200_crossover_binary,low[1]])
[SC_3m, RS_3m, SP_3m, low_3min, close_3min, high_3min,atr_3m, HC_3m, activation_squeeze_color_3m, HC_3m_previous,SP_3m_previous, low_3min_previous,ema_bias_9_3m, ema_bias_34_3m, ema_bias_55_3m, case_9_200_binary_3m, close_200_crossover_binary_3m, low_3m_previous]  = request.security(syminfo.tickerid, "3",  [sq_color, rs_color,sp_color,low, close, high, ta.atr(20), mom_color, sq_color[1], mom_color[1], sp_color[1], low[1],ema_bias_9, ema_bias_34, ema_bias_55, case_9_200_binary, close_200_crossover_binary,low[1]])
[SC_4m, RS_4m, SP_4m, low_4min, close_4min,high_4min, atr_4m, HC_4m, activation_squeeze_color_4m, HC_4m_previous,SP_4m_previous, low_4min_previous,ema_bias_9_4m, ema_bias_34_4m, ema_bias_55_4m, case_9_200_binary_4m, close_200_crossover_binary_4m, low_4m_previous]  = request.security(syminfo.tickerid, "4",   [sq_color, rs_color,sp_color,low, close, high, ta.atr(20), mom_color, sq_color[1], mom_color[1], sp_color[1], low[1],ema_bias_9, ema_bias_34, ema_bias_55, case_9_200_binary, close_200_crossover_binary,low[1]])
[SC_5m, RS_5m, SP_5m, low_5min, close_5min,high_5min, atr_5m, HC_5m, activation_squeeze_color_5m, HC_5m_previous,SP_5m_previous, high_5min_previous, RS_5m_previous,low_5min_previous,ema_bias_9_5m, ema_bias_34_5m, ema_bias_55_5m, case_9_200_binary_5m, low_5m_previous, close_200_crossover_binary_5m]  = request.security(syminfo.tickerid, "5",   [sq_color, rs_color,sp_color,low, close, high, ta.atr(20), mom_color, sq_color[1], mom_color[1], sp_color[1], high[1], rs_color[1],low[1],ema_bias_9, ema_bias_34, ema_bias_55, case_9_200_binary, close_200_crossover_binary,low[1]])
[SC_10m, RS_10m,SP_10m, low_10min, close_10min,high_10min, atr_10m, HC_10m, activation_squeeze_color_10m, HC_10m_previous,SP_10m_previous, low_10min_previous, ema_bias_9_10m, ema_bias_34_10m, ema_bias_55_10m, case_9_200_binary_10m]  = request.security(syminfo.tickerid, "10",  [sq_color, rs_color,sp_color,low, close, high, ta.atr(20), mom_color, sq_color[1], mom_color[1], sp_color[1], low[1],ema_bias_9, ema_bias_34, ema_bias_55, case_9_200_binary])
[SC_15m, RS_15m, SP_15m, low_15min, close_15min,high_15min, atr_15m, HC_15m, activation_squeeze_color_15m, HC_15m_previous,SP_15m_previous, high_15min_previous, RS_15m_previous,low_15min_previous,ema_bias_9_15m, ema_bias_34_15m, ema_bias_55_15m, case_9_200_binary_15m]  = request.security(syminfo.tickerid, "15",  [sq_color, rs_color,sp_color,low, close, high, ta.atr(20), mom_color, sq_color[1], mom_color[1], sp_color[1], high[1], rs_color[1],low[1],ema_bias_9, ema_bias_34, ema_bias_55, case_9_200_binary])
[SC_30m, RS_30m, SP_30m, low_30min, close_30min, high_30min, atr_30m, HC_30m, activation_squeeze_color_30m, HC_30m_previous,SP_30m_previous, high_30min_previous, RS_30m_previous, low_30min_previous,ema_bias_9_30m, ema_bias_34_30m, ema_bias_55_30m, case_9_200_binary_30m, Ema_21_30m]  = request.security(syminfo.tickerid, "30", [sq_color, rs_color,sp_color,low, close, high, ta.atr(20), mom_color, sq_color[1], mom_color[1], sp_color[1], high[1], rs_color[1],low[1],ema_bias_9, ema_bias_34, ema_bias_55, case_9_200_binary, Ema_21])
[SC_45m, RS_45m, SP_45m, low_45min, close_45min, high_45min, atr_45m, HC_45m, activation_squeeze_color_45m, HC_45m_previous,SP_45m_previous,low_45min_previous,high_45min_previous, RS_45m_previous,ema_bias_9_45m, ema_bias_34_45m, ema_bias_55_45m, case_9_200_binary_45m]  = request.security(syminfo.tickerid, "45", [sq_color, rs_color,sp_color,low, close, high, ta.atr(20), mom_color, sq_color[1], mom_color[1],sp_color[1],low[1],high[1], rs_color[1],ema_bias_9, ema_bias_34, ema_bias_55, case_9_200_binary])
[SC_1H, RS_1H, SP_1H, low_1H, close_1H,high_1H, atr_1H, HC_1H, activation_squeeze_color_1H, HC_1H_previous,SP_1H_previous, high_1H_previous, RS_1H_previous, low_1H_previous, ema_bias_9_1H, ema_bias_34_1H, ema_bias_55_1H,case_9_200_binary_1H]  = request.security(syminfo.tickerid, "60", [sq_color, rs_color,sp_color,low, close, high, ta.atr(20), mom_color, sq_color[1], mom_color[1], sp_color[1], high[1], rs_color[1],low[1],ema_bias_9, ema_bias_34, ema_bias_55, case_9_200_binary])
[SC_1_5H, RS_1_5H, SP_1_5H, low_1_5H, close_1_5H,high_1_5H, atr_1_5H, HC_1_5H, activation_squeeze_color_1_5H, HC_1_5H_previous,SP_1_5H_previous, high_1_5H_previous, RS_1_5H_previous, ema_bias_9_1_5H, ema_bias_34_1_5H, ema_bias_55_1_5H, case_9_200_binary_1_5H]  = request.security(syminfo.tickerid, "90", [sq_color, rs_color,sp_color,low, close, high, ta.atr(20), mom_color, sq_color[1], mom_color[1], sp_color[1], low[1], rs_color[1],ema_bias_9, ema_bias_34, ema_bias_55, case_9_200_binary])
[SC_2H, RS_2H, SP_2H, low_2H, close_2H, high_2H,atr_2H, HC_2H, activation_squeeze_color_2H, HC_2H_previous,SP_2H_previous,high_2H_previous, RS_2H_previous,low_2H_previous,ema_bias_9_2H, ema_bias_34_2H, ema_bias_55_2H, case_9_200_binary_2H]  = request.security(syminfo.tickerid, "120",  [sq_color, rs_color,sp_color,low, close, high, ta.atr(20), mom_color, sq_color[1], mom_color[1], sp_color[1], high[1], rs_color[1],low[1],ema_bias_9, ema_bias_34,ema_bias_55, case_9_200_binary])
[SC_2_5H, RS_2_5H, SP_2_5H, low_2_5H, close_2_5H,high_2_5H, atr_2_5H, HC_2_5H, activation_squeeze_color_2_5H, HC_2_5H_previous,SP_2_5H_previous, low_2_5H_previous, RS_2_5H_previous, ema_bias_9_2_5H, ema_bias_34_2_5H, ema_bias_55_2_5H, case_9_200_binary_2_5H]  = request.security(syminfo.tickerid, "150", [sq_color, rs_color,sp_color,low, close, high, ta.atr(20), mom_color, sq_color[1], mom_color[1], sp_color[1], low[1], rs_color[1],ema_bias_9, ema_bias_34, ema_bias_55, case_9_200_binary])
[SC_3H, RS_3H, SP_3H, low_3H, close_3H, high_3H,atr_3H, HC_3H, activation_squeeze_color_3H, HC_3H_previous,SP_3H_previous, low_3H_previous, RS_3H_previous, ema_bias_9_3H, ema_bias_34_3H, ema_bias_55_3H,case_9_200_binary_3H ]  = request.security(syminfo.tickerid, "180", [sq_color, rs_color,sp_color,low, close, high, ta.atr(20), mom_color, sq_color[1], mom_color[1], sp_color[1], low[1], rs_color[1],ema_bias_9, ema_bias_34, ema_bias_55, case_9_200_binary])
[SC_3_5H, RS_3_5H, SP_3_5H, low_3_5H, close_3_5H,high_3_5H, atr_3_5H, HC_3_5H, activation_squeeze_color_3_5H, HC_3_5H_previous,SP_3_5H_previous, low_3_5H_previous, RS_3_5H_previous, ema_bias_9_3_5H, ema_bias_34_3_5H, ema_bias_55_3_5H, case_9_200_binary_3_5H]  = request.security(syminfo.tickerid, "210", [sq_color, rs_color,sp_color,low, close, high, ta.atr(20), mom_color, sq_color[1], mom_color[1], sp_color[1], low[1], rs_color[1],ema_bias_9, ema_bias_34, ema_bias_55, case_9_200_binary])
[SC_4H, RS_4H, SP_4H, low_4H, close_4H, high_4H, atr_4H, HC_4H, activation_squeeze_color_4H, HC_4H_previous,SP_4H_previous,low_4H_previous, RS_4H_previous, ema_bias_9_4H, ema_bias_34_4H, ema_bias_55_4H, case_9_200_binary_4H]  = request.security(syminfo.tickerid, "240",   [sq_color, rs_color,sp_color,low, close, high, ta.atr(20), mom_color, sq_color[1], mom_color[1], sp_color[1], low[1], rs_color[1],ema_bias_9, ema_bias_34, ema_bias_55, case_9_200_binary])
[SC_6H, RS_6H, SP_6H, low_6H, close_6H, high_6H, atr_6H, HC_6H, activation_squeeze_color_6H, HC_6H_previous,SP_6H_previous, low_6H_previous, RS_6H_previous, ema_bias_9_6H, ema_bias_34_6H, ema_bias_55_6H, case_9_200_binary_6H]  = request.security(syminfo.tickerid, "360", [sq_color, rs_color,sp_color,low, close, high, ta.atr(20), mom_color, sq_color[1], mom_color[1], sp_color[1], low[1], rs_color[1],ema_bias_9, ema_bias_34,ema_bias_55, case_9_200_binary])
[SC_8H, RS_8H, SP_8H, low_8H, close_8H, high_8H, atr_8H, HC_8H, activation_squeeze_color_8H, HC_8H_previous,SP_8H_previous, low_8H_previous, RS_8H_previous, ema_bias_9_8H, ema_bias_34_8H, ema_bias_55_8H]  = request.security(syminfo.tickerid, "480",   [sq_color, rs_color,sp_color,low, close, high, ta.atr(20), mom_color, sq_color[1], mom_color[1], sp_color[1], low[1], rs_color[1],ema_bias_9, ema_bias_34, ema_bias_55])
[SC_12H, RS_12H, SP_12H, low_12H, close_12H, high_12H, atr_12H, HC_12H, activation_squeeze_color_12H, HC_12H_previous,SP_12H_previous, low_12H_previous, RS_12H_previous, ema_bias_9_12H, ema_bias_34_12H, ema_bias_55_12H]  = request.security(syminfo.tickerid, "720", [sq_color, rs_color,sp_color,low, close, high, ta.atr(20), mom_color, sq_color[1], mom_color[1], sp_color[1], low[1], rs_color[1],ema_bias_9, ema_bias_34, ema_bias_55])
[SC_D, RS_D, SP_D, low_D, close_D, high_D, atr_D, HC_D, activation_squeeze_color_D, HC_D_previous,SP_D_previous, low_D_previous, RS_D_previous, ema_bias_9_D, ema_bias_34_D, ema_bias_55_D]  = request.security(syminfo.tickerid, "D",  [sq_color, rs_color,sp_color,low, close, high, ta.atr(20), mom_color, sq_color[1], mom_color[1], sp_color[1], low[1], rs_color[1],ema_bias_9, ema_bias_34, ema_bias_55])
[SC_2D, RS_2D, SP_2D, low_2D, close_2D, high_2D, atr_2D, HC_2D, activation_squeeze_color_2D, HC_2D_previous,SP_2D_previous, low_2D_previous, RS_2D_previous, ema_bias_9_2D, ema_bias_34_2D, ema_bias_55_2D]  = request.security(syminfo.tickerid, "2D",  [sq_color, rs_color,sp_color,low, close, high, ta.atr(20), mom_color, sq_color[1], mom_color[1], sp_color[1], low[1], rs_color[1],ema_bias_9, ema_bias_34, ema_bias_55])
[SC_3D, RS_3D, SP_3D, low_3D, close_3D, high_3D, atr_3D, HC_3D, activation_squeeze_color_3D, HC_3D_previous,SP_3D_previous, low_3D_previous, RS_3D_previous, ema_bias_9_3D, ema_bias_34_3D, ema_bias_55_3D]  = request.security(syminfo.tickerid, "3D",  [sq_color, rs_color,sp_color,low, close, high, ta.atr(20), mom_color, sq_color[1], mom_color[1], sp_color[1], low[1], rs_color[1],ema_bias_9, ema_bias_34, ema_bias_55])
[SC_4D, RS_4D, SP_4D, low_4D, close_4D, high_4D, atr_4D, HC_4D, activation_squeeze_color_4D, HC_4D_previous,SP_4D_previous, low_4D_previous, RS_4D_previous, ema_bias_9_4D, ema_bias_34_4D, ema_bias_55_4D]  = request.security(syminfo.tickerid, "4D",  [sq_color, rs_color,sp_color,low, close, high, ta.atr(20), mom_color, sq_color[1], mom_color[1], sp_color[1], low[1], rs_color[1],ema_bias_9, ema_bias_34, ema_bias_55])
[SC_5D, RS_5D, SP_5D, low_5D, close_5D, high_5D, atr_5D, HC_5D, activation_squeeze_color_5D, HC_5D_previous,SP_5D_previous, low_5D_previous, RS_5D_previous, ema_bias_9_5D, ema_bias_34_5D, ema_bias_55_5D]  = request.security(syminfo.tickerid, "5D",  [sq_color, rs_color,sp_color,low, close, high, ta.atr(20), mom_color, sq_color[1], mom_color[1], sp_color[1], low[1], rs_color[1],ema_bias_9, ema_bias_34, ema_bias_55])
[SC_10D, RS_10D, SP_10D, low_10D, close_10D, high_10D, atr_10D, HC_10D, activation_squeeze_color_10D, HC_10D_previous,SP_10D_previous, low_10D_previous, ema_bias_9_10D, ema_bias_34_10D, ema_bias_55_10D]  = request.security(syminfo.tickerid, "10D",  [sq_color, rs_color,sp_color,low, close, high, ta.atr(20), mom_color, sq_color[1], mom_color[1], sp_color[1], low[1],ema_bias_9, ema_bias_34, ema_bias_55])

[SC_W, RS_W, SP_W, low_W, close_W, high_W, atr_W, HC_W, activation_squeeze_color_W, HC_W_previous,SP_W_previous, low_W_previous, global_low_W, ema_bias_9_W, ema_bias_34_W, ema_bias_55_W]  = request.security(syminfo.tickerid, "W",  [sq_color, rs_color,sp_color,low, close, high, ta.atr(20), mom_color, sq_color[1], mom_color[1], sp_color[1], low[1], ta.lowest(low, 34),ema_bias_9, ema_bias_34, ema_bias_55])
[SC_M, RS_M, SP_M, low_M, close_M,high_M, atr_M, HC_M, activation_squeeze_color_M, HC_M_previous,SP_M_previous, low_M_previous, ema_bias_9_M, ema_bias_34_M, ema_bias_55_M]  = request.security(syminfo.tickerid, "M",   [sq_color, rs_color,sp_color,low, close, high, ta.atr(20), mom_color, sq_color[1], mom_color[1], sp_color[1], low[1],ema_bias_9, ema_bias_34, ema_bias_55])

//long_bias_1min = HC_1m  == color.aqua or HC_1m == #CCCC00ff
long_bias_1min = HC_1m  == color.aqua or HC_1m == #CCCC00ff
long_bias_2min = HC_2m  == color.aqua or HC_2m == #CCCC00ff
long_bias_3min = HC_3m  == color.aqua or HC_3m == #CCCC00ff
long_bias_4min = HC_4m  == color.aqua or HC_4m == #CCCC00ff
long_bias_5min = HC_5m  == color.aqua or HC_5m == #CCCC00ff
long_bias_10min = HC_10m  == color.aqua or HC_10m == #CCCC00ff
long_bias_15min = HC_15m  == color.aqua or HC_15m  == #CCCC00ff
long_bias_30min = HC_30m  == color.aqua or HC_30m == #CCCC00ff
long_bias_45min = HC_45m  == color.aqua or HC_45m == #CCCC00ff
long_bias_1H = HC_1H  == color.aqua or HC_1H == #CCCC00ff
long_bias_1_5H = HC_1_5H  == color.aqua or HC_1_5H == #CCCC00ff

long_bias_1min_binary = long_bias_1min ? 1: 0
long_bias_2min_binary = long_bias_2min ? 1: 0
long_bias_3min_binary = long_bias_3min ? 1: 0
long_bias_4min_binary = long_bias_4min ? 1: 0
long_bias_5min_binary = long_bias_5min ? 1: 0
long_bias_10min_binary = long_bias_10min ? 1: 0
long_bias_15min_binary = long_bias_15min ? 1: 0
long_bias_30min_binary = long_bias_30min ? 1: 0
long_bias_45min_binary = long_bias_45min ? 1: 0
long_bias_1H_binary = long_bias_1H ? 1: 0
long_bias_1_5H_binary = long_bias_1_5H ? 1: 0

micro_bias_long = long_bias_1H_binary  + long_bias_30min_binary  + long_bias_15min_binary + long_bias_10min_binary + long_bias_5min_binary + long_bias_4min_binary + long_bias_3min_binary + long_bias_2min_binary + long_bias_1min_binary //count is 7

//micro_bias_long = long_bias_1H_binary  + long_bias_30min_binary  + long_bias_15min_binary + long_bias_10min_binary + long_bias_5min_binary + long_bias_4min_binary + long_bias_3min_binary + long_bias_2min_binary + long_bias_1min_binary //count is 7

close_200_crossover_binary_count = close_200_crossover_binary_1m + close_200_crossover_binary_2m + close_200_crossover_binary_3m + close_200_crossover_binary_4m + close_200_crossover_binary_5m

long_bias_2H =   HC_2H == color.aqua or  HC_2H  == #CCCC00ff
long_bias_2_5H = HC_2_5H  == color.aqua or HC_2_5H == #CCCC00ff
long_bias_3H =  HC_3H == color.aqua or HC_3H == #CCCC00ff
long_bias_3_5H = HC_3_5H  == color.aqua or HC_3_5H == #CCCC00ff
long_bias_4H =  HC_4H == color.aqua or HC_4H == #CCCC00ff
long_bias_6H =  HC_6H == color.aqua or HC_6H == #CCCC00ff
long_bias_8H =  HC_8H == color.aqua or HC_8H == #CCCC00ff
long_bias_12H = HC_12H == color.aqua or HC_12H == #CCCC00ff
long_bias_D =   HC_D == color.aqua or HC_D ==  #CCCC00ff
long_bias_2D =   HC_2D == color.aqua or HC_2D ==  #CCCC00ff
long_bias_W =   HC_W == color.aqua or HC_W == #CCCC00ff
long_bias_10D = HC_10D == color.aqua or HC_10D == #CCCC00ff
long_bias_M =   HC_M == color.aqua or HC_M == #CCCC00ff

long_bias_2H_binary = long_bias_2H ? 1:0
long_bias_2_5H_binary = long_bias_2_5H ? 1: 0
long_bias_3H_binary = long_bias_3H ? 1:0
long_bias_3_5H_binary = long_bias_3_5H ? 1: 0
long_bias_4H_binary = long_bias_4H ? 1:0
long_bias_6H_binary = long_bias_6H ? 1:0
long_bias_8H_binary = long_bias_8H ? 1:0
long_bias_12H_binary = long_bias_12H ? 1:0
long_bias_D_binary = long_bias_D ? 1:0
long_bias_2D_binary = long_bias_2D ? 1:0
long_bias_3D_binary = long_bias_2D ? 1:0
long_bias_4D_binary = long_bias_2D ? 1:0
long_bias_5D_binary = long_bias_2D ? 1:0
long_bias_W_binary = long_bias_W ? 1:0
long_bias_10D_binary = long_bias_10D ? 1:0
long_bias_M_binary = long_bias_M ? 1:0

short_bias_1min = HC_1m  == color.red or HC_1m == #2962ff
short_bias_2min = HC_2m  == color.red or HC_2m == #2962ff 
short_bias_3min = HC_3m  == color.red or HC_3m == #2962ff 
short_bias_4min = HC_4m  == color.red or HC_4m == #2962ff 
short_bias_5min = HC_5m  == color.red or HC_5m == #2962ff 
short_bias_10min = HC_10m  == color.red or HC_10m == #2962ff 
short_bias_15min = HC_15m  == color.red or HC_15m == #2962ff 
short_bias_30min = HC_30m  == color.red or HC_30m == #2962ff 
short_bias_45min = HC_45m  == color.red or HC_45m == #2962ff 
short_bias_1H = HC_1H  == color.red or HC_1H == #2962ff 
short_bias_1_5H = HC_1_5H  == color.red or HC_1_5H == #2962ff 
short_bias_2H = HC_2H  == color.red or HC_2H == #2962ff 
short_bias_2_5H = HC_2_5H  == color.red or HC_1_5H == #2962ff 
short_bias_3H = HC_3H  == color.red or HC_3H == #2962ff 
short_bias_3_5H = HC_3_5H  == color.red or HC_1_5H == #2962ff 
short_bias_4H = HC_4H  == color.red or HC_4H == #2962ff 
short_bias_6H = HC_6H  == color.red or HC_6H == #2962ff 
short_bias_8H = HC_8H  == color.red or HC_8H == #2962ff 
short_bias_12H = HC_12H  == color.red or HC_12H == #2962ff 

short_bias_1min_binary = short_bias_1min ? 1: 0 
short_bias_2min_binary = short_bias_2min ? 1: 0 
short_bias_3min_binary = short_bias_3min ? 1: 0 
short_bias_4min_binary = short_bias_4min ? 1: 0 
short_bias_5min_binary = short_bias_5min ? 1: 0 
short_bias_10min_binary = short_bias_10min ? 1: 0 
short_bias_15min_binary = short_bias_15min ? 1: 0 
short_bias_30min_binary = short_bias_30min ? 1: 0 
short_bias_45min_binary = short_bias_45min ? 1: 0 
short_bias_1H_binary = short_bias_1H ? 1: 0 
short_bias_1_5H_binary = short_bias_1_5H ? 1: 0 
short_bias_2H_binary = short_bias_2H ? 1: 0 
short_bias_2_5H_binary = short_bias_2_5H ? 1: 0 
short_bias_3H_binary = short_bias_3H ? 1: 0 
short_bias_3_5H_binary = short_bias_3_5H ? 1: 0 
short_bias_4H_binary = short_bias_4H ? 1: 0 
short_bias_6H_binary = short_bias_6H ? 1: 0 
short_bias_8H_binary = short_bias_8H ? 1: 0 
short_bias_12H_binary = short_bias_12H ? 1: 0 
// short_bias_1H_binary = short_bias_1H ? 1: 0 
// short_bias_1H_binary = short_bias_1H ? 1: 0 

Averages_check_count = case_9_200_binary_10m + case_9_200_binary_15m + case_9_200_binary_30m + case_9_200_binary_45m + case_9_200_binary_1H + case_9_200_binary_1_5H + case_9_200_binary_2H + case_9_200_binary_2_5H + case_9_200_binary_3H + case_9_200_binary_3_5H + case_9_200_binary_4H + case_9_200_binary_6H // 12

short_bias_aggregate = short_bias_1min_binary + short_bias_2min_binary + short_bias_3min_binary + short_bias_4min_binary + short_bias_5min_binary + short_bias_10min_binary + short_bias_15min_binary + short_bias_30min_binary + short_bias_45min_binary + short_bias_1H_binary + short_bias_1_5H_binary + short_bias_2H_binary + short_bias_2_5H_binary + short_bias_3H_binary + short_bias_3_5H_binary + short_bias_4H_binary + short_bias_6H_binary + short_bias_8H_binary + short_bias_12H_binary

macro_bias_long = long_bias_4H_binary + long_bias_6H_binary + long_bias_8H_binary + long_bias_12H_binary + long_bias_D_binary + long_bias_2D_binary + long_bias_3D_binary + long_bias_4D_binary + long_bias_5D_binary + long_bias_W_binary + long_bias_10D_binary + long_bias_M_binary // count = 12

//mid_macro_bias_long = 0//long_bias_6H_binary + long_bias_8H_binary + long_bias_10H_binary + long_bias_12H_binary + long_bias_D_binary // (1) +  //long_bias_2D_binary + long_bias_W_binary //+ long_bias_10D_binary + long_bias_M_binary // count = 10

//mid_micro_bias_long = 0//long_bias_30min_binary + long_bias_1H_binary + long_bias_2H_binary  + long_bias_3H_binary  + long_bias_4H_binary + long_bias_1_5H_binary + long_bias_2_5H_binary + long_bias_3_5H_binary //+ long_bias_6H_binary + long_bias_8H_binary // count, 5
//bias_check = bias1 >=2  and bias2 >= 2 and bias3 >= 1
bias1 = long_bias_5min_binary + long_bias_10min_binary + long_bias_15min_binary //+ long_bias_30m_binary 

bias2 = long_bias_30min_binary  + long_bias_45min_binary  + long_bias_1H_binary // (1) +  //long_bias_2D_binary + long_bias_W_binary //+ long_bias_10D_binary + long_bias_M_binary // count = 10

bias3 = long_bias_1_5H_binary + long_bias_2H_binary + long_bias_2_5H_binary + long_bias_3H_binary  + long_bias_3_5H_binary + long_bias_4H_binary //+ long_bias_1_5H_binary + long_bias_2_5H_binary + long_bias_3_5H_binary //+ long_bias_6H_binary + long_bias_8H_binary // count, 5

total_bias = bias1 //+ bias2 + bias3

var color support_on_1min = color.gray
var color support_on_2min = color.gray
var color support_on_3min = color.gray
var color support_on_4min = color.gray
var color support_on_5min = color.gray
var color support_on_10min = color.gray
var color support_on_15min = color.gray
var color support_on_30min = color.gray
var color support_on_45min = color.gray
var color support_on_1H = color.gray
var color support_on_1_5H = color.gray
var color support_on_2H = color.gray
var color support_on_2_5H = color.gray
var color support_on_3H = color.gray
var color support_on_3_5H = color.gray
var color support_on_4H = color.gray
var color support_on_6H = color.gray
var color support_on_8H = color.gray
var color support_on_12H = color.gray
var color support_on_D = color.gray
var color support_on_10D = color.gray
var color support_on_W = color.gray
var color support_on_M = color.gray

var color resistance_on_1min = color.gray
var color resistance_on_2min = color.gray
var color resistance_on_3min = color.gray
var color resistance_on_4min = color.gray
var color resistance_on_5min = color.gray
var color resistance_on_10min = color.gray
var color resistance_on_15min = color.gray
var color resistance_on_30min = color.gray
var color resistance_on_1H = color.gray
var color resistance_on_2H = color.gray
var color resistance_on_3H = color.gray
var color resistance_on_4H = color.gray
var color resistance_on_6H = color.gray
var color resistance_on_8H = color.gray
var color resistance_on_12H = color.gray
var color resistance_on_D = color.gray
var color resistance_on_10D = color.gray
var color resistance_on_W = color.gray
var color resistance_on_M = color.gray

var float close_breach_1m = 0
var float close_breach_2m = 0
var float close_breach_3m = 0
var float close_breach_4m = 0
var float close_breach_5m = 0
var float close_breach_10m = 0
var float close_breach_15m = 0
var float close_breach_30m = 0
var float close_breach_1H = 0
var float close_breach_2H = 0
var float close_breach_3H = 0
var float close_breach_4H = 0
var float close_breach_6H = 0
var float close_breach_8H = 0
var float close_breach_12H = 0
var float close_breach_D = 0
var float close_breach_10D = 0
var float close_breach_W = 0
var float close_breach_M = 0

var float low_to_breach_1min = 0
var float low_to_breach_2min = 0
var float low_to_breach_3min = 0
var float low_to_breach_4min = 0
var float low_to_breach_5min = 0
var float low_to_breach_10min = 0
var float low_to_breach_15min = 0
var float low_to_breach_30min = 0
var float low_to_breach_45min = 0
var float low_to_breach_1H = 0
var float low_to_breach_1_5H = 0
var float low_to_breach_2H = 0
var float low_to_breach_2_5H = 0
var float low_to_breach_3H = 0
var float low_to_breach_3_5H = 0
var float low_to_breach_4H = 0
var float low_to_breach_6H = 0
var float low_to_breach_8H = 0
var float low_to_breach_12H = 0
var float low_to_breach_D = 0
var float low_to_breach_10D = 0
var float low_to_breach_W = 0
var float low_to_breach_M = 0

var float high_to_breach_1min = 0
var float high_to_breach_2min = 0
var float high_to_breach_3min = 0
var float high_to_breach_4min = 0
var float high_to_breach_5min = 0
var float high_to_breach_10min = 0
var float high_to_breach_15min = 0
var float high_to_breach_30min = 0
var float high_to_breach_1H = 0
var float high_to_breach_2H = 0
var float high_to_breach_3H = 0
var float high_to_breach_4H = 0
var float high_to_breach_6H = 0
var float high_to_breach_8H = 0
var float high_to_breach_12H = 0
var float high_to_breach_D = 0
var float high_to_breach_10D = 0
var float high_to_breach_W = 0
var float high_to_breach_M = 0

if (RS_1m == color.red)   
    
    resistance_on_1min := color.red
    high_to_breach_1min := high_1min
    
    
if (close_1min > high_to_breach_1min)    

    resistance_on_1min := color.gray
    
    
if (SP_1m == color.gray and SP_1m_previous== color.green)   
    
    support_on_1min := color.green
    low_to_breach_1min_previous:=low_to_breach_1min
    low_to_breach_1min := low_1min_previous

    
    
if (close_1min < low_to_breach_1min)    

    support_on_1min := color.gray
    
if (SP_2m == color.gray and SP_2m_previous== color.green)   
    
    support_on_2min := color.green
    low_to_breach_2min_previous:=low_to_breach_2min
    low_to_breach_2min := low_2min_previous
    
    
if (close_2min < low_to_breach_2min)    

    support_on_2min := color.gray
    
if (SP_3m == color.gray and SP_3m_previous== color.green)   
    
    support_on_3min := color.green
    low_to_breach_3min_previous:=low_to_breach_3min
    low_to_breach_3min := low_3min_previous
    
    
if (close_3min < low_to_breach_3min)    

    support_on_3min := color.gray
    
if (SP_4m == color.gray and SP_4m_previous== color.green)   
    
    support_on_4min := color.green
    low_to_breach_4min_previous:=low_to_breach_4min
    low_to_breach_4min := low_4min_previous
    
    
if (close_4min < low_to_breach_4min)    

    support_on_4min := color.gray
    
if (SP_5m == color.gray and SP_5m_previous == color.green)   
    
    support_on_5min := color.green
    low_to_breach_5min_previous:=low_to_breach_5min
    low_to_breach_5min := low_5min_previous
    
    
if (close_5min < low_to_breach_5min)    

    support_on_5min := color.gray
    
if (SP_10m == color.gray and SP_10m_previous == color.green)   
    
    support_on_10min := color.green
    low_to_breach_10min := low_10min_previous
    
    
if (close_10min < low_to_breach_10min)    

    support_on_10min := color.gray
    
if (SP_15m == color.gray and SP_15m_previous == color.green)   
    
    support_on_15min := color.green
    low_to_breach_15min := low_15min_previous
    
    
if (close_15min < low_to_breach_15min)    

    support_on_15min := color.gray
    
if (SP_30m == color.gray and SP_30m_previous == color.green)   
    
    support_on_30min := color.green
    low_to_breach_30min := low_30min_previous
    
if (close_30min < low_to_breach_30min)    

    support_on_30min := color.gray
    
if (SP_45m == color.gray and SP_45m_previous == color.green)   
    
    support_on_45min := color.green
    low_to_breach_45min := low_45min_previous
    
if (close_45min < low_to_breach_45min)    

    support_on_45min := color.gray
        
    
if (SP_1H == color.gray and SP_1H_previous == color.green)   
    
    support_on_1H := color.green
    low_to_breach_1H := low_1H_previous
    
    
if (close_1H < low_to_breach_1H)    

    support_on_1H := color.gray
    
if (SP_1_5H == color.green)   
    
    support_on_1_5H := color.green
    low_to_breach_1_5H := low_1_5H
    
    
if (close_1_5H < low_to_breach_1_5H)    

    support_on_1_5H := color.gray    
    
if (SP_2H == color.gray and SP_2H_previous == color.green)   
    
    support_on_2H := color.green
    low_to_breach_2H := low_2H_previous
    
    
if (close_2H < low_to_breach_2H)    

    support_on_2H := color.gray
    
if (SP_2_5H == color.green)   
    
    support_on_2_5H := color.green
    low_to_breach_2_5H := low_2_5H
    
    
if (close_2_5H < low_to_breach_2_5H)    

    support_on_2_5H := color.gray     
    
if (SP_3H == color.green)   
    
    support_on_3H := color.green
    low_to_breach_3H := low_3H
    
    
if (close_3H < low_to_breach_3H)    

    support_on_3H := color.gray
    
if (SP_3_5H == color.green)   
    
    support_on_3_5H := color.green
    low_to_breach_3_5H := low_3_5H
    
    
if (close_3_5H < low_to_breach_3_5H)    

    support_on_3_5H := color.gray     
    
if (SP_4H == color.green)   
    
    support_on_4H := color.green
    low_to_breach_4H := low_4H
    
    
if (close_4H < low_to_breach_4H)    

    support_on_4H := color.gray
    
if (SP_6H == color.green)   
    
    support_on_6H := color.green
    low_to_breach_6H := low_6H
    
    
if (close_6H < low_to_breach_6H)    

    support_on_6H := color.gray
    
    
if (SP_8H == color.green)   
    
    support_on_8H := color.green
    low_to_breach_8H := low_8H
    
    
if (close_8H < low_to_breach_8H)    

    support_on_8H := color.gray    
    
if (SP_12H == color.green)   
    
    support_on_12H := color.green
    low_to_breach_12H := low_12H
    
    
if (close_12H < low_to_breach_1H)    

    support_on_12H := color.gray
    
if (SP_D == color.green)   
    
    support_on_D := color.green
    low_to_breach_D := low_D
    
    
if (close_D < low_to_breach_D)    

    support_on_D := color.gray

    
if (SP_10D == color.green)   
    
    support_on_10D := color.green
    low_to_breach_10D := low_10D
    
    
if (close_10D < low_to_breach_10D)    

    support_on_10D := color.gray
    
    
if (SP_W == color.green)   
    
    support_on_W := color.green
    low_to_breach_W := low_W
    
    
if (close_M < low_to_breach_M)    

    support_on_M := color.gray
    
if (SP_M == color.green)   
    
    support_on_M := color.green
    low_to_breach_M := low_M
    
    
if (close_M < low_to_breach_M)    

    support_on_M := color.gray    
    
if (RS_2m == color.red)   
    
    resistance_on_2min := color.red
    high_to_breach_2min := high_2min
    
    
if (close_2min > high_to_breach_2min)    

    resistance_on_2min := color.gray
    
if (RS_3m == color.red)   
    
    resistance_on_3min := color.red
    high_to_breach_3min := high_3min
    
    
if (close_3min > high_to_breach_3min)    

    resistance_on_3min := color.gray
    
if (RS_4m == color.red)   
    
    resistance_on_4min := color.red
    high_to_breach_4min := high_1min
    
    
if (close_4min > high_to_breach_4min)    

    resistance_on_4min := color.gray   
    
if (RS_5m == color.red)   
    
    resistance_on_5min := color.red
    high_to_breach_5min := high_5min
    
    
if (close_5min > high_to_breach_5min)    

    resistance_on_5min := color.gray
    
if (RS_10m == color.red)   
    
    resistance_on_10min := color.red
    high_to_breach_10min := high_10min
    
    
if (close_10min > high_to_breach_10min)    

    resistance_on_10min := color.gray
    
if (RS_15m == color.red)   
    
    resistance_on_15min := color.red
    high_to_breach_15min := high_15min
    
    
if (close_15min > high_to_breach_15min)    

    resistance_on_15min := color.gray
    
if (RS_30m == color.red)   
    
    resistance_on_30min := color.red
    high_to_breach_30min := high_30min
    
    
if (close_30min > high_to_breach_30min)    

    resistance_on_30min := color.gray
    
if (RS_1H == color.red)   
    
    resistance_on_1H := color.red
    high_to_breach_1H := high_1H
    
    
if (close_1H > high_to_breach_1H)    

    resistance_on_1H := color.gray
    
if (RS_2H == color.red)   
    
    resistance_on_2H := color.red
    high_to_breach_2H := high_2H
    
    
if (close_2H > high_to_breach_2H)    

    resistance_on_2H := color.gray
    
if (RS_3H == color.red)   
    
    resistance_on_3H := color.red
    high_to_breach_3H := high_3H
    
    
if (close_3H > high_to_breach_3H)    

    resistance_on_3H := color.gray
    
if (RS_4H == color.red)   
    
    resistance_on_4H := color.red
    high_to_breach_4H := high_4H
    
    
if (close_4H > high_to_breach_4H)    

    resistance_on_4H := color.gray
    
if (RS_6H == color.red)   
    
    resistance_on_6H := color.red
    high_to_breach_6H := high_6H
    
    
if (close_6H > high_to_breach_6H)    

    resistance_on_6H := color.gray
    
if (RS_8H == color.red)   
    
    resistance_on_8H := color.red
    high_to_breach_8H := high_8H
    
    
if (close_8H > high_to_breach_8H)    

    resistance_on_8H := color.gray
    
if (RS_12H == color.red)   
    
    resistance_on_12H := color.red
    high_to_breach_12H := high_12H
    
    
if (close_12H > high_to_breach_12H)    

    resistance_on_12H := color.gray    
        
if (RS_D == color.red)   
    
    resistance_on_D := color.red
    high_to_breach_D := high_D
    
    
if (close_D > high_to_breach_D)    

    resistance_on_D := color.gray    
                
if (RS_W == color.red)   
    
    resistance_on_W := color.red
    high_to_breach_W := high_W
    
    
if (close_W > high_to_breach_W)    

    resistance_on_W := color.gray
    
if (RS_10D == color.red)   
    
    resistance_on_10D := color.red
    high_to_breach_10D := high_10D
    
    
if (close_10D > high_to_breach_10D)    

    resistance_on_10D := color.gray
    
if (RS_W == color.red)   
    
    resistance_on_W := color.red
    high_to_breach_W := high_D
    
    
if (close_W > high_to_breach_W)    

    resistance_on_W := color.gray      
        

tableYposInput  = input.string("bottom", "Panel position", options = ["top", "middle", "bottom"])
tableXposInput  = input.string("left", "", options = ["left", "center", "right"])

tableYposInput1  = input.string("bottom", "Panel position", options = ["top", "middle", "bottom"])
tableXposInput1  = input.string("right", "", options = ["left", "center", "right"])

tableYposInput2  = input.string("top", "Panel position", options = ["top", "middle", "bottom"])
tableXposInput2  = input.string("left", "", options = ["left", "center", "right"])

tableYposInput3  = input.string("top", "Panel position", options = ["top", "middle", "bottom"])
tableXposInput3  = input.string("right", "", options = ["left", "center", "right"])

var table TTM   = table.new(tableYposInput + "_" + tableXposInput, 20, 2, border_width = 1)
var table TTM1   = table.new(tableYposInput1 + "_" + tableXposInput1, 20, 2, border_width = 1)
var table TTM2   = table.new(tableYposInput2 + "_" + tableXposInput2, 20, 2, border_width = 1)
var table TTM3   = table.new(tableYposInput3 + "_" + tableXposInput3, 20, 2, border_width = 1)

TC              = color.white
TS              = input.string(size.large, "Table Text Size", options = [size.tiny, size.small, size.normal, size.large])

SP_1min_binary = SP_1m == color.green ? 1:0
SP_2min_binary = SP_2m == color.green ? 1:0
SP_3min_binary = SP_3m == color.green ? 1:0
SP_4min_binary = SP_4m == color.green ? 1:0
SP_5min_binary = SP_5m == color.green ? 1:0
    
Support_Sum  = SP_1min_binary + SP_2min_binary + SP_3min_binary + SP_4min_binary + SP_5min_binary

No_Support = Support_Sum == 0
Low_Support = Support_Sum <=2 and Support_Sum > 0
Mid_Support = Support_Sum ==3
High_Support = Support_Sum >3

No_Support_height       = input.int(5, title = "No Support", group = "Support")
Low_Support_height       = input.int(10, title = "No Support", group = "Support")
Mid_Support_height       = input.int(20, title = "No Support", group = "Support")
High_Support_height      = input.int(30, title = "No Support", group = "Support")

sq_height  = High_Support ? High_Support_height : Mid_Support ? Mid_Support_height : Low_Support ? Low_Support_height: No_Support_height

if (2>1)
//if barstate.isconfirmed
    table.cell(TTM, 0, 0, "MOMENTUM", text_color = color.white, bgcolor = color.gray, text_size = TS)
    table.cell(TTM, 1, 0, "1m", text_color = TC, bgcolor = HC_1m, text_size = TS)
    table.cell(TTM, 2, 0, "2m", text_color = TC, bgcolor = HC_2m, text_size = TS)
    table.cell(TTM, 3, 0, "3m", text_color = TC, bgcolor = HC_3m, text_size = TS)
    table.cell(TTM, 4, 0, "4m", text_color = TC, bgcolor = HC_4m, text_size = TS)
    table.cell(TTM, 5, 0, "5m", text_color = TC, bgcolor = HC_5m, text_size = TS)
    table.cell(TTM, 6, 0, "10m", text_color = TC, bgcolor = HC_10m, text_size = TS)
    table.cell(TTM, 7, 0, "15m", text_color = TC, bgcolor = HC_15m, text_size = TS)
    table.cell(TTM, 8, 0, "30m", text_color = TC, bgcolor = HC_30m, text_size = TS)
    table.cell(TTM, 9, 0, "1H", text_color = TC, bgcolor = HC_1H, text_size = TS)
    table.cell(TTM, 10, 0, "2H", text_color = TC, bgcolor = HC_2H, text_size = TS)
    table.cell(TTM, 11, 0, "3H", text_color = TC, bgcolor = HC_3H, text_size = TS)
    table.cell(TTM, 12, 0, "4H", text_color = TC, bgcolor = HC_4H, text_size = TS)
    table.cell(TTM, 13, 0, "6H", text_color = TC, bgcolor = HC_6H, text_size = TS)
    table.cell(TTM, 14, 0, "8H", text_color = TC, bgcolor = HC_8H, text_size = TS)
    table.cell(TTM, 15, 0, "12H", text_color = TC, bgcolor = HC_12H, text_size = TS)
    table.cell(TTM, 16, 0, "D", text_color = TC, bgcolor = HC_D, text_size = TS)
    table.cell(TTM, 17, 0, "10D", text_color = TC, bgcolor = HC_10D, text_size = TS)
    table.cell(TTM, 18, 0, "W", text_color = TC, bgcolor = HC_W, text_size = TS)
    table.cell(TTM, 19, 0, "M", text_color = TC, bgcolor = HC_M, text_size = TS)
    
    
    
    
    
    
    table.cell(TTM1, 0, 1, "SQUEEZE", text_color = color.white, bgcolor = color.gray, text_size = TS)
    table.cell(TTM1, 1, 1, "1m", text_color = HC_1m, bgcolor = SC_1m, text_size = TS)
    table.cell(TTM1, 2, 1, "2m", text_color = HC_2m, bgcolor = SC_2m, text_size = TS)
    table.cell(TTM1, 3, 1, "3m", text_color = HC_3m, bgcolor = SC_3m, text_size = TS)
    table.cell(TTM1, 4, 1, "4m", text_color = HC_4m, bgcolor = SC_4m, text_size = TS)
    table.cell(TTM1, 5, 1, "5m", text_color = HC_5m, bgcolor = SC_5m, text_size = TS)//, width = sq_height)
    table.cell(TTM1, 6, 1, "10m", text_color = HC_10m, bgcolor = SC_10m, text_size = TS)
    table.cell(TTM1, 7, 1, "15m", text_color = HC_15m, bgcolor = SC_15m, text_size = TS)
    table.cell(TTM1, 8, 1, "30m", text_color = HC_30m, bgcolor = SC_30m, text_size = TS)
    table.cell(TTM1, 9, 1, "1H", text_color = HC_1H, bgcolor = SC_1H, text_size = TS)
    table.cell(TTM1, 10, 1, "2H", text_color = HC_2H, bgcolor = SC_2H, text_size = TS)
    table.cell(TTM1, 11, 1, "3H", text_color = HC_3H, bgcolor = SC_3H, text_size = TS)
    table.cell(TTM1, 12, 1, "4H", text_color = HC_4H, bgcolor = SC_4H, text_size = TS)
    table.cell(TTM1, 13, 1, "6H", text_color = HC_6H, bgcolor = SC_6H, text_size = TS)
    table.cell(TTM1, 14, 1, "8H", text_color = HC_8H, bgcolor = SC_8H, text_size = TS)
    table.cell(TTM1, 15, 1, "12H", text_color = HC_12H, bgcolor = SC_12H, text_size = TS)
    table.cell(TTM1, 16, 1, "D", text_color = HC_D, bgcolor = SC_D, text_size = TS)
    table.cell(TTM1, 17, 1, "10D", text_color = HC_10D, bgcolor = SC_10D, text_size = TS)
    table.cell(TTM1, 18, 1, "W", text_color = HC_W, bgcolor = SC_W, text_size = TS)
    table.cell(TTM1, 19, 1, "M", text_color = HC_M, bgcolor = SC_M, text_size = TS)
    
    table.cell(TTM2, 0, 1, "SUPPORT", text_color = color.white, bgcolor = color.green, text_size = TS)
    table.cell(TTM2, 1, 1, "1m", text_color = TC, bgcolor = support_on_1min, text_size = TS)
    table.cell(TTM2, 2, 1, "2m", text_color = TC, bgcolor = support_on_2min, text_size = TS)
    table.cell(TTM2, 3, 1, "3m", text_color = TC, bgcolor = support_on_3min, text_size = TS)
    table.cell(TTM2, 4, 1, "4m", text_color = TC, bgcolor = support_on_4min, text_size = TS)
    table.cell(TTM2, 5, 1, "5m", text_color = TC, bgcolor = support_on_5min, text_size = TS)
    table.cell(TTM2, 6, 1, "10m", text_color = TC, bgcolor = support_on_10min, text_size = TS)
    table.cell(TTM2, 7, 1, "15m", text_color = TC, bgcolor = support_on_15min, text_size = TS)
    table.cell(TTM2, 8, 1, "30m", text_color = TC, bgcolor = support_on_30min, text_size = TS)
    table.cell(TTM2, 9, 1, "1H", text_color = TC, bgcolor = support_on_1H, text_size = TS)
    table.cell(TTM2, 10, 1, "2H", text_color = TC, bgcolor =support_on_2H, text_size = TS)
    table.cell(TTM2, 11, 1, "3H", text_color = TC, bgcolor = support_on_3H, text_size = TS)
    table.cell(TTM2, 12, 1, "4H", text_color = TC, bgcolor = support_on_4H, text_size = TS)
    table.cell(TTM2, 13, 1, "6H", text_color = TC, bgcolor = support_on_6H, text_size = TS)
    table.cell(TTM2, 14, 1, "8H", text_color = TC, bgcolor = support_on_8H, text_size = TS)
    table.cell(TTM2, 15, 1, "12H", text_color = TC, bgcolor = support_on_12H, text_size = TS)
    table.cell(TTM2, 16, 1, "D", text_color = TC, bgcolor = support_on_D, text_size = TS)
    table.cell(TTM2, 17, 1, "10D", text_color = TC, bgcolor = support_on_10D, text_size = TS)
    table.cell(TTM2, 18, 1, "W", text_color = TC, bgcolor = support_on_W, text_size = TS)
    table.cell(TTM2, 19, 1, "M", text_color = TC, bgcolor = support_on_M, text_size = TS)
    
    table.cell(TTM3, 0, 1, "RESISTANCE", text_color = color.white, bgcolor = color.red, text_size = TS)
    table.cell(TTM3, 1, 1, "1m", text_color = TC, bgcolor = resistance_on_1min, text_size = TS)
    table.cell(TTM3, 2, 1, "2m", text_color = TC, bgcolor = resistance_on_2min, text_size = TS)
    table.cell(TTM3, 3, 1, "3m", text_color = TC, bgcolor = resistance_on_3min, text_size = TS)
    table.cell(TTM3, 4, 1, "4m", text_color = TC, bgcolor = resistance_on_4min, text_size = TS)
    table.cell(TTM3, 5, 1, "5m", text_color = TC, bgcolor = resistance_on_5min, text_size = TS)
    table.cell(TTM3, 6, 1, "10m", text_color = TC, bgcolor = resistance_on_10min, text_size = TS)
    table.cell(TTM3, 7, 1, "15m", text_color = TC, bgcolor = resistance_on_15min, text_size = TS)
    table.cell(TTM3, 8, 1, "30m", text_color = TC, bgcolor = resistance_on_30min, text_size = TS)
    table.cell(TTM3, 9, 1, "1H", text_color = TC, bgcolor = resistance_on_1H, text_size = TS)
    table.cell(TTM3, 10, 1, "2H", text_color = TC, bgcolor = resistance_on_2H, text_size = TS)
    table.cell(TTM3, 11, 1, "3H", text_color = TC, bgcolor = resistance_on_3H, text_size = TS)
    table.cell(TTM3, 12, 1, "4H", text_color = TC, bgcolor = resistance_on_4H, text_size = TS)
    table.cell(TTM3, 13, 1, "6H", text_color = TC, bgcolor = resistance_on_6H, text_size = TS)
    table.cell(TTM3, 14, 1, "8H", text_color = TC, bgcolor = resistance_on_8H, text_size = TS)
    table.cell(TTM3, 15, 1, "12H", text_color = TC, bgcolor = resistance_on_12H, text_size = TS)
    table.cell(TTM3, 16, 1, "D", text_color = TC, bgcolor = resistance_on_D, text_size = TS)
    table.cell(TTM3, 17, 1, "10D", text_color = TC, bgcolor =resistance_on_10D, text_size = TS)
    table.cell(TTM3, 18, 1, "W", text_color = TC, bgcolor = resistance_on_W, text_size = TS)
    table.cell(TTM3, 19, 1, "M", text_color = TC, bgcolor = resistance_on_M, text_size = TS)

support_on_1min_binary = support_on_1min == color.green ? 1:0
support_on_2min_binary = support_on_2min == color.green ? 1:0
support_on_3min_binary = support_on_3min == color.green ? 1:0
support_on_4min_binary = support_on_4min == color.green ? 1:0
support_on_5min_binary = support_on_5min == color.green ? 1:0
support_on_10min_binary = support_on_10min == color.green ? 1:0
support_on_15min_binary = support_on_15min ==color.green ? 1:0
support_on_30min_binary = support_on_30min == color.green ? 1:0
support_on_1H_binary = support_on_1H == color.green ? 1:0

support_on_2H_binary = support_on_2H == color.green ? 1:0
support_on_3H_binary = support_on_3H == color.green ? 1:0
support_on_4H_binary = support_on_4H == color.green ? 1:0
support_on_6H_binary = support_on_6H == color.green ? 1:0
support_on_8H_binary = support_on_8H == color.green ? 1:0
support_on_12H_binary = support_on_12H == color.green ? 1:0
support_on_D_binary = support_on_D == color.green ? 1:0
support_on_10D_binary = support_on_10D ==color.green ? 1:0
support_on_W_binary = support_on_W == color.green ? 1:0
support_on_M_binary = support_on_M == color.green ? 1:0

micro_support = support_on_1H_binary + support_on_30min_binary + support_on_15min_binary + support_on_10min_binary + support_on_5min_binary + support_on_4min_binary + support_on_3min_binary + support_on_2min_binary + support_on_1min_binary //count, 9

macro_support = support_on_2H_binary + support_on_3H_binary + support_on_4H_binary + support_on_6H_binary + support_on_8H_binary + support_on_12H_binary + support_on_D_binary + support_on_10D_binary + support_on_W_binary + support_on_M_binary // sum 10

resistance_on_1min_binary = resistance_on_1min == color.red ? 1:0
resistance_on_2min_binary = resistance_on_2min == color.red ? 1:0
resistance_on_3min_binary = resistance_on_3min == color.red ? 1:0
resistance_on_4min_binary = resistance_on_4min == color.red ? 1:0
resistance_on_5min_binary = resistance_on_5min == color.red ? 1:0
resistance_on_10min_binary = resistance_on_10min == color.red ? 1:0
resistance_on_15min_binary = resistance_on_15min ==color.red ? 1:0
resistance_on_30min_binary = resistance_on_30min == color.red ? 1:0
resistance_on_1H_binary = resistance_on_1H == color.red ? 1:0

resistance_on_2H_binary = resistance_on_2H == color.red ? 1:0
resistance_on_3H_binary = resistance_on_3H == color.red ? 1:0
resistance_on_4H_binary = resistance_on_4H == color.red ? 1:0
resistance_on_6H_binary = resistance_on_6H == color.red ? 1:0
resistance_on_8H_binary = resistance_on_8H == color.red ? 1:0
resistance_on_12H_binary = resistance_on_12H == color.red ? 1:0
resistance_on_D_binary = resistance_on_D == color.red ? 1:0
resistance_on_10D_binary = resistance_on_10D ==color.red ? 1:0
resistance_on_W_binary = resistance_on_W == color.red ? 1:0
resistance_on_M_binary = resistance_on_M == color.red ? 1:0

micro_resistance = resistance_on_1H_binary + resistance_on_30min_binary + resistance_on_15min_binary + resistance_on_10min_binary + resistance_on_5min_binary + resistance_on_4min_binary + resistance_on_3min_binary + resistance_on_2min_binary + resistance_on_1min_binary //sum 9 

macro_resistance = resistance_on_2H_binary + resistance_on_3H_binary + resistance_on_4H_binary + resistance_on_6H_binary + resistance_on_8H_binary + resistance_on_12H_binary + resistance_on_D_binary + resistance_on_10D_binary + resistance_on_W_binary + resistance_on_M_binary // sum 10 

macro_squeeze_long = (SC_2H ==color.green and long_bias_2H_binary ==1) or (SC_3H ==color.green and long_bias_3H_binary ==1)  or (SC_4H ==color.green and long_bias_4H_binary ==1)  or (SC_6H ==color.green and long_bias_6H_binary ==1) or (SC_8H ==color.green and long_bias_8H_binary ==1) or (SC_12H ==color.green and long_bias_12H_binary ==1) or (SC_D ==color.green and long_bias_D_binary ==1) 
macro_squeeze_short = (SC_2H ==color.green and long_bias_2H_binary ==0) or (SC_3H ==color.green and long_bias_3H_binary ==0)  or (SC_4H ==color.green and long_bias_4H_binary ==0)  or (SC_6H ==color.green and long_bias_6H_binary ==0) or (SC_8H ==color.green and long_bias_8H_binary  ==0) or (SC_12H ==color.green and long_bias_12H_binary ==0) or (SC_D ==color.green and long_bias_D_binary ==0) 

HC_5m_true = HC_5m == #CCCC00ff
HC_10m_true = HC_10m == #CCCC00ff
HC_15m_true = HC_15m == #CCCC00ff
HC_30m_true = HC_30m == #CCCC00ff
HC_45m_true = HC_45m == #CCCC00ff
HC_1H_true = HC_1H == #CCCC00ff
HC_2H_true = HC_2H == #CCCC00ff

HC_5m_true_binary = HC_5m_true ? 1:0
HC_10m_true_binary = HC_10m_true ? 1:0
HC_15m_true_binary = HC_15m_true ? 1:0
HC_30m_true_binary = HC_30m_true ? 1:0
HC_45m_true_binary = HC_45m_true ? 1:0
HC_1H_true_binary = HC_1H_true ? 1:0
HC_2H_true_binary = HC_2H_true ? 1:0

Bias_Gold_Count = HC_5m_true_binary + HC_10m_true_binary + HC_15m_true_binary + HC_30m_true_binary + HC_45m_true_binary + HC_1H_true_binary + HC_2H_true_binary // 7

//HC_2H_true = HC_2H == #CCCC00ff
HC_2_5H_true = HC_2_5H == #CCCC00ff
HC_3H_true = HC_3H == #CCCC00ff
HC_3_5H_true = HC_3_5H == #CCCC00ff
HC_4H_true = HC_4H == #CCCC00ff
HC_6H_true = HC_6H == #CCCC00ff
// HC_2H_true = HC_2H == #CCCC00ff

//HC_2H_true_binary = HC_2H_true? 1:0
HC_2_5H_true_binary = HC_2_5H_true ? 1:0
HC_3H_true_binary = HC_3H_true ? 1:0
HC_3_5H_true_binary = HC_3_5H_true ? 1:0
HC_4H_true_binary = HC_4H_true ? 1:0
HC_6H_true_binary = HC_6H_true ? 1:0
// HC_2H_true_binary = HC_2H_true ? 1:0

Bias_Gold_Count_higher = HC_2H_true_binary + HC_2_5H_true_binary + HC_3H_true_binary + HC_3_5H_true_binary + HC_4H_true_binary + HC_6H_true_binary // 6

Aqua_check = HC_2H == color.aqua or HC_2_5H == color.aqua or HC_3H == color.aqua or HC_3_5H == color.aqua or HC_4H == color.aqua or HC_6H == color.aqua

var trade_reference_numeral = 0
var activation_squeeze_1H = 0
var activation_squeeze_2H = 0
var activation_squeeze_3H = 0
var activation_squeeze_4H = 0
var activation_squeeze_6H = 0
var activation_squeeze_8H = 0
var activation_squeeze_12H = 0
var activation_squeeze_D = 0
var activation_squeeze_10D = 0
var activation_squeeze_10m = 0
var activation_squeeze_15m = 0
var activation_squeeze_30m = 0
var entered = 0
var trade_invalidated = 0

var support_entry_3_valid=false
var support_entry_4_valid=false
var support_entry_5_valid=false
var support_entry_10_valid=false
var support_entry_15_valid=false
var support_entry_30_valid=false
var support_entry_45_valid=false
var support_entry_60_valid=false
var support_entry_90_valid=false
var support_entry_120_valid=false
var support_entry_150_valid=false
var support_entry_180_valid=false
var support_entry_210_valid=false
var support_entry_240_valid=false
var support_entry_360_valid=false
var support_entry_480_valid=false
var support_enter=0.0

var condition1=0
var pre_conditions_met=0
var color_change=0
var resistance_exit=0
//bias_check =  macro_bias_long >=Macro_Long_Bias_Count //and bias3 >= 1  // and bias2 >= 1 bias1 >=1 and
bias_check =  macro_bias_long >=Macro_Long_Bias_Count //or micro_bias_long >=Micro_Long_Bias_Count
bias_check_binary = bias_check ? 1:0
// var activation_squeeze_10m = 0
// var activation_squeeze_15m = 0
// var activation_squeeze_30m = 0
// var activation_squeeze_10m = 0

var exit_size=quantity/1

// var quantity=initial_capital/close
// var exit_size=quantity/3
var ema_bias=0
// ema_bias_9 = case_9_34_binary + case_9_55_binary + case_9_200_binary
// ema_bias_34 = case_34_55_binary + case_34_200_binary
// ema_bias_55 = case_55_200_binary
//ema_bias_9_1m, ema_bias_34_1m, ema_bias_55_1m

ema_bias := ema_bias_9_5m + ema_bias_34_5m + ema_bias_55_5m

ema_bias_check = ema_bias > ema_bias_count

non_red_check = HC_10m != color.red and HC_15m != color.red and HC_30m != color.red and HC_1H != color.red and HC_2H != color.red and HC_3H != color.red and HC_4H != color.red and HC_6H != color.red

if strategy.position_size == 0 and timenow > exit_time  and na(t1) == false   //and time_cond and na(t) == false and bias_check == true and na(t2) == false
    // if SP_15m == color.gray and timenow > entry_time and timenow > support_check_30
    
    // if SP_3m == color.gray //and //timenow > entry_time and timenow > support_check_30
    //     support_entry_3_valid := true      
    
    
    // if SP_4m == color.gray //and //timenow > entry_time and timenow > support_check_30
    //     support_entry_4_valid := true      
    // //     support_stop_15_valid := true
    if SP_5m == color.gray //and //timenow > entry_time and timenow > support_check_30
        support_entry_5_valid := true    
    if SP_10m == color.gray //and //timenow > entry_time and timenow > support_check_30
        support_entry_10_valid := true
    if SP_15m == color.gray //and //timenow > entry_time and timenow > support_check_30
        support_entry_15_valid := true
    if SP_30m == color.gray //and //timenow > entry_time and timenow > support_check_30
        support_entry_30_valid := true
    if SP_45m == color.gray //and //timenow > entry_time and timenow > support_check_30
        support_entry_45_valid := true        
    if SP_1H == color.gray //and timenow > entry_time and timenow > support_check_60
        support_entry_60_valid := true
    // if SP_1_5H == color.gray //and timenow > entry_time and timenow > support_check_90
    //     support_entry_90_valid := true        
    // if SP_2H == color.gray //and timenow > entry_time and timenow > support_check_120
    //     support_entry_120_valid := true
    // if SP_2_5H == color.gray //and timenow > entry_time and timenow > support_check_150
    //     support_entry_150_valid := true        
    // if SP_3H == color.gray //and timenow > entry_time and timenow > support_check_180
    //     support_entry_180_valid := true
    // if SP_3_5H == color.gray //and timenow > entry_time and timenow > support_check_210
    //     support_entry_210_valid := true          
    // if SP_4H == color.gray //and timenow > entry_time and timenow > support_check_240
    //     support_entry_240_valid := true
    // if SP_6H == color.gray //and timenow > entry_time and timenow > support_check_360
    //     support_entry_360_valid := true        
    // if SP_8H == color.gray //and timenow > entry_time and timenow > support_check_480
    //     support_entry_480_valid := true  

if strategy.position_size == 0 and timenow > exit_time + 2 and na(t1) == false  and time_cond

//if strategy.position_size == 0 and timenow > exit_time and time_cond and setup==0 and na(t1) == false //and na(t1) == false and bias_check == true //and ((strategy.position_size < quantity/2) or (timenow > 4 and low < entry_price_long * .95))         //and close > entry_price_long //and resistance_hit==1 // and timenow > entry_time + 2 or 

    // if SP_3m == color.gray and SP_3m_previous == color.green and support_entry_3_valid == true
    
    //     setup:=1    
    //     support_enter:= low_3min_previous * 0.99   

    // if SP_4m == color.gray and SP_4m_previous == color.green and support_entry_4_valid == true
    
    //     setup:=1    
    //     support_enter:= low_4min_previous * 0.99   

    if SP_5m == color.green //or close > low_to_breach_5min//and support_entry_5_valid == true
    
        setup:=1    
        //support_enter:= low_5min_previous * 0.99   
    
    
    if SP_10m == color.green //or close > low_to_breach_10min //and support_entry_10_valid == true
    
        setup:=1    
        //support_enter:= low_10min_previous * 0.99
        
    if SP_15m == color.green //or close > low_to_breach_15min//and support_entry_15_valid == true
    
        setup:=1
        //support_enter:= low_15min_previous * 0.99

    if SP_30m == color.green //or close > low_to_breach_30min//and support_entry_30_valid == true //and timenow > entry_time and support_stop_30_valid == true and support_stop < low_30min_previous * 0.99  //+ 2 // and support_stop > low_30min_previous
    
        setup:=1
        //support_enter:= low_30min_previous * 0.99
        
    if SP_45m == color.green //or close > low_to_breach_45min//and support_entry_45_valid == true //and timenow > entry_time
    
        setup:=1
        //support_enter:= low_45min_previous * 0.99        
        
    if SP_1H == color.green //or close > low_to_breach_1H//and support_entry_60_valid == true  //and timenow > entry_time  and support_stop_60_valid == true and support_stop < low_1H_previous * 0.99  //+ 2 // and support_stop > low_1H_previous
    
        setup:=1
        //support_enter:= low_1H_previous * 0.99
        
    // if SP_1_5H == color.gray and SP_1_5H_previous == color.green and support_entry_90_valid == true  //and timenow > entry_time  and support_stop_90_valid == true and support_stop < low_1_5H_previous * 0.99//+ 2 // and support_stop > low_1H_previous
    
    //     setup:=1
    //     support_enter:= low_1_5H_previous * 0.99
        
    // if SP_2H == color.green //and support_entry_120_valid == true//and timenow > entry_time  and support_stop_120_valid == true and support_stop < low_2H_previous  * 0.99//+ 2 // and support_stop > low_2H_previous 
    
    //     setup:=1
    //     //support_enter:= low_2H_previous * 0.99
        
    // if SP_2_5H == color.gray and SP_2_5H_previous == color.green and support_entry_150_valid == true //and timenow > entry_time and support_stop_150_valid == true and support_stop < low_2_5H_previous * 0.99//+ 2 // and support_stop > low_1H_previous
    
    //     setup:=1
    //     support_enter:= low_2_5H_previous * 0.99
        
    // if SP_3H == color.gray and SP_3H_previous == color.green and support_entry_180_valid == true // and timenow > entry_time  and support_stop_180_valid == true and support_stop < low_3H_previous * 0.99//+ 2 // and support_stop > low_3H_previous
    
    //     setup:=1
    //     support_enter:= low_3H_previous * 0.99
        
    // if SP_3_5H == color.gray and SP_3_5H_previous == color.green and support_entry_210_valid == true //and timenow > entry_time  and support_stop_210_valid == true and support_stop < low_3_5H_previous * 0.99//+ 2 // and support_stop > low_1H_previous
    
    //     setup:=1
    //     support_enter:= low_3_5H_previous * 0.99
        
    // if SP_4H == color.gray and SP_4H_previous == color.green and support_entry_240_valid == true //and timenow > entry_time  and support_stop_240_valid == true and support_stop < low_4H_previous * 0.99//+ 2 // and support_stop > low_4H_previous
    
    //     setup:=1
    //     support_enter:= low_4H_previous * 0.99
        
    // if SP_6H == color.gray and SP_6H_previous == color.green and support_entry_360_valid == true  //and timenow > entry_time  and support_stop_360_valid == true and support_stop < low_6H_previous * 0.99 //+ 2 // and support_stop > low_6H_previous
    
    //     setup:=1
    //     support_enter:= low_6H_previous * 0.99
        
    // if SP_8H == color.gray and SP_8H_previous == color.green and support_entry_480_valid == true //and timenow > entry_time  and support_stop_480_valid == true and support_stop < low_8H_previous * 0.99 //+ 2 // and support_stop > low_8H_previous
    
    //     setup:=1
    //     support_enter:= low_8H_previous * 0.99

if (low < support_enter)

    setup:=0
    support_entry_10_valid:=false
    support_entry_15_valid:=false
    support_entry_30_valid:=false
    support_entry_45_valid:=false
    support_entry_60_valid:=false
    support_entry_180_valid:=false
    support_entry_210_valid:=false
    support_entry_240_valid:=false
    support_entry_360_valid:=false
    support_entry_480_valid:=false
    ready :=0
    set:=0
        

var activation_squeeze_color = color.green
var micro_support_live_count = 0
var on=0
var activation_squeeze_frequency = 0
var macro_support_live_count = 0
var micro_support_price=0.0
var macro_support_price=0.0
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//support_on_8H := color.green
//Trade Entry Decisions // micro count 9, macro count 10
// // and ready==1

// // if time_cond and timenow > exit_time + 4 and close_200_crossover_binary_count >= 1 and micro_bias_long >=3 and strategy.position_size==0 and setup==1 and bias_check == true and na(t1) == false  and (strategy.position_size == 0) and Bias_Gold_Count >= Bias_Gold_Count_Input and Bias_Gold_Count_higher >= Bias_Gold_Count_higher_Input and Averages_check_count >= Averages_check_count_Input and ema_bias_check== true and time_cond and timenow > exit_time and bias_check == true and low > support_enter and setup==1  //and na(t2) == false

    
// // //     // if SP_5m == color.green and (strategy.position_size==0)
// // //     //     micro_support_live_count:= micro_support_live_count + 1
// // //     //     micro_support_price:=low_5min   
        
// // //     // if SP_10m== color.green and (strategy.position_size==0)
// // //     //     micro_support_live_count:= micro_support_live_count + 1
// // //     //     micro_support_price:=low_10min   
    
// // //     // if SP_15m == color.green and (strategy.position_size==0)
// // //     //     micro_support_live_count:= micro_support_live_count + 1
// // //     //     micro_support_price:=low_15min    
        
// // //     if support_on_1min == color.green and (strategy.position_size==0)
// // //         micro_support_live_count:= micro_support_live_count + 1
// // //         micro_support_price:=low_5min   
        
// // //     if support_on_2min== color.green and (strategy.position_size==0)
// // //         micro_support_live_count:= micro_support_live_count + 1
// // //         micro_support_price:=low_10min   
    
// // //     if support_on_3min == color.green and (strategy.position_size==0)
// // //         micro_support_live_count:= micro_support_live_count + 1
// // //         micro_support_price:=low_15min             
        

// // // /////////////////////////////////////////////////////////////////////////
    
        
    
// // //     if support_on_10min == color.green and (strategy.position_size==0)
// // //         macro_support_live_count := macro_support_live_count + 1
// // //         macro_support_price:=low_10min         
    
// // //     if support_on_15min == color.green and (strategy.position_size==0)
// // //         macro_support_live_count := macro_support_live_count + 1
// // //         macro_support_price:=low_15min        
        
// // //     if support_on_30min == color.green and (strategy.position_size==0)
// // //         macro_support_live_count := macro_support_live_count + 1
// // //         macro_support_price:=low_30min             
        
// // //     if support_on_45min == color.green and (strategy.position_size==0)
// // //         macro_support_live_count := macro_support_live_count + 1
// // //         macro_support_price:=low_45min 
        
// // //     if support_on_1H == color.green and (strategy.position_size==0)
// // //         macro_support_live_count := macro_support_live_count + 1
// // //         macro_support_price:=low_2_5H            
    
// // //     // if support_on_3H == color.green and (strategy.position_size==0)
// // //     //     macro_support_live_count := macro_support_live_count + 1
// // //     //     macro_support_price:=low_3H
        
// // //     // if support_on_3_5H == color.green and (strategy.position_size==0)
// // //     //     macro_support_live_count := macro_support_live_count + 1
// // //     //     macro_support_price:=low_3_5H            
    
// // //     // if support_on_4H == color.green and (strategy.position_size==0)
// // //     //     macro_support_live_count := macro_support_live_count + 1
// // //     //     macro_support_price:=low_4H           
    

// // // if (macro_support_live_count >=1 and micro_support_live_count >=1) and (strategy.position_size==0) //and trade_reference_numeral == 0 // and ready==0
    
// // //     //ready :=1
// // //     support_stop:=0
    
// //         // if (SC_D != color.green) and trade_reference_numeral == 0 and long_bias_D_binary == 1
// //         //     ready :=1
// //         //     atr_to_use := atr_D
// //         //     trade_reference_numeral := 1440
            
                
// //         // if (SC_12H != color.green) and trade_reference_numeral == 0 and long_bias_12H_binary == 1
// //         //     ready :=1
// //         //     atr_to_use := atr_12H
// //         //     trade_reference_numeral := 720 
            
// //         // if (SC_8H != color.green) and trade_reference_numeral == 0  and HC_8H == #CCCC00ff //and long_bias_8H_binary == 1 
// //         //     ready :=1
// //         //     atr_to_use := atr_8H
// //         //     trade_reference_numeral := 480    
            
// //         // if (SC_6H != color.green) and trade_reference_numeral == 0 and HC_6H == #CCCC00ff  //and long_bias_6H_binary == 1
// //         //     ready :=1
// //         //     atr_to_use := atr_6H
// //         //     trade_reference_numeral := 360
            
// //     // if (SC_4H != color.green)  and HC_4H == #CCCC00ff //and long_bias_4H_binary == 1 // and trade_reference_numeral == 0 
// //     //     ready :=1
// //     //     atr_to_use := atr_4H
// //     //     trade_reference_numeral_240 := true
            
// //     // if (SC_3_5H != color.green) and HC_3_5H == #CCCC00ff //and long_bias_3_5H_binary == 1 // and trade_reference_numeral == 0 
// //     //     ready :=1
// //     //     atr_to_use := atr_1H
// //     //     trade_reference_numeral_210 := true                    
            
// //     // if (SC_3H != color.green) and HC_3H == #CCCC00ff //and long_bias_3H_binary == 1 // and trade_reference_numeral == 0 
// //     //     ready :=1
// //     //     atr_to_use := atr_3H
// //     //     trade_reference_numeral_180 := true
            
// //     // if (SC_2_5H != color.green) and HC_2_5H == #CCCC00ff //and long_bias_2_5H_binary == 1 // and trade_reference_numeral == 0
// //     //     ready :=1
// //     //     atr_to_use := atr_1H
// //     //     trade_reference_numeral_150 := true              
            
// //     // if (SC_2H != color.green) and HC_2H == #CCCC00ff //and long_bias_2H_binary == 1 // and trade_reference_numeral == 0
// //     //     ready :=1
// //     //     atr_to_use := atr_2H
// //     //     trade_reference_numeral_120 := true
            
// //     // if (SC_1_5H != color.green) and HC_1_5H == #CCCC00ff //and long_bias_1_5H_binary == 1 // and trade_reference_numeral == 0 
// //     //     ready :=1
// //     //     atr_to_use := atr_1H
// //     //     trade_reference_numeral_90 := true            
            
// //     if (SC_1H != color.green) and HC_1H == #CCCC00ff //and long_bias_1H_binary == 1 // and trade_reference_numeral == 0 
// //         ready :=1
// //         atr_to_use := atr_1H
// //         trade_reference_numeral_60 := true
        
// //     if (SC_45m != color.green) and HC_45m == #CCCC00ff //and long_bias_1H_binary == 1 // and trade_reference_numeral == 0 
// //         ready :=1
// //         atr_to_use := atr_45m
// //         trade_reference_numeral_45 := true
        
// //     if (SC_30m != color.green) and HC_30m == #CCCC00ff //and long_bias_1H_binary == 1 // and trade_reference_numeral == 0 
// //         ready :=1
// //         atr_to_use := atr_30m
// //         trade_reference_numeral_30 := true
        
// //     if (SC_15m != color.green) and HC_15m == #CCCC00ff //and long_bias_1H_binary == 1 // and trade_reference_numeral == 0 
// //         ready :=1
// //         atr_to_use := atr_15m
// //         trade_reference_numeral_15 := true      
        
// //     if (SC_10m != color.green) and HC_10m == #CCCC00ff //and long_bias_1H_binary == 1 // and trade_reference_numeral == 0 
// //         ready :=1
// //         atr_to_use := atr_10m
// //         trade_reference_numeral_10 := true     
        
// //     if (SC_5m != color.green) and HC_5m == #CCCC00ff //and long_bias_1H_binary == 1 // and trade_reference_numeral == 0 
// //         ready :=1
// //         atr_to_use := atr_5m
// //         trade_reference_numeral_5 := true
        
// //     if (SC_3m != color.green) and HC_3m == #CCCC00ff //and long_bias_1H_binary == 1 // and trade_reference_numeral == 0 
// //         ready :=1
// //         atr_to_use := atr_3m
// //         trade_reference_numeral_3 := true        
        
// //     if (SC_2m != color.green) and HC_2m == #CCCC00ff //and long_bias_1H_binary == 1 // and trade_reference_numeral == 0 
// //         ready :=1
// //         atr_to_use := atr_2m
// //         trade_reference_numeral_2 := true          
            
            
//         // if (SC_30m != color.green) and trade_reference_numeral == 0 and long_bias_30min_binary == 1
//         //     ready :=1
//         //     atr_to_use := atr_30m
//         //     trade_reference_numeral := 30   
            
            
//         // if (SC_15m != color.green) and trade_reference_numeral == 0 and long_bias_15min_binary == 1
//         //     ready :=1
//         //     atr_to_use := atr_15m
//         //     trade_reference_numeral := 15   
            
            
//         // if (SC_10m != color.green) and trade_reference_numeral == 0 and long_bias_10min_binary == 1
//         //     ready :=1
//         //     atr_to_use := atr_10m
//         //     trade_reference_numeral := 10           
            
        
                
        
//     // if (SC_10D != color.green) and trade_reference_numeral == 0 and long_bias_10D_binary == 1
//     //     ready :=1
//     //     atr_to_use := atr_10D
//     //     trade_reference_numeral := 14400
        
//     // if (SC_W != color.green) and trade_reference_numeral == 0 and long_bias_W_binary == 1
//     //     ready :=1
//     //     atr_to_use := atr_W
//     //     trade_reference_numeral := 10080
        
//     // if (SC_M != color.green) and trade_reference_numeral == 0
//     //     ready :=1
//     //     atr_to_use := atr_M
//     //     trade_reference_numeral := 43200         

// ///////////////////////////////////////////////////////////////////
// // Support within an hour, count 2      

        
//     // if support_on_1min == color.green and (strategy.position_size==0)
//     //     micro_support_live_count:= micro_support_live_count + 1 
//     //     micro_support_price:=low_1min 
        
//     // if support_on_2min == color.green and (strategy.position_size==0)
//     //     micro_support_live_count:= micro_support_live_count + 1
//     //     micro_support_price:=low_2min
        
//     // if support_on_3min == color.green and (strategy.position_size==0)
//     //     micro_support_live_count:= micro_support_live_count + 1
//     //     micro_support_price:=low_3min
        
//     // if support_on_4min == color.green and (strategy.position_size==0)
//     //     micro_support_live_count:= micro_support_live_count + 1
//     //     micro_support_price:=low_4min      
        

//     // if support_on_6H == color.green and (strategy.position_size==0)
//     //     macro_support_live_count := macro_support_live_count + 1
//     //     macro_support_price:=low_6H           
    
//     // if support_on_8H == color.green and (strategy.position_size==0)
//     //     macro_support_live_count := macro_support_live_count + 1
//     //     macro_support_price:=low_8H
        
        
//     // if support_on_12H == color.green and (strategy.position_size==0)
//     //     macro_support_live_count := macro_support_live_count + 1
//     //     macro_support_price:=low_12H            
    

//     // if support_on_D == color.green and (strategy.position_size==0)
//     //     macro_support_live_count := macro_support_live_count + 1
//     //     macro_support_price:=low_D
        
            
    
// // reset if reference sqeeze fires earlier to trade entry        

//     //set:=0
//     //trade_reference_numeral:=0
        
// // if (ready ==1 and set==1 and  (micro_bias_long < 4 or macro_bias_long < 2 or (SC_1H == color.green) )) and (strategy.position_size==0)
// //     ready:=0
// //     micro_support_live_count:=0
// //     set:=0          

// // var squeeze_ready_5 = 0
// // var squeeze_ready_10 = 0
// // var squeeze_ready_15 = 0
// // var squeeze_ready_30 = 0
// // var squeeze_ready_60 = 0
// // var squeeze_ready_120 = 0
// // var squeeze_ready_180 = 0
// // var squeeze_ready_240 = 0
// // var squeeze_ready_360 = 0
// // var squeeze_ready_480 = 0
// // var squeeze_ready_720 = 0
// // var squeeze_ready_1440 = 0
// // mom_up1_col     = color.aqua
// // mom_up2_col     = #2962ff   // dark blue
// // mom_down1_col   = color.red
// // mom_down2_col   = #CCCC00ff // gold
// var squeeze_ready=0
            
// if (ready==1) and (strategy.position_size==0) //and trade_reference_numeral > 0  //and activation_squeeze_frequency == 0 and trade_reference_numeral > 0
    
//     //set:=1    
    
// // gold: #CCCC00ff    
    
//     // if (SC_D != color.green) and HC_D == #CCCC00ff
//     //     squeeze_ready_1440:=1
    
//     // if SC_12H != color.green and HC_12H == #CCCC00ff
//     //     squeeze_ready_720:=1
        
//     // if SC_8H != color.green and HC_8H == #CCCC00ff
//     //     squeeze_ready_480:=1 
        
//     // if SC_6H != color.green and HC_6H == #CCCC00ff
//         //squeeze_ready_360:=1

// //make 5 minute increments
        
//     if SC_5m != color.green and HC_5m == #CCCC00ff //and squeeze_ready == 0
//         squeeze_ready_5 :=true
//         set:=1
    
//     if SC_10m != color.green and HC_10m == #CCCC00ff //and squeeze_ready == 0
//         squeeze_ready_10 :=true
//         set:=1
        
//     if SC_15m != color.green and HC_15m == #CCCC00ff //and squeeze_ready == 0
//         squeeze_ready_15 :=true
//         set:=1
        
//     if SC_30m != color.green and HC_30m == #CCCC00ff //and //squeeze_ready == 0
//         squeeze_ready_30 :=true
//         set:=1
        
//     if SC_45m != color.green and HC_45m == #CCCC00ff //and squeeze_ready == 0
//         squeeze_ready_45 :=true
//         set:=1
        
//     // if SC_3H != color.green and HC_3H == #CCCC00ff //and squeeze_ready == 0
//     //     squeeze_ready_180 :=true
//     //     set:=1
        
//     // if SC_3_5H != color.green and HC_3_5H == #CCCC00ff //and squeeze_ready == 0
//     //     squeeze_ready_210 :=true
//     //     set:=1
        
//     // if SC_4H != color.green and HC_4H == #CCCC00ff and squeeze_ready == 0
//     //     squeeze_ready := 240        
        
    
// //SC_3_5H 
    
//     // if SC_15m != color.green and HC_15m == #CCCC00ff
//     //     squeeze_ready_15:=1 
        
//     // if SC_10m != color.green and HC_10m == #CCCC00ff
//     //     squeeze_ready_10:=1        
        
//     // if SC_5m != color.green and HC_5m == #CCCC00ff
//     //     squeeze_ready_5:=1 
        
        
// // if  ready == 1 and (mid_micro_bias_long < 2 or mid_macro_bias_long < 1) and (strategy.position_size==0)   //micro_bias_long < 2 or 
// //     ready:=0
// //     micro_support_live_count:=0
// //     macro_support_live_count:=0
// //     trade_reference_numeral:=0
// //     set:=0
// //     squeeze_ready := 0
    
    
var transition_5m = 0
var transition_10m = 0
var transition_15m = 0 
var transition_30m = 0 
var transition_1H = 0
var transition_2H = 0
var transition_3H = 0
var transition_4H = 0
var transition_6H = 0
var transition_8H = 0
var transition_12H = 0
    
// //transition_D = squeeze_ready_D==1 and (SC_D !=activation_squeeze_color_D)
// if set==1 

//     // if squeeze_ready_720==1 //and (SC_12H !=activation_squeeze_color_12H) 
//     //     transition_12H := 1
        
//     // // if squeeze_ready_720==1 and (SC_12H !=activation_squeeze_color_12H) and SC_12H== color.aqua
//     // //     transition_12H := 1    
        
//     // if squeeze_ready_480==1 //and (SC_8H !=activation_squeeze_color_8H)
//     //     transition_8H := 1    
        
//     // if squeeze_ready_360==1 //and (SC_6H !=activation_squeeze_color_6H)
//     //     transition_6H := 1
    
//     if squeeze_ready == 240 //and (SC_4H !=activation_squeeze_color_4H)
//         transition_4H := 1Squeeze_General_Strategy_mid_frequency_ETH_latest_5_30 copy
    
//     if squeeze_ready == 180 //and (SC_3H !=activation_squeeze_color_3H)
//         transition_3H := 1
    
//     if squeeze_ready == 120 //and (SC_2H !=activation_squeeze_color_2H) 
//         transition_2H := 1
    
//     if squeeze_ready == 60 //and (SC_1H !=activation_squeeze_color_1H) 
//         transition_1H := 1
        
//     // if squeeze_ready_60==1 and (SC_1H !=activation_squeeze_color_1H) and SC_1H == color.aqua
//     //     transition_1H := 2        
    
//     if squeeze_ready == 30 //and (SC_30m !=activation_squeeze_color_30m)
//         transition_30m := 1
    
//     // if squeeze_ready_15==1 //and (SC_15m !=activation_squeeze_color_15m)
//     //     transition_15m := 1
    
//     // if squeeze_ready_10==1 //and (SC_10m !=activation_squeeze_color_10m)
//     //     transition_10m := 1 
    
//     // if squeeze_ready_5==1 //and (SC_5m !=activation_squeeze_color_5m)
//     //     transition_5m := 1
        
    
// // cond_1m = (SC_1m !=activation_squeeze_color_1m or SC_1m ==color.green)  and HC_1m ==color.aqua and HC_1m_previous !=color.aqua and HC_1m_previous != #2962ff     squeeze_ready_5:=1
// // cond_2m = (SC_2m !=activation_squeeze_color_2m or SC_2m ==color.green)  and HC_2m ==color.aqua and HC_2m_previous !=color.aqua and HC_1m_previous != #2962ff 
// // cond_3m = (SC_3m !=activation_squeeze_color_3m or SC_3m ==color.green)  and HC_3m ==color.aqua and HC_3m_previous !=color.aqua and HC_1m_previous != #2962ff 
// // cond_4m = (SC_4m !=activation_squeeze_color_4m or SC_4m ==color.green)  and HC_4m ==color.aqua and HC_4m_previous !=color.aqua and HC_1m_previous != #2962ff 
// cond_5m =  transition_5m == 1 //and HC_5m ==color.aqua //and //and  squeeze_ready_5==1 //and long_bias_5min_binary == 1 //and HC_5m_previous !=color.aqua
// cond_10m =  transition_10m == 1 //and HC_10m ==color.aqua  //and squeeze_ready_10==1 //and long_bias_10min_binary == 1 // and HC_10m_previous !=color.aqua
// cond_15m =  transition_15m == 1  //and HC_15m ==color.aqua  //and squeeze_ready_15==1 //and long_bias_15min_binary == 1 // and HC_15m_previous !=color.aqua
// cond_30m =  transition_30m == 1  //and HC_30m ==color.aqua  //and squeeze_ready_30==1 //and long_bias_30min_binary == 1 // and HC_30m_previous !=color.aqua
// cond_1H =  transition_1H == 1 //and HC_1H ==color.aqua) or transition_1H == 2 //and squeeze_ready_60==1 //and long_bias_1H_binary == 1 // and HC_1H_previous !=color.aqua
// cond_2H =  transition_2H == 1  //and HC_2H ==color.aqua  //and squeeze_ready_120==1 //and long_bias_2H_binary == 1  //  and HC_2H_previous !=color.aqua
// cond_3H =  transition_3H == 1 //and HC_3H ==color.aqua  //and squeeze_ready_180==1 //and long_bias_3H_binary == 1  // and HC_3H_previous !=color.aqua
// cond_4H = transition_4H == 1  //and HC_4H ==color.aqua  //and squeeze_ready_240==1 //and long_bias_4H_binary == 1  // and HC_4H_previous !=color.aqua
// cond_6H =  transition_6H == 1 //and HC_6H ==color.aqua  //and squeeze_ready_360==1 //and long_bias_6H_binary == 1  // and HC_6H_previous !=color.aqua
// cond_8H =  transition_8H == 1 //and HC_8H ==color.aqua  //and squeeze_ready_480==1 //and long_bias_8H_binary == 1  // and HC_8H_previous !=color.aqua
// cond_12H = transition_12H == 1 //and HC_12H ==color.aqua //and squeeze_ready_720==1 //and long_bias_12H_binary == 1  // and HC_12H_previous !=color.aqua

// cond_5m_binary = cond_5m ? 1:0
// cond_10m_binary = cond_10m ? 1:0
// cond_15m_binary = cond_15m ? 1:0
// cond_30m_binary = cond_30m ? 1:0
// cond_1H_binary = cond_1H ? 1:0
// cond_2H_binary = cond_2H ? 1:0
// cond_3H_binary = cond_3H ? 1:0
// cond_4H_binary = cond_4H ? 1:0
// cond_6H_binary = cond_6H ? 1:0
// cond_8H_binary = cond_8H ? 1:0
// cond_12H_binary = cond_12H ? 1:0
//////////////////////////////////////////////////////////////////////

//squeeze_ready := 240
// case_10m = trade_reference_numeral == 10 and  (cond_5m == true)
// case_15m = trade_reference_numeral == 15 and  (cond_5m == true or cond_10m == true)
// case_30m = trade_reference_numeral == 30 and  (cond_5m == true or cond_10m == true or cond_15m == true)
// case_1 = trade_reference_numeral == 60 and  (cond_5m == true or cond_10m == true or cond_15m == true or cond_30m == true)
// or squeeze_ready == 60)// or cond_2H == true or cond_3H == true or cond_4H == true)

// or cond_2H == true or cond_3H == true or cond_4H == true)

// or cond_3H == true or cond_4H == true)

case_1 = trade_reference_numeral_60 == true //and (squeeze_ready_45 == true or squeeze_ready_30 == true or squeeze_ready_15 == true or squeeze_ready_10 == true or squeeze_ready_5)// == true or squeeze_ready_180 == true or squeeze_ready_210 == true)// or cond_4H == true)
case_2 = trade_reference_numeral_45 == true //and (squeeze_ready_30 == true or squeeze_ready_15 == true or squeeze_ready_10 == true or squeeze_ready_5)
case_3 = trade_reference_numeral_30 == true //and (squeeze_ready_15 == true or squeeze_ready_10 == true or squeeze_ready_5)
case_4 = trade_reference_numeral_15 == true //and (squeeze_ready_10 == true or squeeze_ready_5)
case_5 = trade_reference_numeral_10 == true //and (squeeze_ready_45 == true or squeeze_ready_30 == true or squeeze_ready_15 == true or squeeze_ready_10 == true or squeeze_ready_5)// == true or squeeze_ready_180 == true or squeeze_ready_210 == true)// or cond_4H == true)
case_6 = trade_reference_numeral_5 == true //and (squeeze_ready_30 == true or squeeze_ready_15 == true or squeeze_ready_10 == true or squeeze_ready_5)
case_7 = trade_reference_numeral_3 == true and non_red_check == true
case_8 = trade_reference_numeral_2 == true and non_red_check == true
// case_5 = trade_reference_numeral_120 == true and (squeeze_ready_30 == true or squeeze_ready_60 == true or squeeze_ready_90 == true)
// case_6 = trade_reference_numeral_90 == true and (squeeze_ready_30 == true or squeeze_ready_60 == true)
// case_7 = trade_reference_numeral_60 == true and (squeeze_ready_30 == true)

// or squeeze_ready == 60)// or cond_2H == true or cond_3H == true or cond_4H == true)
// or squeeze_ready == 60)// or cond_2H == true or cond_3H == true or cond_4H == true)

// case_5 = trade_reference_numeral == 360 and (squeeze_ready == 30 or squeeze_ready == 60 or squeeze_ready == 120 or squeeze_ready == 180 or squeeze_ready == 240)
// case_6 = trade_reference_numeral == 480 and (squeeze_ready == 30 or squeeze_ready == 60 or squeeze_ready == 120 or squeeze_ready == 180 or squeeze_ready == 240)// or cond_6H == true)
// case_7 = trade_reference_numeral == 720 and  (cond_2H == true or cond_3H == true or cond_4H == true or cond_6H == true or cond_8H == true)
// case_8 = trade_reference_numeral == 1440 and (cond_4H == true or cond_6H == true or cond_8H == true or cond_12H == true)

case_1_binary = case_1 ? 1:0
case_2_binary = case_2 ? 1:0
case_3_binary = case_3 ? 1:0
case_4_binary = case_4 ? 1:0
case_5_binary = case_5 ? 1:0
case_6_binary = case_6 ? 1:0
case_7_binary = case_7 ? 1:0
case_8_binary = case_8 ? 1:0
// case_5_binary = case_5 ? 1:0
// case_6_binary = case_6 ? 1:0
//case_7_binary = case_7 ? 1:0
//case_8_binary = case_8 ? 1:0

//(cond_30m == true or cond_1H == true or cond_2H == true or cond_3H == true or cond_4H == true)
// case_9 = trade_reference_numeral == 14400 and (cond_D == true)
// case_10 = trade_reference_numeral == 10080 and (cond_D == true)
//case_11 = trade_reference_numeral == 43200 and (cond_5m == true or cond_10m == true or cond_15m == true or cond_30m == true or cond_1H == true or cond_2H == true or cond_3H == true or cond_4H == true or cond_6H == true or cond_8H == true or cond_12H == true or cond_D == true or cond_10D == true or cond_W == true)

//global_low = 
var size=0.0
var resistance_search=0 
var entry_time=0
var close_time=0
var resistance_to_breach=0.0
var reset=0
//var stop:= 
// size:=240
// //var quantity = math.floor(initial_capital/close)
// var quantity = close*size
// var initial_quantity = quantity
// // var quantity_2=0.0
// var exit_size = 0.0
// // // quantity_2:=close* size

// //exit_size:=math.floor(initial_quantity/3)
// exit_size:=close*(size/3)

// exit_size:=quantity_2/3

//var quantity=2
squeeze_check = (SC_10m != color.green) or (SC_5m != color.green) or (SC_4m != color.green) or (SC_3m != color.green) or (SC_2m != color.green) or (SC_1m != color.green) //or (SC_1m != color.green)

momentum_check   = HC_10m == #CCCC00ff  or HC_5m == #CCCC00ff or  HC_4m == #CCCC00ff or HC_3m == #CCCC00ff or HC_2m == #CCCC00ff or HC_1m == #CCCC00ff or HC_1m == color.aqua or HC_2m== color.aqua or HC_3m == color.aqua or HC_4m == color.aqua or HC_5m == color.aqua or HC_10m == color.aqua

momentum_check_2   = HC_5m != color.red or  HC_4m != color.red or HC_3m != color.red or HC_2m != color.red or HC_1m != color.red 

if SP_1m == color.gray and SP_1m_previous == color.green
    if low_1m_previous > support_enter_1m
        support_direction:=true
        ready1:=1
        support_enter:= low_1m_previous
        support_enter_1m:= low_1m_previous
    
if SP_1m == color.gray and SP_1m_previous == color.green
    if low_1m_previous < support_enter_1m
        support_direction:=false
        ready1:=0
        support_enter:= low_1m_previous
        support_enter_1m:= low_1m_previous

if SP_2m == color.gray and SP_2m_previous == color.green
    if low_2m_previous > support_enter_5m
        support_direction:=true
        ready2:=1
        support_enter:= low_2m_previous
        support_enter_2m:= low_2m_previous
    
if SP_2m == color.gray and SP_2m_previous == color.green
    if low_2m_previous < support_enter_5m
        support_direction:=false
        ready2:=0
        support_enter:= low_2m_previous
        support_enter_2m:= low_2m_previous

if SP_3m == color.gray and SP_3m_previous == color.green
    if low_3m_previous > support_enter_3m
        support_direction:=true
        ready3:=1
        support_enter:= low_3m_previous
        support_enter_3m:= low_3m_previous
    
if SP_3m == color.gray and SP_3m_previous == color.green
    if low_3m_previous < support_enter_3m
        support_direction:=false
        ready3:=0
        support_enter:= low_3m_previous
        support_enter_1m:= low_3m_previous

if SP_4m == color.gray and SP_4m_previous == color.green
    if low_4m_previous > support_enter_4m
        support_direction:=true
        ready4:=1
        support_enter:= low_4m_previous
        support_enter_4m:= low_4m_previous
    
if SP_4m == color.gray and SP_4m_previous == color.green
    if low_4m_previous < support_enter_4m
        support_direction:=false
        ready4:=0
        support_enter:= low_4m_previous
        support_enter_4m:= low_4m_previous

if SP_5m == color.gray and SP_5m_previous == color.green
    if low_5m_previous > support_enter_5m
        support_direction:=true
        ready5:=1
        support_enter:= low_5m_previous
        support_enter_5m:= low_5m_previous
    
if SP_5m == color.gray and SP_5m_previous == color.green
    if low_5m_previous < support_enter_5m
        support_direction:=false
        ready5:=0
        support_enter:= low_5m_previous
        support_enter_5m:= low_5m_previous    

if SP_15m == color.gray and SP_15m_previous == color.green
    if low_15min_previous > support_enter_15m
        support_direction:=true
        ready15:=1
        support_enter:= low_15min_previous
        support_enter_15m:= low_15min_previous
    
if SP_15m == color.gray and SP_15m_previous == color.green
    if low_15min_previous < support_enter_15m
        support_direction:=false
        ready15:=0
        support_enter:= low_15min_previous
        support_enter_15m:= low_15min_previous   

// if SP_30m == color.gray and SP_30min_previous == color.green
//     if low_30min_previous > support_enter_30m
//         support_direction:=true
//         ready30:=1
//         support_enter:= low_30min_previous
//         support_enter_15m:= low_30min_previous
    
// if SP_30m == color.gray and SP_30m_previous == color.green
//     if low_30min_previous < support_enter_30m
//         support_direction:=false
//         ready30:=0
//         support_enter:= low_30min_previous
//         support_enter_30m:= low_30min_previous 

// if strategy.position_size==0 and na(t1) ==false and time_cond and timenow > exit_time + 2 //and support_direction == true//and ((SP_3m == color.green or SP_3m_previous == color.green) or (SP_4m == color.green or SP_4m_previous == color.green) or (SP_5m == color.green or SP_5m_previous == color.green) or (SP_10m == color.green or SP_10m_previous == color.green) or (SP_15m == color.green or SP_15m_previous == color.green) or (SP_30m == color.green or SP_30m_previous== color.green) or (SP_1H == color.green or SP_1H_previous== color.green)) //and squeeze_check == true and momentum_check == true //and close_5min > Ema_21_30m // and setup == 1

    // if SP_1m == color.gray and SP_1m_previous == color.green //and support_entry_5_valid == true
    
    //     ready:=1    
    //     support_enter:= low_1min_previous

    // if SP_1m == color.gray and SP_1m_previous == color.green and close > low_to_breach_5min //and low_to_breach_1min > low_to_breach_5min //and support_entry_5_valid == true
    
    //     ready1:=1    
    //     support_enter:= low_1min_previous      

    // if SP_2m == color.gray and SP_2m_previous == color.green and close > low_to_breach_5min//and low_to_breach_2min > low_to_breach_5min //and support_entry_5_valid == true
    
    //     ready2:=1
    //     support_enter:= low_2min_previous 

    // if SP_3m == color.gray and SP_3m_previous == color.green and close > low_to_breach_5min//and low_to_breach_3min > low_to_breach_5min //and support_entry_5_valid == true
    
    //     ready3:=1 
    //     support_enter:= low_3min_previous 

    // if SP_4m == color.gray and SP_4m_previous == color.green and close > low_to_breach_5min //and low_to_breach_4min > low_to_breach_5min//and support_entry_5_valid == true
    
    //     ready4:=1    
    //     support_enter:= low_4min_previous 

    // if SP_5m == color.gray and SP_5m_previous == color.green and close > low_to_breach_5min//and low_to_breach_5min > low_to_breach_5min//and support_entry_5_valid == true
    
    //     ready5:=1    
    //     support_enter:= low_5min_previous                         

    // // if (SP_1H == color.green or SP_1H_previous== color.green) and atr_to_use == 0
    // //     atr_to_use:= atr_1H    

    // // if (SP_30m == color.green or SP_30m_previous== color.green) and atr_to_use == 0
    // //     atr_to_use:= atr_30m 
    
    // // if (SP_15m == color.green or SP_15m_previous== color.green) and atr_to_use == 0
    // //     atr_to_use:= atr_15m

    // // if (SP_10m == color.green or SP_10m_previous== color.green) and atr_to_use == 0
    // //     atr_to_use:= atr_10m

    // if (SP_5m == color.green or SP_5m_previous== color.green) and atr_to_use == 0
    //     atr_to_use:= math.round(atr_15m,0)   

    // if (SP_4m == color.green or SP_4m_previous== color.green) and atr_to_use == 0
    //     atr_to_use:= math.round(atr_15m,0)  

    // if (SP_3m == color.green or SP_3m_previous== color.green) and atr_to_use == 0
    //     atr_to_use:= math.round(atr_15m,0)                                   

    // if SP_3m == color.gray and SP_3m_previous == color.green //and support_entry_5_valid == true
    
    //     ready:=1    
    //     support_enter:= low_3min_previous 

    // if SP_4m == color.gray and SP_4m_previous == color.green //and support_entry_5_valid == true
    
    //     ready:=1    
    //     support_enter:= low_4min_previous 

    // if SP_5m == color.gray and SP_5m_previous == color.green //and support_entry_5_valid == true
    
    //     ready:=1    
    //     support_enter:= low_5min_previous

// if ready1 ==1 and close_1min < low_to_breach_5min
//     ready1:=0
// if ready2 ==1 and close_1min < low_to_breach_5min
//     ready2:=0  
// if ready3 ==1 and close_1min < low_to_breach_5min
//     ready3:=0  
// if ready4 ==1 and close_1min < low_to_breach_5min
//     ready4:=0  
// if ready5 ==1 and close_1min < low_to_breach_5min
//     ready5:=0  
//or ready2==1

//(SP_1m == color.gray and SP_1m_previous == color.green)
//(SP_2m == color.gray and bar_closed_2m and SP_2m_previous == color.green)

var mid_support=false

//close > support_enter_5m

//or (SP_1m == color.gray and SP_1m_previous==color.green and close > close[1] and close[1]>close[2]))

//SP_2m == color.gray and bar_closed_2m and SP_2m_previous == color.green

mid_support:= (SP_5m==color.green or SP_5m_previous==color.green) and (SP_10m!=color.green) and (SP_15m!=color.green)

if (ready5==1 and ready2==1) and ((SP_2m == color.gray and bar_closed_2m and SP_2m_previous == color.green)) and (mid_support) and (strategy.position_size == 0) and na(t1) == false and time_cond and timenow > exit_time + 10 and entry_fired == 0 //and momentum_check == true //and close > low_to_breach_5min

    if (3>2)//SP_1m == color.gray and SP_1m_previous == color.green //(2>1)//(SP_1m == color.gray and SP_1m_previous== color.green) or (SP_2m == color.gray and SP_2m_previous== color.green) or (SP_3m == color.gray and SP_3m_previous== color.green) or (SP_4m == color.gray and SP_4m_previous== color.green) or (SP_5m == color.gray and SP_5m_previous== color.green)//case_1 == true or case_2 == true or case_3 == true or case_4 == true or case_5 == true or case_6==true or case_7==true or case_8==true 
        if (3>2) //(SP_2m == color.gray and SP_2m_previous == color.green) or (SP_3m == color.gray and SP_3m_previous == color.green) or (SP_4m == color.gray and SP_4m_previous == color.green) or (SP_5m == color.gray and SP_5m_previous == color.green)//or case_1 == true or case_30m == true or case_15m == true or case_10m == true //or case_9 == true or case_10 == true //or case_11 == true //or case8 == true
        
//         pre_conditions_met:=1

// var next_entry_support=0
// var next_entry_squeeze=0
// var main_trade=0

// if main_trade==1

//     if SP_1m == color.gray //and //timenow > entry_time and timenow > support_check_30
//         support_re_entry_1_valid := true  
//     if SP_2m == color.gray //and //timenow > entry_time and timenow > support_check_30
//         support_re_entry_2_valid := true    
//     if SP_3m == color.gray //and //timenow > entry_time and timenow > support_check_30
//         support_re_entry_3_valid := true    
//     if SP_4m == color.gray //and //timenow > entry_time and timenow > support_check_30
//         support_re_entry_4_valid := true    
//     if SP_5m == color.gray //and //timenow > entry_time and timenow > support_check_30
//         support_re_entry_5_valid := true            
        

// if pre_conditions_met==1 and bias_check == true and strategy.position_size==0 and main_trade==1 and timenow > exit_time +2

//     if (SP_1m == color.gray and SP_1m_previous == color.green and support_re_entry_1_valid==true) or (SP_2m == color.gray and SP_2m_previous == color.green and support_re_entry_2_valid==true) or (SP_3m == color.gray and SP_3m_previous == color.green and support_re_entry_3_valid==true) or (SP_4m == color.gray and SP_4m_previous == color.green and support_re_entry_4_valid==true) or (SP_5m == color.gray and SP_5m_previous == color.green and support_re_entry_5_valid==true)
    
//         next_entry_support:=1
//         support_re_entry_1_valid:=false
//         support_re_entry_2_valid:=false
//         support_re_entry_3_valid:=false
//         support_re_entry_4_valid:=false
//         support_re_entry_5_valid:=false
        
// if pre_conditions_met==1 and bias_check == true and strategy.position_size==0 and main_trade==1 and timenow > exit_time +2

//     if (SC_1m != color.green and HC_1m == #CCCC00ff) or (SC_2m != color.green and HC_2m == #CCCC00ff) or (SC_3m != color.green and HC_3m == #CCCC00ff) or (SC_4m != color.green and HC_4m == #CCCC00ff) or (SC_5m != color.green and HC_5m == #CCCC00ff)
    
//         next_entry_squeeze:=1        
            
        
// if (pre_conditions_met==1 and bias_check == true and strategy.position_size==0 and main_trade==0) //or (main_trade==1 and bias_check==true and next_entry_support==1 and next_entry_squeeze==1 and strategy.position_size==0)     
        
//         //, limit= closeENTER-LONG_FTX-US_ETH/USD_ETH-FTX-Sawyer_1M_cbeefa1cb36a0b96
        //strategy.entry(id="buy",direction=strategy.long, qty=quantity)//, comment="ENTER-LONG_FTX-US_AAVE/USD_AAVE-FTX-LLC-Sawyer-7-9_1M_d6c9515e29a0c21f") //, comment = "ENTER-LONG_FTX-US_AVAX/USD_AVAX-FTX-S3-Mid_1M_6a7fe98fe6b23335")// Squeeze_5m_reference_long_Live2_High_build_on_It_5_16//, stop= profit_target_long
        //if support_on_8H == color.green and stop == 0
        //support_stop:=global_low_W
            atr_to_use:= math.round(atr_5m,0) 
            strategy.order(id="order", direction=strategy.long, qty=quantity, limit=close)//-math.round(.20*atr_15m,0))
            stop_loss_final:= math.round(low_to_breach_2min) - math.round(.20*atr_5m,0)//low_5min - (2.5*atr_to_use) 
        //strategy.entry(id="buy",direction=strategy.long, qty=quantity)//, comment="ENTER-LONG_FTX-US_ETH/USD_ETH-FTX-Sawyer_1M_cbeefa1cb36a0b96") //, comment = "ENTER-LONG_FTX-US_AVAX/USD_AVAX-FTX-S3-Mid_1M_6a7fe98fe6b23335")// Squeeze_5m_reference_long_Live2_High_build_on_It_5_16//, stop= profit_target_long
        
            //alert('{"AlertType":"'+alert_type+'","Market":"'+trade_symbol+'", "Side":"buy", "Size":' + str.tostring(quantity)+',"OrderType":"market","TradeType":"long"'+'}')
            
            //alert('{"AlertType":"'+alert_type+'","Market":"'+trade_symbol+'", "Side":"buy", "Size":' + str.tostring(quantity)+',"OrderType":"limit","LimitPrice":'+str.tostring(close-2)+',"TradeType":"long"'+'}')
            alert('{"AlertType":"TRADE", "TradeType":"long", "Market":"'+trade_symbol+'","OrderType": "OSO","Side":"buy","Size":' + str.tostring(quantity/2)+',"LimitPrice": '+str.tostring(close)+', "TPLimitPrice": '+str.tostring(close+math.round(.30*atr_15m,0))+', "SLStopPrice": '+str.tostring(stop_loss_final-5)+'}')
            alert('{"AlertType":"TRADE", "TradeType":"long", "Market":"'+trade_symbol+'","OrderType": "OSO","Side":"buy","Size":' + str.tostring(quantity/2)+',"LimitPrice": '+str.tostring(close)+', "TPLimitPrice": '+str.tostring(close+math.round(.40*atr_15m,0))+', "SLStopPrice": '+str.tostring(stop_loss_final-5)+'}')
            //alert('{"AlertType":"TRADE", "TradeType":"long", "Market":"'+trade_symbol+'","OrderType": "OSO","Side":"buy","Size":' + str.tostring(quantity/2)+',"LimitPrice": '+str.tostring(close-atr_to_use)+', "TPLimitPrice": '+str.tostring(close+atr_to_use)+', "SLStopPrice": '+str.tostring(stop_loss_final)+'}')
        
        //alert('{"AlertType":"'+alert_type+'","Market":"'+trade_symbol+'", "Side":"buy", "Size":' + str.tostring(quantity)+'}')
            resistance_hit:=0
            unused_resistance:=0
            last_resistance_exit:=0
            red_fired_support_flag:=0
            entry_fired:=1
            exit_fired:=0
            atr_to_use:=0
            breach_count:=0
            support_stop:=support_enter - 5 // low_to_breach_15min//
            last_support_exit:=0
            profit_stop:=0
            stop_fixed:=0
            exit_time:=0
            setup:=0
            ready:=0
            // ready1:=0
            // ready2:=0
            // ready3:=0
            // ready4:=0
            // ready5:=0
        //main_trade:=1
            size:=strategy.position_size
            support_entry_5_valid:=false
            support_entry_10_valid:=false
            support_entry_15_valid:=false
            support_entry_30_valid:=false
            support_entry_45_valid:=false
            support_entry_60_valid:=false
            support_entry_120_valid:=false         
        //next_entry_support:=0
        //next_entry_squeeze:=0
        
        
        //stop:= low_8H * .995
        // if support_on_12H == color.green and stop == 0
        //     stop:= low_12H * .995            
            entry_price_long:=strategy.opentrades.entry_price(strategy.opentrades - 1)
        //profit_target_long := entry_price_long * 10
            profit_target_long := entry_price_long + 15 //(atr_multiplier * atr_to_use)
        //quantity:= strategy.position_size
        //profit_target_long := entry_price_long * 10    
        //squeeze_activated := 0
            ready:=0
            set:=0
        // //squeeze_fired:=0
        //entry_price_long:=close
        // micro_support_live_count:=0
        // resistance_search:=1
            entry_time := timenow
//         trade_reference_numeral_60 := false
//         trade_reference_numeral_90 := false
//         trade_reference_numeral_120 := false
//         trade_reference_numeral_150 := false
//         trade_reference_numeral_180 := false
//         trade_reference_numeral_210 := false
//         trade_reference_numeral_240 := false
// // trade_reference_numeral_360 := false
// // trade_reference_numeral_60 := false
//         squeeze_ready_30 :=false
//         squeeze_ready_60 :=false
//         squeeze_ready_90 :=false
//         squeeze_ready_120 :=false
//         squeeze_ready_150 :=false
//         squeeze_ready_180 :=false
//         squeeze_ready_210 :=false
        //reset:=0
        //quantity:=math.floor(strategy.position_size/3)
        //profit_target_long := entry_price_long + (atr_multiplier * atr_to_use)
            support_entry_10_valid:=false
            support_entry_15_valid:=false
            support_entry_30_valid:=false
            support_entry_45_valid:=false
            support_entry_60_valid:=false
        // support_entry_180_valid:=false
        // support_entry_210_valid:=false
        // support_entry_240_valid:=false
        // support_entry_360_valid:=false
        // support_entry_480_valid:=false

open_position = strategy.position_size

if (strategy.position_size > 0) //and profit_target_long==0
    entry_price_long:=strategy.opentrades.entry_price(strategy.opentrades - 1)
    //profit_target_long := entry_price_long * 10
    //profit_target_long := entry_price_long * 10
    profit_target_long := entry_price_long + 10
    //profit_target_long := entry_price_long + (atr_multiplier * atr_to_use)
    //ready:=0
    //set:=0
    //squeeze_fired:=0
    //entry_price_long:=close
    //micro_support_live_count:=0
    //resistance_search:=1
    //entry_time:= timenow

//if (strategy.position_size > 0)
var resistance_look_out_time=0
var exit_1_time = 0
var exit_2_time = 0
var exit_3_time = 0
var exit_4_time = 0
var exit_5_time = 0
var exit_10_time = 0
var exit_15_time = 0
var exit_30_time = 0
var exit_45_time = 0
var exit_60_time = 0
var exit_90_time = 0
var exit_120_time = 0
var exit_150_time = 0
var exit_180_time = 0
var exit_210_time = 0
var exit_240_time = 0
// var exit_150_time = 0
// var exit_180_time = 0
// var exit_210_time = 0
// var exit_240_time = 0
// var exit_360_time = 0
// var exit_480_time = 0
var exit_1=false
var exit_2=false
var exit_3=false
var exit_4=false
var exit_5=false
var exit_10=false
var exit_15=false
var exit_30=false
var exit_45=false
var exit_60=false
var exit_90=false
var exit_120=false
var exit_150=false
var exit_180=false
var exit_210=false
var exit_240=false
// var exit_150=false
// var exit_180=false
// var exit_210=false
// var exit_240=false
// var exit_360=false
// var exit_480=false
// var exit_60_time = 0
// var exit_30_time = 0
// var exit_60_time = 0

    

// if (RS_15m == color.red) and strategy.position_size > 0 and (timenow > (exit_15_time + (15*60*1000))) and timenow > entry_time + 2
//     exit_15 := true
//     exit_15_time := timenow

if timenow > entry_time + 4 and timenow > exit_time and close > entry_price_long + 5

// Add 5 minute; 

    if (RS_1m == color.red) and strategy.position_size > 0 and timenow > entry_time and timenow > resistance_look_out_time  and timenow > exit_time    //and close > entry_price_long //and (timenow >  (exit_30_time + (30*60*1000))) 
        exit_1 := true
        exit_1_time := timenow
        last_resistance_exit:=1

    if (RS_2m == color.red) and strategy.position_size > 0 and timenow > entry_time and timenow > resistance_look_out_time  and timenow > exit_time    //and close > entry_price_long //and (timenow >  (exit_30_time + (30*60*1000))) 
        exit_2 := true
        exit_2_time := timenow
        last_resistance_exit:=2   

    if (RS_3m == color.red) and strategy.position_size > 0 and timenow > entry_time and timenow > resistance_look_out_time  and timenow > exit_time    //and close > entry_price_long //and (timenow >  (exit_30_time + (30*60*1000))) 
        exit_3 := true
        exit_3_time := timenow
        last_resistance_exit:=3

    if (RS_5m == color.red) and strategy.position_size > 0 and timenow > entry_time and timenow > resistance_look_out_time  and timenow > exit_time    //and close > entry_price_long //and (timenow >  (exit_30_time + (30*60*1000))) 
        exit_5 := true
        exit_5_time := timenow
        last_resistance_exit:=5

    if (RS_10m == color.red) and strategy.position_size > 0 and timenow > entry_time and timenow > resistance_look_out_time  and timenow > exit_time    //and close > entry_price_long //and (timenow >  (exit_30_time + (30*60*1000))) 
        exit_10 := true
        exit_10_time := timenow
        last_resistance_exit:=10
        
    if (RS_15m == color.red) and strategy.position_size > 0 and timenow > entry_time and timenow > resistance_look_out_time  and timenow > exit_time    //and close > entry_price_long //and (timenow >  (exit_30_time + (30*60*1000))) 
        exit_15 := true
        exit_15_time := timenow
        last_resistance_exit:=15
        
    if (RS_30m == color.red) and strategy.position_size > 0 and timenow > entry_time and timenow > resistance_look_out_time  and timenow > exit_time    //and close > entry_price_long //and (timenow >  (exit_30_time + (30*60*1000))) 
        exit_30 := true
        exit_30_time := timenow
        last_resistance_exit:=30
        
    // if (RS_45m == color.red) and strategy.position_size > 0 and timenow > entry_time and timenow > resistance_look_out_time  and timenow > exit_time    //and close > entry_price_long //and (timenow >  (exit_30_time + (30*60*1000))) 
    //     exit_45 := true
    //     exit_45_time := timenow
    //     last_resistance_exit:=45     
        
    if (RS_1H == color.red) and strategy.position_size > 0 and timenow > entry_time and timenow > resistance_look_out_time  and timenow > exit_time   //and (timenow > (exit_60_time + (60*60*1000))) // and close > entry_price_long
        exit_60 := true
        exit_60_time := timenow
        last_resistance_exit:=60  
        
    // if (RS_2H == color.red) and strategy.position_size > 0 and timenow > entry_time   and timenow > resistance_look_out_time  and timenow > exit_time   //and (timenow > (exit_60_time + (60*60*1000))) // and close > entry_price_long
    //     exit_120 := true
    //     exit_12_time := timenow
    //     last_resistance_exit:=60          
        //last_resistance_exit:=30
    if (RS_1_5H == color.red) and strategy.position_size > 0 and timenow > entry_time   and timenow > resistance_look_out_time  and timenow > exit_time   //and (timenow > (exit_60_time + (60*60*1000))) // and close > entry_price_long
        exit_90 := true
        exit_90_time := timenow
        last_resistance_exit:=90      
    if (RS_2H ==  color.red) and strategy.position_size > 0  and timenow > entry_time   and timenow > resistance_look_out_time  and timenow > exit_time   //and (timenow > (exit_120_time + (120*60*1000)))
        exit_120 := true
        exit_120_time := timenow
        last_resistance_exit:=120  
    if (RS_2_5H == color.red) and strategy.position_size > 0 and timenow > entry_time   and timenow > resistance_look_out_time  and timenow > exit_time   //and (timenow > (exit_60_time + (60*60*1000))) // and close > entry_price_long
        exit_150 := true
        exit_150_time := timenow
        last_resistance_exit:=150  
    if (RS_3H ==  color.red) and strategy.position_size > 0  and timenow > entry_time   and timenow > resistance_look_out_time  and timenow > exit_time  //and (timenow > (exit_180_time + (180*60*1000)))
        exit_180 := true
        exit_180_time := timenow
        last_resistance_exit:=180  
    if (RS_3_5H == color.red) and strategy.position_size > 0 and timenow > entry_time   and timenow > resistance_look_out_time  and timenow > exit_time   //and (timenow > (exit_60_time + (60*60*1000))) // and close > entry_price_long
        exit_210 := true
        exit_210_time := timenow
        last_resistance_exit:=210      
    if (RS_4H ==  color.red) and strategy.position_size > 0  and timenow > entry_time  and timenow > resistance_look_out_time  and timenow > exit_time   //and (timenow > (exit_240_time + (240*60*1000)))
        exit_240 := true
        exit_240_time := timenow
        last_resistance_exit:=240    
    // if (RS_6H ==  color.red) and strategy.position_size > 0  and timenow > entry_time  and timenow > resistance_look_out_time  and timenow > exit_time   //and (timenow > (exit_360_time + (360*60*1000)))
    //     exit_360 := true
    //     exit_360_time := timenow
    //     last_resistance_exit:=360    
    // if (RS_8H ==  color.red) and strategy.position_size > 0  and timenow > entry_time and timenow > resistance_look_out_time  and timenow > exit_time  //and (timenow > (exit_480_time + (480*60*1000)))
    //     exit_480 := true
    //     exit_480_time := timenow
    //     last_resistance_exit:=480    
//or exit_15 == true
//

if (exit_1 == true or exit_2 == true or exit_5 == true or exit_10 == true  or  exit_30 == true or exit_60 == true or exit_90 == true or exit_120 == true) and strategy.position_size > 0 and last_used_resistance_exit!=last_resistance_exit and timenow > entry_time + 1 //or exit_180 == true or exit_210 == true or exit_240 == true or exit_360 == true or exit_480 == true)// // or exit_150 == true or exit_180 == true or exit_210 == true or exit_240 == true
    unused_resistance:=1
    resistance_hit:=1
    resistance_look_out_time:= timenow
    last_used_resistance_exit:=last_resistance_exit
    
//    exit_15:= false
    exit_5 := false
    exit_10 := false
    exit_15 := false
    exit_30 := false    
    exit_45 := false
    exit_60 := false
    exit_90 := false    
    exit_120 := false    
    exit_150 := false
    exit_180 := false
    exit_210 := false
    exit_240 := false    
    
//exit_15 = exit_15 ? 1:0
exit_10_binary = exit_10 ? 1:0
exit_15_binary = exit_15 ? 1:0
exit_30_binary = exit_30 ? 1:0
exit_45_binary = exit_45 ? 1:0
exit_60_binary = exit_60 ? 1:0
// exit_480_binary = exit_480 ? 1:0

// exit_15 = (HC_15m == #2962ff and squeeze_ready == 30) or (RS_15m == color.red)
// exit_30 = (HC_30m == #2962ff and squeeze_ready == 30) or (RS_30m == color.red)
// exit_60 = (HC_1H == #2962ff  and squeeze_ready == 60) or (RS_1H == color.red)
// exit_120 = (HC_2H == #2962ff and squeeze_ready == 120) or (RS_2H ==  color.red)
// exit_180 = (HC_3H == #2962ff and squeeze_ready == 180) or (RS_3H ==  color.red)
// exit_240 = (HC_4H == #2962ff and squeeze_ready == 240) or (RS_4H ==  color.red)
// exit_360 = (HC_6H == #2962ff and squeeze_ready == 360) or (RS_6H ==  color.red)
// exit_480 = (HC_8H == #2962ff and squeeze_ready == 480) or (RS_8H ==  color.red)

// mom_exit=0
// if (HC_15m == #2962ff and squeeze_ready == 30) or (HC_30m == #2962ff and squeeze_ready == 30) or (HC_1H == #2962ff  and squeeze_ready == 60) or (HC_2H == #2962ff and squeeze_ready == 120) or (HC_3H == #2962ff and squeeze_ready == 180) or (HC_4H == #2962ff and squeeze_ready == 240)
//     mom_exit

//var reset=0    
// if (strategy.position_size > 0) and timenow > entry_time + 1 and timenow > exit_time // and close > resistance_to_breach // and timenow > exit_time + 2 // and squeeze_ready > 0 
    
//     if  (unused_resistance==1) and close > entry_price_long + 5 //and strategy.position_size == quantity

//         strategy.order(id="order", direction=strategy.short, qty=open_position)
//         //strategy.close(id="buy", qty= exit_size)
        
        
//         alert('{"AlertType":"'+alert_type+'","Market":"'+trade_symbol+'", "Side":"sell", "Size":' + str.tostring(open_position)+',"OrderType":"market","TradeType":"long"'+'}')
//         //alert('{"AlertType":"'+alert_type+'","Market":"'+trade_symbol+'", "Side":"sell", "Size":' + str.tostring(exit_size)+'}')        
//         //strategy.close(id="buy", qty= exit_size)//, comment="EXIT-LONG_FTX-US_AAVE/USD_AAVE-FTX-LLC-Sawyer-7-9_1M_d6c9515e29a0c21f") //,qty= exit_size  // math.floor(strategy.position_size/3) // , qty= exit_size
//         //exit_time := timenow
//         unused_resistance:=0
//         condition1:=1
//         //resistance_hit:=1
//         //exit_time:=timenow
//         if (2>1)
//         //if (strategy.position_size==0)
//             ready:=0
//             set:=0
//             profit_stop:=0
//             loss_stop:=0
//             //support_stop:=0
//             resistance_exit:=0
//             micro_support_live_count:=0
//             macro_support_live_count:=0
//             trade_reference_numeral:=0
//             bias1:=0
//             bias2:=0
//             bias3:=0
//             //squeeze_ready:= 0
//             //reset:=0
//             macro_support_live_count:=0
//             micro_support_live_count:=0
//             //resistance_hit:=0
//             reset:=0
//             condition1:=0
//             //exit_time:=timenow
//             //last_resistance_exit:=0
//             bias1:=0
//             bias2:=0
//             bias3:=0
//             //resistance_hit:=0
//             //exit_time:=timenow
//             // RS_30m_valid := false
//             // RS_1H_valid := false
//             // RS_2H_valid := false
//             // RS_3H_valid := false
//             // RS_4H_valid := false
//             support_stop_5_valid := false
//             support_stop_10_valid := false
//             support_stop_15_valid := false
//             support_stop_30_valid := false
//             support_stop_45_valid := false
//             support_stop_60_valid := false
//             support_stop_120_valid := false
//             // support_stop_360_valid := false
//             // support_stop_480_valid := false
//             exit_time:=timenow
//             trade_reference_numeral_15 := false
//             trade_reference_numeral_30 := false
//             trade_reference_numeral_45 := false
//             trade_reference_numeral_60 := false
//             // trade_reference_numeral_180 := false
//             // trade_reference_numeral_210 := false
//             // trade_reference_numeral_240 := false
//     // trade_reference_numeral_360 := false
//     // trade_reference_numeral_60 := false
//             squeeze_ready_5 :=false
//             squeeze_ready_10 :=false
//             squeeze_ready_15 :=false
//             squeeze_ready_30 :=false
//             squeeze_ready_45 :=false
//             // squeeze_ready_60 :=false
//             // squeeze_ready_210 :=false
//             support_enter:=0
//             setup:=0
//             //support_stop:=0
//             //last_resistance_exit:=0
                    
        
//         // reset:=1
//         //set:=0
            
// if (strategy.position_size > 0)  and close < entry_price_long and timenow > entry_time + 5  // and close > resistance_to_breach // and timenow > exit_time + 2 // and squeeze_ready > 0 
    
    // if  unused_resistance==1 and (loss_support_hit==1 or resistance_exit==1) and close < entry_price_long //and resistance_hit==1 and timenow > entry_time + 4//and strategy.position_size < quantity
    //     strategy.close(id="buy")//, comment="EXIT-LONG_FTX-US_AAVE/USD_AAVE-FTX-LLC-Sawyer-7-9_1M_d6c9515e29a0c21f")  // math.floor(strategy.position_size/3) Complete Position Square Off
    //     //exit_time := timenow
    //     unused_resistance:=0
    //     unused_resistance:=0
    //     condition1:=1
    //     //resistance_hit:=1
    //     //exit_time:=timenow
    //     if (2>1)
    //     //if (strategy.position_size==0)
    //         ready:=0
    //         set:=0
    //         profit_stop:=0
    //         loss_stop:=0
    //         resistance_exit:=0
    //         micro_support_live_count:=0
    //         loss_support_hit:=0
    //         macro_support_live_count:=0
    //         trade_reference_numeral:=0
    //         //mid_micro_bias_long:=0
    //         //mid_macro_bias_long:=0
    //         squeeze_ready:= 0
    //         //reset:=0
    //         macro_support_live_count:=0
    //         micro_support_live_count:=0
    //         //resistance_hit:=0
    //         reset:=0
    //         condition1:=0
    //         //exit_time:=timenow
    //         //last_resistance_exit:=0
    //         bias1:=0
    //         bias2:=0
    //         bias3:=0
    //         //resistance_hit:=0
    //         //exit_time:=timenow
    //         // RS_30m_valid := false
    //         // RS_1H_valid := false
    //         // RS_2H_valid := false
    //         // RS_3H_valid := false
    //         // RS_4H_valid := false
    //         support_stop_5_valid := false
    //         support_stop_10_valid := false
    //         support_stop_15_valid := false
    //         support_stop_30_valid := false
    //         support_stop_45_valid := false
    //         support_stop_60_valid := false
    //         support_stop_120_valid := false
    //         exit_time:=timenow
    //         trade_reference_numeral_15 := false
    //         trade_reference_numeral_30 := false
    //         trade_reference_numeral_45 := false
    //         trade_reference_numeral_60 := false
    //         // trade_reference_numeral_180 := false
    //         // trade_reference_numeral_210 := false
    //         // trade_reference_numeral_240 := false
    // // trade_reference_numeral_360 := false
    // // trade_reference_numeral_60 := false
    //         squeeze_ready_5 :=false
    //         squeeze_ready_10 :=false
    //         squeeze_ready_15 :=false
    //         squeeze_ready_30 :=false
    //         squeeze_ready_45 :=false
    //         support_enter:=0
    //         setup:=0
    //         last_support_exit:=0
    //         last_resistance_exit:=0            
    //         //support_stop:=0
                    

// if condition1==1 and strategy.position_size==0

//     support_stop:=0
//     profit_target_long:=0
//     //resistance_activated:=0
//     entry_price_long:=0
//     //activation_squeeze_frequency:=0
//     ready:=0
//     set:=0
//     micro_support_live_count:=0
//     macro_support_live_count:=0
//     trade_reference_numeral:=0
//     mid_micro_bias_long:=0
//     mid_macro_bias_long:=0
//     squeeze_ready:= 0
//     //reset:=0
//     macro_support_live_count:=0
//     micro_support_live_count:=0
//     resistance_hit:=0
//     reset:=0
//     condition1:=0
//     exit_time:=timenow
//     last_resistance_exit:=0
//     mid_macro_bias_long:=0
//     mid_micro_bias_long:=0 
//     resistance_hit:=0
//     //exit_time:=timenow
//     // RS_30m_valid := false
//     // RS_1H_valid := false
//     // RS_2H_valid := false
//     // RS_3H_valid := false
//     // RS_4H_valid := false
//     support_stop_30_valid := false
//     support_stop_60_valid := false
//     support_stop_120_valid := false
//     support_stop_180_valid := false
//     support_stop_240_valid := false
//     support_stop_360_valid := false
//     support_stop_480_valid := false      
        
        

    
        //reset:=1
    
// if (strategy.position_size > 0)     

//     if (RS_15m == color.gray and RS_15m_previous == color.red) and high_15min > resistance_to_breach
//         resistance_to_breach:= high_15min
//         reset:=0
//     if (RS_30m == color.gray and RS_30m_previous == color.red) and high_30min > resistance_to_breach
//         resistance_to_breach:= high_30min
//         reset:=0
//     if (RS_1H == color.gray and RS_1H_previous == color.red)  and high_1H > resistance_to_breach
//         resistance_to_breach:= high_1H
//         reset:=0
//     if (RS_2H == color.gray and RS_2H_previous == color.red)  and high_2H > resistance_to_breach 
//         resistance_to_breach:= high_2H
//         reset:=0
//     if (RS_3H == color.gray and RS_3H_previous == color.red)  and high_3H > resistance_to_breach
//         resistance_to_breach:= high_3H
//         reset:=0
//     if (RS_4H == color.gray and RS_4H_previous == color.red)  and high_4H > resistance_to_breach
//         resistance_to_breach:= high_4H
//         reset:=0
//     if (RS_6H == color.gray and RS_6H_previous == color.red)  and high_6H > resistance_to_breach
//         resistance_to_breach:= high_6H
//         reset:=0
//     if (RS_8H == color.gray and RS_8H_previous == color.red)  and high_8H > resistance_to_breach 
//         resistance_to_breach:= high_8H
//         reset:=0
        
// if (strategy.position_size > 0) 

//     if high > resistance_to_breach
//         reset:=1
    
// if (strategy.position_size==0)

//     stop:=0
//     profit_target_long:=0
//     //resistance_activated:=0
//     entry_price_long:=0
//     //activation_squeeze_frequency:=0
//     ready:=0
//     set:=0
//     micro_support_live_count:=0
//     trade_reference_numeral:=0
//     mid_micro_bias_long:=0
//     mid_macro_bias_long:=0
//     squeeze_ready:= 0
//     reset:=0
//     macro_support_live_count:=0
//     micro_support_live_count:=0
//     resistance_hit:=0

    
    

// if (strategy.position_size > 0) and squeeze_ready == 30 

//     if HC_15m == #2962ff or (RS_15m == color.gray and RS_15m_previous == color.red)
//         stop:= entry_price_long
//         strategy.close(id="buy", qty= math.floor(strategy.position_size/3))
//     if HC_30m == #2962ff    
//         strategy.close(id="buy", qty= math.floor(strategy.position_size/3))  //, comment="EXIT-LONG_FTX-US_AVAX/USD_AVAX-FTX-S3-Mid_1M_6a7fe98fe6b23335")
//         exit_time:= timenow
        
// if (strategy.position_size > 0) and squeeze_ready == 60 

//     if HC_30m == #2962ff
//         stop:= entry_price_long
//     // if HC_1H == #2962ff    
//     //     strategy.close(id="buy", comment="EXIT-LONG_FTX-US_AVAX/USD_AVAX-FTX-S3-Mid_1M_6a7fe98fe6b23335")
        
// if (strategy.position_size > 0) and squeeze_ready == 120 

//     if HC_1H == #2962ff
//         stop:= entry_price_long
//     // if HC_2H == #2962ff    
//     //     strategy.close(id="buy", comment="EXIT-LONG_FTX-US_AVAX/USD_AVAX-FTX-S3-Mid_1M_6a7fe98fe6b23335")
        
// if (strategy.position_size > 0) and squeeze_ready == 180 

//     if HC_2H == #2962ff
//         stop:= entry_price_long
//     // if HC_3H == #2962ff    
//     //     strategy.close(id="buy", comment="EXIT-LONG_FTX-US_AVAX/USD_AVAX-FTX-S3-Mid_1M_6a7fe98fe6b23335")
    
// if (strategy.position_size > 0) and squeeze_ready == 240 

//     if HC_3H == #2962ff
//         stop:= entry_price_long
//     // if HC_4H == #2962ff    
//     //     strategy.close(id="buy", comment="EXIT-LONG_FTX-US_AVAX/USD_AVAX-FTX-S3-Mid_1M_6a7fe98fe6b23335")          
        
// if (strategy.position_size >0) and timenow > entry_time
//     if (RS_5m == color.red)
//         stop := low_5min

//position_size = strategy.position_size

//and SC_6H == #2962ff)    
// if strategy.position_size > 0 and timenow > entry_time + 2
//     if (trade_reference_numeral == 360 and HC_6H == #2962ff)  or (trade_reference_numeral == 240 and HC_4H == #2962ff) or (trade_reference_numeral == 180 and HC_3H == #2962ff) or (trade_reference_numeral == 120 and HC_2H == #2962ff)
//         strategy.close(id="buy", comment="EXIT-LONG_FTX-US_AVAX/USD_AVAX-FTX-S3-Mid_1M_6a7fe98fe6b23335")
//         close_time := timenow
//         stop:=0
//         profit_target_long:=0
//         //resistance_activated:=0
//         entry_price_long:=0
//         activation_squeeze_frequency:=0
//         ready:=0
//         set:=0
//         micro_support_live_count:=0
//         trade_reference_numeral:=0
//         micro_bias_long:=0
//         macro_bias_long:=0
//         squeeze_ready_5 := 0
//         squeeze_ready_10 := 0
//         squeeze_ready_15 := 0
//         squeeze_ready_30 := 0
//         squeeze_ready_60 := 0
//         squeeze_ready_120 := 0
//         squeeze_ready_180 := 0
//         squeeze_ready_240 := 0
//         squeeze_ready_360 := 0
//         squeeze_ready_480 := 0
//         squeeze_ready_720 := 0
//         squeeze_ready_1440 := 0
//         transition_5m := 0
//         transition_10m := 0
//         transition_15m := 0 
//         transition_30m := 0 
//         transition_1H := 0
//         transition_2H := 0
//         transition_3H := 0
//         transition_4H := 0
//         transition_6H := 0
//         transition_8H := 0
//         transition_12H := 0
//         macro_support_live_count:=0
//         micro_support_price:=0
//         macro_support_price:=0
    
//(high >= profit_target_long) and 
// if  (strategy.position_size>0) and (entry_price_long != profit_target_long) and (entry_price_long !=0) and (profit_target_long!=0) and (profit_target_long_previous != profit_target_long) and timenow > entry_time + 2
//     strategy.close(id="buy", limit = profit_target_long, comment="EXIT-LONG_KUCOIN_LUNA-USDT_mid-luna-kucoin_1M_93054713e630ccca")    
//     profit_target_long_previous := profit_target_long
//     stop:=0
//     profit_target_long:=0
//     //resistance_activated:=0
//     entry_price_long:=0
//     activation_squeeze_frequency:=0
//     ready:=0
//     set:=0
//     micro_support_live_count:=0
//     trade_reference_numeral:=0
//     micro_bias_long:=0
//     macro_bias_long:=0
//     squeeze_ready_5 := 0
//     squeeze_ready_10 := 0
//     squeeze_ready_15 := 0
//     squeeze_ready_30 := 0
//     squeeze_ready_60 := 0
//     squeeze_ready_120 := 0
//     squeeze_ready_180 := 0
//     squeeze_ready_240 := 0
//     squeeze_ready_360 := 0
//     squeeze_ready_480 := 0
//     squeeze_ready_720 := 0
//     squeeze_ready_1440 := 0
//     transition_5m := 0
//     transition_10m := 0
//     transition_15m := 0 
//     transition_30m := 0 
//     transition_1H := 0
//     transition_2H := 0
//     transition_3H := 0
//     transition_4H := 0
//     transition_6H := 0
//     transition_8H := 0
//     transition_12H := 0
//     macro_support_live_count:=0
//     micro_support_price:=0
//     macro_support_price:=0
//strategy.position_size
//global_low_12H

//exit_size
var profit=0.0
var loss=0.0

if strategy.position_size>0
    profit:=close-entry_price_long
    
if strategy.position_size>0
    loss:=entry_price_long - close   

profit_percentage = profit/entry_price_long * 100
loss_percentage = loss/entry_price_long * 100

if profit > 20 and strategy.position_size > 0 

    profit_stop:=1
    
// if loss_percentage > 10 and strategy.position_size > 0 

//     //loss_stop:=1    
//global_low_W
//next_entry_support pre_conditions_met
//loss_support_hit

//plot (setup, style=plot.style_histogram, color=color.red)
plot (low_to_breach_1min, style=plot.style_histogram, color=color.red)
plot (low_to_breach_5min, style=plot.style_histogram, color=color.black)   // support_enter - 4
//support_stop_180_valid_binary = support_stop_180_valid ? 1: 0
// plot (bias_check_binary, style=plot.style_histogram, color=color.black)
// plot (bias1, style=plot.style_histogram, color=color.black)
// plot (bias2, style=plot.style_histogram, color=color.black)
// plot (bias3, style=plot.style_histogram, color=color.black)
// plot (support_stop_180_valid_binary, style=plot.style_histogram, color=color.black)
// plot (loss_support_hit, style=plot.style_histogram, color=color.red)
// plot (total_bias, style=plot.style_histogram, color=color.blue)
// //plot (main_trade, style=plot.style_histogram, color=color.blue)
// plot (pre_conditions_met, style=plot.style_histogram, color=color.black)
// plot (setup, style=plot.style_histogram, color=color.green)
// //plot (next_entry_support, style=plot.style_histogram, color=color.blue)
// //plot (next_entry_squeeze, style=plot.style_histogram, color=color.blue)
// plot (global_low_W, style=plot.style_histogram, color=color.red)
// plot (exit_size, style=plot.style_histogram, color=color.black)
// plot (size, style=plot.style_histogram, color=color.black)
// plot (support_enter, style=plot.style_histogram, color=color.black)

// // plot (global_low_12H, style=plot.style_histogram, color=color.blue)
// // plot (exit_size, style=plot.style_histogram, color=color.blue)
// // plot (initial_titytity, style=plot.style_histogram, color=color.blue)
// // plot (quantity, style=plot.style_histogram, color=color.blue)
// // plot (orderposition_size, style=plot.style_histogram, color=color.blue)   

// // plot (resistance_to_breach, style=plot.style_histogram, color=color.blue)
// // plot (position_size, style=plot.style_histogram, color=color.blue)

// // plot (macro_bias_long, style=plot.style_histogram, color=color.blue)
// // plot (exit_time, style=plot.style_histogram, color=color.black)
// // plot (timenow, style=plot.style_histogram, color=color.blue)
// plot (micro_support_live_count, style=plot.style_histogram, color=color.blue)
// plot (macro_support_live_count, style=plot.style_histogram, color=color.blue)

// plot (ready, style=plot.style_histogram, color=color.blue)

// plot (set, style=plot.style_histogram, color=color.blue)
// // plot (stop, style=plot.style_histogram, color=color.red)
// plot (profit_stop, style=plot.style_histogram, color=color.green)
// plot (short_bias_aggregate, style=plot.style_histogram, color=color.black)
// plot (profit, style=plot.style_histogram, color=color.blue)

// // plot (activation_squeeze_frequency, style=plot.style_histogram, color=color.black)
// plot (entry_price_long, style=plot.style_histogram, color=color.black)
// // plot (close, style=plot.style_histogram, color=color.black)
// // plot (profit_target_long, style=plot.style_histogram, color=color.blue)
// // plot (trade_reference_numeral, style=plot.style_histogram, color=color.black)
// // plot (squeeze_ready, style=plot.style_histogram, color=color.black)
// plot (last_support_exit, style=plot.style_histogram, color=color.blue)
// plot (support_stop, style=plot.style_histogram, color=color.red)
// plot (strategy.position_size, style=plot.style_histogram, color=color.black)
// plot (last_resistance_exit, style=plot.style_histogram, color=color.gray)
// plot (exit_time, style=plot.style_histogram, color=color.black)
// plot (timenow, style=plot.style_histogram, color=color.orange)
// plot (trade_reference_numeral_15_binary, style=plot.style_histogram, color=color.black)
// plot (trade_reference_numeral_30_binary, style=plot.style_histogram, color=color.black)
// plot (trade_reference_numeral_45_binary, style=plot.style_histogram, color=color.black)
// plot (trade_reference_numeral_60_binary, style=plot.style_histogram, color=color.black)
// // plot (trade_reference_numeral_180_binary, style=plot.style_histogram, color=color.black)
// // plot (trade_reference_numeral_210_binary, style=plot.style_histogram, color=color.black)
// // plot (trade_reference_numeral_240_binary, style=plot.style_histogram, color=color.black)
// plot (squeeze_ready_5_binary, style=plot.style_histogram, color=color.blue)
// plot (squeeze_ready_10_binary, style=plot.style_histogram, color=color.blue)
// plot (squeeze_ready_15_binary, style=plot.style_histogram, color=color.blue)
// plot (squeeze_ready_30_binary, style=plot.style_histogram, color=color.blue)
// plot (squeeze_ready_45_binary, style=plot.style_histogram, color=color.blue)
// // plot (squeeze_ready_210_binary, style=plot.style_histogram, color=color.blue)

// plot (squeeze_ready_120, style=plot.style_histogram, color=color.blue)
// plot (squeeze_ready_150, style=plot.style_histogram, color=color.blue)
// trade_reference_numeral_360 := false
// trade_reference_numeral_60 := false

//plot (condition1, style=plot.style_histogram, color=color.black)
//plot (last_resistance_exit, style=plot.style_histogram, color=color.blue)
//plot (unused_resistance, style=plot.style_histogram, color=color.black)

// plot (entry_time, style=plot.style_histogram, color=color.blue)
// plot (timenow, style=plot.style_histogram, color=color.blue)
// plot (exit_30_binary, style=plot.style_histogram, color=color.black)
// plot (exit_60_binary, style=plot.style_histogram, color=color.black)
// plot (exit_120_binary, style=plot.style_histogram, color=color.black)
// plot (exit_240_binary, style=plot.style_histogram, color=color.black)
// plot (exit_360_binary, style=plot.style_histogram, color=color.black)
// plot (exit_480_binary, style=plot.style_histogram, color=color.black)
// plot (exit_30, style=plot.style_histogram, color=color.black)
// plot (exit_30, style=plot.style_histogram, color=color.black)
// plot (exit_30, style=plot.style_histogram, color=color.black)
// plot (exit_30, style=plot.style_histogram, color=color.black)

// plot (squeeze_ready_10, style=plot.style_histogram, color=color.black)
// plot (squeeze_ready_15, style=plot.style_histogram, color=color.black)
// plot (squeeze_ready_30, style=plot.style_histogram, color=color.black)
// plot (squeeze_ready_60, style=plot.style_histogram, color=color.black)
// plot (squeeze_ready_120, style=plot.style_histogram, color=color.black)
// plot (squeeze_ready_180, style=plot.style_histogram, color=color.black)
// plot (squeeze_ready_240, style=plot.style_histogram, color=color.black)
// plot (squeeze_ready_360, style=plot.style_histogram, color=color.black)
// plot (squeeze_ready_480, style=plot.style_histogram, color=color.black)
// plot (squeeze_ready_720, style=plot.style_histogram, color=color.black)
// plot (squeeze_ready_1440, style=plot.style_histogram, color=color.black)
// //plot (case_1_binary, style=plot.style_histogram, color=color.blue)
// plot (case_2_binary, style=plot.style_histogram, color=color.blue)
// plot (case_3_binary, style=plot.style_histogram, color=color.blue)
// plot (case_4_binary, style=plot.style_histogram, color=color.blue)
// plot (case_5_binary, style=plot.style_histogram, color=color.blue)
// plot (case_6_binary, style=plot.style_histogram, color=color.blue)
// //plot (case_7_binary, style=plot.style_histogram, color=color.blue)
// //plot (case_8_binary, style=plot.style_histogram, color=color.blue)
// plot (micro_support_price, style=plot.style_histogram, color=color.black)
// plot (macro_support_price, style=plot.style_histogram, color=color.black)
// plot (cond_5m_binary, style=plot.style_histogram, color=color.aqua)
// plot (cond_10m_binary, style=plot.style_histogram, color=color.aqua)
// plot (cond_15m_binary, style=plot.style_histogram, color=color.aqua)
// plot (cond_30m_binary, style=plot.style_histogram, color=color.green)
// plot (cond_1H_binary, style=plot.style_histogram, color=color.green)
// plot (cond_2H_binary, style=plot.style_histogram, color=color.green)
// plot (cond_3H_binary, style=plot.style_histogram, color=color.green)
// plot (cond_4H_binary, style=plot.style_histogram, color=color.green)
// plot (cond_6H_binary, style=plot.style_histogram, color=color.aqua)
// plot (cond_8H_binary, style=plot.style_histogram, color=color.aqua)
// plot (cond_12H_binary, style=plot.style_histogram, color=color.aqua)
// plot (cond_5m, style=plot.style_histogram, color=color.aqua)
// plot (cond_5m, style=plot.style_histogram, color=color.aqua)
// macro_support_price
// plot (squeeze_ready_480, style=plot.style_histogram, color=color.black)
// plot (squeeze_ready_720, style=plot.style_histogram, color=color.black)
// plot (squeeze_ready_1440, style=plot.style_histogram, color=color.black)

/////////////////////////////////////////////////////////////////////////////

// if (strategy.position_size >0) and low < stop  and timenow > entry_time + 2

//     stop:=0
//     profit_target_long:=0
//     //resistance_activated:=0 
//     entry_price_long:=0
//     activation_squeeze_frequency:=0
//     trade_reference_numeral:=0
//     ready:=0
//     set:=0
//     micro_support_live_count:=0
//     micro_bias_long:=0
//     macro_bias_long:=0
//     squeeze_ready_5 := 0
//     squeeze_ready_10 := 0
//     squeeze_ready_15 := 0
//     squeeze_ready_30 := 0
//     squeeze_ready_60 := 0
//     squeeze_ready_120 := 0
//     squeeze_ready_180 := 0
//     squeeze_ready_240 := 0
//     squeeze_ready_360 := 0
//     squeeze_ready_480 := 0
//     squeeze_ready_720 := 0
//     squeeze_ready_1440 := 0
//     transition_5m := 0
//     transition_10m := 0
//     transition_15m := 0 
//     transition_30m := 0 
//     transition_1H := 0
//     transition_2H := 0
//     transition_3H := 0
//     transition_4H := 0
//     transition_6H := 0
//     transition_8H := 0
//     transition_12H := 0
//     macro_support_live_count:=0
//     micro_support_price:=0
//     macro_support_price:=0    

//     strategy.close(id="buy", comment="EXIT-LONG_KUCOIN_LUNA-USDT_mid-luna-kucoin_1M_93054713e630ccca")
// var resistance_activated = 0

// if (strategy.position_size >0) //and resistance_activated==0//and  resistance_search==1 and timenow > entry_time
//     // if (RS_5m == color.red)
//     //     stop := low_5min
//     //     resistance_activated:=5
        
//     // if (RS_10m == color.red)
//     //     stop := low_10min
//     //     resistance_activated:=10
        
//     if (RS_15m == color.red)
//         stop := low_15min
//         resistance_activated:=15
        
//     if (RS_30m == color.red)
//         stop := low_30min 
//         resistance_activated:=30
        
//     if (RS_1H == color.red)
//         stop := low_1H
//         resistance_activated:=60
        
//     if (RS_2H == color.red)
//         stop := low_2H
//         resistance_activated:=120
        
//     if (RS_3H == color.red)
//         stop := low_3H
//         resistance_activated:=180
        
//     if (RS_4H == color.red)
//         stop := low_4H
//         resistance_activated:=240
        
//     if (RS_6H == color.red)
//         stop := low_6H
//         resistance_activated:=360
        
//     if (RS_8H == color.red)
//         stop := low_8H
//         resistance_activated:=480

//     // if (RS_12H == color.red)
//     //     stop := low_12H
//     //     resistance_activated:=720
    
//     // if (RS_D == color.red)
//     //     stop := low_D
//     //     resistance_activated:=1440

//     // if (RS_10D == color.red)
//     //     stop := low_10D
//     //     resistance_activated:=14400
        
//     // if (RS_W == color.red)
//     //     stop := low_W
    //     resistance_activated:=10080
        
    // if (RS_M == color.red)
    //     stop := low_M
    //     resistance_activated:=43200

//[SC_1m, RS_1m, SP_1m, low_1min, close_1min, high_1min, atr_1m, HC_1m, activation_squeeze_color_1m, HC_1m_previous,SP_1m_previous, low_1min_previous]

// if strategy.position_size > 0

//     // if SP_15m == color.gray and SP_15m_previous == color.green and support_stop > low_15min_previous
    
//     //     support_stop:= low_15min_previous

//     if SP_30m == color.gray and SP_30m_previous == color.green and support_stop > low_30min_previous and timenow > entry_time + 2
    
//         support_stop:= low_30min_previous
        
//     if SP_1H == color.gray and SP_1H_previous == color.green and support_stop > low_1H_previous and timenow > entry_time + 2
    
//         support_stop:= low_1H_previous
        
//     if SP_2H == color.gray and SP_2H_previous == color.green and support_stop > low_2H_previous and timenow > entry_time + 2
    
//         support_stop:= low_2H_previous
        
//     if SP_3H == color.gray and SP_3H_previous == color.green and support_stop > low_3H_previous and timenow > entry_time + 2
    
//         support_stop:= low_3H_previous
        
//     if SP_4H == color.gray and SP_4H_previous == color.green and support_stop > low_4H_previous and timenow > entry_time + 2
    
//         support_stop:= low_4H_previous
        
//     if SP_6H == color.gray and SP_6H_previous == color.green and support_stop > low_6H_previous and timenow > entry_time + 2
    
//         support_stop:= low_6H_previous
        
//     if SP_8H == color.gray and SP_8H_previous == color.green and support_stop > low_8H_previous and timenow > entry_time + 2
    
//         support_stop:= low_8H_previous

    
// if strategy.position_size > 0 and low < stop * 0.995 and timenow > entry_time + 2
//     strategy.close(id="buy")//, qty= strategy.position_size)
//     exit_time:=timenow

// if quantity != strategy.position_size
//     quantity:= math.floor(initial_quantity - strategy.position_size)
    

// if strategy.position_size > 0

//     // if SP_15m == color.gray and SP_15m_previous == color.green and support_stop > low_15min_previous
    
//     //     support_stop:= low_15min_previous

//     if SP_30m == color.green and support_stop < low_30min and timenow > entry_time + 2
    
//         support_stop:= low_30min
        
//     if SP_1H == color.green and support_stop < low_1H and timenow > entry_time + 2
    
//         support_stop:= low_1H
        
//     if SP_2H == color.green and support_stop < low_2H and timenow > entry_time + 2
    
//         support_stop:= low_2H
        
//     if SP_3H == color.green and support_stop < low_3H and timenow > entry_time + 2
    
//         support_stop:= low_3H
        
//     if SP_4H  == color.green and support_stop < low_4H and timenow > entry_time + 2
    
//         support_stop:= low_4H
        
//     if SP_6H  == color.green and support_stop < low_6H and timenow > entry_time + 2
    
//         support_stop:= low_6H
        
//     if SP_8H == color.green and support_stop < low_8H and timenow > entry_time + 2
    
//         support_stop:= low_8H
///////////////////////////////////////////////////////////////////////////////
//support_on_30min

var support_check_1=0
var support_check_2=0
var support_check_5=0
var support_check_10=0
var support_check_15=0
var support_check_30=0
var support_check_45=0
var support_check_60=0
var support_check_120=0
var support_check_210=0
var support_check_240=0
var support_check_360=0
var support_check_480=0
var support_check_180=0
var support_check_720=0

// if strategy.position_size > 0  and (strategy.position_size < quantity or profit_stop==1) and timenow > entry_time
//     // if SP_15m == color.gray and timenow > entry_time and timenow > support_check_30
//     //     support_stop_15_valid := true
//     // if SP_30m == color.gray and timenow > entry_time and timenow > support_check_30
//     //     support_stop_30_valid := true
//     if SP_5m == color.gray and timenow > entry_time and timenow > support_check_5
//         support_stop_5_valid := true
//     if SP_10m == color.gray and timenow > entry_time and timenow > support_check_10
//         support_stop_10_valid := true        
//     if SP_15m == color.gray and timenow > entry_time and timenow > support_check_15
//         support_stop_15_valid := true
//     if SP_30m == color.gray and timenow > entry_time and timenow > support_check_30
//         support_stop_30_valid := true        
//     if SP_45m == color.gray and timenow > entry_time and timenow > support_check_45
//         support_stop_45_valid := true
//     if SP_1H == color.gray and timenow > entry_time and timenow > support_check_60
//         support_stop_60_valid := true  
//     if SP_2H == color.gray and timenow > entry_time and timenow > support_check_120
//         support_stop_120_valid := true          
//     // if SP_4H == color.gray and timenow > entry_time and timenow > support_check_240
//     //     support_stop_240_valid := true
//     // if SP_6H == color.gray and timenow > entry_time and timenow > support_check_360
//     //     support_stop_360_valid := true        
//     // if SP_8H == color.gray and timenow > entry_time and timenow > support_check_480
//     //     support_stop_480_valid := true  
        
        
if strategy.position_size > 0 and strategy.position_size < quantity and support_stop < low_to_breach_15min * .9975//and support_stop==low_to_breach_30min * .9975
    support_stop:= low_to_breach_15min * .9975
    stop_fixed:=1
    
// if strategy.position_size > 0 and strategy.position_size < quantity and support_stop < entry_price_long //and support_stop == 
//     support_stop:= entry_price_long
//     stop_fixed:=1   
    

// if strategy.position_size > 0  and (strategy.position_size < quantity) and timenow > entry_time //and ((strategy.position_size < quantity/2) or (timenow > 4 and low < entry_price_long * .95))         //and close > entry_price_long //and resistance_hit==1 // and timenow > entry_time + 2 or 

//     // if SP_15m == color.gray and SP_15m_previous == color.green and timenow > entry_time and support_stop_15_valid == true
    
//     //     support_stop:= low_15min_previous * 0.99

//     // if SP_30m == color.gray and SP_30m_previous == color.green and timenow > entry_time and support_stop_30_valid == true and support_stop < low_30min_previous * 0.99  //+ 2 // and support_stop > low_30min_previous
    
//     //     support_stop:= low_30min_previous * 0.99
//     //     support_check_30:= timenow
//     //     support_stop_30_valid:= false
        
//     // if SP_5m == color.gray and SP_5m_previous == color.green  and timenow > entry_time  and support_stop_5_valid == true and support_stop < low_5min_previous * 0.99  //+ 2 // and support_stop > low_1H_previous
    
//     //     support_stop:= low_5min_previous * 0.99
//     //     support_check_5:= timenow
//     //     support_stop_5_valid:= false
//     //     last_support_exit:=5
        
//     // if SP_10m == color.gray and SP_10m_previous == color.green  and timenow > entry_time  and support_stop_10_valid == true and support_stop < low_10min_previous * 0.99 //and strategy.position_size < quantity/2 //+ 2 // and support_stop > low_1H_previous
    
//     //     support_stop:= low_10min_previous * 0.99
//     //     support_check_10:= timenow
//     //     support_stop_10_valid:= false
//     //     last_support_exit:=10
        
//     // if SP_15m == color.gray and SP_15m_previous == color.green  and timenow > entry_time  and support_stop_15_valid == true and support_stop < low_15min_previous * 0.99 //and strategy.position_size < quantity/2 //+ 2 // and support_stop > low_1H_previous
    
//     //     support_stop:= low_15min_previous * 0.99
//     //     support_check_15:= timenow
//     //     support_stop_15_valid:= false
//     //     last_support_exit:=15
        
//     // if SP_30m == color.gray and SP_30m_previous == color.green  and timenow > entry_time  and support_stop_30_valid == true and support_stop < low_30min_previous * 0.99 //and strategy.position_size < quantity/2 //+ 2 // and support_stop > low_1H_previous
    
//     //     support_stop:= low_30min_previous * 0.99
//     //     support_check_30:= timenow
//     //     support_stop_30_valid:= false
//     //     last_support_exit:=30
        
//     // if SP_1H == color.gray and SP_1H_previous == color.green  and timenow > entry_time  and support_stop_60_valid == true and support_stop < low_1H_previous * 0.99  //+ 2 // and support_stop > low_1H_previous
    
//     //     support_stop:= low_1H_previous * 0.99
//     //     support_check_60:= timenow
//     //     support_stop_60_valid:= false
//     //     last_support_exit:=60    
        
//     if SP_2H == color.gray and SP_2H_previous == color.green  and timenow > entry_time  and support_stop_120_valid == true and support_stop < low_2H_previous * 0.99  //+ 2 // and support_stop > low_1H_previous
    
//         support_stop:= low_2H_previous * 0.99
//         support_check_120:= timenow
//         support_stop_120_valid:= false
//         last_support_exit:=120         
        
//     // if SP_3_5H == color.gray and SP_3_5H_previous == color.green  and timenow > entry_time  and support_stop_210_valid == true and support_stop < low_3_5H_previous * 0.99//+ 2 // and support_stop > low_1H_previous
    
//     //     support_stop:= low_3_5H_previous * 0.99
//     //     support_check_210:= timenow
//     //     support_stop_210_valid:= false
        
//     // if SP_4H == color.gray and SP_4H_previous == color.green  and timenow > entry_time  and support_stop_240_valid == true and support_stop < low_4H_previous * 0.99//+ 2 // and support_stop > low_4H_previous
    
//     //     support_stop:= low_4H_previous * 0.99
//     //     support_check_240:= timenow
//     //     support_stop_240_valid:= false
        
//     // if SP_6H == color.gray and SP_6H_previous == color.green  and timenow > entry_time  and support_stop_360_valid == true and support_stop < low_6H_previous * 0.99 //+ 2 // and support_stop > low_6H_previous
    
//     //     support_stop:= low_6H_previous * 0.99 
//     //     support_check_360:= timenow
//     //     support_stop_360_valid:= false
        
//     // if SP_8H == color.gray and SP_8H_previous == color.green  and timenow > entry_time  and support_stop_480_valid == true and support_stop < low_8H_previous * 0.99 //+ 2 // and support_stop > low_8H_previous
    
//     //     support_stop:= low_8H_previous * 0.99
//     //     support_check_480:= timenow
//     //     support_stop_480_valid:= false

// // if strategy.position_size > 0 and resistance_hit==1
// //     support_stop:= entry_price_long    
    
// if (strategy.position_size >0) and low < stop  and timenow > entry_time + 2  
// if strategy.position_size > 0 and low < support_stop * 0.99  and resistance_hit==1     //and close > entry_price_long //and timenow > entry_time + 2
//     strategy.close(id="buy")//, qty= quantity)//, //qty= strategy.position_size)
//     exit_time:=timenow 
//     //resistance_hit:=0
//     //exit_time := timenow
//     unused_resistance:=0
//     support_stop:=0
//     profit_target_long:=0
//     //resistance_activated:=0
//     entry_price_long:=0
//     //activation_squeeze_frequency:=0
//     ready:=0
//     set:=0
//     micro_support_live_count:=0
//     macro_support_live_count:=0
//     trade_reference_numeral:=0
//     mid_micro_bias_long:=0
//     mid_macro_bias_long:=0
//     squeeze_ready:= 0
//     //reset:=0
//     macro_support_live_count:=0
//     micro_support_live_count:=0
//     //resistance_hit:=0
//     condition1:=0
//     //last_resistance_exit:=0
//     mid_macro_bias_long:=0
//     mid_micro_bias_long:=0
//     mid_macro_bias_long:=0
//     mid_micro_bias_long:=0 
//     // RS_30m_valid := false
//     // RS_1H_valid := false
//     // RS_2H_valid := false
//     // RS_3H_valid := false
//     // RS_4H_valid := false
//     support_stop_30_valid := false
//     support_stop_60_valid := false
//     support_stop_120_valid := false
//     support_stop_180_valid := false
//     support_stop_240_valid := false
//     support_stop_360_valid := false
//     support_stop_480_valid := false
//     //last_resistance_exit:=0
    
//if reset==1
//open_position = strategy.position_size  

// if strategy.position_size > 0 and close > entry_price_long + 10 and timenow > entry_time + 1 //and close > entry_price_long//and stop_fixed==1     //and close > entry_price_long //and timenow > entry_time + 2
//     support_stop:= entry_price_long + 3

if  (2>3) and strategy.position_size > 0 and (close_5min < Ema_21_30m)  and timenow > entry_time + 1 //and close > entry_price_long//and stop_fixed==1     //and close > entry_price_long //and timenow > entry_time + 2
    strategy.order(id="order", direction=strategy.short, qty=open_position)
    //strategy.close(id="buy", qty= exit_size)
    
    alert('{"AlertType":"'+alert_type+'","Market":"'+trade_symbol+'", "Side":"sell", "Size":' + str.tostring(open_position)+',"OrderType":"market","TradeType":"long"'+'}')
    //alert('{"AlertType":"'+alert_type+'","Market":"'+trade_symbol+'", "Side":"sell", "Size":' + str.tostring(open_position)+'}')
    //, comment="EXIT-LONG_FTX-US_ETH/USD_ETH-FTX-Sawyer_1M_cbeefa1cb36a0b96")//, qty= quantity)//, //qty= strategy.position_size)
    //exit_time:=timenow 
    //resistance_hit:=0
    //exit_time := timenow
    unused_resistance:=0
    //_long0
    loss_support_hit:=0
    profit_target_long:=0
    profit_stop:=0
    loss_stop:=0
    resistance_exit:=0
    //resistance_activated:=0
    entry_price_long:=0
    //activation_squeeze_frequency:=0
    ready:=0
    set:=0
    //profit_stop:=1
    micro_support_live_count:=0
    macro_support_live_count:=0
    trade_reference_numeral:=0
    //mid_micro_bias_long:=0
    //mid_macro_bias_long:=0
    //squeeze_ready:= 0
    //reset:=0
    macro_support_live_count:=0
    micro_support_live_count:=0
    //resistance_hit:=0
    condition1:=0
    bias1:=0
    bias2:=0
    bias3:=0
    //last_resistance_exit:=0
    // mid_macro_bias_long:=0
    // mid_micro_bias_long:=0
    // mid_macro_bias_long:=0
    // mid_micro_bias_long:=0 
    // RS_30m_valid := false
    // RS_1H_valid := false
    // RS_2H_valid := false
    // RS_3H_valid := false
    // RS_4H_valid := false
    support_stop_5_valid := false
    support_stop_10_valid := false
    support_stop_15_valid := false
    support_stop_30_valid := false
    support_stop_45_valid := false
    support_stop_60_valid := false
    support_stop_120_valid := false
    // support_stop_360_valid := false
    // support_stop_480_valid := false
    exit_time:=timenow
    
    trade_reference_numeral_15 := false
    trade_reference_numeral_30 := false
    trade_reference_numeral_45 := false
    trade_reference_numeral_60 := false
            // trade_reference_numeral_180 := false
            // trade_reference_numeral_210 := false
            // trade_reference_numeral_240 := false
    // trade_reference_numeral_360 := false
    // trade_reference_numeral_60 := false
    squeeze_ready_5 :=false
    squeeze_ready_10 :=false
    squeeze_ready_15 :=false
    squeeze_ready_30 :=false
    squeeze_ready_45 :=false
    support_enter:=0
    setup:=0
    last_support_exit:=0
    last_resistance_exit:=0
            //support_stop:=0    

    //profit_target_long 
        

if  high > entry_price_long+math.round(.40*atr_15m,0) and strategy.position_size > 0 and timenow > entry_time + 1 and exit_fired ==0   // and close > entry_price_long + 1 //and strategy.position_size == quantity//and close > entry_price_long//and stop_fixed==1     //and close > entry_price_long //and timenow > entry_time + 2
    strategy.order(id="order", direction=strategy.short, qty=quantity, limit = entry_price_long+atr_to_use)
    //support_stop:= entry_price_long
    //strategy.close(id="buy", qty= exit_size)
    
    //alert('{"AlertType":"'+alert_type+'","Market":"'+trade_symbol+'", "Side":"sell", "Size":' + str.tostring(quantity)+',"OrderType":"market","TradeType":"long"'+'}')
    //alert('{"AlertType":"'+alert_type+'","Market":"'+trade_symbol+'", "Side":"sell", "Size":' + str.tostring(quantity)+',"OrderType":"limit","LimitPrice":'+str.tostring(entry_price_long+3)+',"TradeType":"long"'+'}')
    //alert('{"AlertType":"'+alert_type+'","Market":"'+trade_symbol+'", "Side":"sell", "Size":' + str.tostring(open_position)+'}')
    //, comment="EXIT-LONG_FTX-US_ETH/USD_ETH-FTX-Sawyer_1M_cbeefa1cb36a0b96")//, qty= quantity)//, //qty= strategy.position_size)
    //exit_time:=timenow 
    //resistance_hit:=0
    //exit_time := timenow
    unused_resistance:=0
    support_stop:=0
    loss_support_hit:=0
    profit_target_long:=0
    profit_stop:=0
    loss_stop:=0
    exit_fired:=1
    resistance_exit:=0
    //resistance_activated:=0
    entry_price_long:=0
    //activation_squeeze_frequency:=0
    ready:=0
    set:=0
    //profit_stop:=1
    micro_support_live_count:=0
    macro_support_live_count:=0
    trade_reference_numeral:=0
    //mid_micro_bias_long:=0
    //mid_macro_bias_long:=0
    //squeeze_ready:= 0
    //reset:=0
    macro_support_live_count:=0
    micro_support_live_count:=0
    //resistance_hit:=0
    condition1:=0
    bias1:=0
    bias2:=0
    bias3:=0
    //last_resistance_exit:=0
    // mid_macro_bias_long:=0
    // mid_micro_bias_long:=0
    // mid_macro_bias_long:=0
    // mid_micro_bias_long:=0 
    // RS_30m_valid := false
    // RS_1H_valid := false
    // RS_2H_valid := false
    // RS_3H_valid := false
    // RS_4H_valid := false
    support_stop_5_valid := false
    support_stop_10_valid := false
    support_stop_15_valid := false
    support_stop_30_valid := false
    support_stop_45_valid := false
    support_stop_60_valid := false
    support_stop_120_valid := false
    // support_stop_360_valid := false
    // support_stop_480_valid := false
    exit_time:=timenow
    
    trade_reference_numeral_15 := false
    trade_reference_numeral_30 := false
    trade_reference_numeral_45 := false
    trade_reference_numeral_60 := false
            // trade_reference_numeral_180 := false
            // trade_reference_numeral_210 := false
            // trade_reference_numeral_240 := false
    // trade_reference_numeral_360 := false
    // trade_reference_numeral_60 := false
    squeeze_ready_5 :=false
    squeeze_ready_10 :=false
    squeeze_ready_15 :=false
    squeeze_ready_30 :=false
    squeeze_ready_45 :=false
    support_enter:=0
    setup:=0
    last_support_exit:=0
    last_resistance_exit:=0
            //support_stop:=0    

if  close_2min < stop_loss_final and close_2min[1] < stop_loss_final and close_2min[2] < stop_loss_final and strategy.position_size > 0 and timenow > entry_time + 1 and exit_fired ==0   // and close > entry_price_long + 1 //and strategy.position_size == quantity//and close > entry_price_long//and stop_fixed==1     //and close > entry_price_long //and timenow > entry_time + 2
    strategy.order(id="order", direction=strategy.short, qty=quantity, limit = stop_loss_final)
    //support_stop:= entry_price_long
    //strategy.close(id="buy", qty= exit_size)
    
    alert('{"AlertType":"'+alert_type+'","Market":"'+trade_symbol+'", "Side":"sell", "Size":' + str.tostring(quantity)+',"OrderType":"market","TradeType":"long"'+'}')
    //alert('{"AlertType":"'+alert_type+'","Market":"'+trade_symbol+'", "Side":"sell", "Size":' + str.tostring(quantity)+',"OrderType":"limit","LimitPrice":'+str.tostring(entry_price_long+3)+',"TradeType":"long"'+'}')
    //alert('{"AlertType":"'+alert_type+'","Market":"'+trade_symbol+'", "Side":"sell", "Size":' + str.tostring(open_position)+'}')
    //, comment="EXIT-LONG_FTX-US_ETH/USD_ETH-FTX-Sawyer_1M_cbeefa1cb36a0b96")//, qty= quantity)//, //qty= strategy.position_size)
    //exit_time:=timenow 
    //resistance_hit:=0
    //exit_time := timenow
    unused_resistance:=0
    support_stop:=0
    ready5==0
    loss_support_hit:=0
    profit_target_long:=0
    profit_stop:=0
    loss_stop:=0
    exit_fired:=1
    resistance_exit:=0
    //resistance_activated:=0
    entry_price_long:=0
    //activation_squeeze_frequency:=0
    ready:=0
    set:=0
    //profit_stop:=1
    micro_support_live_count:=0
    macro_support_live_count:=0
    trade_reference_numeral:=0
    //mid_micro_bias_long:=0
    //mid_macro_bias_long:=0
    //squeeze_ready:= 0
    //reset:=0
    macro_support_live_count:=0
    micro_support_live_count:=0
    //resistance_hit:=0
    condition1:=0
    bias1:=0
    bias2:=0
    bias3:=0
    //last_resistance_exit:=0
    // mid_macro_bias_long:=0
    // mid_micro_bias_long:=0
    // mid_macro_bias_long:=0
    // mid_micro_bias_long:=0 
    // RS_30m_valid := false
    // RS_1H_valid := false
    // RS_2H_valid := false
    // RS_3H_valid := false
    // RS_4H_valid := false
    support_stop_5_valid := false
    support_stop_10_valid := false
    support_stop_15_valid := false
    support_stop_30_valid := false
    support_stop_45_valid := false
    support_stop_60_valid := false
    support_stop_120_valid := false
    // support_stop_360_valid := false
    // support_stop_480_valid := false
    exit_time:=timenow
    
    trade_reference_numeral_15 := false
    trade_reference_numeral_30 := false
    trade_reference_numeral_45 := false
    trade_reference_numeral_60 := false
            // trade_reference_numeral_180 := false
            // trade_reference_numeral_210 := false
            // trade_reference_numeral_240 := false
    // trade_reference_numeral_360 := false
    // trade_reference_numeral_60 := false
    squeeze_ready_5 :=false
    squeeze_ready_10 :=false
    squeeze_ready_15 :=false
    squeeze_ready_30 :=false
    squeeze_ready_45 :=false
    support_enter:=0
    setup:=0
    last_support_exit:=0
    last_resistance_exit:=0
            //support_stop:=0                

    
// if strategy.position_size == 0
//     exit_time:=timenow

////////////////////////////////////////////////////////////////////////////
// var support_check_5=0
// var support_check_10=0
// var support_check_15=0
// var support_check_30=0
// var support_check_45=0
// var support_check_60=0
// var support_check_210=0
// var support_check_240=0
// var support_check_360=0
// var support_check_480=0

if strategy.position_size > 0  and (low < entry_price_long) and timenow > entry_time
    // if SP_15m == color.gray and timenow > entry_time and timenow > support_check_30
    //     support_stop_15_valid := true
    // if SP_30m == color.gray and timenow > entry_time and timenow > support_check_30
    //     support_stop_30_valid := true
    // if SP_5m == color.gray and timenow > entry_time and timenow > support_check_5
    //     support_stop_5_valid := true
    // if SP_10m == color.gray and timenow > entry_time and timenow > support_check_10
    //     support_stop_10_valid := true        
    // if SP_15m == color.gray and timenow > entry_time and timenow > support_check_15
    //     support_stop_15_valid := true
    // if SP_30m == color.gray and timenow > entry_time and timenow > support_check_30
    //     support_stop_30_valid := true        
    // if SP_45m == color.gray and timenow > entry_time and timenow > support_check_45
    //     support_stop_45_valid := true
    // if SP_1H == color.gray and timenow > entry_time and timenow > support_check_60
    //     support_stop_60_valid := true          
    // if SP_3H == color.gray and timenow > entry_time and timenow > support_check_180
    //     support_stop_180_valid := true
    if SP_6H == color.gray and timenow > entry_time and timenow > support_check_360
        support_stop_360_valid := true        
    // if SP_12H == color.gray and timenow > entry_time and timenow > support_check_720
    //     support_stop_720_valid := true  
        
        
if strategy.position_size > 0 and strategy.position_size < quantity and support_stop < low_to_breach_15min * .9975
    support_stop:= low_to_breach_15min * .9975
    stop_fixed:=1
    
// if strategy.position_size > 0 and strategy.position_size < quantity/2 //and support_stop == global_low_W
//     support_stop:= entry_price_long
//     stop_fixed:=1   
    

// if strategy.position_size > 0  and (low < entry_price_long) and timenow > entry_time //and ((strategy.position_size < quantity/2) or (timenow > 4 and low < entry_price_long * .95))         //and close > entry_price_long //and resistance_hit==1 // and timenow > entry_time + 2 or 

//     // if SP_15m == color.gray and SP_15m_previous == color.green and timenow > entry_time and support_stop_15_valid == true
    
//     //     support_stop:= low_15min_previous * 0.99

//     // if SP_30m == color.gray and SP_30m_previous == color.green and timenow > entry_time and support_stop_30_valid == true and support_stop < low_30min_previous * 0.99  //+ 2 // and support_stop > low_30min_previous
    
//     //     support_stop:= low_30min_previous * 0.99
//     //     support_check_30:= timenow
//     //     support_stop_30_valid:= false
        
//     // if SP_5m == color.gray and SP_5m_previous == color.green  and timenow > entry_time  and support_stop_5_valid == true and support_stop < low_5min_previous * 0.99  //+ 2 // and support_stop > low_1H_previous
    
//     //     support_stop:= low_5min_previous * 0.99
//     //     support_check_5:= timenow
//     //     support_stop_5_valid:= false
//     //     last_support_exit:=5
        
//     if SP_6H == color.gray and SP_6H_previous == color.green and timenow > entry_time and support_stop_360_valid == true //and support_stop < low_3H_previous * 0.99 //+ 2 // and support_stop > low_4H_previous
    
//         //support_stop:= low_3H_previous * 0.99
//         support_check_360:= timenow
//         support_stop_360_valid:= false
//         loss_support_hit:=1 
    
//     // if SP_12H == color.gray and SP_12H_previous == color.green and timenow > entry_time and support_stop_720_valid == true //and support_stop < low_3H_previous * 0.99 //+ 2 // and support_stop > low_4H_previous
    
//     //     //support_stop:= low_3H_previous * 0.99
//     //     support_check_720:= timenow
//     //     support_stop_720_valid:= false
//     //     loss_support_hit:=1    
        
            
// // if total_bias < 6 and main_trade==1 and pre_conditions_met==1 and strategy.position_size==0 //and strategy.position_size==0//and color_change==1 and (HC_512R == color.aqua and HC_512R_previous == #CCCC00ff) and pre_conditions_met==1 and
// //     pre_conditions_met:=0
// //     main_trade:=0
    
if loss_support_hit==1 and strategy.position_size==0

    loss_support_hit:=0

// if short_bias_aggregate >= 17

//     resistance_exit:=1

// if strategy.position_size > 0  and (profit_stop==1) and timenow > entry_time //and ((strategy.position_size < quantity/2) or (timenow > 4 and low < entry_price_long * .95))         //and close > entry_price_long //and resistance_hit==1 // and timenow > entry_time + 2 or 

//     // if SP_15m == color.gray and SP_15m_previous == color.green and timenow > entry_time and support_stop_15_valid == true
    
//     //     support_stop:= low_15min_previous * 0.99

//     // if SP_30m == color.gray and SP_30m_previous == color.green and timenow > entry_time and support_stop_30_valid == true and support_stop < low_30min_previous * 0.99  //+ 2 // and support_stop > low_30min_previous
    
//     //     support_stop:= low_30min_previous * 0.99
//     //     support_check_30:= timenow
//     //     support_stop_30_valid:= false
        
//     // if SP_5m == color.gray and SP_5m_previous == color.green  and timenow > entry_time  and support_stop_5_valid == true and support_stop < low_5min_previous * 0.99  //+ 2 // and support_stop > low_1H_previous
    
//     //     support_stop:= low_5min_previous * 0.99
//     //     support_check_5:= timenow
//     //     support_stop_5_valid:= false
//     //     last_support_exit:=5
        
//     if SP_10m == color.gray and SP_10m_previous == color.green  and timenow > entry_time  and support_stop_10_valid == true and support_stop < low_10min_previous * 0.99 //and strategy.position_size < quantity/2 //+ 2 // and support_stop > low_1H_previous
    
//         support_stop:= low_10min_previous * 0.99
//         support_check_10:= timenow
//         support_stop_10_valid:= false
//         last_support_exit:=10
        
//     if SP_15m == color.gray and SP_15m_previous == color.green  and timenow > entry_time  and support_stop_15_valid == true and support_stop < low_15min_previous * 0.99 //and strategy.position_size < quantity/2 //+ 2 // and support_stop > low_1H_previous
    
//         support_stop:= low_15min_previous * 0.99
//         support_check_15:= timenow
//         support_stop_15_valid:= false
//         last_support_exit:=15
        
//     if SP_30m == color.gray and SP_30m_previous == color.green  and timenow > entry_time  and support_stop_30_valid == true and support_stop < low_30min_previous * 0.99 //and strategy.position_size < quantity/2 //+ 2 // and support_stop > low_1H_previous
    
//         support_stop:= low_30min_previous * 0.99
//         support_check_30:= timenow
//         support_stop_30_valid:= false
//         last_support_exit:=30
        
//     if SP_1H == color.gray and SP_1H_previous == color.green  and timenow > entry_time  and support_stop_60_valid == true and support_stop < low_1H_previous * 0.99  //+ 2 // and support_stop > low_1H_previous
    
//         support_stop:= low_1H_previous * 0.99
//         support_check_60:= timenow
//         support_stop_60_valid:= false
//         last_support_exit:=60    
        
//     if SP_2H == color.gray and SP_2H_previous == color.green  and timenow > entry_time  and support_stop_120_valid == true and support_stop < low_2H_previous * 0.99  //+ 2 // and support_stop > low_1H_previous
    
//         support_stop:= low_2H_previous * 0.99
//         support_check_120:= timenow
//         support_stop_120_valid:= false
//         last_support_exit:=120    

if close < entry_price_long

    price_below_entry:=1
    
if close > entry_price_long and price_below_entry==1

    price_reversal_from_below:=1

if price_reversal_from_below==1
    unused_resistance:=0

if macro_bias_long <= 4
    resistance_exit:=1

//breach_count >=3 // or breach_5m==1   
    
if strategy.position_size > 0  and ((na(t2) == true)) and timenow > entry_time //or (close_2min < (stop_loss_final + (2.5*3))  and close_2min[1] < (stop_loss_final + (2.5*3)) )) and timenow > entry_time
    strategy.order(id="order", direction=strategy.short, qty=open_position)
    //strategy.close(id="buy", qty= exit_size)
    
    alert('{"AlertType":"'+alert_type+'","Market":"'+trade_symbol+'", "Side":"sell", "Size":' + str.tostring(open_position)+',"OrderType":"market","TradeType":"long"'+'}')
    //alert('{"AlertType":"'+alert_type+'","Market":"'+trade_symbol+'", "Side":"sell", "Size":' + str.tostring(open_position)+'}')
    //strategy.close(id="buy")
        //exit_time:=timenow 
    //resistance_hit:=0
    //exit_time := timenow
    unused_resistance:=0
    support_stop:=0
    loss_support_hit:=0
    profit_target_long:=0
    profit_stop:=0
    loss_stop:=0
    resistance_exit:=0
    //resistance_activated:=0
    entry_price_long:=0
    //activation_squeeze_frequency:=0
    ready:=0
    set:=0
    //profit_stop:=1
    micro_support_live_count:=0
    macro_support_live_count:=0
    trade_reference_numeral:=0
    //mid_micro_bias_long:=0
    //mid_macro_bias_long:=0
    //squeeze_ready:= 0
    //reset:=0
    macro_support_live_count:=0
    micro_support_live_count:=0
    //resistance_hit:=0
    condition1:=0
    bias1:=0
    bias2:=0
    bias3:=0
    //last_resistance_exit:=0
    // mid_macro_bias_long:=0
    // mid_micro_bias_long:=0
    // mid_macro_bias_long:=0
    // mid_micro_bias_long:=0 
    // RS_30m_valid := false
    // RS_1H_valid := false
    // RS_2H_valid := false
    // RS_3H_valid := false
    // RS_4H_valid := false
    support_stop_5_valid := false
    support_stop_10_valid := false
    support_stop_15_valid := false
    support_stop_30_valid := false
    support_stop_45_valid := false
    support_stop_60_valid := false
    support_stop_120_valid := false
    // support_stop_360_valid := false
    // support_stop_480_valid := false
    exit_time:=timenow
    
    trade_reference_numeral_15 := false
    trade_reference_numeral_30 := false
    trade_reference_numeral_45 := false
    trade_reference_numeral_60 := false
            // trade_reference_numeral_180 := false
            // trade_reference_numeral_210 := false
            // trade_reference_numeral_240 := false
    // trade_reference_numeral_360 := false
    // trade_reference_numeral_60 := false
    squeeze_ready_5 :=false
    squeeze_ready_10 :=false
    squeeze_ready_15 :=false
    squeeze_ready_30 :=false
    squeeze_ready_45 :=false
    support_enter:=0
    setup:=0
    last_support_exit:=0
    last_resistance_exit:=0
    //support_stop:=0    
    
// if strategy.position_size == 0
//     exit_time:=timenow
    
// if  strategy.position_size > 0 and HC_15m == color.red and SC_15m == color.green
//     strategy.close(id="buy")//,    

// if  strategy.position_size > 0 and HC_15m == color.red and SC_15m == color.green
//     red_fired_support_flag:=1

// if  red_fired_support_flag==1 and close < low_to_breach_15min and strategy.position_size > 0 and SP_15m == color.gray and SP_15m_previous == color.gray
// //if  strategy.position_size > 0 and HC_30m == color.red and SC_30m == color.green
//     //strategy.close(id="buy")//,  
//     strategy.order(id="order", direction=strategy.short, qty=open_position)
//     //strategy.close(id="buy", qty= exit_size)
    
//     alert('{"AlertType":"'+alert_type+'","Market":"'+trade_symbol+'", "Side":"sell", "Size":' + str.tostring(open_position)+',"OrderType":"market","TradeType":"long"'+'}')
//     //alert('{"AlertType":"'+alert_type+'","Market":"'+trade_symbol+'", "Side":"sell", "Size":' + str.tostring(open_position)+'}')    
//     //exit_time := timenow
//     unused_resistance:=0
//     red_fired_support_flag:=0
    //support_stop:=0
    // loss_support_hit:=0
    // profit_target_long:=0
    // profit_stop:=0
    // loss_stop:=0
    // resistance_exit:=0
    // //resistance_activated:=0
    // entry_price_long:=0
    // //activation_squeeze_frequency:=0
    // ready:=0
    // set:=0
    // //profit_stop:=1
    // micro_support_live_count:=0
    // macro_support_live_count:=0
    // trade_reference_numeral:=0
    // //mid_micro_bias_long:=0
    // //mid_macro_bias_long:=0
    // squeeze_ready:= 0
    // //reset:=0
    // macro_support_live_count:=0
    // micro_support_live_count:=0
    // //resistance_hit:=0
    // condition1:=0
    // bias1:=0
    // bias2:=0
    // bias3:=0
    // //last_resistance_exit:=0
    // // mid_macro_bias_long:=0
    // // mid_micro_bias_long:=0
    // // mid_macro_bias_long:=0
    // // mid_micro_bias_long:=0 
    // // RS_30m_valid := false
    // // RS_1H_valid := false
    // // RS_2H_valid := false
    // // RS_3H_valid := false
    // // RS_4H_valid := false
    // support_stop_5_valid := false
    // support_stop_10_valid := false
    // support_stop_15_valid := false
    // support_stop_30_valid := false
    // support_stop_45_valid := false
    // support_stop_60_valid := false
    // support_stop_120_valid := false
    // // support_stop_360_valid := false
    // // support_stop_480_valid := false
    // exit_time:=timenow
    
    // trade_reference_numeral_15 := false
    // trade_reference_numeral_30 := false
    // trade_reference_numeral_45 := false
    // trade_reference_numeral_60 := false
    //         // trade_reference_numeral_180 := false
    //         // trade_reference_numeral_210 := false
    //         // trade_reference_numeral_240 := false
    // // trade_reference_numeral_360 := false
    // // trade_reference_numeral_60 := false
    // squeeze_ready_5 :=false
    // squeeze_ready_10 :=false
    // squeeze_ready_15 :=false
    // squeeze_ready_30 :=false
    // squeeze_ready_45 :=false
    // support_enter:=0
    // setup:=0
    // last_support_exit:=0
    // last_resistance_exit:=0
    //         //support_stop:=0       
    
// if strategy.position_size > 0 and close > entry_price_long * 1.01 and support_stop < entry_price_long * 1.005
//     support_stop:= entry_price_long * 1.005

// var support_check_5=0
// var support_check_10=0
// var support_check_15=0
// var support_check_30=0
// var support_check_45=0
// var support_check_60=0
// var support_check_120=0
// var support_check_210=0
// var support_check_240=0
// var support_check_360=0
// var support_check_480=0
// var support_check_180=0
// var support_check_720=0

if strategy.position_size > 0 and timenow > entry_time //and (strategy.position_size < quantity or close < entry_price_long) // and close > entry_price_long 
    // if SP_15m == color.gray and timenow > entry_time and timenow > support_check_30
    //     support_stop_15_valid := true
    // if SP_30m == color.gray and timenow > entry_time and timenow > support_check_30
    //     support_stop_30_valid := true

    if SP_1m == color.gray and timenow > entry_time and timenow > support_check_5
        support_stop_1_valid := true
    
    if SP_2m == color.gray and timenow > entry_time and timenow > support_check_5
        support_stop_2_valid := true

    if SP_5m == color.gray and timenow > entry_time and timenow > support_check_5
        support_stop_5_valid := true
    if SP_10m == color.gray and timenow > entry_time and timenow > support_check_10
        support_stop_10_valid := true        
    if SP_15m == color.gray and timenow > entry_time and timenow > support_check_15
        support_stop_15_valid := true
    if SP_30m == color.gray and timenow > entry_time and timenow > support_check_30
        support_stop_30_valid := true        
    if SP_45m == color.gray and timenow > entry_time and timenow > support_check_45
        support_stop_45_valid := true
    if SP_1H == color.gray and timenow > entry_time and timenow > support_check_60
        support_stop_60_valid := true  
    if SP_2H == color.gray and timenow > entry_time and timenow > support_check_120
        support_stop_120_valid := true          
    // if SP_4H == color.gray and timenow > entry_time and timenow > support_check_240
    //     support_stop_240_valid := true
    // if SP_6H == color.gray and timenow > entry_time and timenow > support_check_360
    //     support_stop_360_valid := true        
    // if SP_8H == color.gray and timenow > entry_time and timenow > support_check_480
    //     support_stop_480_valid := true  
    
if strategy.position_size > 0  and timenow > entry_time and close > entry_price_long + 2//and (strategy.position_size < quantity or close < entry_price_long)   // or (timenow > 4 and low < entry_price_long * .95)) and close > entry_price_long         //and close > entry_price_long //and resistance_hit==1 // and timenow > entry_time + 2 or 

    // if SP_15m == color.gray and SP_15m_previous == color.green and timenow > entry_time and support_stop_15_valid == true
    
    //     support_stop:= low_15min_previous * 0.99

    // if SP_30m == color.gray and SP_30m_previous == color.green and timenow > entry_time and support_stop_30_valid == true and support_stop < low_30min_previous * 0.99  //+ 2 // and support_stop > low_30min_previous
    
    //     support_stop:= low_30min_previous * 0.99
    //     support_check_30:= timenow
    //     support_stop_30_valid:= false

    if SP_1m == color.gray and SP_1m_previous == color.green  and timenow > entry_time  and support_stop_1_valid == true and support_stop < low_1min_previous - 1  //+ 2 // and support_stop > low_1H_previous
    
        support_stop:= low_1min_previous - 1
        support_check_1:= timenow
        support_stop_1_valid:= false
        last_support_exit:=1    

    if SP_2m == color.gray and SP_2m_previous == color.green  and timenow > entry_time  and support_stop_2_valid == true and support_stop < low_2min_previous - 1  //+ 2 // and support_stop > low_1H_previous
    
        support_stop:= low_2min_previous - 1
        support_check_2:= timenow
        support_stop_2_valid:= false
        last_support_exit:=2
        
    if SP_5m == color.gray and SP_5m_previous == color.green  and timenow > entry_time  and support_stop_5_valid == true and support_stop < low_5min_previous - 4  //+ 2 // and support_stop > low_1H_previous
    
        support_stop:= low_5min_previous - 4
        support_check_5:= timenow
        support_stop_5_valid:= false
        last_support_exit:=5
        
    if SP_10m == color.gray and SP_10m_previous == color.green  and timenow > entry_time  and support_stop_10_valid == true and support_stop < low_10min_previous - 4 //and strategy.position_size < quantity/2 //+ 2 // and support_stop > low_1H_previous
    
        support_stop:= low_10min_previous - 4
        support_check_10:= timenow
        support_stop_10_valid:= false
        last_support_exit:=10
        
    if SP_15m == color.gray and SP_15m_previous == color.green  and timenow > entry_time  and support_stop_15_valid == true and support_stop < low_15min_previous - 4 //and strategy.position_size < quantity/2 //+ 2 // and support_stop > low_1H_previous
    
        support_stop:= low_15min_previous - 4
        support_check_15:= timenow
        support_stop_15_valid:= false
        last_support_exit:=15
        
    if SP_30m == color.gray and SP_30m_previous == color.green  and timenow > entry_time  and support_stop_30_valid == true and support_stop < low_30min_previous - 4 //and strategy.position_size < quantity/2 //+ 2 // and support_stop > low_1H_previous
    
        support_stop:= low_30min_previous - 4
        support_check_30:= timenow
        support_stop_30_valid:= false
        last_support_exit:=30
        
    if SP_1H == color.gray and SP_1H_previous == color.green  and timenow > entry_time  and support_stop_60_valid == true and support_stop < low_1H_previous - 4  //+ 2 // and support_stop > low_1H_previous
    
        support_stop:= low_1H_previous - 4
        support_check_60:= timenow
        support_stop_60_valid:= false
        last_support_exit:=60    
        
    if SP_2H == color.gray and SP_2H_previous == color.green  and timenow > entry_time  and support_stop_120_valid == true and support_stop < low_2H_previous - 4  //+ 2 // and support_stop > low_1H_previous
    
        support_stop:= low_2H_previous - 4
        support_check_120:= timenow
        support_stop_120_valid:= false
        last_support_exit:=120    
    
//     //     support_check_5:= timenow
//     //     support_stop_5_valid:= false
//     //     last_support_exit:=5
        
//     // if SP_10m == color.gray and SP_10m_previous == color.green  and timenow > entry_time  and support_stop_10_valid == true and support_stop < low_10min_previous * 0.99 //and strategy.position_size < quantity/2 //+ 2 // and support_stop > low_1H_previous
    
//     //     support_stop:= low_10min_previous * 0.99
//     //     support_check_10:= timenow
//     //     support_stop_10_valid:= false
//     //     last_support_exit:=10
        
//     // if SP_15m == color.gray and SP_15m_previous == color.green  and timenow > entry_time  and support_stop_15_valid == true and support_stop < low_15min_previous * 0.99 //and strategy.position_size < quantity/2 //+ 2 // and support_stop > low_1H_previous
    
//     //     support_stop:= low_15min_previous * 0.995
//     //     support_check_15:= timenow
//     //     support_stop_15_valid:= false
//     //     last_support_exit:=15
        
//     if SP_30m == color.gray and SP_30m_previous == color.green  and timenow > entry_time  and support_stop_30_valid == true and support_stop < low_30min_previous * 0.995 //and strategy.position_size < quantity/2 //+ 2 // and support_stop > low_1H_previous
    
//         support_stop:= low_30min_previous * 0.995
//         support_check_30:= timenow
//         support_stop_30_valid:= false
//         last_support_exit:=30
        
//     if SP_1H == color.gray and SP_1H_previous == color.green  and timenow > entry_time  and support_stop_60_valid == true and support_stop < low_1H_previous * 0.995  //+ 2 // and support_stop > low_1H_previous
    
//         support_stop:= low_1H_previous * 0.995
//         support_check_60:= timenow
//         support_stop_60_valid:= false
//         last_support_exit:=60    
        
//     // if SP_2H == color.gray and SP_2H_previous == color.green  and timenow > entry_time  and support_stop_120_valid == true and support_stop < low_2H_previous * 0.99  //+ 2 // and support_stop > low_1H_previous
    
//     //     support_stop:= low_2H_previous * 0.995
//     //     support_check_120:= timenow
//     //     support_stop_120_valid:= false
//     //     last_support_exit:=120    

if strategy.position_size == 0 and strategy.position_size[1] !=0

    setup:=0
    ready:=0
    ready2:=0
    support_stop:=0
    entry_fired:=0
    exit_fired:=0
    breach_count:=0
    breach_1m:=0
    breach_2m:=0
    breach_3m:=0
    breach_4m:=0
    breach_5m:=0
    // ready1:=0
    // ready2:=0
    // ready3:=0
    // ready4:=0
    // ready5:=0
    support_entry_5_valid:=false
    support_entry_10_valid:=false
    support_entry_15_valid:=false
    support_entry_30_valid:=false
    support_entry_45_valid:=false
    support_entry_60_valid:=false
    support_entry_120_valid:=false    
    support_stop_5_valid:=false
    support_stop_10_valid:=false
    support_stop_15_valid:=false
    support_stop_30_valid:=false
    support_stop_60_valid:=false
    support_stop_120_valid:=false        
    trade_reference_numeral_5:=false
    trade_reference_numeral_10:=false
    trade_reference_numeral_15:=false
    trade_reference_numeral_30:=false
    trade_reference_numeral_45:=false
    trade_reference_numeral_60:=false
    trade_reference_numeral_2:=false
    trade_reference_numeral_3:=false    
    

if strategy.position_size > 0 and time_cond and na(t1) == false //short_condition==1
    breach_1m:= (close < low_to_breach_1min and close[1] < low_to_breach_1min and close[2] > low_to_breach_1min)? 1:0 
    breach_2m:= (close < low_to_breach_2min and close[1] < low_to_breach_2min and close[2] > low_to_breach_2min)? 1:0 
    breach_3m:= (close < low_to_breach_3min and close[1] < low_to_breach_3min and close[2] > low_to_breach_3min)? 1:0  
    breach_4m:= (close < low_to_breach_4min and close[1] < low_to_breach_4min and close[2] > low_to_breach_4min)? 1:0  
    breach_5m:= (close < low_to_breach_5min and close[1] < low_to_breach_5min and close[2] > low_to_breach_5min)? 1:0  

breach_count:= breach_1m + breach_2m + breach_3m + breach_4m + breach_5m

// if breach_1m==1 and close_1min > low_to_breach_1min
//     breach_1m:=0
// if breach_2m==1 and close_1min > low_to_breach_2min
//     breach_2m:=0
// if breach_3m==1 and close_1min > low_to_breach_3min
//     breach_3m:=0
// if breach_4m==1 and close_1min > low_to_breach_4min
//     breach_4m:=0
// if breach_5m==1 and close_1min > low_to_breach_5min
//     breach_5m:=0
'''
,
3:
'''
//@version=5
// ââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââ //
//# * ââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââ
//# *
//# * Study       : Pivot Points 
//# *                 - Pivot Type Options
//# *                    1-) Camarilla
//# *                    2-) DeMark
//# *                    3-) Fibonacci
//# *                    4-) Floor - Classic 
//# *                    5-) Swing - Custom interpretation
//# *                    6-) Traditional
//# *                    7-) Woodie
//# *
//# *                 - Additions
//# *                    1-) Central Pivot Range
//# *                    2-) Previous TimeFrame OHLC Levels
//# *
//# *                - Plotting Add-Ons - Plots the following custom and built-in indicators
//# *                    1-) ADX Colored DMI Line - custom interpretation of directional movement index
//# *                    2-) Volatility Colored Price/MA Line - custom interpretation of "price distance to its moving average" study 
//# *                    3-) Volume Weighted Colored Bars  - custom volume study presentation
//# *                    4-) Ichimoku Cloud Projection - build-in with only kumo cloud display option 
//# *                    5-) Bollinger Bands : build-in with customized multi bands display
//# *                    6-) Logistic EMA - Logistic Map Equation apllied EMA  
//# *                    7-) Volume Weighted Average Price (VWAP) - build-in
//# *                    8-) Linear Regression : build-in with slight customzations
//# *                    9-) Pivot Points High Low : build-in with major customzations
//# *
//# *                - Panel Add-Ons - Statistical panel presents evaluation of the following custom and built-in indicators  
//# *                    1-) Directional Movment Index (DMI)
//# *                    2-) Ichimoku Cloud 
//# *                    3-) Price Distance to its MA - custom interpretation
//# *                    4-) RSI Oscillator 
//# *                    5-) Stochastic Oscillator 
//# *                    6-) MACD Oscillator 
//# *                    7-) Fear & Greed - custom interpretation 
//# *                    8-) Volume - custom interpretation
//# *
//# *                - Market Sentiment Meter
//# *                - Range Meter with Average True Range AddOn 
//# *
//# * Author      : Â© dgtrd
//# *
//# * Revision History
//# *  Release    : Dec 04, 2020
//# *  Update     : Dec 09, 2020  : Bollinger Bands addition
//# *  Update     : Dec 12, 2020  : Code completely reworked by introducing arrays 
//# *                                - Logistic EMA (LEMA) addition 
//# *  Update     : Dec 13, 2020  : Panel additions
//# *                                - RSI, STOCH and MACD
//# *                                - Fear & Greed
//# *  Update     : Dec 14, 2020  : Central Pivot Range (CPR) addition
//# *  Update     : Dec 17, 2020  : Market Sentiment Meter addition
//# *  Update     : Dec 28, 2020  : Previous TimeFrame OHLC plotting addition
//# *  Update     : Dec 31, 2020  : Range Meter addition
//# *  Update     : Jan 04, 2021  : Added ability to support
//# *                                - Weekly and/or Monthly Pivot 
//# *                                - Historical Pivots
//# *                                - Range Meter extended with ATR Range 
//# *  Update     : Jan 07, 2021  : Linear Regresion addition
//# *  Update     : Mar 01, 2021  : Enchantments with Bollinger Bands, and Linear Regression
//# *  Update     : Mar 24, 2021  : Linear Regression enable both Deviation Plottings, slightly re-organized script inputs and added tips for options
//# *  Update     : Apr 20, 2021  : Added Alerts to Pivot Support & Resistance Levels, Linear Regression, Previous HL, BB stDev 3rd and 4th Band, LEMA
//# *                                - Added ability to customize Pivot Support & Resistance Levels
//# *                                - Added Camarilla Level 6  
//# *                                - Enlarged labels with tooltips added  
//# *                                - Imporved Price Range Meter 
//# *  Update     : Nov 22, 2021  : Pine Error Fix : probable cause of the error is likely pine core update by pine team may have affected the scripts behaviour
//# *  Update     : Dec 15, 2021  : Slight improvments and additions
//# *                                - Volume info along with avearage volume added to statistical panel
//# *                                - Imporved Price Range Meter 
//# *                                - Converted to Pine v5 
//# *  Update     : May 29, 2022  : Optimization and user requests
//# *                                - Pivot Points Timeframe AUTO resolution determination made same as TV's build-in  
//# *                                - More Customization options  
//# *                                  * Pivot S&R Level Lables 
//# *                                  * Linear Regression Channel 
//# *                                  * Previous OHLC  
//# *  Update     : Jul 25, 2022  : User requests
//# *                                - Specific for Indian Users : Start Trading Week from Specific Day option added, default option is Monday
//# *                                - Display Middle Pivot S&R Level Lines option added, default value set to false
//# *                                - Individual color option for each Pivot S&R Level Line added. Disabling a specific pivot level option removed, instead color transparency can be adjusted or remove the line display
//# *                                - Pivot Points types extended to include 'Classic' and 'Traditional' pivot points
//# *                                - Slight aesthetic changes 
//# *  Update     : Sep 15, 2022  : Indicator addition, User Requests and Improvments
//# *                                - customized pivot points high low indicator addition
//# *                                - replaced statistical panel label wth a table
//# *                                - slight aesthetic changes with historcal pivots (had to remove BB background fill)
//# *  Update     : Nov 10, 2022  : Pivot points high low improvments 
//# *                                - a temporary pivot point high low detection added (3 bars)
//# *                                - pivot point high low label customization
//# *                               OHLC data selection option added, besides internally calculated data now fetching data with security() function option is available
//# *                               Displying both Selected Pivots and CPR historical levels at the same time is made available
//# *                               Moving thr location of Market Sentiment Meter and Price Range Meter is now possible with horizontal and vertical offset options 
//# *
//# * ââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââ
// ââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââ //

//------------------------------------------------------------------------------
// security() function free higher timeframe price calculations
f_htf_ohlc(_go, _htf, _s, _wStart) =>
    var htf_o  = 0., var htf_h  = 0., var htf_l  = 0., htf_c = close    // higher time frame ohlc
    var htf_ox = 0., var htf_hx = 0., var htf_lx = 0., var htf_cx = 0.  // previous higher time frame ohlc

    if _go
        if _htf == 'D' and _s == 'Daily' ? dayofweek != dayofweek[1] : _htf == 'W' ? dayofweek(time) == _wStart and ta.change(time('D')) : ta.change(time(_htf))
            htf_ox := htf_o, htf_o  := open
            htf_hx := htf_h, htf_h  := high
            htf_lx := htf_l, htf_l  := low
            htf_cx := htf_c[1]
            true
        else
            htf_h := math.max(high, htf_h)
            htf_l := math.min(low , htf_l)
            true

    [htf_ox, htf_hx, htf_lx, htf_cx, htf_o, htf_h, htf_l, htf_c]

//------------------------------------------------------------------------------
// Get Pivot Points and Support & Resistance Levels

f_get_pivot(_go, _pvt, _o, _h, _l, _c, _o0) =>
    var r6x = 0., var r5x = 0., var r4x = 0., var r3x = 0., var r2x = 0., var r1x = 0.
    var px  = 0.
    var s1x = 0., var s2x = 0., var s3x = 0., var s4x = 0., var s5x = 0., var s6x = 0.

    if _go
        if _pvt == 'Camarilla'
            r5x := _h / _l * _c
            r4x := _c + (_h - _l) * 1.1 / 2
            r3x := _c + (_h - _l) * 1.1 / 4
            //r2x := _c + (_h - _l) * 1.1 / 6
            //r1x := _c + (_h - _l) * 1.1 / 12
            r6x := r5x + 1.168 * (r5x - r4x)
            //s1x := _c - (_h - _l) * 1.1 / 12
            //s2x := _c - (_h - _l) * 1.1 / 6
            s3x := _c - (_h - _l) * 1.1 / 4
            s4x := _c - (_h - _l) * 1.1 / 2
            s5x := _c - (r5x - _c)
            s6x := _c - (r6x - _c)
            s6x
        
        else if _pvt == 'Classic'
            px := math.avg(_h, _l, _c)
            s1x := px * 2 - _h
            s2x := px - (_h - _l)
            s3x := px - 2 * (_h - _l)
            s4x := px - 3 * (_h - _l)
            r1x := px * 2 - _l
            r2x := px + _h - _l
            r3x := px + 2 * (_h - _l)
            r4x := px + 3 * (_h - _l)
            r4x
        
        else if _pvt == 'DeMark'
            x = _c < _o ? _h + 2 * _l + _c : _c > _o ? 2 * _h + _l + _c : _h + _l + 2 * _c
            px  := x / 4
            s1x := x / 2 - _h
            r1x := x / 2 - _l
            r1x
    
        else if _pvt == 'Floor'
            px  := math.avg(_h, _l, _c)
            s1x := px * 2 - _h
            s2x := px - (_h - _l)
            s3x := _l - 2 * (_h - px)
            r1x := px * 2 - _l
            r2x := px + _h - _l
            r3x := _h + 2 * (px - _l)
            r3x
    
        else if _pvt == 'Fibonacci'
            px  := math.avg(_h, _l, _c)
            r3x := px + _h - _l
            r2x := px + (_h - _l) * .618
            r1x := px + (_h - _l) * .382
            s1x := px - (_h - _l) * .382
            s2x := px - (_h - _l) * .618
            s3x := px - (_h - _l)
            s3x
    
        else if _pvt == 'Swing'
            r3x := _o0 + _h - _l
            r2x := _o0 + (_h - _l) * .618
            r1x := _o0 + (_h - _l) * .5
            s1x := _o0 - (_h - _l) * .5
            s2x := _o0 - (_h - _l) * .618
            s3x := _o0 - (_h - _l)
            s3x

        else if _pvt == 'Traditional'
            px := math.avg(_h, _l, _c)
            s1x := px * 2 - _h
            s2x := px - (_h - _l)
            s3x := px * 2 - (2 * _h - _l)
            s4x := px * 3 - (3 * _h - _l)
            s5x := px * 4 - (4 * _h - _l)
            r1x := px * 2 - _l
            r2x := px + _h - _l
            r3x := px * 2 + _h - 2 * _l
            r4x := px * 3 + _h - 3 * _l
            r5x := px * 4 + _h - 4 * _l
            r5x

        else if _pvt == 'Woodie'
            px  := (_h + _l + 2 * _o0) / 4
            r1x := 2 * px - _l
            r2x := px + _h - _l
            r3x := _h + 2 * (px - _l)
            r4x := r3x + _h - _l
            s1x := 2 * px - _h
            s2x := px - (_h - _l)
            s3x := _l - 2 * (_h - px)
            s4x := s3x - (_h - _l)
            s4x

    [r6x, r5x, r4x, r3x, r2x, r1x, px, s1x, s2x, s3x, s4x, s5x, s6x]

//------------------------------------------------------------------------------
// Central Pivot Range

f_cpr(_h, _l, _c) =>
    [math.avg(_h, _l, _c), math.avg(_h, _l), 2 * math.avg(_h, _l, _c) - math.avg(_h, _l)]

//------------------------------------------------------------------------------
// line/label/alert functions

f_drawLineX(_x1, _y1, _x2, _y2, _xloc, _extend, _color, _style, _width) =>
    var id = line.new(_x1, _y1, _x2, _y2, _xloc, _extend, _color, _style, _width)

    if _y1 > 0 and _y2 > 0
        line.set_xy1(id, _x1, _y1)
        line.set_xy2(id, _x2, _y2)
        line.set_color(id, _color)
    else
        line.set_xy1(id, _x1, close)
        line.set_xy2(id, _x2, close)
        line.set_color(id, #ffffff00)

f_drawOnlyLabelX(_x, _y, _text, _xloc, _yloc, _color, _style, _textcolor, _size, _textalign, _tooltip) =>
    label.new(_x, _y, _text, _xloc, _yloc, _color, _style, _textcolor, _size, _textalign, _tooltip)

f_drawLabelX(_x, _y, _text, _xloc, _yloc, _color, _style, _textcolor, _size, _textalign, _tooltip) =>
    var id = label.new(_x, _y, _text, _xloc, _yloc, _color, _style, _textcolor, _size, _textalign, _tooltip)
    label.set_text(id, _text)
    label.set_tooltip(id, _tooltip)
    
    if _y > 0
        label.set_xy(id, _x, _y)
        label.set_textcolor(id, _textcolor)
    else
        label.set_xy(id, _x, close)
        label.set_textcolor(id, #00000000)

f_crossingLevelX(_price, _level) =>
    (_level > _price and _level < _price[1]) or (_level < _price and _level > _price[1])

f_processPivotLevelX(_show, _x1, _y, _x2, _c, _s, _w, _lb, pivot, _levels, _pos) =>
    if _show
        f_drawLineX(_x1, _y, _x2, _y, xloc.bar_time, extend.none, _c, _s, _w)

        if _levels != 'None' and _lb != ''
            f_drawLabelX(_pos == 'Last Bar' ? timenow : _x2, _y, (_levels == 'Levels' ? _lb : _lb + ' (' + str.tostring(_y, format.mintick) + ')') + (_pos == 'Last Bar' ? '\n\n' : ''), xloc.bar_time, yloc.price, #00000000, label.style_label_left, _c, size.normal, text.align_left, pivot + ' ' + _lb + ' (' + str.tostring(_y, format.mintick) + ')')

    if f_crossingLevelX(close, _y) and _show
        alert(pivot + ' (PVTvX) : ' + syminfo.ticker + ' crossing ' + pivot + ' level ' + _lb + ' level, price ' + str.tostring(_y, format.mintick))

f_getStyle(_style) =>
    _style == 'Solid' ? line.style_solid : _style == 'Dotted' ? line.style_dotted : line.style_dashed

f_getTradedVolume(_len, _calc, _offset) =>
    if _calc
        vol   = 0.
        for x = 0 to _len - 1
            vol += volume[_offset + x]
        vol

indicator('Pivot Points [KrisWaters] vX by DGT', 'PVTvX ÊÊ DGT â¼â¾', true, max_lines_count=275, max_bars_back=5000)

// ---------------------------------------------------------------------------------------------- //
// Definitions ---------------------------------------------------------------------------------- //

group_pick_a_pivot = 'Pivot Points Setup'
group_pp_l         = 'Pivot Points Line/Label Customization'
group_tools        = 'Tool Add-Ons'
group_indicators   = 'Indicator Add-Ons'
group_panel        = 'Statistical Panel Add-Ons'

tooltip_pick_a_pivot = 'Pivot Points [KrisWaters] vX is a technical analysis indicator used to determine the overall trend of the market over different time frames. The Pivot Points vX indicator consists of a pivot point (PP) level and several support (S) and resistance (R) levels.\n\n' +
                        'The following types of the Pivot Points are included:\n - Camarilla\n - DeMark\n - Fibonacci\n - Floor\n - Swing\n - Woodie'

tooltip_tf           = 'The indicator resolution is set by the input of the Pivot Points TF. If the Pivot Points TF is set to AUTO (the default value), then the increased resolution is determined by the following algorithm:\n' +
                        ' - for intraday resolutions up to and including 15 min, DAY (1D) is used\n - for intraday resolutions more than 15 min, WEEK (1W) is used\n - for daily resolutions MONTH is used (1M)\n - for weekly and monthly resolutions, 12-MONTH (12M) is used\n\n' +
                        'ps : difference between Session and Daily - Daily will take into account extended hours (if present on the chart) during pivot calculations, whereas Session will assume only regular trading hours. Session is default value for AUTO pivot timeframe'

tooltip_sentiment    = 'Market Sentiment Meter is based on price levels compared to Central Pivot Range (CPR) and selected Pivot Points support and resistance levels'

tooltip_range        = 'Displays graphical price range during the higher time frame period as well its previous higher time frame range\nincludes the range numerical display calculated based on selected ATR period and multiplier'

tooltip_panel        = 'provides evaluated result of some of most used technical indicators and some custom interpreted indicators'

tooltip_adx_line     = 'â how to read adx colored dmi line â· \n' +
                        '* triangle shapes:\n â²- bullish : diplus >= diminus\n â¼- bearish : diplus < diminus\n' + 
                        '* colors:\n  green - bullish trend : adx >= strongTrend and di+ > di-\n  red - bearish trend : adx >= strongTrend and di+ < di- \n  gray - no trend : weakTrend < adx < strongTrend\n  yellow - weak trend : adx < weakTrend\n' + 
                        '* color density:\n  darker : adx growing\n  lighter : adx falling' 
                        
tooltip_adx          = 'ADX Colored Directional Movement Line is custom interpretation of Directional Movement (DMI) with aim to present all 3 DMI indicator components with SINGLE line\n' + 
                        'Plotted on top of the Main Price Chart\n\n' + tooltip_adx_line

tooltip_pvt          = 'The Pivot Points High Low indicator aims to predict and determine price changes and potential reversals in the market'

tooltipohlcData      = 'Internall Calculated option is when OHLC values are calculated within the script whereus Fetching from \'security()\' function option uses build-in function the get the required OHLC values' + 
                        '\n\nPS1 : Using request.security() function may introduce future leak in scripts which may lead to misleading results' +
                        '\n\nPS2 : Internall Calculated option is default option in case Start Trading Week from a Specific Day is set to any day other then Monday'

tooltpi_bb           = 'A Bollinger Band is a technical analysis tool defined by a set of lines plotted two standard deviations (positively and negatively) away from a simple moving average (SMA) of the security\'s price\n' + 
                        'This customization allows plotting of eight bands that can be adjusted to user preferences'

tooltip_linreg       = 'A line that best fits the prices specified over a user-defined time period. It is calculated using the least squares method\n' + 
                        'Both Upper/Lower and Standart Devaiation channels are plotted'

tooltip_log_ema      = 'Logistic Map Equation with combination of Exponential Moving Average ( EMA )'

tooltip_pma_line     = 'â how to read volatility colored price/ma line â·  \n' + 
                        '* triangle shapes:\n â² â bullish, price action above moving average\n â¼ â bearish, price action below moving average\n' + 
                        '* colors:\n gray/black - low volatility\n green/red â price action in threshold bands\n dark green/red â price action exceeds threshold bands'
                        //'evaluation given herein does not constitute professional and/or financial advice'
                        
tooltip_pma          = 'Volatility Colored Price/MA Line, Custom interpretation of the idea âPrices high above the moving average (MA) or low below it are likely to be remedied in the future by a reverse price movementâ\n' + 
                        'Plotted on bottom of the Main Price Chart\n\n' + tooltip_pma_line +
                        '\n\nfor further details, please visit study Price Distance to its MA by DGT'

tooltip_vwcb         = 'Volume Weighted Bars, a study of KÄ±vancÌ§ OÌzbilgicÌ§, aims to present whether volume supports price movements'

tooltip_ichimoku     = 'The Ichimoku Cloud, is a collection of technical indicators that give it a unique capacity to show support and resistance levels, momentum and trend direction'

tooltip_vwap         = 'Volume Weighted Average Price (VWAP) is a technical analysis tool used to measure the average price weighted by volume. VWAP is typically used with intraday charts as a way to determine the general direction of intraday prices. It\'s similar to a moving average in that when price is above VWAP, prices are rising and when price is below VWAP, prices are falling. VWAP is primarily used by technical analysts to identify market trend'

tooltip_rsi          = 'Relative strength index. It is calculated based on rma\'s of upward and downward change of x'

tooltip_stoch        = 'A stochastic oscillator is a momentum indicator comparing a particular closing price of a security to a range of its prices over a certain period of time'

tooltip_macd         = 'Moving average convergence divergence (MACD) is a trend-following momentum indicator that shows the relationship between two moving averages of a securityâs price'

// -Inputs ââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââ //

pivot  = input.string('Camarilla', 'Pick a Pivot', options=['Camarilla', 'Classic', 'DeMark', 'Fibonacci', 'Floor', 'Swing', 'Traditional', 'Woodie', 'ð None'], group=group_pick_a_pivot, tooltip=tooltip_pick_a_pivot)
htf_tf = input.string('Auto', 'Pivot Points Timeframe', options=['Auto', '15 Min', '1 Hour', '4 Hour', 'Session', 'Daily', 'Weekly', 'Monthly', 'Quarterly', 'Yearly'], group=group_pick_a_pivot, tooltip=tooltip_tf)
htf    = htf_tf == '15 Min' ? '15' : htf_tf == '1 Hour' ? '60' : htf_tf == '4 Hour' ? '240' : htf_tf == 'Session' ? 'D' : htf_tf == 'Daily' ? 'D' : htf_tf == 'Weekly' ? 'W' : htf_tf == 'Monthly' ? 'M' : htf_tf == 'Quarterly' ? '3M' : htf_tf == 'Yearly' ? '12M' : 
            timeframe.isintraday and (timeframe.period == '1'  or timeframe.period == '3'  or timeframe.period == '5'  or timeframe.period == '15') ? 'D' : 
            timeframe.isintraday and (timeframe.period == '30' or timeframe.period == '45' or timeframe.period == '60' or timeframe.period == '120' or timeframe.period == '180' or timeframe.period == '240') ? 'W' : 
            timeframe.isdaily ? 'M' : timeframe.isweekly or timeframe.ismonthly ? '12M' : '3M'
ohlcData = input.string('Internally Calculated', '* OHLC Data Source', options = ['Internally Calculated', 'Fetching from \'security()\' function'], group=group_pick_a_pivot, tooltip = tooltipohlcData ) 

customStrat = input.string('Monday', '* Start Trading Week from a Specific Day', options=['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday'], group=group_pick_a_pivot, tooltip='Applicable for Weekly Pivot Points Timeframe only')
wStart = switch customStrat
    'Monday'    => 2//dayofweek.monday
    'Tuesday'   => 3//dayofweek.tuesday 
    'Wednesday' => 4//dayofweek.wednesday
    'Thursday'  => 5//dayofweek.thursday
    'Friday'    => 6//dayofweek.friday
    'Saturday'  => 7//dayofweek.saturday
    'Sunday'    => 1//dayofweek.sunday

srLabel    = input.string('Levels (Prices)', 'Pivot S&R Level Labels', options=['Levels', 'Levels (Prices)', 'None'], inline = 'LBL', group=group_pick_a_pivot)
srLabelPos = input.string('Pivot End', '', options=['Last Bar', 'Pivot End'], inline = 'LBL', group=group_pick_a_pivot)

i_show_r   = input.bool(true, 'Resistance Lines', inline='rLevel11', group=group_pick_a_pivot)
i_style_r  = input.string('Solid', '', options=['Dashed', 'Dotted', 'Solid'], inline='rLevel11', group=group_pick_a_pivot)
i_width_r  = input.int(2, '', minval=1, inline='rLevel11', group=group_pick_a_pivot)
i_color_r1 = input.color(color.rgb(255, 165, 47, 50), 'R1', inline='rLevel13', group=group_pick_a_pivot)
i_color_r2 = input.color(color.rgb(255, 165, 47, 50), 'R2', inline='rLevel13', group=group_pick_a_pivot)
i_color_r3 = input.color(color.rgb(255, 165, 47, 50), 'R3', inline='rLevel13', group=group_pick_a_pivot)
i_color_r4 = input.color(color.rgb(255, 165, 47, 50), 'R4', inline='rLevel13', group=group_pick_a_pivot)
i_color_r5 = input.color(color.rgb(255, 165, 47, 50), 'R5', inline='rLevel13', group=group_pick_a_pivot)
i_color_r6 = input.color(color.rgb(255, 165, 47, 50), 'R6', inline='rLevel13', group=group_pick_a_pivot)

i_show_p  = input.bool(true, 'Pivot Point Line', inline='ppLeve', group=group_pick_a_pivot)
i_color_p = input.color(#0000f0, 'â', inline='ppLeve', group=group_pick_a_pivot)
i_style_p = input.string('Solid', '', options=['Dashed', 'Dotted', 'Solid'], inline='ppLeve', group=group_pick_a_pivot)
i_width_p = input.int(2, '', minval=1, inline='ppLeve', group=group_pick_a_pivot)

i_show_s   = input.bool(true, 'Support Linesâ', inline='sLevel1', group=group_pick_a_pivot)
i_style_s  = input.string('Solid', '', options=['Dashed', 'Dotted', 'Solid'], inline='sLevel1', group=group_pick_a_pivot)
i_width_s  = input.int(2, '', minval=1, inline='sLevel1', group=group_pick_a_pivot)
i_color_s1 = input.color(color.rgb(92, 0, 134,50), 'S1', inline='sLevel', group=group_pick_a_pivot)
i_color_s2 = input.color(color.rgb(92, 0, 134,50), 'S2', inline='sLevel', group=group_pick_a_pivot)
i_color_s3 = input.color(color.rgb(92, 0, 134,50), 'S3', inline='sLevel', group=group_pick_a_pivot)
i_color_s4 = input.color(color.rgb(92, 0, 134,50), 'S4', inline='sLevel', group=group_pick_a_pivot)
i_color_s5 = input.color(color.rgb(92, 0, 134,50), 'S5', inline='sLevel', group=group_pick_a_pivot)
i_color_s6 = input.color(color.rgb(92, 0, 134,50), 'S6', inline='sLevel', group=group_pick_a_pivot)

i_midPvt  = input.bool(false, 'Display Middle Pivot S&R Level Lines', group=group_pick_a_pivot)

dispWM    = input.string('None', 'Add Weekly/Monthly Pivots', options=['Both', 'Weekly', 'Monthly', 'None'], group=group_pick_a_pivot)
dispHist  = input.string('None', 'Show Historical Pivots', options=['Selected Pivots', 'Central Pivot Range', 'Both', 'None'], group=group_pick_a_pivot)

i_dispPVT = input.bool(true, 'Subsequent Pivots, Hours Prior to Session End', inline='SPVT', group=group_pick_a_pivot)
i_when    = input.int(6, '', minval=1, inline='SPVT', group=group_pick_a_pivot)

dispCPR     = input.bool(true, 'Central Pivot Range', group=group_pick_a_pivot)
i_color_tc  = input.color(#fa8072, 'TC', inline='CPR', group=group_pick_a_pivot)
i_color_cpr = input.color(#4262ba, 'CPR', inline='CPR', group=group_pick_a_pivot)
i_color_bc  = input.color(#9ef2e8, 'BC', inline='CPR', group=group_pick_a_pivot)
i_style_cpr = input.string('Dotted', '', options=['Dashed', 'Dotted', 'Solid'], inline='CPR', group=group_pick_a_pivot)
i_width_cpr = input.int(2, '', minval=1, inline='CPR', group=group_pick_a_pivot)

dispOHLC     = input.bool(true, 'Previous HTF OHLC', inline='OHLC', group=group_pick_a_pivot)
i_show_o     = input.bool(true, 'O', inline='OHLC', group=group_pick_a_pivot)
i_show_h     = input.bool(true, 'H', inline='OHLC', group=group_pick_a_pivot)
i_show_l     = input.bool(true, 'L', inline='OHLC', group=group_pick_a_pivot)
i_show_c     = input.bool(true, 'C', inline='OHLC', group=group_pick_a_pivot)
i_style_ohlc = input.string('Dashed', '', options=['Dashed', 'Dotted', 'Solid'], inline='OHLC', group=group_pick_a_pivot)

addons    = input.bool(true, '|----------|ââAdd-Ons On/Offââ|----------|', group='Add-Ons')

isMeter   = input.bool(true, 'Market Sentiment Meter', group=group_tools, tooltip=tooltip_sentiment)
msmHOffset = input.int(-23, 'ââOffset : Horizontal', inline='MSM',  group=group_tools)
msmVOffset = input.int(0, 'Vertical', inline='MSM',  group=group_tools) / 10
isRange   = input.bool(true, 'Price Range Meter / ATR Range Meter â', group=group_tools, tooltip=tooltip_range)
atrLength = input.int(14   , 'ââATR : Length', inline='ATR', group=group_tools)
atrRange  = input.float(2. , 'Mult', step=.1, inline='ATR', group=group_tools)
prmHOffset = input.int(-13, 'ââOffset : Horizontal', inline='PRM',  group=group_tools) * ta.change(time)
prmVOffset = input.int(-7, 'Vertical', inline='PRM',  group=group_tools) / 10
isLabel   = input.bool(true, 'Statistical Panel', inline='STAT', group=group_tools, tooltip=tooltip_panel)
//pLabel    = input.int(0    , '', inline='STAT', group=group_tools)
i_textSize = input.string('Small', '', options=['Tiny', 'Small', 'Normal', 'Large'], inline='STAT', group=group_tools)
statPos   = input.string('Top Right', '', options=['Top Left', 'Top Center', 'Top Right', 'Middle Right', 'Bottom Left', 'Bottom Center'], inline='STAT', group=group_tools) 

dispPVT   = input.bool(true , 'Pivot Points High Lowââ------------------|', group=group_indicators, tooltip=tooltip_pvt)
pvtLength = input.int(20, "ââPivot Points High Low : Left/Right Length", minval=1, group=group_indicators)
pvtPrice  = input(true, "Pivot Points High Low : Display Pivot High/Low Price", group=group_indicators)
pvtChange = input(true, "Pivot Points High Low : Display Pivot High/Low Price Change", group=group_indicators)
pvtVolume = input(true, "Pivot Points High Low : Display Cumulative Volume", group=group_indicators)
pvtText   = input.string('Small', "ââPivot Points High Low : Text Size", options=['Tiny', 'Small', 'Normal'], group=group_indicators)
pvtTextSize = pvtText == 'Small' ? size.small : pvtText == 'Normal' ? size.normal : size.tiny

dispBB   = input.bool(true , 'Bollinger Bandsââ------------------|', group=group_indicators, tooltip=tooltpi_bb)
extendBB = input.bool(false, 'Bollinger Bands : Extend Bands Display', group=group_indicators)
//gShow   = input.bool(false, 'Bollinger Bands : Fill Background', group=group_indicators)
bbSrc    = input.source(close, 'ââBollinger Bands : Source', group=group_indicators)
bbLen    = input.int(21     , 'ââBollinger Bands : Length', minval=1, group=group_indicators)
bbMult1  = input.float(1.   , 'ââBollinger Bands : 1st Band Multiplier', minval=1, group=group_indicators)
bbMult2  = input.float(1.618, 'ââBollinger Bands : 2nd Band Multiplier', minval=1, group=group_indicators)
bbMult3  = input.float(2.618, 'ââBollinger Bands : 3rd Band Multiplier', minval=1, group=group_indicators)
//bbMult4  = input.float(3.618, 'ââBollinger Bands : 4th Band Multiplier', minval=1, group=group_indicators)

dispDM = input.bool(true, 'ADX Colored DMI Lineââ------------------|', group=group_indicators, tooltip=tooltip_adx)
adxS   = input.int(14, 'ââDMI : ADX Smoothing', minval=1, group=group_indicators)
diLen  = input.int(14, 'ââDMI : DI Length', minval=1, group=group_indicators)
strTr  = input.int(25, 'ââDMI : Strong Trend Theshold', group=group_indicators)
wkTr   = input.int(17, 'ââDMI : Weak Trend Theshold', group=group_indicators)

dispPM = input.bool(true, 'Volatility Colored Price/MA Lineââ----------|', group=group_indicators, tooltip=tooltip_pma)
pmrLen = input.int(21   , 'ââP/MA : MA Length', minval=1, group=group_indicators)
stDevL = input.float(.75, 'ââP/MA : Lower Deviation', minval=0, step=.25, maxval=3, group=group_indicators)
stDevH = input.float(2. , 'ââP/MA : Higher Deviation', minval=0, step=.25, maxval=3, group=group_indicators)

vwcb      = input.bool(true, 'Volume Weighted Colored Barsââ------------|', group=group_indicators, tooltip=tooltip_vwcb)
vwcbLen   = input.int(21     , 'ââVWCB : Volume MA Length', minval=1, group=group_indicators)
vwcbUpper = input.float(1.618, 'ââVWCB : Upper Theshold', minval=0.1, step=.1, group=group_indicators)
vwcbLower = input.float(.618 , 'ââVWCB : Lower Theshold', minval=0.1, step=.1, group=group_indicators)

dispLEMA = input.bool(true, 'Logistic EMA (LEMA)ââ------------------|', group=group_indicators, tooltip=tooltip_log_ema)
lemaSrc  = input.source(close, 'ââLEMA : Source', group=group_indicators)
lemaLen  = input.int(21      , 'ââLEMA : Length', minval=1, maxval=50, group=group_indicators)

vwapPlot   = input.bool(true, 'Volume Weighted Average Price (VWAP)ââ-------|', group=group_indicators, tooltip=tooltip_vwap)
//hideonDWM  = input.bool(false, title='â®© VWAP : Hide VWAP on 1D or Above', group=group_indicators)
//var anchor = input.string(defval='Session', title='âââ®© VWAP : Anchor Period', options=['Session', 'Week', 'Month', 'Quarter', 'Year', 'Decade', 'Century'], group=group_indicators)
src        = input.source(title='ââVWAP : Source', defval=hlc3, group=group_indicators)
offset     = input.int(0, title='ââVWAP : Offset', group=group_indicators)
showBands  = input.bool(true, title='VWAP : Calculate Bands, ', inline='VWAP', group=group_indicators)
stdevMult  = input.float(1.0, title='Bands Multiplier', inline='VWAP', group=group_indicators)

ichimoku            = input.bool(true, 'Ichimoku Cloud Projectionââ---------------|', group=group_indicators, tooltip=tooltip_ichimoku)
showKumo            = input.bool(true, 'Ichimoku : Extend Kumo Cloud Display', group=group_indicators)
conversionPeriods   = input.int(9 , 'ââIchimoku : Conversion Line Periods', minval=1, group=group_indicators)
basePeriods         = input.int(26, 'ââIchimoku : Base Line Periods', minval=1, group=group_indicators)
laggingSpan2Periods = input.int(52, 'ââIchimoku : Lagging Span 2 Periods', minval=1, group=group_indicators)
displacement        = input.int(26, 'ââIchimoku : Displacement', minval=1, group=group_indicators)

linreg       = input.bool(true, 'Linear Regressionââ-------------------|', group=group_indicators, tooltip=tooltip_linreg)
upperMult    = input.int(2, 'ââLinReg : Upper Deviation', inline='lrUp', group=group_indicators)
style_lrU    = input.string('Solid', '', options=['Dashed', 'Dotted', 'Solid'], inline='lrUp', group=group_indicators)
lowerMult    = input.int(-2, 'ââLinReg : Lower Deviation', inline='lrDn', group=group_indicators)
style_lrD    = input.string('Solid', '', options=['Dashed', 'Dotted', 'Solid'], inline='lrDn', group=group_indicators)
showPearson  = input.bool(false, 'LinReg : Show Pearson`s R', group=group_indicators)
pearsonAlert = input.float(.68, 'ââLinReg : Pearson`s R Threshold' , group=group_indicators, tooltip = 'Triggers alert when specified threshold of Pearson\'s R value exceeds')
extendLines  = input.bool(false, 'LinReg : Extend Lines', group=group_indicators)
linregLength = input.int(100, 'ââLinReg : Count', minval=2, maxval=300, group=group_indicators)
linregSrc    = input.source(close, 'ââLinReg : Source', group=group_indicators)
linregCUp    = input.color(color.blue, 'ââLinReg : Positive Slope ', inline='Lcol', group=group_indicators)
linregCDn    = input.color(color.blue, 'Negative Slope', inline = 'Lcol', group=group_indicators)

dummy6        = input.bool(false, 'RSI Oscillatorââ-------------------------|', group=group_panel, tooltip=tooltip_rsi)
rsiSrc        = input.source(close, 'ââRSI : Source', group=group_panel)
rsiLength     = input.int(14, 'ââRSI : Length', minval=1, group=group_panel)
rsiOversold   = input.int(30, 'ââRSI : OverSold Theshold', minval=1, group=group_panel)
rsiOverbought = input.int(70, 'ââRSI : OverBought Theshold', minval=1, group=group_panel)

dummy7          = input.bool(false, 'Stochastic Oscillatorââ----------------|', group=group_panel, tooltip=tooltip_stoch)
stochLengthK    = input.int(14, 'ââStoch : %K', minval=1, group=group_panel)
stochLengthD    = input.int(3 , 'ââStoch : %D', minval=1, group=group_panel)
stochSmoothingK = input.int(3 , 'ââStoch : Smoothing', minval=1, group=group_panel)
stochOversold   = input.int(20, 'ââStoch : OverSold Theshold', minval=1, group=group_panel)
stochOverbought = input.int(80, 'ââStoch : OverBought Theshold', minval=1, group=group_panel)

dummy8           = input.bool(false, 'MACD Oscillatorââ-----------------|', group=group_panel, tooltip=tooltip_macd)
macdSrc          = input.source(close, 'ââMACD : Source', group=group_panel)
macdFastLength   = input.int(12, 'ââMACD : Fast Length', minval=1, group=group_panel)
macdSlowLength   = input.int(26, 'ââMACD : Slow Length', minval=1, group=group_panel)
macdSignalLength = input.int(9 , 'ââMACD : Signal Smoothing Length', minval=1, group=group_panel)

pll = input.int(987, 'Indicator and Historical Pivots', group='Ploting Length')

// -Calculations ââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââ //
[htf_o1s, htf_h1s, htf_l1s, htf_c1s, htf_os] = request.security(syminfo.tickerid, htf, [open[1], high[1], low[1], close[1], open], lookahead = barmerge.lookahead_on)
[htf_o1, htf_h1, htf_l1, htf_c1, htf_o  , htf_h, htf_l, htf_c] = f_htf_ohlc(true, htf, htf_tf, wStart)
htf_o1 := customStrat != 'Monday' ? htf_o1 : ohlcData == 'Internally Calculated' ? htf_o1 : htf_o1s
htf_h1 := customStrat != 'Monday' ? htf_h1 : ohlcData == 'Internally Calculated' ? htf_h1 : htf_h1s
htf_l1 := customStrat != 'Monday' ? htf_l1 : ohlcData == 'Internally Calculated' ? htf_l1 : htf_l1s
htf_c1 := customStrat != 'Monday' ? htf_c1 : ohlcData == 'Internally Calculated' ? htf_c1 : htf_c1s
htf_o  := customStrat != 'Monday' ? htf_o  : ohlcData == 'Internally Calculated' ? htf_o  : htf_os

[htf_ows, htf_hws, htf_lws, htf_cws, htf_ow0s] = request.security(syminfo.tickerid, 'W', [open[1], high[1], low[1], close[1], open], lookahead = barmerge.lookahead_on)
[htf_ow, htf_hw, htf_lw, htf_cw, htf_ow0, _    , _    , _    ] = f_htf_ohlc(htf != 'W' and (dispWM == 'Both' or dispWM == 'Weekly' ), 'W', '', wStart)
htf_ow  := customStrat != 'Monday' ? htf_ow  : ohlcData == 'Internally Calculated' ? htf_ow  : htf_ows
htf_hw  := customStrat != 'Monday' ? htf_hw  : ohlcData == 'Internally Calculated' ? htf_hw  : htf_hws
htf_lw  := customStrat != 'Monday' ? htf_lw  : ohlcData == 'Internally Calculated' ? htf_lw  : htf_lws
htf_cw  := customStrat != 'Monday' ? htf_cw  : ohlcData == 'Internally Calculated' ? htf_cw  : htf_cws
htf_ow0 := customStrat != 'Monday' ? htf_ow0 : ohlcData == 'Internally Calculated' ? htf_ow0 : htf_ow0s

[htf_oms, htf_hms, htf_lms, htf_cms, htf_om0s] = request.security(syminfo.tickerid, 'M', [open[1], high[1], low[1], close[1], open], lookahead = barmerge.lookahead_on)
[htf_om, htf_hm, htf_lm, htf_cm, htf_om0, _    , _    , _    ] = f_htf_ohlc(htf != 'M' and (dispWM == 'Both' or dispWM == 'Monthly'), 'M', '', wStart)
htf_om  := ohlcData == 'Internally Calculated' ? htf_om  : htf_oms
htf_hm  := ohlcData == 'Internally Calculated' ? htf_hm  : htf_hms
htf_lm  := ohlcData == 'Internally Calculated' ? htf_lm  : htf_lms
htf_cm  := ohlcData == 'Internally Calculated' ? htf_cm  : htf_cms
htf_om0 := ohlcData == 'Internally Calculated' ? htf_om0 : htf_om0s

[r6m, r5m, r4m, r3m, r2m, r1m, pm, s1m, s2m, s3m, s4m, s5m, s6m] = f_get_pivot(htf != 'M' and (dispWM == 'Both' or dispWM == 'Monthly'), pivot, htf_om, htf_hm, htf_lm, htf_cm, htf_om0)
[r6w, r5w, r4w, r3w, r2w, r1w, pw, s1w, s2w, s3w, s4w, s5w, s6w] = f_get_pivot(htf != 'W' and (dispWM == 'Both' or dispWM == 'Weekly' ), pivot, htf_ow, htf_hw, htf_lw, htf_cw, htf_ow0)
[r61, r51, r41, r31, r21, r11, p1, s11, s21, s31, s41, s51, s61] = f_get_pivot(pivot != 'ð None', pivot, htf_o1, htf_h1, htf_l1, htf_c1, htf_o  )
[r6 , r5 , r4 , r3 , r2 , r1 , p , s1 , s2 , s3 , s4 , s5 , s6 ] = f_get_pivot(true              , pivot, htf_o , htf_h , htf_l , htf_c , htf_o  )

[cpr1, bc1, tc1] = f_cpr(htf_h1, htf_l1, htf_c1)
[cpr, bc, tc]    = f_cpr(htf_h , htf_l , htf_c )

//------------------------------------------------------------------------------
// Linear Regression - Build-in : slight presentation changes

extend = extendLines ? extend.right : extend.none

calcSlope(linregSrc, linregLength) =>
    max_bars_back(linregSrc, 300)

    if not barstate.islast or linregLength <= 1
        [float(na), float(na), float(na)]
    else
        sumX = 0.0
        sumY = 0.0
        sumXSqr = 0.0
        sumXY = 0.0

        for i = 0 to linregLength - 1 by 1
            val = linregSrc[i]
            per = i + 1.0
            sumX += per
            sumY += val
            sumXSqr += per * per
            sumXY += val * per
            sumXY

        slope = (linregLength * sumXY - sumX * sumY) / (linregLength * sumXSqr - sumX * sumX)
        average = sumY / linregLength
        intercept = average - slope * sumX / linregLength + slope

        [slope, average, intercept]
[slope, average, intercept] = calcSlope(linregSrc, linregLength)

calcDev(linregSrc, linregLength, slope, average, intercept) =>
    upDev = 0.0
    dnDev = 0.0
    stdDevAcc = 0.0
    dsxx = 0.0
    dsyy = 0.0
    dsxy = 0.0
    periods = linregLength - 1
    daY = intercept + slope * periods / 2
    val = intercept

    for i = 0 to periods by 1
        price = high[i] - val

        if price > upDev
            upDev := price
            upDev

        price := val - low[i]

        if price > dnDev
            dnDev := price
            dnDev

        price := linregSrc[i]
        dxt = price - average
        dyt = val - daY
        price -= val
        stdDevAcc += price * price
        dsxx += dxt * dxt
        dsyy += dyt * dyt
        dsxy += dxt * dyt
        val += slope
        val

    stdDev = math.sqrt(stdDevAcc / (periods == 0 ? 1 : periods))
    pearsonR = dsxx == 0 or dsyy == 0 ? 0 : dsxy / math.sqrt(dsxx * dsyy)

    [stdDev, pearsonR, upDev, dnDev]

[stdDev, pearsonR, upDev, dnDev] = calcDev(linregSrc, linregLength, slope, average, intercept)

startPrice = intercept + slope * (linregLength - 1)
endPrice = intercept

if addons and linreg //and barstate.islast
    iStart = bar_index - linregLength + 1
    iEnd   = bar_index
    style_lru = f_getStyle(style_lrU), style_lrd = f_getStyle(style_lrD)
    f_drawLineX(iStart, startPrice                     , iEnd, endPrice                     , xloc.bar_index, extend, startPrice > endPrice ? linregCDn : linregCUp, line.style_solid , 1)
    f_drawLineX(iStart, startPrice + upperMult * stdDev, iEnd, endPrice + upperMult * stdDev, xloc.bar_index, extend, startPrice > endPrice ? linregCDn : linregCUp, style_lru, 2)
    f_drawLineX(iStart, startPrice + lowerMult * stdDev, iEnd, endPrice + lowerMult * stdDev, xloc.bar_index, extend, startPrice > endPrice ? linregCDn : linregCUp, style_lrd, 2)
    f_drawLineX(iStart, startPrice + upDev             , iEnd, endPrice + upDev             , xloc.bar_index, extend, startPrice > endPrice ? linregCDn : linregCUp, style_lru, 3)
    f_drawLineX(iStart, startPrice - dnDev             , iEnd, endPrice - dnDev             , xloc.bar_index, extend, startPrice > endPrice ? linregCDn : linregCUp, style_lrd, 3)

    if f_crossingLevelX(close, endPrice)
        alert('LinReg (PVTvX) : ' + syminfo.ticker + ' crossing linear regression line')
    if f_crossingLevelX(close, endPrice + upperMult * stdDev)
        alert('LinReg (PVTvX) : ' + syminfo.ticker + ' crossing linear regression upper standart deviation line')
    if f_crossingLevelX(close, endPrice + lowerMult * stdDev)
        alert('LinReg (PVTvX) : ' + syminfo.ticker + ' crossing linear regression lower standart deviation line')
    if f_crossingLevelX(close, endPrice + upDev)
        alert('LinReg (PVTvX) : ' + syminfo.ticker + ' crossing linear regression upper deviation line')
    if f_crossingLevelX(close, endPrice - upDev)
        alert('LinReg (PVTvX) : ' + syminfo.ticker + ' crossing linear regression lower deviation line')
    if f_crossingLevelX(pearsonR, pearsonAlert)
        alert('LinReg (PVTvX) : ' + syminfo.ticker + ' crossing pearsonR threshold')

if addons and linreg and showPearson and not na(pearsonR)
    f_drawLabelX(bar_index - linregLength + 1, startPrice - dnDev, str.tostring(pearsonR, '#.###'), xloc.bar_index, yloc.price, #00000000, label.style_label_up, #f000ff, size.normal, text.align_center, 'Pearson`s R')

//------------------------------------------------------------------------------
// ADX Colored Directional Movement Index Line by DGT

[diplus, diminus, adxValue] = ta.dmi(diLen, adxS)

dmiBull = diplus >= diminus and adxValue >= strTr
dmiBear = diplus <  diminus and adxValue >= strTr
dmiWeak = adxValue < strTr  and adxValue >  wkTr

dmiColor = dmiBull ? adxValue > adxValue[1] ? #006400 : color.green : dmiBear ? adxValue > adxValue[1] ? #910000 : color.red : dmiWeak ? adxValue > adxValue[1] ? color.black : color.gray : adxValue > adxValue[1] ? #FFC40C : color.yellow

//------------------------------------------------------------------------------
// Price Distance to its Moving Average by DGT

pmar = (close / ta.sma(close, pmrLen) - 1) * 100
[_, uL, lL] = ta.bb(pmar, pmrLen * 10, stDevL)
[_, uH, lH] = ta.bb(pmar, pmrLen * 10, stDevH)

[pmaColor, pmaText, pmaText1] = if pmar >= 0
    if pmar > uH
        [color.green, 'strong\nbullish', 'over overbought zone']
    else if pmar < uH and pmar > uL
        [color.green, 'bullish', 'in overbought zone']
    else
        [color.black, 'trendless', 'low volotile price action in bullish zone']
else
    if pmar < lH
        [color.red, ' strong\nbearish', 'below oversold zone']
    else if pmar > lH and pmar < lL
        [color.red  , 'bearish', 'in oversold zone']
    else
        [color.black, 'trendless', 'low volotile price action in bearish zone']

//------------------------------------------------------------------------------
// Volume Weighted Colored Bars by KÄ±vanÃ§ ÃZBÄ°LGÄ°Ã
nzVolume = nz(volume)
volMA = ta.sma(nzVolume, vwcbLen)

B = nzVolume * (close - low) / (high - low)
S = nzVolume * (high - close) / (high - low)

vwcbColor = if close < open
    if nzVolume > volMA * vwcbUpper
        #7c0000
    else if nzVolume < volMA * vwcbLower
        #ff510085
else
    if nzVolume > volMA * vwcbUpper
        #58007a
    else if nzVolume < volMA * vwcbLower
        #d4aeff

//------------------------------------------------------------------------------
// Pivot Points High Low - build-in, slight presentation changes

pvtHigh           = ta.pivothigh(pvtLength, pvtLength)
pvtLow            = ta.pivotlow (pvtLength, pvtLength)
proceed           = not na(pvtHigh) or not na(pvtLow)

pvtLengthTemp     = 3
pvtHighTemp       = ta.pivothigh(pvtLengthTemp, pvtLengthTemp)
pvtLowTemp        = ta.pivotlow (pvtLengthTemp, pvtLengthTemp)
proceedTemp       = not na(pvtHighTemp) or not na(pvtLowTemp)

var x1            = 0
var x2            = 0
var x2Temp        = 0

var pvtHigh1      = 0.
var pvtLow1       = 0.
var pvtHigh1Temp  = 0.
var pvtLow1Temp   = 0.

//var pvtLast       = ''

if proceed
    x1 := x2
    x2 := bar_index

if proceedTemp
    x2Temp := bar_index

profileLength = x2 - x1
profileLengthTemp = x2Temp - pvtLengthTemp - x2 + pvtLength

//------------------------------------------------------------------------------
// Ichimoku Cloud - build-in, slight presentation changes

donchian(len) =>
    math.avg(ta.lowest(len), ta.highest(len))

conversionLine = donchian(conversionPeriods)
baseLine = donchian(basePeriods)
leadLine1 = math.avg(conversionLine, baseLine)
leadLine2 = donchian(laggingSpan2Periods)

aboveCloud = close > leadLine1[displacement - 1] and close > leadLine2[displacement - 1]
belowCloud = close < leadLine1[displacement - 1] and close < leadLine2[displacement - 1]
inCloud = close > leadLine1[displacement - 1] and close < leadLine2[displacement - 1] or close < leadLine1[displacement - 1] and close > leadLine2[displacement - 1]

//------------------------------------------------------------------------------
// Bollinger Bands - build-in

[_, u1, l1] = ta.bb(bbSrc, bbLen, bbMult1)
[_, u2, l2] = ta.bb(bbSrc, bbLen, bbMult2)
[_, u3, l3] = ta.bb(bbSrc, bbLen, bbMult3)
//[_, u4, l4] = ta.bb(bbSrc, bbLen, bbMult4)

//------------------------------------------------------------------------------
// Logistic EMA by DGT - custum application of Logistic Map Equation 
// https://www.tradingview.com/script/jUuBT0bO-Logistic-EMA-w-Signals-by-DGT/

logeq(_source, _length) =>
    ta.change(_source, _length) / _source[_length] * _source / ta.highest(_length) * (1 - _source / ta.highest(_length))
logema(_source, _length) =>
    (logeq(lemaSrc, lemaLen) + 1) * ta.sma(_source, _length)

lema     = logema(lemaSrc, lemaLen)
lema50   = logema(lemaSrc, 50)
lema100  = logema(lemaSrc, 100)
lema200  = logema(lemaSrc, 200)
lemaHigh = logema(high, 11)
lemaLow  = logema(low, 23)

dir = close > lemaHigh[1] ? 1 : close < lemaLow[1] ? -1 : 0
trend = ta.valuewhen(dir != 0, dir, 0)

maColor = lema > lema200 ? lema > lema100 ? lema > lema50 ? color.rgb(0, 92, 23, 0) : color.rgb(0, 92, 23, 0) : color.rgb(0, 92, 23, 0) : color.rgb(0, 92, 23, 0)
hlColor = trend == 1 ? #006400 : #910000

//------------------------------------------------------------------------------
// Trading Psychology - Fear & Greed Index by DGT : Panel Add-On
// https://www.tradingview.com/script/HfNGbuRt-Trading-Psychology-Fear-Greed-Index-by-DGT/

slowLength = 144
fastLength = 21
smoothLen  = 5
pmacd      = (close / ta.ema(close, slowLength) - 1) * 100
ror        = ta.change(close, slowLength) / close[slowLength] * 100
accDist    = close == high and close == low or high == low ? 0 : (2 * close - low - high) / (high - low)
moneyFlow  = math.sum(accDist * nzVolume, fastLength) / math.sum(nzVolume, fastLength) * 100
vix        = request.security('VIX', timeframe.period, -(close / ta.ema(close, slowLength) - 1) * 100, barmerge.gaps_off, barmerge.lookahead_on)
gold       = request.security('GOLD', timeframe.period, -(1 - close[fastLength] / close) * 100, barmerge.gaps_off, barmerge.lookahead_on)
avg        = nzVolume ? math.avg(pmacd, ror, vix, gold, moneyFlow) : math.avg(pmacd, ror, vix, gold)
feargreed  = ta.rma(avg, smoothLen)

//------------------------------------------------------------------------------
// VWAP - build-in
computeVWAP(src, isNewPeriod, stDevMultiplier) =>
    var float sumSrcVol = na
    var float sumVol = na
    var float sumSrcSrcVol = na

    sumSrcVol := isNewPeriod ? src * volume : src * volume + sumSrcVol[1]
    sumVol := isNewPeriod ? volume : volume + sumVol[1]
    // sumSrcSrcVol calculates the dividend of the equation that is later used to calculate the standard deviation
    sumSrcSrcVol := isNewPeriod ? volume * math.pow(src, 2) : volume * math.pow(src, 2) + sumSrcSrcVol[1]

    _vwap = sumSrcVol / sumVol
    variance = sumSrcSrcVol / sumVol - math.pow(_vwap, 2)
    variance := variance < 0 ? 0 : variance
    stDev = math.sqrt(variance)

    lowerBand = _vwap - stDev * stDevMultiplier
    upperBand = _vwap + stDev * stDevMultiplier

    [_vwap, lowerBand, upperBand]

//timeChange(period) =>
//    ta.change(time(period))

isNewPeriod = ta.change(time(htf))
//na(src[1]) ? true : anchor == 'Session' ? timeChange('D') : anchor == 'Week' ? timeChange('W') : anchor == 'Month' ? timeChange('M') : anchor == 'Quarter' ? timeChange('3M') : anchor == 'Year' ? timeChange('12M') : anchor == 'Decade' ? timeChange('12M') and year % 10 == 0 : anchor == 'Century' ? timeChange('12M') and year % 100 == 0 : false

float vwapValue = na
float std = na
float upperBandValue = na
float lowerBandValue = na

//if not(hideonDWM and timeframe.isdwm)
[_vwap, bottom, top] = computeVWAP(src, isNewPeriod, stdevMult)
vwapValue := _vwap
upperBandValue := showBands ? top : na
lowerBandValue := showBands ? bottom : na

// -Plotting ââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââ //

time_x1w = ta.valuewhen(ta.change(time('W')), time, 0)
time_x1m = ta.valuewhen(ta.change(time('M')), time, 0)
//time_x10 = ta.valuewhen(ta.change(time(htf)), time, 1)
//time_x11 = ta.valuewhen(ta.change(time(htf)), time, 0)
var time_x10 = 0
var time_x11 = 0
if htf == 'D' and htf_tf == 'Daily' ? dayofweek != dayofweek[1] : htf == 'W' ? dayofweek(time) == wStart and ta.change(time('D')) : ta.change(time(htf))
    time_x10 := time_x11
    time_x11 := time
time_x21 = 2 * time_x11 - time_x10
time_x1  = time_x21 + math.round(ta.change(time) * 7)
time_x2  = time_x21 + math.round(ta.change(time) * 13)

islast   = request.security(syminfo.tickerid, htf, barstate.islast, lookahead=barmerge.lookahead_on)
htf_time = htf == 'D' and htf_tf == 'Daily' ? dayofweek != dayofweek[1] : htf == 'W' ? dayofweek(time) == wStart and ta.change(time('D')) : ta.change(time(htf)) //ta.change(time(htf))

//------------------------------------------------------------------------------
// Pivots

when  = barstate.islast and pivot != 'ð None' and i_dispPVT and time_x21 - timenow < 3600000 * i_when
style_r = f_getStyle(i_style_r)
f_processPivotLevelX(when and i_show_r, time_x1, r6, time_x2, i_color_r6, style_r, i_width_r, '', pivot, srLabel, srLabelPos)
f_processPivotLevelX(when and i_show_r, time_x1, r5, time_x2, i_color_r5, style_r, i_width_r, '', pivot, srLabel, srLabelPos)
f_processPivotLevelX(when and i_show_r, time_x1, r4, time_x2, i_color_r4, style_r, i_width_r, '', pivot, srLabel, srLabelPos)
f_processPivotLevelX(when and i_show_r, time_x1, r3, time_x2, i_color_r3, style_r, i_width_r, '', pivot, srLabel, srLabelPos)
f_processPivotLevelX(when and i_show_r, time_x1, r2, time_x2, i_color_r2, style_r, i_width_r, '', pivot, srLabel, srLabelPos)
f_processPivotLevelX(when and i_show_r, time_x1, r1, time_x2, i_color_r1, style_r, i_width_r, '', pivot, srLabel, srLabelPos)

style_p = f_getStyle(i_style_p)
f_processPivotLevelX(when and i_show_p, time_x1, p, time_x2, i_color_p, style_p, i_width_p, '', pivot, srLabel, srLabelPos)

style_s = f_getStyle(i_style_s)
f_processPivotLevelX(when and i_show_s, time_x1, s1, time_x2, i_color_s1, style_s, i_width_s, '', pivot, srLabel, srLabelPos)
f_processPivotLevelX(when and i_show_s, time_x1, s2, time_x2, i_color_s2, style_s, i_width_s, '', pivot, srLabel, srLabelPos)
f_processPivotLevelX(when and i_show_s, time_x1, s3, time_x2, i_color_s3, style_s, i_width_s, '', pivot, srLabel, srLabelPos)
f_processPivotLevelX(when and i_show_s, time_x1, s4, time_x2, i_color_s4, style_s, i_width_s, '', pivot, srLabel, srLabelPos)
f_processPivotLevelX(when and i_show_s, time_x1, s5, time_x2, i_color_s5, style_s, i_width_s, '', pivot, srLabel, srLabelPos)
f_processPivotLevelX(when and i_show_s, time_x1, s6, time_x2, i_color_s6, style_s, i_width_s, '', pivot, srLabel, srLabelPos)

when := barstate.islast and pivot != 'ð None'

f_processPivotLevelX(when and i_show_r, time_x11, r61, time_x21, i_color_r6, style_r, i_width_r, 'R6', pivot, srLabel, srLabelPos)
f_processPivotLevelX(when and i_show_r, time_x11, r51, time_x21, i_color_r5, style_r, i_width_r, 'R5', pivot, srLabel, srLabelPos)
f_processPivotLevelX(when and i_show_r, time_x11, r41, time_x21, i_color_r4, style_r, i_width_r, 'R4', pivot, srLabel, srLabelPos)
f_processPivotLevelX(when and i_show_r, time_x11, r31, time_x21, i_color_r3, style_r, i_width_r, 'R3', pivot, srLabel, srLabelPos)
f_processPivotLevelX(when and i_show_r, time_x11, r21, time_x21, i_color_r2, style_r, i_width_r, 'R2', pivot, srLabel, srLabelPos)
f_processPivotLevelX(when and i_show_r, time_x11, r11, time_x21, i_color_r1, style_r, i_width_r, 'R1', pivot, srLabel, srLabelPos)

f_processPivotLevelX(when and i_show_r and i_midPvt, time_x11, r61 > 0 and r51 > 0 ? math.avg(r61, r51) : 0, time_x21, i_color_r6, style_r, i_width_r - 2, '', pivot, srLabel, srLabelPos)
f_processPivotLevelX(when and i_show_r and i_midPvt, time_x11, r51 > 0 and r41 > 0 ? math.avg(r51, r41) : 0, time_x21, i_color_r5, style_r, i_width_r - 2, '', pivot, srLabel, srLabelPos)
f_processPivotLevelX(when and i_show_r and i_midPvt, time_x11, r41 > 0 and r31 > 0 ? math.avg(r41, r31) : 0, time_x21, i_color_r4, style_r, i_width_r - 2, '', pivot, srLabel, srLabelPos)
f_processPivotLevelX(when and i_show_r and i_midPvt, time_x11, r31 > 0 and r21 > 0 ? math.avg(r31, r21) : 0, time_x21, i_color_r3, style_r, i_width_r - 2, '', pivot, srLabel, srLabelPos)
f_processPivotLevelX(when and i_show_r and i_midPvt, time_x11, r21 > 0 and r11 > 0 ? math.avg(r21, r11) : 0, time_x21, i_color_r2, style_r, i_width_r - 2, '', pivot, srLabel, srLabelPos)
f_processPivotLevelX(when and i_show_r and i_midPvt, time_x11, r11 > 0 and p1  > 0 ? math.avg(r11, p1 ) : 0, time_x21, i_color_r1, style_r, i_width_r - 2, '', pivot, srLabel, srLabelPos)

//plot(dispHist == 'Selected Pivots' and r61 > 0 ? htf_time or islast ? na : r61 : na, 'Historical R6', color.new(color.rgb(255, 165, 47, 50), 0), 1, plot.style_linebr, show_last=pll, editable=false)
//plot(dispHist == 'Selected Pivots' and r51 > 0 ? htf_time or islast ? na : r51 : na, 'Historical R5', color.new(color.rgb(255, 165, 47, 50), 0), 1, plot.style_linebr, show_last=pll, editable=false)
//plot(dispHist == 'Selected Pivots' and r41 > 0 ? htf_time or islast ? na : r41 : na, 'Historical R4', color.new(color.rgb(255, 165, 47, 50), 0), 1, plot.style_linebr, show_last=pll, editable=false)
//plot(dispHist == 'Selected Pivots' and r31 > 0 ? htf_time or islast ? na : r31 : na, 'Historical R3', color.new(color.rgb(255, 165, 47, 50), 0), 1, plot.style_linebr, show_last=pll, editable=false)
//plot(dispHist == 'Selected Pivots' and r21 > 0 ? htf_time or islast ? na : r21 : na, 'Historical R2', color.new(color.rgb(255, 165, 47, 50), 0), 1, plot.style_linebr, show_last=pll, editable=false)
//plot(dispHist == 'Selected Pivots' and r11 > 0 ? htf_time or islast ? na : r11 : na, 'Historical R1', color.new(color.rgb(255, 165, 47, 50), 0), 1, plot.style_linebr, show_last=pll, editable=false)
spHistDisp = dispHist == 'Selected Pivots' or dispHist == 'Both'
plot(spHistDisp and r61 > 0 ? htf_time or islast ? na : r61 : na, 'Historical R6', i_color_r6, i_width_r, plot.style_linebr, show_last=pll, editable=false)
plot(spHistDisp and r51 > 0 ? htf_time or islast ? na : r51 : na, 'Historical R5', i_color_r5, i_width_r, plot.style_linebr, show_last=pll, editable=false)
plot(spHistDisp and r41 > 0 ? htf_time or islast ? na : r41 : na, 'Historical R4', i_color_r4, i_width_r, plot.style_linebr, show_last=pll, editable=false)
plot(spHistDisp and r31 > 0 ? htf_time or islast ? na : r31 : na, 'Historical R3', i_color_r3, i_width_r, plot.style_linebr, show_last=pll, editable=false)
plot(spHistDisp and r21 > 0 ? htf_time or islast ? na : r21 : na, 'Historical R2', i_color_r2, i_width_r, plot.style_linebr, show_last=pll, editable=false)
plot(spHistDisp and r11 > 0 ? htf_time or islast ? na : r11 : na, 'Historical R1', i_color_r1, i_width_r, plot.style_linebr, show_last=pll, editable=false)

f_processPivotLevelX(when and i_show_p, time_x11, p1, time_x21, i_color_p, style_p, i_width_p, 'P', pivot, srLabel, srLabelPos)
//plot(dispHist == 'Selected Pivots' and i_show_p and p1 > 0 ? htf_time or islast ? na : p1 : na, 'Historical P ', color.new(#0000f0, 0), 1, plot.style_linebr, show_last=pll, editable=false)
plot(spHistDisp and i_show_p and p1 > 0 ? htf_time or islast ? na : p1 : na, 'Historical P ', i_color_p, i_width_p, plot.style_linebr, show_last=pll, editable=false)

f_processPivotLevelX(when and i_show_s and i_midPvt, time_x11, s11 > 0 and p1  > 0 ? math.avg(s11, p1 ) : 0, time_x21, i_color_s1, style_s, i_width_s - 2, '', pivot, srLabel, srLabelPos)
f_processPivotLevelX(when and i_show_s and i_midPvt, time_x11, s21 > 0 and s11 > 0 ? math.avg(s21, s11) : 0, time_x21, i_color_s2, style_s, i_width_s - 2, '', pivot, srLabel, srLabelPos)
f_processPivotLevelX(when and i_show_s and i_midPvt, time_x11, s31 > 0 and s21 > 0 ? math.avg(s31, s21) : 0, time_x21, i_color_s3, style_s, i_width_s - 2, '', pivot, srLabel, srLabelPos)
f_processPivotLevelX(when and i_show_s and i_midPvt, time_x11, s41 > 0 and s31 > 0 ? math.avg(s41, s31) : 0, time_x21, i_color_s4, style_s, i_width_s - 2, '', pivot, srLabel, srLabelPos)
f_processPivotLevelX(when and i_show_s and i_midPvt, time_x11, s51 > 0 and s41 > 0 ? math.avg(s51, s41) : 0, time_x21, i_color_s5, style_s, i_width_s - 2, '', pivot, srLabel, srLabelPos)
f_processPivotLevelX(when and i_show_s and i_midPvt, time_x11, s61 > 0 and s51 > 0 ? math.avg(s61, s51) : 0, time_x21, i_color_s6, style_s, i_width_s - 2, '', pivot, srLabel, srLabelPos)

f_processPivotLevelX(when and i_show_s, time_x11, s11, time_x21, i_color_s1, style_s, i_width_s, 'S1', pivot, srLabel, srLabelPos)
f_processPivotLevelX(when and i_show_s, time_x11, s21, time_x21, i_color_s2, style_s, i_width_s, 'S2', pivot, srLabel, srLabelPos)
f_processPivotLevelX(when and i_show_s, time_x11, s31, time_x21, i_color_s3, style_s, i_width_s, 'S3', pivot, srLabel, srLabelPos)
f_processPivotLevelX(when and i_show_s, time_x11, s41, time_x21, i_color_s4, style_s, i_width_s, 'S4', pivot, srLabel, srLabelPos)
f_processPivotLevelX(when and i_show_s, time_x11, s51, time_x21, i_color_s5, style_s, i_width_s, 'S5', pivot, srLabel, srLabelPos)
f_processPivotLevelX(when and i_show_s, time_x11, s61, time_x21, i_color_s6, style_s, i_width_s, 'S6', pivot, srLabel, srLabelPos)

//plot(dispHist == 'Selected Pivots' and s11 > 0 ? htf_time or islast ? na : s11 : na, 'Historical S1', color.new(#26a69a, 0), 1, plot.style_linebr, show_last=pll, editable=false)
//plot(dispHist == 'Selected Pivots' and s21 > 0 ? htf_time or islast ? na : s21 : na, 'Historical S2', color.new(#26a69a, 0), 1, plot.style_linebr, show_last=pll, editable=false)
//plot(dispHist == 'Selected Pivots' and s31 > 0 ? htf_time or islast ? na : s31 : na, 'Historical S3', color.new(#26a69a, 0), 1, plot.style_linebr, show_last=pll, editable=false)
//plot(dispHist == 'Selected Pivots' and s41 > 0 ? htf_time or islast ? na : s41 : na, 'Historical S4', color.new(#26a69a, 0), 1, plot.style_linebr, show_last=pll, editable=false)
//plot(dispHist == 'Selected Pivots' and s51 > 0 ? htf_time or islast ? na : s51 : na, 'Historical S5', color.new(#26a69a, 0), 1, plot.style_linebr, show_last=pll, editable=false)
//plot(dispHist == 'Selected Pivots' and s61 > 0 ? htf_time or islast ? na : s61 : na, 'Historical S6', color.new(#26a69a, 0), 1, plot.style_linebr, show_last=pll, editable=false)

plot(spHistDisp and s11 > 0 ? htf_time or islast ? na : s11 : na, 'Historical S1', i_color_s1, i_width_s, plot.style_linebr, show_last=pll, editable=false)
plot(spHistDisp and s21 > 0 ? htf_time or islast ? na : s21 : na, 'Historical S2', i_color_s2, i_width_s, plot.style_linebr, show_last=pll, editable=false)
plot(spHistDisp and s31 > 0 ? htf_time or islast ? na : s31 : na, 'Historical S3', i_color_s3, i_width_s, plot.style_linebr, show_last=pll, editable=false)
plot(spHistDisp and s41 > 0 ? htf_time or islast ? na : s41 : na, 'Historical S4', i_color_s4, i_width_s, plot.style_linebr, show_last=pll, editable=false)
plot(spHistDisp and s51 > 0 ? htf_time or islast ? na : s51 : na, 'Historical S5', i_color_s5, i_width_s, plot.style_linebr, show_last=pll, editable=false)
plot(spHistDisp and s61 > 0 ? htf_time or islast ? na : s61 : na, 'Historical S6', i_color_s6, i_width_s, plot.style_linebr, show_last=pll, editable=false)

when := barstate.islast and dispWM == 'Weekly' or dispWM == 'Both'

f_processPivotLevelX(when and i_show_r, time_x1w, r6w, time_x21, i_color_r6, style_r, i_width_r, 'R6W', pivot, srLabel, srLabelPos)
f_processPivotLevelX(when and i_show_r, time_x1w, r5w, time_x21, i_color_r5, style_r, i_width_r, 'R5W', pivot, srLabel, srLabelPos)
f_processPivotLevelX(when and i_show_r, time_x1w, r4w, time_x21, i_color_r4, style_r, i_width_r, 'R4W', pivot, srLabel, srLabelPos)
f_processPivotLevelX(when and i_show_r, time_x1w, r3w, time_x21, i_color_r3, style_r, i_width_r, 'R3W', pivot, srLabel, srLabelPos)
f_processPivotLevelX(when and i_show_r, time_x1w, r2w, time_x21, i_color_r2, style_r, i_width_r, 'R2W', pivot, srLabel, srLabelPos)
f_processPivotLevelX(when and i_show_r, time_x1w, r1w, time_x21, i_color_r1, style_r, i_width_r, 'R1W', pivot, srLabel, srLabelPos)

f_processPivotLevelX(when and i_show_p, time_x1w, pw, time_x21, i_color_p, style_p, i_width_p, 'PW ', pivot, srLabel, srLabelPos)

f_processPivotLevelX(when and i_show_s, time_x1w, s1w, time_x21, i_color_s1, style_s, i_width_s, 'S1W', pivot, srLabel, srLabelPos)
f_processPivotLevelX(when and i_show_s, time_x1w, s2w, time_x21, i_color_s2, style_s, i_width_s, 'S2W', pivot, srLabel, srLabelPos)
f_processPivotLevelX(when and i_show_s, time_x1w, s3w, time_x21, i_color_s3, style_s, i_width_s, 'S3W', pivot, srLabel, srLabelPos)
f_processPivotLevelX(when and i_show_s, time_x1w, s4w, time_x21, i_color_s4, style_s, i_width_s, 'S4W', pivot, srLabel, srLabelPos)
f_processPivotLevelX(when and i_show_s, time_x1w, s5w, time_x21, i_color_s5, style_s, i_width_s, 'S5W', pivot, srLabel, srLabelPos)
f_processPivotLevelX(when and i_show_s, time_x1w, s6w, time_x21, i_color_s6, style_s, i_width_s, 'S6W', pivot, srLabel, srLabelPos)

when := barstate.islast and dispWM == 'Monthly' or dispWM == 'Both'

f_processPivotLevelX(when and i_show_r, time_x1m, r6m, time_x21, i_color_r6, style_r, i_width_r, 'R6M', pivot, srLabel, srLabelPos)
f_processPivotLevelX(when and i_show_r, time_x1m, r5m, time_x21, i_color_r5, style_r, i_width_r, 'R5M', pivot, srLabel, srLabelPos)
f_processPivotLevelX(when and i_show_r, time_x1m, r4m, time_x21, i_color_r4, style_r, i_width_r, 'R4M', pivot, srLabel, srLabelPos)
f_processPivotLevelX(when and i_show_r, time_x1m, r3m, time_x21, i_color_r3, style_r, i_width_r, 'R3M', pivot, srLabel, srLabelPos)
f_processPivotLevelX(when and i_show_r, time_x1m, r2m, time_x21, i_color_r2, style_r, i_width_r, 'R2M', pivot, srLabel, srLabelPos)
f_processPivotLevelX(when and i_show_r, time_x1m, r1m, time_x21, i_color_r1, style_r, i_width_r, 'R1M', pivot, srLabel, srLabelPos)

f_processPivotLevelX(when and i_show_p, time_x1m, pm, time_x21, i_color_p, style_p, i_width_p, 'PM ', pivot, srLabel, srLabelPos)

f_processPivotLevelX(when and i_show_s, time_x1m, s1m, time_x21, i_color_s1, style_s, i_width_s, 'S1M', pivot, srLabel, srLabelPos)
f_processPivotLevelX(when and i_show_s, time_x1m, s2m, time_x21, i_color_s2, style_s, i_width_s, 'S2M', pivot, srLabel, srLabelPos)
f_processPivotLevelX(when and i_show_s, time_x1m, s3m, time_x21, i_color_s3, style_s, i_width_s, 'S3M', pivot, srLabel, srLabelPos)
f_processPivotLevelX(when and i_show_s, time_x1m, s4m, time_x21, i_color_s4, style_s, i_width_s, 'S4M', pivot, srLabel, srLabelPos)
f_processPivotLevelX(when and i_show_s, time_x1m, s5m, time_x21, i_color_s5, style_s, i_width_s, 'S5M', pivot, srLabel, srLabelPos)
f_processPivotLevelX(when and i_show_s, time_x1m, s6m, time_x21, i_color_s6, style_s, i_width_s, 'S6M', pivot, srLabel, srLabelPos)

when := barstate.islast and dispCPR
style_cpr = f_getStyle(i_style_cpr)
f_processPivotLevelX(when, time_x11, tc1 , time_x21, i_color_tc , style_cpr, i_width_cpr, 'TC' , '', srLabel, srLabelPos)
f_processPivotLevelX(when, time_x11, cpr1, time_x21, i_color_cpr, style_cpr, i_width_cpr, 'CPR', '', srLabel, srLabelPos)
f_processPivotLevelX(when, time_x11, bc1 , time_x21, i_color_bc , style_cpr, i_width_cpr, 'BC' , '', srLabel, srLabelPos)

when := barstate.islast and dispCPR and i_dispPVT and time_x21 - timenow < 3600000 * i_when

f_processPivotLevelX(when, time_x1, tc , time_x2, i_color_tc , style_cpr, i_width_cpr, '', '', srLabel, srLabelPos)
f_processPivotLevelX(when, time_x1, cpr, time_x2, i_color_cpr, style_cpr, i_width_cpr, '', '', srLabel, srLabelPos)
f_processPivotLevelX(when, time_x1, bc , time_x2, i_color_bc , style_cpr, i_width_cpr, '', '', srLabel, srLabelPos)

//plot(dispHist == 'Central Pivot Range' and dispCPR ? htf_time or islast ? na : tc1  : na, 'Historical CPR TC', color.new(#9ef2e8, 0), 1, plot.style_linebr, show_last=pll, editable=false)
//plot(dispHist == 'Central Pivot Range' and dispCPR ? htf_time or islast ? na : cpr1 : na, 'Historical CPR P ', color.new(#fa8072, 0), 1, plot.style_linebr, show_last=pll, editable=false)
//plot(dispHist == 'Central Pivot Range' and dispCPR ? htf_time or islast ? na : bc1  : na, 'Historical CPR BC', color.new(#4262ba, 0), 1, plot.style_linebr, show_last=pll, editable=false)

cprHistDisp = dispHist == 'Central Pivot Range' or dispHist == 'Both'
plot(cprHistDisp and dispCPR ? htf_time or islast ? na : tc1  : na, 'Historical CPR TC', i_color_tc , 1, plot.style_linebr, show_last=pll, editable=false)
plot(cprHistDisp and dispCPR ? htf_time or islast ? na : cpr1 : na, 'Historical CPR P ', i_color_cpr, 1, plot.style_linebr, show_last=pll, editable=false)
plot(cprHistDisp and dispCPR ? htf_time or islast ? na : bc1  : na, 'Historical CPR BC', i_color_bc , 1, plot.style_linebr, show_last=pll, editable=false)

if barstate.islast and dispOHLC
    ohlcC = htf_o1 > htf_c1 ? color.red : color.green
    style_ohlc = f_getStyle(i_style_ohlc)

    if i_show_o
        f_drawLineX(time_x10, htf_o1, time_x21, htf_o1, xloc.bar_time, extend.none, ohlcC, style_ohlc, 1)
        f_drawLabelX(time_x10, htf_o1, 'O', xloc.bar_time, yloc.price, #00000000, label.style_label_right, ohlcC, size.normal, text.align_center, 'PREVIOUS HTF(' + htf + ') OPEN : '  + str.tostring(htf_o1, format.mintick))

    if i_show_h
        f_drawLineX(time_x10, htf_h1, time_x21, htf_h1, xloc.bar_time, extend.none, ohlcC, style_ohlc, 2)
        f_drawLabelX(time_x10, htf_h1, 'H', xloc.bar_time, yloc.price, #00000000, label.style_label_right, ohlcC, size.normal, text.align_center, 'PREVIOUS HTF(' + htf + ') HIGH : '  + str.tostring(htf_h1, format.mintick))

    if i_show_l
        f_drawLineX(time_x10, htf_l1, time_x21, htf_l1, xloc.bar_time, extend.none, ohlcC, style_ohlc, 2)
        f_drawLabelX(time_x10, htf_l1, 'L', xloc.bar_time, yloc.price, #00000000, label.style_label_right, ohlcC, size.normal, text.align_center, 'PREVIOUS HTF(' + htf + ') LOW : '   + str.tostring(htf_l1, format.mintick))

    if i_show_c
        f_drawLineX(time_x10, htf_c1, time_x21, htf_c1, xloc.bar_time, extend.none, ohlcC, style_ohlc, 1)
        f_drawLabelX(time_x10, htf_c1, 'C', xloc.bar_time, yloc.price, #00000000, label.style_label_right, ohlcC, size.normal, text.align_center, 'PREVIOUS HTF(' + htf + ') CLOSE : ' + str.tostring(htf_c1, format.mintick))

if f_crossingLevelX(close, htf_h1) and barstate.islast and dispOHLC
    alert('OHLC (PVTvX) : ' + syminfo.ticker + ' crossing previous htf high')
if f_crossingLevelX(close, htf_l1) and barstate.islast and dispOHLC
    alert('OHLC (PVTvX) : ' + syminfo.ticker + ' crossing previous htf low')

//------------------------------------------------------------------------------
// ADX Colored Directional Movement Line by DGT 

didir = diplus >= diminus ? true : false
plotshape(addons and dispDM and diplus >= diminus, style=shape.triangleup  , location=location.top, color=dmiColor, title='DMI Bull', show_last=pll, editable=false)
plotshape(addons and dispDM and diplus < diminus , style=shape.triangledown, location=location.top, color=dmiColor, title='DMI Bear', show_last=pll, editable=false)

//------------------------------------------------------------------------------
// Price Distance to its Moving Average by DGT

plotshape(addons and dispPM and pmar >= 0, style=shape.triangleup  , location=location.bottom, color=pmaColor, title="Price/MA Bull", show_last = pll, editable=false)
plotshape(addons and dispPM and pmar <  0, style=shape.triangledown, location=location.bottom, color=pmaColor, title="Price/MA Bear", show_last = pll, editable=false)

//------------------------------------------------------------------------------
// Volume weighted Colored Bars by KIVANÃ ÃZBÄ°LGÄ°Ã

barcolor(addons and nz(volume) and vwcb ? vwcbColor : na, title='Volume Based Colored Bars by [KÄ±vanÃ§ÃZBÄ°LGÄ°Ã]', show_last=pll, editable=false)

//------------------------------------------------------------------------------
// Ichimoku Cloud - presentation customized by DGT

pi1 = plot(leadLine1, offset=displacement - 1, color=color.new(color.green, 0), title='Lead 1', display=display.none, show_last=displacement - 1, editable=false)
pi2 = plot(leadLine2, offset=displacement - 1, color=color.new(color.red  , 0), title='Lead 2', display=display.none, show_last=displacement - 1, editable=false)
fill(pi1, pi2, color=addons and ichimoku ? leadLine1 > leadLine2 ? color.new(color.green, 73) : color.new(color.red, 73) : na, title='Ichimoku Kumo Cloud', show_last=showKumo ? pll + 1 : 1)

//------------------------------------------------------------------------------
// Pivot Points High Low

var label tempHigh = na
var label tempLow  = na

if addons and dispPVT
    if not na(pvtHigh)
        tradedVolume = f_getTradedVolume(profileLength, proceed, pvtLength)
        f_drawOnlyLabelX(bar_index[pvtLength], pvtHigh, (pvtPrice ? str.tostring(pvtHigh, format.mintick) :  '') + (pvtChange ? (pvtPrice ? ' â %' : 'â %') + str.tostring((pvtHigh - pvtLow1) * 100 / pvtLow1 , '#.##') : '') + (pvtVolume and  nzVolume ? (pvtPrice or pvtChange ? '\n' : '') + str.tostring(tradedVolume, format.volume) : ''), xloc.bar_index, yloc.price, color.rgb(167, 20, 20,20), label.style_label_down, color.white, (not pvtPrice and not pvtChange and not pvtVolume ? size.tiny : pvtTextSize), text.align_center, 'Pivot High : ' + str.tostring(pvtHigh, format.mintick) + '\n -Price Change : â %' + str.tostring((pvtHigh - pvtLow1) * 100 / pvtLow1 , '#.##') + (nzVolume ? '\n -Traded Volume : ' + str.tostring(tradedVolume, format.volume)  + ' (' + str.tostring(profileLength - 1) + ' bars)\n  *Average Volume/Bar : ' + str.tostring(tradedVolume / (profileLength - 1), format.volume) : '') + '\n\nNumber of bars : ' + str.tostring(profileLength) )
        pvtHigh1 := pvtHigh
        //pvtLast  := 'H'
        label.delete(tempHigh[1])
        if x2 - pvtLength > x2Temp - pvtLengthTemp
            label.delete(tempLow[1])

    if not na(pvtLow)
        tradedVolume = f_getTradedVolume(profileLength, proceed, pvtLength)
        f_drawOnlyLabelX(bar_index[pvtLength], pvtLow , (pvtPrice ? str.tostring(pvtLow , format.mintick) :  '') + (pvtChange ? (pvtPrice ? ' â %' : 'â %') + str.tostring((pvtHigh1 - pvtLow) * 100 / pvtHigh1, '#.##') : '') + (pvtVolume and  nzVolume ? (pvtPrice or pvtChange ? '\n' : '') + str.tostring(tradedVolume, format.volume) : ''), xloc.bar_index, yloc.price, color.rgb(92, 0, 134, 20), label.style_label_up  , color.white, (not pvtPrice and not pvtChange and not pvtVolume ? size.tiny : pvtTextSize), text.align_center, 'Pivot Low : '  + str.tostring(pvtLow , format.mintick) + '\n -Price Change : â %' + str.tostring((pvtHigh1 - pvtLow) * 100 / pvtHigh1, '#.##') + (nzVolume ? '\n -Traded Volume : ' + str.tostring(tradedVolume, format.volume) + ' (' + str.tostring(profileLength - 1) + ' bars)\n  *Average Volume/Bar : ' + str.tostring(tradedVolume / (profileLength - 1), format.volume) : '') + '\n\nNumber of bars : ' + str.tostring(profileLength) )
        pvtLow1  := pvtLow
        //pvtLast  := 'L'
        label.delete(tempLow[1])
        if x2 - pvtLength > x2Temp - pvtLengthTemp// ???
            label.delete(tempHigh[1])

    if not na(pvtHighTemp) //and pvtLast  == 'L' 
        if pvtHighTemp > pvtHigh1Temp// or pvtHighTemp > pvtHigh1 
            label.delete(tempHigh[1])
            tradedVolume = f_getTradedVolume(profileLengthTemp, proceedTemp, pvtLengthTemp)
            tempHigh := label.new(bar_index[pvtLengthTemp], pvtHighTemp, '* ' + (pvtPrice ? str.tostring(pvtHighTemp, format.mintick) :  '') + (pvtChange ? (pvtPrice ? ' â %' : 'â %') + str.tostring((pvtHighTemp - pvtLow1) * 100 / pvtLow1 , '#.##') : '') + (pvtVolume and  nzVolume ? (pvtPrice or pvtChange ? '\n' : '') + str.tostring(tradedVolume, format.volume) : ''), xloc.bar_index, yloc.price, color.rgb(224, 87, 87, 20), label.style_label_down, color.white, (not pvtPrice and not pvtChange and not pvtVolume ? size.tiny : pvtTextSize), text.align_center, 'Temporary Pivot High : ' + str.tostring(pvtHighTemp, format.mintick) + '\n -Price Change : â %' + str.tostring((pvtHighTemp - pvtLow1) * 100 / pvtLow1 , '#.##') + (nzVolume ? '\n -Traded Volume : ' + str.tostring(tradedVolume, format.volume)  + ' (' + str.tostring(profileLengthTemp - 1) + ' bars)\n  *Average Volume/Bar : ' + str.tostring(tradedVolume / (profileLengthTemp - 1), format.volume) : '') + '\n\nNumber of bars\n since last confirmed Pivot High/Low : ' + str.tostring(profileLengthTemp) + '\n\nWarning : subject to repaint, not a confirmed Pivot Level or Signal' )
        pvtHigh1Temp := pvtHighTemp
    
    if high > pvtHigh1Temp
        label.delete(tempHigh[1])

    if not na(pvtLowTemp) //and pvtLast  == 'H'
        if pvtLowTemp < pvtLow1Temp// or pvtLowTemp < pvtLow1
            tradedVolume = f_getTradedVolume(profileLengthTemp, proceedTemp, pvtLengthTemp)
            label.delete(tempLow[1])
            tempLow := label.new(bar_index[pvtLengthTemp], pvtLowTemp, '* ' + (pvtPrice ? str.tostring(pvtLowTemp, format.mintick) :  '') + (pvtChange ? (pvtPrice ? ' â %' : 'â %') + str.tostring((pvtHigh1 - pvtLowTemp) * 100 / pvtLowTemp , '#.##') : '') + (pvtVolume and  nzVolume ? (pvtPrice or pvtChange ? '\n' : '') + str.tostring(tradedVolume, format.volume) : ''), xloc.bar_index, yloc.price, color.rgb(0, 54, 134,20), label.style_label_up, color.white, (not pvtPrice and not pvtChange and not pvtVolume ? size.tiny : pvtTextSize), text.align_center, 'Temporary Pivot Low : ' + str.tostring(pvtLowTemp, format.mintick) + '\n -Price Change : â %' + str.tostring((pvtHigh1 - pvtLowTemp) * 100 / pvtHigh1 , '#.##') + (nzVolume ? '\n -Traded Volume : ' + str.tostring(tradedVolume, format.volume)  + ' (' + str.tostring(profileLengthTemp - 1) + ' bars)\n  *Average Volume/Bar : ' + str.tostring(tradedVolume / (profileLengthTemp - 1), format.volume) : '') + '\n\nNumber of bars\n since last confirmed Pivot High/Low : ' + str.tostring(profileLengthTemp) + '\n\nWarning : subject to repaint, not a confirmed Pivot Level or Signal')
        pvtLow1Temp  := pvtLowTemp

    if low < pvtLow1Temp
        label.delete(tempLow[1])

//------------------------------------------------------------------------------
// Bolligner Bands - customized presentation

//pu4 = plot(addons and dispBB and islast and not extendBB ? u4 : na, 'BB Upper stDev bbMult4', color.new(color.green  , 0), 1)
pu3 = plot(addons and dispBB and islast and not extendBB ? u3 : na, 'BB Upper stDev bbMult3', color.new(color.green, 30), 1)
pu2 = plot(addons and dispBB and islast and not extendBB ? u2 : na, 'BB Upper stDev bbMult2', color.new(color.green  , 30), 1)
pu1 = plot(addons and dispBB and islast and not extendBB ? u1 : na, 'BB Upper stDev bbMult1', color.new(color.green, 30), 1)
pl1 = plot(addons and dispBB and islast and not extendBB ? l1 : na, 'BB Lower stDev bbMult1', color.new(color.green, 30), 1)
pl2 = plot(addons and dispBB and islast and not extendBB ? l2 : na, 'BB Lower stDev bbMult2', color.new(color.green  , 30), 1)
pl3 = plot(addons and dispBB and islast and not extendBB ? l3 : na, 'BB Lower stDev bbMult3', color.new(color.green, 30), 1)
//pl4 = plot(addons and dispBB and islast and not extendBB ? l4 : na, 'BB Lower stDev bbMult4', color.new(color.green   , 0), 1)

//fill(pl3, pl4, color=bgShow ? color.new(color.green    , 73) : na, title='BB Bands Fill (Lower 3-4)')
//fill(pl2, pl3, color=bgShow ? color.new(color.green, 73) : na, title='BB Bands Fill (Lower 2-3)')
//fill(pl1, pl2, color=bgShow ? color.new(color.green   , 73) : na, title='BB Bands Fill (Lower 1-2)')
//fill(pu1, pu2, color=bgShow ? color.new(color.green    , 73) : na, title='BB Bands Fill (Upper 1-2)')
//fill(pu2, pu3, color=bgShow ? color.new(color.green  , 73) : na, title='BB Bands Fill (Upper 2-3)')
//fill(pu3, pu4, color=bgShow ? color.new(color.green    , 73) : na, title='BB Bands Fill (Upper 3-4)')

//pu4e = plot(addons and dispBB and extendBB ? u4 : na, 'BB Upper stDev bbMult4 (extended)', color.new(color.green   , 0), 1, show_last=pll)
pu3e = plot(addons and dispBB and extendBB ? u3 : na, 'BB Upper stDev bbMult3 (extended)', color.new(color.green, 30), 1, show_last=pll)
pu2e = plot(addons and dispBB and extendBB ? u2 : na, 'BB Upper stDev bbMult2 (extended)', color.new(color.green  , 30), 1, show_last=pll)
pu1e = plot(addons and dispBB and extendBB ? u1 : na, 'BB Upper stDev bbMult1 (extended)', color.new(color.green, 30), 1, show_last=pll)
pl1e = plot(addons and dispBB and extendBB ? l1 : na, 'BB Lower stDev bbMult1 (extended)', color.new(color.green, 30), 1, show_last=pll)
pl2e = plot(addons and dispBB and extendBB ? l2 : na, 'BB Lower stDev bbMult2 (extended)', color.new(color.green  , 30), 1, show_last=pll)
pl3e = plot(addons and dispBB and extendBB ? l3 : na, 'BB Lower stDev bbMult3 (extended)', color.new(color.green, 30), 1, show_last=pll)
//pl4e = plot(addons and dispBB and extendBB ? l4 : na, 'BB Lower stDev bbMult4 (extended)', color.new(color.green   , 0), 1, show_last=pll)

//fill(pl3e, pl4e, color=bgShow ? color.new(color.green    , 73) : na, title='BB Bands Fill (Lower 3-4) (extended)')
//fill(pl2e, pl3e, color=bgShow ? color.new(color.green, 73) : na, title='BB Bands Fill (Lower 2-3) (extended)')
//fill(pl1e, pl2e, color=bgShow ? color.new(color.green    , 73) : na, title='BB Bands Fill (Lower 1-2) (extended)')
//fill(pu1e, pu2e, color=bgShow ? color.new(color.green    , 73) : na, title='BB Bands Fill (Upper 1-2) (extended)')
//fill(pu2e, pu3e, color=bgShow ? color.new(color.green  , 73) : na, title='BB Bands Fill (Upper 2-3) (extended)')
//fill(pu3e, pu4e, color=bgShow ? color.new(color.green    , 73) : na, title='BB Bands Fill (Upper 3-4) (extended)')

//if f_crossingLevelX(close, u4)
//    alert('BB (PVTvX) : ' + syminfo.ticker + ' crossing bollinger bands upper standart deviation line ' + str.tostring(bbMult4))
if f_crossingLevelX(close, u3)
    alert('BB (PVTvX) : ' + syminfo.ticker + ' crossing bollinger bands upper standart deviation line ' + str.tostring(bbMult3))
if f_crossingLevelX(close, u2)
    alert('BB (PVTvX) : ' + syminfo.ticker + ' crossing bollinger bands upper standart deviation line ' + str.tostring(bbMult2))
if f_crossingLevelX(close, l2)
    alert('BB (PVTvX) : ' + syminfo.ticker + ' crossing bollinger bands lower standart deviation line ' + str.tostring(bbMult2))
if f_crossingLevelX(close, l3)
    alert('BB (PVTvX) : ' + syminfo.ticker + ' crossing bollinger bands lower standart deviation line ' + str.tostring(bbMult3))
//if f_crossingLevelX(close, l4)
//    alert('BB (PVTvX) : ' + syminfo.ticker + ' crossing bollinger bands lower standart deviation line ' + str.tostring(bbMult4))

//------------------------------------------------------------------------------
// Volume Weighted Average Price (VWAP) - Build-In

plot(addons and vwapPlot ? vwapValue : na, 'VWAP', color.rgb(105, 13, 13), 2, offset=offset, show_last=pll)

upperBand = plot(addons and vwapPlot ? upperBandValue : na, title='VWAP Upper Band', color=color.new(color.green, 0), display=display.none, offset=offset, show_last=pll)
lowerBand = plot(addons and vwapPlot ? lowerBandValue : na, title='VWAP Lower Band', color=color.new(color.green, 0), display=display.none, offset=offset, show_last=pll)

fill(upperBand, lowerBand, title='VWAP Bands Fill', color=showBands ? color.new(color.blue, 73) : na, show_last=pll)

//------------------------------------------------------------------------------
// Logistic EMA (LEMA) by DGT

plot(addons and dispLEMA ? lema : na, 'LEMA Trend         ', trend != trend[1] ? hlColor[1] : hlColor, 4, show_last=pll)
plot(addons and dispLEMA ? lema : na, 'Logistic EMA (LEMA)', maColor, 2, show_last=pll)

if f_crossingLevelX(close, lema)
    alert('LEMA (PVTvX) : ' + syminfo.ticker + ' crossing Logistic EMA (LEMA)')

//------------------------------------------------------------------------------
// Statistical Panel

textSize   = i_textSize == 'Small' ? size.small : i_textSize == 'Normal' ? size.normal : i_textSize == 'Large' ? size.large : size.tiny
statPosition = switch statPos
    'Top Left' => position.top_left
    'Top Center' => position.top_center
    'Top Right' => position.top_right
    'Middle Right' => position.middle_right
    'Bottom Left' => position.bottom_left
    'Bottom Center' => position.bottom_center

rsiValue = ta.rsi(rsiSrc, rsiLength)
stochK = ta.sma(ta.stoch(close, high, low, stochLengthK), stochSmoothingK)
stochD = ta.sma(stochK, stochLengthD)
[macdLine, signalLine, histLine] = ta.macd(macdSrc, macdFastLength, macdSlowLength, macdSignalLength)

var table change = table.new(statPosition, 3, 7, border_width=3)

if barstate.islast and addons and isLabel

    table.cell(change, 0, 0, 'Market Status' , text_color=color.white, bgcolor=color.new(#4262ba, 23), text_halign=text.align_center, text_size=textSize, tooltip = syminfo.description )
    table.merge_cells(change, 0, 0, 2, 0)

    // Directional Movement
    diStat = diplus >= diminus ? '\ndiplus(' + str.tostring(diplus, '#.##') + ') >= diminus(' + str.tostring(diminus, '#.##') + ')' : '\ndiplus(' + str.tostring(diplus, '#.##') + ') < diminus(' + str.tostring(diminus, '#.##') + ')'
    adxMom = adxValue > adxValue[1] ? ' and rising' : ' and falling'
    
    [dmiText, dmiColor1] = if dmiBull
        ['bullish', color.green]
    else if dmiBear
        ['bearish', color.red]
    else 
        ['trendless', color.black]
    
    table.cell(change, 0, 1, 'DMI', text_color=color.white, bgcolor=color.new(#4262ba, 23), text_halign=text.align_center, text_size=textSize, tooltip = 'Directional Movement Index')
    table.cell(change, 0, 2, dmiText, text_color=color.white, bgcolor=color.new(dmiColor1, 23), text_halign=text.align_center, text_size=textSize, tooltip = 'adx(' + str.tostring(adxValue, '#.##') + ')' + adxMom + diStat)
    
    // Ichimoku Cloud
    tkStat = conversionLine >= baseLine ? '\ntenkan-sen(' + str.tostring(conversionLine, format.mintick) + ') >= kijun-sen(' + str.tostring(baseLine, format.mintick) + ')' : '\ntenkan-sen(' + str.tostring(conversionLine, format.mintick) + ') < kijun-sen(' + str.tostring(baseLine, format.mintick) + ')'
    ichiTxt = aboveCloud ? 'bullish' : belowCloud ? 'bearish' : inCloud ? 'trendless or \ntransitioning' : na
    ichiTxt1 = aboveCloud ? 'price action above the kumo cloud' : belowCloud ? 'price action below the kumo cloud' : inCloud ? 'price action within the kumo cloud' : na
    ichiColor1 = aboveCloud ? color.green : belowCloud ? color.red : inCloud ? color.black : na
    
    table.cell(change, 1, 1, 'ICHI', text_color=color.white, bgcolor=color.new(#4262ba, 23), text_halign=text.align_center, text_size=textSize, tooltip = 'Ichimoku Cloud ')
    table.cell(change, 1, 2, ichiTxt, text_color=color.white, bgcolor=color.new(ichiColor1, 23), text_halign=text.align_center, text_size=textSize, tooltip =  ichiTxt1 + tkStat)

    table.cell(change, 2, 1, 'PMA', text_color=color.white, bgcolor=color.new(#4262ba, 23), text_halign=text.align_center, text_size=textSize, tooltip = 'Price Distance to its MA')
    table.cell(change, 2, 2, pmaText, text_color=color.white, bgcolor=color.new(pmaColor, 23), text_halign=text.align_center, text_size=textSize, tooltip =  pmaText1)

    // RSI
    [rsiColor, rsiText, rsiTip] = if rsiValue >= 50
        if rsiValue > rsiOverbought
            [color.green, 'bullish\noverbought', 'over overbought zone']
        else if rsiValue > 60 and rsiValue < rsiOverbought
            [color.green, 'bullish', 'in bullish zone (rsi > 60)']
        else
            [color.black, 'neutral', 'in bullish zone (60 > rsi > 50)']
    else
        if rsiValue < rsiOversold
            [color.red, 'bearish\noversold', 'below oversold zone']
        else if rsiValue < 40 and rsiValue > rsiOversold
            [color.red  , 'bearish', 'in bearish zone (rsi < 40)']
        else
            [color.black, 'neutral', 'in bearish zone (50 > rsi > 40)']

    rsiTip := rsiValue > rsiValue[1] ? rsiTip + '\nrsi(' + str.tostring(rsiValue, '#.##') + ') and rising' : rsiTip + '\nrsi(' + str.tostring(rsiValue, '#.##') + ') and falling'

    table.cell(change, 0, 3, 'RSI', text_color=color.white, bgcolor=color.new(#4262ba, 23), text_halign=text.align_center, text_size=textSize, tooltip = 'Relative Strength Index')
    table.cell(change, 0, 4, rsiText, text_color=color.white, bgcolor=color.new(rsiColor, 23), text_halign=text.align_center, text_size=textSize, tooltip = rsiTip)

    // Stochastic
    stochMom = stochK > stochK[1] ? ', stochK rising' : ', stochK falling'
    stochStat = stochK > stochOverbought ? '\noverbought' : stochK < stochOversold ? '\noversold' : ''
    
    [stochColor, stochText, stochTip] = if stochK > stochD 
        [color.green, 'bullish', '%k(' + str.tostring(stochK, '#.##') + ') > %d(' + str.tostring(stochD, '#.##') + ')' + stochMom]
    else
        [color.red, 'bearish', '%k(' + str.tostring(stochK, '#.##') + ') < %d(' + str.tostring(stochD, '#.##') + ')' + stochMom]

    table.cell(change, 1, 3, 'STOCH', text_color=color.white, bgcolor=color.new(#4262ba, 23), text_halign=text.align_center, text_size=textSize, tooltip = 'Stochastic')
    table.cell(change, 1, 4, stochText + stochStat, text_color=color.white, bgcolor=color.new(stochColor, 23), text_halign=text.align_center, text_size=textSize, tooltip = stochTip)

    // MACD
    macdMom = histLine > histLine[1] ? '\nmomentum rising' : '\nmomentum falling'
    [macdColor, macdText, macdTip] = if macdLine > signalLine
        [color.green, 'bullish', 'macd > signal' + macdMom]
    else
        [color.red, 'bearish', 'macd > signal' + macdMom]

    table.cell(change, 2, 3, 'MACD', text_color=color.white, bgcolor=color.new(#4262ba, 23), text_halign=text.align_center, text_size=textSize, tooltip = 'Moving Average Convergence/Divergence')
    table.cell(change, 2, 4, macdText, text_color=color.white, bgcolor=color.new(macdColor, 23), text_halign=text.align_center, text_size=textSize, tooltip = macdTip)

    // Fear & Greed
    fgTxt = feargreed > 73 ? 'extreame\ngreed' : feargreed > 33 ? 'greed' : feargreed < -25 ? 'fear' : feargreed < -41 ? 'extreame\nfear' : 'neutral'
    fgColor = feargreed > 33 ? color.green : feargreed < -25 ? color.red : color.black

    fgTip = 'Fear and Greed Index ' + str.tostring(feargreed, '#.##') + '%' + '\n\nReference Sources : ' + '\n-----------------------------------------------' + 
        '\n 1 - Price Convergence/Divergence, Length (' + str.tostring(slowLength) + ') : ' + str.tostring(pmacd, '#.##') + '%' + 
        '\n 2 - Rate of Return, Length (' + str.tostring(slowLength) + ') : ' + str.tostring(ror, '#.##') + '%' + 
        '\n 3 - Chaikin Money Flow, Length (' + str.tostring(fastLength) + ') : ' + str.tostring(moneyFlow, '#.##') + '% \n      ps: CMF calculated only if volume data is provided' + 
        '\n 4 - VIX - Volatility (Fear) Index, Length (' + str.tostring(slowLength) + ') : ' + str.tostring(vix, '#.##') + '%' + 
        '\n 5 - Safe Haven (Gold) Demand, Length (' + str.tostring(fastLength) + ') : ' + str.tostring(gold, '#.##') + '%' + 
        '\n\nWarren Buffettâs quote, buy when others are fearful, and sell when others are greedy'

    table.cell(change, 0, 5, 'F & G', text_color=color.white, bgcolor=color.new(#4262ba, 23), text_halign=text.align_center, text_size=textSize, tooltip = 'Fear and Greed Index')
    table.cell(change, 0, 6, fgTxt, text_color=color.white, bgcolor=color.new(fgColor, 23), text_halign=text.align_center, text_size=textSize, tooltip = fgTip)

    // Volume 
    if nzVolume
        volTip = 'last volume : ' + str.tostring(nzVolume, format.volume) + '\naverage volume : ' + str.tostring(volMA, format.volume) 
        volColor = nzVolume > 1.618 * volMA ? color.green : nzVolume < .618 * volMA ? color.red : color.black

        table.cell(change, 1, 5, 'VOLUME', text_color=color.white, bgcolor=color.new(volColor, 23), text_halign=text.align_center, text_size=textSize, tooltip = volTip)
        table.merge_cells(change, 1, 5, 2, 5)
        
        volColor1 = B > S ? color.green : color.red
        table.cell(change, 1, 6, 'bull %' + str.tostring(B / (B + S) * 100, '#.##'), text_color=color.white, bgcolor=color.new(volColor1, 23), text_halign=text.align_center, text_size=textSize, tooltip = 'buying volume')
        table.cell(change, 2, 6, 'bear %' + str.tostring(S / (B + S) * 100, '#.##'), text_color=color.white, bgcolor=color.new(volColor1, 23), text_halign=text.align_center, text_size=textSize, tooltip = 'selling volume')

//------------------------------------------------------------------------------
// Market Sentiment Meter

if addons and isMeter and pivot != 'ð None'
    priceChangeRate   = math.abs((startPrice - endPrice) / startPrice)
    l = 13
    a = ta.atr(10) / 5
    f = (math.max(startPrice, endPrice) + upDev) * (1 + priceChangeRate * msmVOffset)  //highest(3 * l) + 5 * a // math.max(r61, r51, r41, r31, r21, r11)//
    t = bar_index//time
    var lns = array.new_line()
    var c = array.new_color(na)

    if barstate.isfirst
        array.push(c, color.gray)
        array.push(c, color.red)
        array.push(c, #910000)
        array.push(c, color.gray)
        array.push(c, color.green)
        array.push(c, #006400)

    if ta.change(time) and array.size(lns) > 0
        for i = 1 to array.size(lns) by 1
            lns1 = array.shift(lns)
            line.delete(lns1)

    if barstate.islast
        for i = 0 to l - 1 by 1
            array.push(lns, line.new(t[l + i] + msmHOffset, f + a * math.sqrt(math.pow(l, 2) - math.pow(i, 2)), t[l + i + 1] + msmHOffset, f + a * math.sqrt(math.pow(l, 2) - math.pow(i + 1, 2)), xloc.bar_index, extend.none, array.get(c, math.round((i - 2) / 5)), line.style_solid, 5))

        for i = 1 to array.size(lns) - 1 by 1
            array.push(lns, line.new(t[i + 1] + msmHOffset, f + a * math.sqrt(math.pow(l, 2) - math.pow(l - i, 2)), t[i] + msmHOffset, f + a * math.sqrt(math.pow(l, 2) - math.pow(l - i + 1, 2)), xloc.bar_index, extend.none, array.get(c, math.round(3 + (l - i - 2) / 5)), line.style_solid, 5))

        [t1, t2, p2, nc] = if close < bc1
            min = s51 != 0 ? s51 : s31 != 0 ? s31 : s21 != 0 ? s21 : s11
            min2 = s11 != 0 ? s11 : s31
            if close < min and min != 0
                [0, 11, -10, #910000]
            else if close < min2 and min2 != 0
                [0, 6, -4, color.red]
            else
                [0, 2, -2, color.gray]
        else if close > tc1
            max2 = r11 != 0 ? r11 : r31
            if close > math.max(r51, r31, r21, r11) and math.max(r51, r31, r21, r11) != 0
                [1, -10, -10, #006400]
            else if close > max2 and max2 != 0
                [1, -6, -4, color.green]
            else
                [1, -2, -2, color.gray]
        else
            [0, 0, -2, color.gray]

        array.push(lns, line.new(t[l + t1] + msmHOffset, f + a, t[l + t2] + msmHOffset, f + a * (l + p2), xloc.bar_index, extend.none, nc, line.style_solid, 3))
        array.push(lns, line.new(t[l + t1] + msmHOffset, f + a, t[l + t2] + msmHOffset, f + a * (l + p2), xloc.bar_index, extend.none, nc, line.style_arrow_right, 1))

//------------------------------------------------------------------------------
// Price Range Meter / ATR Range Display
f_atr(_length) =>
    ta.atr(_length)
atr = request.security(syminfo.tickerid, htf, f_atr(atrLength))

if addons and isRange
    l = 50
    a = ta.atr(10) / 5
    t = time
    tco = math.round(ta.change(t))
    priceChangeRate   = math.abs((startPrice - endPrice) / startPrice)
    f = (math.min(startPrice, endPrice) - dnDev) * (1 + priceChangeRate * prmVOffset) //timeframe.isweekly or timeframe.ismonthly ? lowest(l) : lowest(3 * l) - 5 * a
    //------------------------------------------------------------------------------

    highVolatility = htf_h - htf_l > atr * 1.618
    atrValue = ta.atr(atrLength)
    highVolatility0 = high - low > atrValue * 1.618

    if barstate.islast
        oo = math.round(l * (htf_h - htf_o) / (htf_h - htf_l))
        co = math.round(l * (htf_h - close) / (htf_h - htf_l))

        f_drawLineX(t - l * tco + prmHOffset, f - a, t + prmHOffset, f - a, xloc.bar_time, extend.none, color.gray, line.style_solid, 7)
        f_drawLineX(t - oo * tco + prmHOffset, f - a, t - co * tco + prmHOffset, f - a, xloc.bar_time, extend.none, htf_o < close ? #006400 : #910000, line.style_solid, 7)

        f_drawLabelX(t - l * tco + prmHOffset, f - a, str.tostring(htf_l, format.mintick), xloc.bar_time, yloc.price, #00000000, label.style_label_right, color.blue, size.normal, text.align_center, 'HTF LOW')
        f_drawLabelX(t + prmHOffset, f - a, str.tostring(htf_h, format.mintick), xloc.bar_time, yloc.price, #00000000, label.style_label_left, color.blue, size.normal, text.align_center, 'HTF HIGH')

        tooltip = (highVolatility0 ? 'â¡' : '') + 'Current TF (' + timeframe.period + ')\nATR(' + str.tostring(atrLength) + ') Value : ' + str.tostring(atrValue, format.mintick) + '\nPrice Range (H-L) : ' + str.tostring(high - low, format.mintick) + '\n' +
                    str.tostring(atrRange) + ' x ATR Bands : ' + str.tostring(open - atrRange * atrValue, format.mintick) + ' / ' + str.tostring(open + atrRange * atrValue, format.mintick) + 
                    '\n\nHigher TF (' + htf + ')\nATR(' + str.tostring(atrLength) + ') Value : ' + str.tostring(atr, format.mintick) + '\nPrice Range (H-L) : ' + str.tostring(htf_h - htf_l, format.mintick) + '\n' + str.tostring(atrRange) + ' x ATR Bands : ' + str.tostring(htf_o - atrRange * atr, format.mintick) + ' / ' + str.tostring(htf_o + atrRange * atr, format.mintick)

        text_2 = (highVolatility0 ? 'â¡' : '') + (highVolatility ? 'â¡' : '') + 'CHANGE (' + htf + ') ' + str.tostring(htf_c - htf_o) + ' (' + str.tostring((htf_c / htf_c1 - 1) * 100, '#.##') + '%)'
        f_drawLabelX(t - math.round(l / 2) * tco + prmHOffset, f - a, text_2, xloc.bar_time, yloc.price, #00000000, label.style_label_down, color.blue, size.normal, text.align_center, tooltip)

        f_drawLabelX(t - co * tco + prmHOffset, f - a, '', xloc.bar_time, yloc.price, htf_o < close ? #006400 : #910000, label.style_label_up, color.blue, size.tiny, text.align_center, 'CURRENT PRICE(' + str.tostring(close, format.mintick) + ')')

        if not timeframe.ismonthly
            oo1 = math.round(l * (htf_h1 - htf_o1) / (htf_h1 - htf_l1))
            co1 = math.round(l * (htf_h1 - htf_c1) / (htf_h1 - htf_l1))

            f_drawLineX(t - l * tco + prmHOffset, f - 7 * a, t + prmHOffset, f - 7 * a, xloc.bar_time, extend.none, color.gray, line.style_solid, 5)
            f_drawLineX(t - oo1 * tco + prmHOffset, f - 7 * a, t - co1 * tco + prmHOffset, f - 7 * a, xloc.bar_time, extend.none, htf_o1 < htf_c1 ? #006400 : #910000, line.style_solid, 5)

            f_drawLabelX(t - l * tco + prmHOffset, f - 7 * a, str.tostring(htf_l1, format.mintick), xloc.bar_time, yloc.price, #00000000, label.style_label_right, color.blue, size.normal, text.align_center, 'PREVIOUS HTF LOW')
            f_drawLabelX(t + prmHOffset, f - 7 * a, str.tostring(htf_h1, format.mintick), xloc.bar_time, yloc.price, #00000000, label.style_label_left, color.blue, size.normal, text.align_center, 'PREVIOUS HTF HIGH')
            f_drawLabelX(t - math.round(l / 2) * tco + prmHOffset, f - 7 * a, 'PREVIOUS HTF\'s RANGE (' + htf + ')', xloc.bar_time, yloc.price, #00000000, label.style_label_up, color.blue, size.normal, text.align_center, 'PREVIOUS HTF RANGE (H-L) : ' + str.tostring(htf_h1 - htf_l1, format.mintick))

var table logo = table.new(position.bottom_right, 1, 1)
if barstate.islast
    table.cell(logo, 0, 0, 'â¼â¾  ', text_size=size.normal, text_color=color.teal)
'''
,
4:
'''
// This source code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/
// Â© fnajianqiang

//@version=5
indicator("chanlun" , overlay = true
    ,max_boxes_count = 500
    ,max_lines_count = 500
    ,max_labels_count = 500)
//éç½®ç¸å³è¾å¥********************************************************
//æ¯å¦æ¾ç¤ºé¡¶ åº
var isShowTopAndBottom = input.bool(false,"æ¾ç¤ºææé¡¶åº")
var isShowRunningPen = input.bool(true,"æ¾ç¤ºè¿è¡ä¸­ç¬")
var isShowTopBottom = input.bool(true,"æ¾ç¤ºé¡¶åºåå")
group1 = "ååãç¬"
//ç¬ç±»å
penTypeStr = input.string("èç¬",title="ç¬çç±»å" ,options = ["èç¬","æ°ç¬","4K"],inline = "pen",group = group1)
// //ä¸é¡¶ä¸åº(ä¸ç¬ååº¦æ¯è¾å¤§çæ¶å)
// var specialTopBottom = input.bool(true,"ä¸é¡¶ä¸åº")
//é¡¶åºå¹åº¦>=æå®å¼åè®¸æç¬
p_TopAndBottom_Ratio = input.float(50,"é¡¶åºæç¬",tooltip="-1:ä¸ä½¿ç¨æ­¤åè½",options = [38.2,50,61.8,78.6,-1],inline="pen",group = group1)

//ç¬çé¢è²
color  penColr  = input.color(color.rgb(54, 58, 69, 30),"ç¬çé¢è²","å®ä¹ç¬çé¢è²",inline = "group_pen_param",group = group1)
int    penWidth =  input.int(1,"ç¬ççº¿å®½",1,10,inline="group_pen_param",group = group1)
float  p_penToSegmentRadio =  input.float(1.8,"åç¬æçº¿",1,10,tooltip = "åä¸ç¬ååä¸ç¬æ¯å¹æ¯ä¾è¾¾å°æ­¤æ°å¼åè®¸æçº¿æ®µ",inline = "segmentParam",group = group1)
var penType= if(penTypeStr =="èç¬")
    5
else if(penTypeStr =="æ°ç¬")
    -4
else if(penTypeStr =="4K")
    4
p_Segment_Change_Ratio = input.float(61.8,"çº¿æ®µä¿®æ­£æ¯ä¾",tooltip="-1:ä¸ä½¿ç¨æ­¤åè½",options = [38.2,50,61.8,78.6,-1],inline = "segmentParam",group = group1)

groupSegment = "çº¿æ®µ"
color segmentColor  = input.color(color.rgb(33, 149, 243, 30),"çº¿æ®µé¢è²(æ¬çº§å«)","å®ä¹çº¿æ®µçé¢è²",inline = "segment",group = groupSegment)
int   segmentWidth =  input.int(2,"çº¿å®½",1,10,inline = "segment",group =groupSegment)
color parentSegmentColr  = input.color(color.rgb(76, 175, 79, 30),"çº¿æ®µé¢è²(å¤§çº§å«)","å®ä¹å¤§çº§å«çº¿æ®µçé¢è²",inline = "parentegment",group = groupSegment)
int   parentSegmentWidth =  input.int(2,"å¤§çº§å«çº¿æ®µçº¿å®½",1,10,inline = "parentegment",group =groupSegment)

group_pivot = "ä¸­æ¢"
bool p_showPenPivot = input.bool(true,"æ¯å¦æ¾ç¤ºç¬ä¸­æ¢",group = group_pivot)
color penPivotUpBgColor  = input.color(color.rgb(76, 175, 79, 85),"ä¸æ¶¨ä¸­æ¢(æ¬¡çº§å«)","å®ä¹ç¬ä¸­æ¢çé¢è²",inline = "pen_pivot_up",group = group_pivot)
color penPivotUpBorderColor  = input.color(color.rgb(76, 175, 79, 0),"ä¸æ¶¨ç¬ä¸­æ¢è¾¹æ¡","å®ä¹ç¬ä¸­æ¢çè¾¹æ¡é¢è²",inline = "pen_pivot_up",group = group_pivot)
color penPivotDownBgColor  = input.color(color.rgb(255, 82, 82, 85),"ä¸è·ä¸­æ¢(æ¬¡çº§å«)","å®ä¹ç¬ä¸­æ¢çé¢è²",inline = "pen_pivot_down",group = group_pivot)
color penPivotDownBorderColor  = input.color(color.rgb(255, 82, 82, 0),"ä¸è·ç¬ä¸­æ¢è¾¹æ¡","å®ä¹ç¬ä¸­æ¢çè¾¹æ¡é¢è²",inline = "pen_pivot_down",group = group_pivot)

//æ¬çº§å«ä¸­æ¢è®¾ç½®
bool p_showPivot = input.bool(true,"æ¯å¦æ¾ç¤ºä¸­æ¢",group = group_pivot)
color pivotUpBgColor  = input.color(color.rgb(33, 149, 243, 95),"ä¸æ¶¨ä¸­æ¢(æ¬çº§å«)","å®ä¹ä¸­æ¢çé¢è²",inline = "pivot_up",group = group_pivot)
color pivotUpBorderColor  = input.color( color.rgb(33, 149, 243, 0),"ä¸æ¶¨ä¸­æ¢è¾¹æ¡","å®ä¹ä¸­æ¢çè¾¹æ¡é¢è²",inline = "pivot_up",group = group_pivot)
color pivotDownBgColor  = input.color(color.rgb(231, 216, 82, 95),"ä¸è·ä¸­æ¢(æ¬çº§å«)","å®ä¹ä¸­æ¢çé¢è²",inline = "pivot_down",group = group_pivot)
color pivotDownBorderColor  = input.color(color.rgb(231, 216, 82),"ä¸è·ä¸­æ¢è¾¹æ¡","å®ä¹ç¬ä¸­æ¢çè¾¹æ¡é¢è²",inline = "pivot_down",group = group_pivot)

//ä¹°åç¹
group_operatePoint = "ä¹°åç¹"
color p_penBuyColor  = input.color(color.rgb(76, 175, 79, 30),"æ¬¡çº§å«ä¹°ç¹",inline = "pen_buy_sell",group = group_operatePoint)
color p_penSellColor  = input.color( color.rgb(255, 82, 82, 30),"æ¬¡çº§å«åç¹",inline = "pen_buy_sell",group = group_operatePoint)
bool p_showPenOperate = input.bool(true,"æ¯å¦æ¬¡çº§å«ä¹°åç¹",inline = "pen_buy_sell",group = group_operatePoint)
color p_buyColor  = input.color(color.rgb(33, 149, 243, 30),"æ¬çº§å«ä¹°ç¹",inline = "buy_sell",group = group_operatePoint)
color p_sellColor  = input.color(color.rgb(231, 216, 82, 30),"æ¬çº§å«åç¹",inline = "buy_sell",group = group_operatePoint)
bool p_showOperate = input.bool(true,"æ¯å¦æ¾ç¤ºæ¬çº§å«ä¹°åç¹",inline = "buy_sell",group = group_operatePoint)

group_operatePoint_filter = "ä¹°åç¹è¿æ»¤"
bool p_operatePoint_filter_part_base =  input.bool(true,"ä¹°åç¹åååºç¡è¿æ»¤",group = group_operatePoint_filter)
bool p_operatePoint_filter_part =  input.bool(true,"ä¹°åç¹ååè¿æ»¤",group = group_operatePoint_filter)
bool p_operatePoint_filter_one_operate =  input.bool(true,"1ä¹°åmacdèé©°è¿æ»¤",group = group_operatePoint_filter)
bool p_operatePoint_filter_two_operate =  input.bool(true,"2ä¹°åç¹è¿æ»¤",group = group_operatePoint_filter,tooltip = "åªæ¾ç¤º2ä¹°macdå¨0è½´ä¸æ¹å¹¶ä¸åè°æ¥è¿0è½´ç")
bool p_operatePoint_filter_power =  input.bool(true,"é²ç¼æ¯",group = group_operatePoint_filter)

string compareSysmbol = input.symbol("btc",title = "æ¯ä»·ç³»ç»")
//Debugæµè¯è°è¯å·¥å·
type DebugInfo
    string debugInfo
    int    debugnum = 0
DebugInfo debugInfo = DebugInfo.new()
print(txt) =>
    lbl = label.new(bar_index, na, txt,tooltip = txt,xloc= xloc.bar_index, yloc= yloc.price,color= color(na))
    label.set_xy(lbl, bar_index, high)
    label.set_text(lbl, txt)
    debugInfo.debugInfo := ""

//#regioin å¯¹è±¡å®ä¹
type OperatePoint
    //ä¹°åç¹ç±»å -1:åç¹ 1:ä¹°ç¹
    int operateType
    //1,2,3ä¹°åç¹æ°å­
    int typeNum
    //ä¹°åç¹ä»·æ ¼
    float price
    //ä¹°åç¹æè¿°(æ¬¡çº§å«+å¤§çº§å«)
    string operateInfo
    //å¯¹åºå¾å½¢
    label operateLabel

//@type ç¬å®ä¹***************************************************
//@field high ç¬çé«ç¹
//@field low ç¬çä½ç¹
//@field penState ç¬çç¶æ 0:æç¬ä½æªå®æ 1:å·²å®æ 2:å¾æç¬
type Pen
    float high
    float low
    int startTime = 0
    //ç»ææ¶é´
    int endTime = 0
    //ç¬çç¶æ 1:è¿è¡ä¸­çç¬(æ²¡æç¬¬ä¸ç¬ç¡®å®å°±æ¯æ­¤ç¶æ) 2:å·²ç»å®æçç¬
    int penState = 0 
    //ç¬æ¹å  1:ä¸å -1:ä¸è·
    int direction = 0
    //ç»å¶ççº¿
    line line
    //åç»­ä¿®å¤å¢å ****************************
    //åå¹¶åç high low time(ç¨äºå¤å®æ¯å¦ææä¸ä¸ç¬)
    float[] mergeHigh
    float[] mergeLow
    int[]   mergeTime
    //è¯¥ç¬å¯¹åºçä¹°åç¹
    OperatePoint operatePoint
//@type ä¸­æ¢å®ä¹ *************************************************** 
type Pivot
    float high
    float low
    //å¼å§æ¶é´(ä½¿ç¨æ¶é´é¿å barindex è·¨åº¦è¿å¤§é®é¢)
    int startTime = 0
    //ç»ææ¶é´
    int endTime = 0
    //å¼å§ç¬index
    int startPenIndex = 0
    //ç»æç¬index
    int endPenIndex = 0
    //ä¸­æ¢æ¹å 1:ä¸æ¶¨ä¸­æ¢ -1:ä¸è·ä¸­æ¢
    int direction = 0
    //ä¸­æ¢ç¶æ 1:è¿è¡ä¸­ 2:å®æ
    int state = 1
    //box
    box box = na
//@type çº¿æ®µå®ä¹***********************************************
type Segment
    float high
    float low
    //å¼å§æ¶é´(ä½¿ç¨æ¶é´é¿å barindex è·¨åº¦è¿å¤§é®é¢)
    int startTime = 0
    //ç»ææ¶é´
    int endTime = 0
    //å¼å§ç¬index
    int startPenIndex = 0
    //ç»æç¬index
    int endPenIndex = 0
    //çº¿æ®µçç¶æ 1:å¾ç¡®å® 2:å·²ç¡®è®¤
    int segmentState = 0 
    //æ¹å  1:ä¸å -1:ä¸è·
    int direction = 0
    //ç»å¶ççº¿
    line line
    //åå«çä¸­æ¢
    array<Pivot> pivots
    //å¯¹åºæ¨¡æç¬å¯¹è±¡
    Pen pen = na
//çº§å«å®ä¹
type Grade
    //1:å½åçº§å« 2:ä¸ä¸ä¸ªçº§å«
    int gradeNum = 1
    //å¯¹åºçèªèº«ç¬
    Pen[] selfPens
    //å¯¹åºççº¿æ®µæ¨¡æç¬
    Pen[] pens
    //å¯¹åºçº¿æ®µé¢è²åç±»å
    color segmentLineColor
    int   segmentWidth
    //çº¿æ®µå®ææ ·å¼
    string segmentLineNoOverStyle = line.style_dashed
    //çº¿æ®µå®ææ ·å¼
    string segmentLineOverStyle = line.style_solid
    //å¯¹åºä¸­æ¢èæ¯é¢è²åè¾¹æ¡ä¿¡æ¯
    color pivotUpBgColor
    color pivotDownBgColor
    color pivotUpBorderColor
    color pivotDownBordeColor
    //å¯¹åºçº¿æ®µä¿¡æ¯
    Segment[] segments
    //å¯¹åºå¯è½çº¿æ®µä¿¡æ¯
    Segment[] ableSegments
    //ä¹°åç¹é¢è²
    color buyColor
    color sellColor
    //æ¯å¦æ¾ç¤ºä¹°åç¹
    bool isShowOperate
//#endregion

//åå¹¶åç high low
var float[] mergeHigh = array.new_float()
var float[] mergeLow  = array.new_float()
var int[]   mergeTime = array.new_int()
//ä¿å­ææç¬å¯¹è±¡
var array<Pen> pens = array.new<Pen>()
//å¯è½æç¬ç(åªæä¸ä¸ª)
var array<Pen> ablePen = array.new<Pen>()
//å°æ¬çº§å«æ®µæ¨¡ææç¬å­æ¾å¨æ­¤å¤
var array<Pen> segmentPens = array.new<Pen>()
//ä¿å­ææçº§å«ä¿¡æ¯
//æ­¤å¤æ¬èº«å®ä¹ä¸ºvar ä½åç°è¯¥ç¼ç¨è¯­è¨å¨å¯¹è±¡å¼ç¨æé®é¢ææ­¤å»æ
var Grade[] grades = array.new<Grade>()
//ä¿å­å½åçº§å«ææççº¿æ®µä¿¡æ¯
var Segment[] segments = array.new<Segment>()
//ä¹åå·²ç»æä¸ºçº¿æ®µï¼ä½å ä¸ºåç»­åå±å¯¼è´è¯¥çº¿æ®µå¤±æï¼æ¾å¥æ­¤ä¸­åç»­å¤æ­
var Segment[] ableSegments = array.new<Segment>()
//ä¿å­å½é«çº§å«ææççº¿æ®µä¿¡æ¯
var Segment[] hightSegments = array.new<Segment>()
//ä¹åå·²ç»æä¸ºçº¿æ®µï¼ä½å ä¸ºåç»­åå±å¯¼è´è¯¥çº¿æ®µå¤±æï¼æ¾å¥æ­¤ä¸­åç»­å¤æ­
var Segment[] highAbleSegments = array.new<Segment>()
//è¡è¿ä¸­çç¬,æªç¡®å®ï¼åªä¾æ¾ç¤ºä½¿ç¨
var Pen runningPen = Pen.new(na,na,na,na,1,0,line.new(0,0,0,0,xloc = xloc.bar_time,style = line.style_dotted,color=penColr,width=1))
//ä¹°åç¹æ¥è­¦æ è®°è®¾ç½® (1:ä¹° -1:å)
float[] alertSubFlag = array.new_float() //æ¬¡çº§å«
float[] alertFlag = array.new_float()//æ¬çº§å«
//æ¾ç¤ºçé¡¶åºåå(åªä¿çæå20æ¡)
var label[] topOrBottomLabels = array.new_label()
//macdåæ°ä¿¡æ¯
[macdLine, signalLine, histLine] = ta.macd(close,12,26,9)
setTopBottomLabel(int _x,float _price,int _direction)=>
    if(isShowTopBottom)
        tooltip = str.tostring(_price)
        label _label =  label.new(na,na,xloc = xloc.bar_time,yloc = yloc.price,size=size.auto)
        if(_direction == -1)
            label.set_x(_label,_x)
            //label.set_y(_label,_price-_price*0.01)
            label.set_yloc(_label,yloc.belowbar)
            label.set_color(_label,color.green)
            label.set_style(_label,label.style_triangleup)
            label.set_tooltip(_label,tooltip)
        else
            label.set_x(_label,_x)
            //label.set_y(_label,_price+_price*0.01)
            label.set_yloc(_label,yloc.abovebar)
            label.set_color(_label,color.red)
            label.set_style(_label,label.style_triangledown)
            label.set_tooltip(_label,tooltip)
        array.push(topOrBottomLabels,_label)
        int _labelNum = array.size(topOrBottomLabels)
        while(_labelNum>=30)
            label.delete(array.shift(topOrBottomLabels))
            _labelNum := array.size(topOrBottomLabels)
//æ¥è­¦åå§åè®¾ç½®
initAlertFlag()=>
    //ç¬¬0ä½ä¿å­ç¬èµ·å§ä»·æ ¼ï¼ç¨äºå¤å®å¯¹åºç¬ä¿¡æ¯
    array.push(alertSubFlag,0)
    //æ¬¡çº§å«1ä¹°å
    array.push(alertSubFlag,0)
    //æ¬¡çº§å«2ä¹°å
    array.push(alertSubFlag,0)
    //æ¬¡çº§å«3ä¹°å
    array.push(alertSubFlag,0)
    //ç¬¬0ä½ä¿å­ç¬èµ·å§ä»·æ ¼ï¼ç¨äºå¤å®å¯¹åºç¬ä¿¡æ¯
    array.push(alertFlag,0)
    //æ¬çº§å«1ä¹°å
    array.push(alertFlag,0)
    //æ¬çº§å«2ä¹°å
    array.push(alertFlag,0)
    //æ¬çº§å«3ä¹°å
    array.push(alertFlag,0)
setAlertFlag(int _gradeNum,OperatePoint _operatePoint)=>
    float _price = _operatePoint.price
    //è®¾ç½®æ¥è­¦æ å¿
    if(_gradeNum == 1)
        array.set(alertSubFlag,_operatePoint.typeNum,_operatePoint.operateType==1?_price:-_price)
    else
        array.set(alertFlag,_operatePoint.typeNum,_operatePoint.operateType==1?_price:-_price)
//ç³»ç»å¯å¨æ¯é¦æ¬¡åå§åçº§å«ä¿¡æ¯
initGrade() =>
    if(array.size(grades)<=0)
        //åå§åä½çº§å«ä¿¡æ¯(æ ç¨)
        Grade preGrade = Grade.new(0,segmentPens,pens,segmentColor,segmentWidth,line.style_dashed,line.style_solid,
                    penPivotUpBgColor,penPivotDownBgColor,penPivotUpBorderColor,penPivotDownBorderColor,segments,ableSegments)
        preGrade.buyColor:= p_penBuyColor
        preGrade.sellColor:= p_penSellColor
        preGrade.isShowOperate :=p_showPenOperate
        //åå§åæ¬çº§å«ä¿¡æ¯
        Grade currentGrade = Grade.new(1,segmentPens,pens,segmentColor,segmentWidth,line.style_dashed,line.style_solid,
                    penPivotUpBgColor,penPivotDownBgColor,penPivotUpBorderColor,penPivotDownBorderColor,segments,ableSegments)
        currentGrade.buyColor:= p_penBuyColor
        currentGrade.sellColor:= p_penSellColor
        currentGrade.isShowOperate :=p_showPenOperate
        //åå§åä¸ä¸çº§å«ä¿¡æ¯
        Grade nextGrade = Grade.new(2,array.new<Pen>(),segmentPens,parentSegmentColr,parentSegmentWidth,line.style_dotted,line.style_dashed,
                    pivotUpBgColor,pivotDownBgColor,pivotUpBorderColor,pivotDownBorderColor,hightSegments,highAbleSegments)
        nextGrade.buyColor:= p_buyColor
        nextGrade.sellColor:= p_sellColor
        nextGrade.isShowOperate :=p_showOperate
        array.insert(grades,0,preGrade)
        array.insert(grades,1,currentGrade)
        array.insert(grades,2,nextGrade)
getGradePens(int _gradeNum)=>
    if(_gradeNum == 1)
        pens
    else if(_gradeNum == 2)
        segmentPens
getGradeSelfPens(int _gradeNum)=>
    if(_gradeNum == 1)
        segmentPens
    else if(_gradeNum == 2)
        array.new<Pen>()
getGradeSegments(int _gradeNum)=>
    if(_gradeNum == 1)
        segments
    else if(_gradeNum == 2)
        hightSegments 
getGradeAbleSegments(int _gradeNum)=>
    if(_gradeNum == 1)
        ableSegments
    else if(_gradeNum == 2)
        highAbleSegments  
//æµè¯è¾åºæ¯æ ¹kçº¿è·ç¦»åé¢é¡¶åºåå è·ç¦»
printKBarSinceTopOrButtom(lastTopOrBottomTime)=>
    int _since = 0
    _since := array.size(mergeTime) - array.indexof(mergeTime,lastTopOrBottomTime) +1
    //print(str.tostring(_since))
    _since
//#region @function åå¹¶å¤çåå«å³ç³»çbar å¹¶ä»å·²ç»å¤çå®åå¹¶å³ç³»çbarä¸­æ¥æ¾ é¡¶ åº
//@return [isTopOrBottom,topOrBottomTime,topOrBottomPrice]
mergeBarAndFindTopAndBottom() =>
    //æåä¸ç¬
    Pen _lastPen = na
    if(array.size(pens) > 1)
        _lastPen := array.get(pens,array.size(pens)-1)
    //åå¾æåä¸æ¬¡å¤çåå¹¶åçbar,å¦æå½åæ²¡æçè¯ä½¿ç¨ä¸ä¸æ ¹bar
    preHigh = high[1]
    preLow  = low[1]
    preTime = time[1]
    if( array.size(mergeHigh)>0 )
        preHigh := array.pop(mergeHigh)
    if( array.size(mergeLow)>0 )
        preLow := array.pop(mergeLow)
    if( array.size(mergeTime)>0 )
        preTime := array.pop(mergeTime)
    //å¤æ­æ¯å¦å­å¨åå«å³ç³»
    isLeftContain  =   (preHigh >= high and preLow <= low)
    isRightContain =   (high >= preHigh and low <= preLow)
    isContain      =   isLeftContain or isRightContain
    //å½ååå¹¶kçº¿æ¹å 0:æ æ¹å 1:ä¸å -1:ä¸é
    direction      =if not isContain
        high >= preHigh ? 1 : -1
    else
        if(array.size(mergeHigh) >= 1)
            preHigh >= array.get(mergeHigh,array.size(mergeHigh) -1 ) ? 1 : -1
        else
            preHigh >= preHigh[1] ? 1 : -1
    // if(array.size(pens)>0 and isContain)
    //     Pen _lastPen = array.get(pens,array.size(pens)-1)
    //     if(_lastPen.direction == 1 and high > _lastPen.high)
    //         isContain := false
    //     else if(_lastPen.direction == -1 and low < _lastPen.low)
    //         isContain := false
    if (isContain)
        array.push(mergeHigh,direction == 1 ? math.max(high , preHigh) :  math.min(high , preHigh))
        array.push(mergeLow ,direction == 1 ? math.max(low  , preLow)  :  math.min(low  , preLow))
        //æ¶é´è®¾ç½®ä¸ºåå«å³ç³»ä¸­é¡ºåºæ¹åçæå¼baræ¶é´
        array.push(mergeTime,direction == 1 ? (high >= preHigh ? time :preTime) : (low <= preLow ? time :preTime) )
        preTime := array.get(mergeTime,array.size(mergeTime) - 1)
    else
        array.push(mergeHigh, preHigh )
        array.push(mergeLow , preLow )
        array.push(mergeTime, preTime)
        array.push(mergeHigh, high )
        array.push(mergeLow , low )
        array.push(mergeTime, time)
    // //ä¿®å¤é®é¢ï¼åºç°æ¯åé¢æ´æå©çæå¼ï¼ä½å ä¸ºåå«å³ç³»å¤çåæ æ³ä½ç°
    if(not na(_lastPen) and not isContain)
        if(_lastPen.direction == 1 and high > high[1] and low > low[1] )
            isContain := false
        else if(_lastPen.direction == -1 and high < high[1] and low < low[1] )
            isContain := false
    //#2:æµè¯æ¾å°ææçé¡¶åºåå(3æ ¹ä¸éåçï¼ä¸­é´ä¸æ ¹æ¯æå¼)
    isUp     =     bool(na)
    isDown   =     bool(na)
    isTop    =     bool(na)
    isBottom =     bool(na)

    //åå¹¶å¤çåéé¢æè³å°2æ ¹kçº¿ï¼å¤æ­é¡¶åº
    if(array.size(mergeHigh)>=2)
        mergeBarLastHigh = array.get(mergeHigh,array.size(mergeHigh)-1)
        mergeBarLastLow  = array.get(mergeLow,array.size(mergeLow)-1)
        mergeBarLastPreHigh = array.get(mergeHigh,array.size(mergeHigh)-2)
        mergeBarLastPreLow  = array.get(mergeLow,array.size(mergeLow)-2)
        isUp     :=     mergeBarLastHigh > mergeBarLastPreHigh and mergeBarLastLow > mergeBarLastPreLow
        isDown   :=     mergeBarLastHigh < mergeBarLastPreHigh and mergeBarLastLow < mergeBarLastPreLow
        isTop    :=     isUp[1]   and isDown
        isBottom :=     isDown[1] and isUp

    if(isShowTopAndBottom)
        label _label = label.new(na,na,xloc = xloc.bar_time,size=size.auto)
        if(isTop)//é¡¶åå
            tooltip = str.tostring(array.get(mergeHigh,array.indexof(mergeTime,preTime)))
            label.set_xy(_label,preTime,na)
            label.set_yloc(_label,yloc.abovebar)
            label.set_color(_label,color.red)
            label.set_style(_label,label.style_triangledown)
            label.set_tooltip(_label,tooltip)
        if(isBottom)//åºåå
            tooltip = str.tostring(array.get(mergeLow,array.indexof(mergeTime,preTime)))
            label.set_xy(_label,preTime,na)
            label.set_yloc(_label,yloc.belowbar)
            label.set_color(_label,color.green)
            label.set_style(_label,label.style_triangleup)
            label.set_tooltip(_label,tooltip)
    //é¡¶ åº   
    isTopOrBottom  = 0
    if(isTop)
        isTopOrBottom := 1
    else if(isBottom)
        isTopOrBottom := -1
    //å¯¹åºçkçº¿æ¶é´
    int topOrBottomTime = na
    if(isTopOrBottom == 1 or isTopOrBottom == -1)
        topOrBottomTime := preTime
    //å¯¹åºçä»·æ ¼
    float topOrBottomPrice = na
    if(isTopOrBottom == 1)
        topOrBottomPrice := array.get(mergeHigh,array.indexof(mergeTime,topOrBottomTime))
    else if(isTopOrBottom == -1)
        topOrBottomPrice := array.get(mergeLow,array.indexof(mergeTime,topOrBottomTime))
    [isTopOrBottom,topOrBottomTime,topOrBottomPrice]
//#endregion
//#region ç¬ç¸å³æ¹æ³
//ç»å¶ç¬å¯¹åºçä¹°åç¹æ è®°
drawPenOperate(int _gradeNum,Pen _pen)=>
    Grade _grade = array.get(grades,_gradeNum)
    OperatePoint _operatePoint = _pen.operatePoint
    if(not na(_operatePoint) and _grade.isShowOperate)
        if(not na(_operatePoint.operateLabel))
            label.delete(_operatePoint.operateLabel)
        string _yloc = _operatePoint.operateType==1?yloc.belowbar:yloc.abovebar
        string _style = _operatePoint.operateType==1? label.style_label_up:label.style_label_down
        string _text = str.tostring(_operatePoint.typeNum)
        string _tooltip = str.tostring(_operatePoint.price)
        string _size = size.small
        if(_gradeNum>1)
            _size := size.normal
        label _label = label.new(_pen.endTime,_operatePoint.price,xloc = xloc.bar_time
                ,size=_size,yloc=_yloc,style=_style,text=_text,tooltip=_tooltip
                ,color =_operatePoint.operateType>0? _grade.buyColor:_grade.sellColor)
        _operatePoint.operateLabel := _label
    true
delDrawPenOperate(int _gradeNum,Pen _pen)=>
    Grade _grade = array.get(grades,_gradeNum)
    OperatePoint _operatePoint = _pen.operatePoint
    if(not na(_operatePoint) and _grade.isShowOperate)
        if(not na(_operatePoint.operateLabel))
            //print("del")
            label.delete(_operatePoint.operateLabel) 
        _pen.operatePoint :=na
    true
//è·å¾æå®ç¬æè¿çä¸ä¸ªä¸­æ¢(å¨æåçº¿æ®µ,ä¸åå«èªèº«æå¨ä¸­æ¢)
getLastPivotByPen(int _gradeNum,Pen _pen)=>
    Grade _grade = array.get(grades,_gradeNum)
    Segment[] _segments = getGradeSegments(_gradeNum)
    Pen[] _pens= getGradePens(_gradeNum)
    Segment _operateSegament =  array.get(_segments,array.size(_segments)-1)
    Pivot _prePivot = na
    if(na(_prePivot))
        for j=0 to array.size(_operateSegament.pivots)>0 ? array.size(_operateSegament.pivots)-1:na
            Pivot _pivot = array.get(_operateSegament.pivots,j)
            if(_pivot.endTime < _pen.endTime)
                _prePivot := _pivot
    _prePivot
//è·å¾èªèº«æå¨çä¸­æ¢
getSelfPivotByPen(int _gradeNum,Pen _pen)=>
    Grade _grade = array.get(grades,_gradeNum)
    Segment[] _segments = getGradeSegments(_gradeNum)
    Pen[] _pens= getGradePens(_gradeNum)
    Segment _operateSegament =  array.get(_segments,array.size(_segments)-1)
    Pivot _selfPivot = na
    //é¦ååå¾èªèº«æå¨ä¸­æ¢ï¼å¦æèªèº«æ²¡æçè¯åæ¾ä¸ä¸ä¸ªä¸­æ¢
    for j=0 to array.size(_operateSegament.pivots)>0 ? array.size(_operateSegament.pivots)-1:na
        Pivot _pivot = array.get(_operateSegament.pivots,j)
        if(_pivot.startTime<=_pen.startTime and  _pivot.endTime >= _pen.endTime)
            _selfPivot := _pivot
    _selfPivot
//æ£æµä¹°åç¹ååè¿æ»¤(å¦:åºååï¼æå³è¾¹kçº¿è¦æ± 1:ç»¿è² 2::æ¶çä»·è¦é«äºåºkæé«å¤)
filterOperateType(int _gradeNum,Pen _pen)=>
    bool isResult = false
    //åå¾éªè¯åå
    int _direction = _pen.direction
    //åå¾ååæåK
    if(not na(_pen.mergeTime) )
        int _kBarIndexCurrent = (time - array.get(_pen.mergeTime,0))/1000/timeframe.in_seconds()
        int _kBarIndexNext = (time - array.get(_pen.mergeTime,array.size(_pen.mergeTime)-1))/1000/timeframe.in_seconds()
        float _close = close[_kBarIndexNext]
        float _open = open[_kBarIndexNext]
        float _high = high[_kBarIndexNext]
        float _low = low[_kBarIndexNext]
        //print("_close:"+str.tostring(_close)+"\n_open:"+str.tostring(_open))
        if(_direction == 1)
            float _topHighPrice = high[_kBarIndexCurrent]
            // if(_close<=_topOrLowPrice)
            //     isResult := true
            if(_open > _close and _high < _topHighPrice)
                isResult := true
        else if(_direction == -1)
            float _topOrLowPrice = low[_kBarIndexCurrent]
            // //print("_close:"+str.tostring(_close)+"\n_topOrLowPrice:"+str.tostring(_topOrLowPrice))
            // if(_close>=_topOrLowPrice)
            //     isResult := true
            
            if(_open < _close and _low > _topOrLowPrice)
                isResult := true
    else
        isResult := true
    isResult
//åååé¡¿è¿æ»¤ 
filterOperateVerifyType(int _gradeNum,Pen _pen)=>
    bool isResult = false
    //åå¾éªè¯åå
    int _direction = _pen.direction
    if(not na(_pen.mergeTime) )
        if(array.size(_pen.mergeTime)>=3)
            int _kBarIndexCurrent = (time - array.get(_pen.mergeTime,1))/1000/timeframe.in_seconds()
            int _kBarIndexNext = (time - array.get(_pen.mergeTime,array.size(_pen.mergeTime)-1))/1000/timeframe.in_seconds()
            float _close = close[_kBarIndexNext]
            float _high = high[_kBarIndexNext]
            float _low = high[_kBarIndexNext]
            //åå¾ç¬çå¹åº¦å¼
            float _penPriceAmplitude = math.abs(_pen.high - _pen.low)
            if(_direction == 1)
                float _topOrLowPrice = low[_kBarIndexCurrent]
                if(_close<=_topOrLowPrice)
                    isResult := true
                //å¦æä¸æç«çè¯æåkçº¿æ¶çä»·å·²ç»è¾¾å°ç¬ç50%
                else
                    if( (_pen.high - _low)/_penPriceAmplitude >=0.5 )
                        isResult := true 
            else if(_direction == -1)
                float _topOrLowPrice = high[_kBarIndexCurrent]
                //print("_close:"+str.tostring(_close)+"\n_topOrLowPrice:"+str.tostring(_topOrLowPrice))
                if(_close>=_topOrLowPrice)
                    //print("_close:"+str.tostring(_close)+"\n_topOrLowPrice:"+str.tostring(high[_kBarIndexCurrent]))
                    isResult := true 
                //å¦æä¸æç«çè¯æåkçº¿æ¶çä»·å·²ç»è¾¾å°ç¬ç50%
                else
                    if( (_high -_pen.low)/_penPriceAmplitude >=0.5 )
                        isResult := true 

    isResult

getMacdArea(int _gradeNum,Segment _segment,Pen _pen)=>

    int _needNum =  (_pen.endTime -  _pen.startTime)/1000/timeframe.in_seconds()
    float _area = 0
    int _startNum = (time -  _pen.startTime)/1000/timeframe.in_seconds()
    // for int i=_startNum to _needNum + _startNum
    //     _area += histLine[i]
    _area
//1ä¹°åæ¯å¦å­å¨macdèé©°
//æ¡ä»¶:
//1:å¿é¡»è³å°ä¸ä¸ªä¸­æ¢
//2:è¿ä¸­æ¢ååºä¸­æ¢ååmacdé¢ç§¯èé©°
checkMacdException(int _gradeNum,Segment _segment,Pen _pen)=>
    Pen[] _pens= getGradePens(_gradeNum)
    bool _result = false
    if(array.size(_segment.pivots)>=1)
        //åå¾æåä¸ä¸ªä¸­æ¢
        Pivot _lastsPivot = array.get(_segment.pivots,array.size(_segment.pivots)-1)
        Pen _startPen = array.get(_pens,_segment.startPenIndex)
        Pen _endPen = array.get(_pens,_segment.endPenIndex)
        float _startPenArea = getMacdArea(_gradeNum,_segment,_startPen)
        float _endPenArea = getMacdArea(_gradeNum,_segment,_endPen)
        if(_endPenArea < _startPenArea)
            _result := true
    _result
//æ»çä¹°åç¹è¿æ»¤
filterOperate(int _gradeNum,Segment _segment,Pen _pen)=>
    //åªå¯¹è¿è¡ä¸­çç¬è¿è¡è¿æ»¤
    Pen[] _pens= getGradePens(_gradeNum)
    //è¿æ»¤åªéå¯¹å½åæåä¸ç¬
    if(array.indexof(_pens,_pen) == array.size(_pens)-1 and _gradeNum==1)
        Pen _checkPen = _pen
        if(_gradeNum>1)
            _checkPen := array.get(_pens,_segment.endPenIndex)
        //print("*******************")
        int maxNum = 0
        //åºç¡ååè¿æ»¤
        if(p_operatePoint_filter_part_base)
            maxNum += 1
        //éè¦åååé¡¿éªè¯
        if(p_operatePoint_filter_part)
            maxNum += 1
        int checkResult = 0
        if(p_operatePoint_filter_part_base and filterOperateType(_gradeNum,_checkPen))
            checkResult +=1
        if(p_operatePoint_filter_part and filterOperateVerifyType(_gradeNum,_checkPen))
            checkResult +=1
        //print("checkResult:"+str.tostring(checkResult)+"\nmaxNum:"+str.tostring(maxNum))
        checkResult >=maxNum
    else
        true
//æ£æµéªè¯1ä¹°åç¹
checkOneOperate(int _gradeNum,Segment _segment,Pen _checkPen,Pen[] _needDrawPens)=>
    Pen[] _pens= getGradePens(_gradeNum)
    Pen _lastPen = _checkPen
    int _direction = _segment.direction
    //åæ¬¡å¤æ­åºä¸­æ¢è¿ç¬ å è¿ä¸­æ¢ç¬ æ¯å¦èé©°
    Pen _pivotStartPen = array.get(_pens,_segment.startPenIndex)
    //å¤æ­åé¢æ¯å¦æä¸­æ¢
    Pivot _prePivot = getLastPivotByPen(_gradeNum,_lastPen)
    if(not na(_prePivot))
        if(_prePivot.endPenIndex == array.indexof(_pens,_lastPen))
            _pivotStartPen :=  array.get(_pens,_prePivot.startPenIndex)
        else
            _pivotStartPen :=  array.get(_pens,_segment.endPenIndex-2)
    if(_lastPen.high-_lastPen.low < _pivotStartPen.high-_pivotStartPen.low  and filterOperate(_gradeNum,_segment,_lastPen))
        OperatePoint _operatePoint =OperatePoint.new(-_direction,1,_direction==1?_lastPen.high:_lastPen.low,"")
        bool isAlert = false
        //åªææåä¸ç¬ï¼å¹¶ä¸ä¹åæ²¡æä¹°åç¹ï¼æèä¹åæä¹°åç¹ä½ä»·æ ¼åçååæè¿è¡æ¥è­¦
        if(array.indexof(_pens,_lastPen) == array.size(_pens)-1)
            if(na(_lastPen.operatePoint))
                isAlert := true
            else
                if(_operatePoint.price != _lastPen.operatePoint.price)
                    isAlert := true
        if(not na(_lastPen.operatePoint))
            //if(_lastPen.operatePoint.price != _operatePoint.price)
            delDrawPenOperate(_gradeNum ,_lastPen)
        _lastPen.operatePoint := _operatePoint
        array.push(_needDrawPens,_lastPen)
        //è®¾ç½®æ¥è­¦æ å¿
        if(isAlert)
            setAlertFlag(_gradeNum,_operatePoint)

//æ£æµéªè¯2ä¹°åç¹
checkTwoOperate(int _gradeNum,Segment _segment,Pen _pen,Pen[] _needDrawPens)=>
    Pen[] _pens= getGradePens(_gradeNum)
    //çº¿æ®µå¯¹åºçæ¹å
    int _direction = _segment.direction
    OperatePoint _operatePoint = na
    if(_pen.direction != _direction)
        _operatePoint := OperatePoint.new(_direction,2,_direction==1?_pen.low:_pen.high,"")
    else
        Pen _prePen = array.get(_pens,_segment.endPenIndex)
        if(_direction == 1)
            if(_pen.high < _prePen.high)
                _operatePoint := OperatePoint.new(-_direction,2,_pen.high,"")
        if(_direction == -1)
            if(_pen.low > _prePen.low)
                _operatePoint := OperatePoint.new(-_direction,2,_pen.high,"")
    //å¦ææ¯ç¬ä¸­æ¢è¯
    if(not na(_operatePoint))
        if(filterOperate(_gradeNum,_segment,_pen))
            bool isAlert = false
            //åªææåä¸ç¬ï¼å¹¶ä¸ä¹åæ²¡æä¹°åç¹ï¼æèä¹åæä¹°åç¹ä½ä»·æ ¼åçååæè¿è¡æ¥è­¦
            if(array.indexof(_pens,_pen) == array.size(_pens)-1)
                if(na(_pen.operatePoint))
                    isAlert := true
                else
                    if(_operatePoint.price != _pen.operatePoint.price)
                        isAlert := true
            if(not na(_pen.operatePoint))
                //if(_pen.operatePoint.price != _operatePoint.price)
                delDrawPenOperate(_gradeNum ,_pen)
            _pen.operatePoint := _operatePoint
            array.push(_needDrawPens,_pen)
            //è®¾ç½®æ¥è­¦æ å¿
            if(isAlert)
                setAlertFlag(_gradeNum,_operatePoint)
//æ£æµéªè¯3ä¹°åç¹
checkThreeOperate(int _gradeNum,Segment _segment,Pen _pen,Pen[] _needDrawPens)=>
    Pen[] _pens= getGradePens(_gradeNum)
    //å½åç¬index
    int i = array.indexof(_pens,_pen)
    //çº¿æ®µå¯¹åºçæ¹å
    int _direction = _segment.direction
    Pen _preDirectionPen = array.get(_pens,i-2)
    float _price = -1
    //å¤æ­åä¸ç¬åæ¹åçæ¯å¦æç¼ºå£
    if(_direction == 1 and _pen.low > _preDirectionPen.high)
        _price := _pen.low
    if(_direction == -1 and _pen.high <  _preDirectionPen.low)
        _price := _pen.high
    //ä¸å­å¨ç¼ºå£çè¯åå¤æ­åé¢æ¯å¦æä¸­æ¢ï¼å¹¶ä¸ä¸å¨ä¸­æ¢èå´ä¸­
    if(_price == -1)
        //å¤æ­åé¢æ¯å¦æä¸­æ¢
        Pivot _prePivot = getLastPivotByPen(_gradeNum,_pen)
        //å­å¨ä¸­æ¢çè¯ï¼å¤æ­æ¯å¦æ¯åºä¸­æ¢ç¬¬ä¸ç¬
        if(not na(_prePivot))
            if(i == _prePivot.endPenIndex+1)
                if(_direction == 1 and _pen.low > _prePivot.high)
                    _price := _pen.low
                if(_direction == -1 and _pen.high <  _prePivot.low)
                    _price := _pen.high
    if(_price != -1 and filterOperate(_gradeNum,_segment,_pen))
        OperatePoint _operatePoint =OperatePoint.new(_direction,3,_price,"")
        bool isAlert = false
        //åªææåä¸ç¬ï¼å¹¶ä¸ä¹åæ²¡æä¹°åç¹ï¼æèä¹åæä¹°åç¹ä½ä»·æ ¼åçååæè¿è¡æ¥è­¦
        if(array.indexof(_pens,_pen) == array.size(_pens)-1)
            if(na(_pen.operatePoint))
                isAlert := true
            else
                if(_operatePoint.price != _pen.operatePoint.price)
                    isAlert := true
        if(not na(_pen.operatePoint))
            //if(_pen.operatePoint.price != _operatePoint.price)
            delDrawPenOperate(_gradeNum ,_pen)
        _pen.operatePoint := _operatePoint
        array.push(_needDrawPens,_pen)
        //è®¾ç½®æ¥è­¦æ å¿
        if(isAlert)
            setAlertFlag(_gradeNum,_operatePoint)
//@function ç¬å¯¹åºçä¹°åç¹æä½
//@param _gradeNum:æå®çº§å«çç¬
//@param _pen:ç¬å¯¹è±¡
penOperateHandler(int _gradeNum)=>
    Segment[] _segments = getGradeSegments(_gradeNum)
    Pen[] _pens= getGradePens(_gradeNum)

    //åå¾è¯¥ç¬å¯¹åºççº¿æ®µä¿¡æ¯,å¦æä¸å±äºä»»ä½çº¿æ®µæµåé»è®¤æ¯å±äºæåä¸ä¸ªçº¿æ®µ
    Segment _operateSegament =  na
    if(array.size(_segments)>0)
        _operateSegament :=  array.get(_segments,array.size(_segments)-1)
    //æ¯å¦èµ°ä¹°åç¹é»è¾
    bool isCycOperatePoint = false
    if(not na(_operateSegament))
        //æçº¿æ®µï¼å¹¶ä¸æåçº¿æ®µä¸è½æ¯1ç¬ææ®µç
        if(_operateSegament.endPenIndex - _operateSegament.startPenIndex>=2)
            isCycOperatePoint := true
    if(isCycOperatePoint)
        Pivot[]   _OperatePivots =  _operateSegament.pivots
        //çº¿æ®µå¯¹åºçæ¹å
        int _direction = _operateSegament.direction
        int _signNum = 0
        //ä¿å­ææéè¦ç»å¶çä¹°åç¹
        Pen[] _needDrawPens = array.new<Pen>()
        //é¦åæ¸é¤æåçº¿æ®µåç¬çä¹°åç¹ä¿¡æ¯
        // for int i= _operateSegament.startPenIndex to array.size(_pens)-1
        //     Pen _pen = array.get(_pens,i)
        //     delDrawPenOperate(_gradeNum,_pen)
        //å¯¹å¨çº¿æ®µåçç¬ä¹°åç¹å¤ç
        for int i= _operateSegament.startPenIndex to array.size(_pens)-1
            _signNum += 1
            //å¯¹åºpenä¿¡æ¯
            Pen _pen = array.get(_pens,i)
            //åçº¿æ®µä¸ååå¤æ­2,3ä¹°åç¹
            if(_pen.direction != _direction)
                //å¦ææ¯ç¬¬ä¸æ¬¡ååçè¯å¹¶ä¸æå¼ä¸è¶è¿åä¸ç¬è®¤å®ä¸º2ä¹°åç¹
                if(_signNum == 2)
                    checkTwoOperate(_gradeNum,_operateSegament,_pen,_needDrawPens)
                else if(_signNum % 2 == 0 and i!=0)
                    checkThreeOperate(_gradeNum,_operateSegament,_pen,_needDrawPens)
            //åçº¿æ®µååæ¶å
            else
                //çº¿æ®µæåä¸ç¬ 1ä¹°å(å¹¶ä¸è¯¥çº¿æ®µè³å°è¦æä¸ä¸ªä¸­æ¢)
                if(i == _operateSegament.endPenIndex and array.size(_operateSegament.pivots)>=1)
                    //åæ¬¡å¤æ­åºä¸­æ¢è¿ç¬ å è¿ä¸­æ¢ç¬ æ¯å¦èé©°
                    checkOneOperate(_gradeNum,_operateSegament,_pen,_needDrawPens)
                else if(i == _operateSegament.endPenIndex+2)
                    checkTwoOperate(_gradeNum,_operateSegament,_pen,_needDrawPens)
        //å¯¹ä¹°åç¹è¿è¡ç»å¶
        for int i= _operateSegament.startPenIndex to array.size(_pens)-1
            Pen _pen = array.get(_pens,i)
            if(array.indexof(_needDrawPens,_pen)!=-1)
                drawPenOperate(_gradeNum,_pen)
            else
                delDrawPenOperate(_gradeNum,_pen)
//#endregion
//#region @function æå»ºä¸­æ¢ç¸å³å½æ°
//ç»æå®çº¿æ®µæå»ºä¸­æ¢
delPivot(int _gradeNum,Pivot _pivot,Segment _segment) =>
    //ç§»é¤ä¸­æ¢æ¾ç¤º
    box.delete(_pivot.box)
    //array.remove(_segment.pivots,array.indexof(_segment.pivots,_pivot))
drawPivot(int _gradeNum,Pivot _pivot,Segment _segment) =>
    Grade _grade = array.get(grades,_gradeNum)
    Pivot[] _pivots = _segment.pivots
    //æ²¡æboxå°±ååå»º
    bool isShowPivot = true
    if(_gradeNum == 1 and not p_showPenPivot)
        isShowPivot := false
    if(_gradeNum > 1 and not p_showPivot)
        isShowPivot := false
    if(isShowPivot)
        box _box = _pivot.box
        if(na(_box))
            _box := box.new(_pivot.startTime,_pivot.high,_pivot.endTime,_pivot.low,xloc = xloc.bar_time
                                    ,bgcolor = _pivot.direction == 1?_grade.pivotUpBgColor:_grade.pivotDownBgColor
                                    ,border_color = _pivot.direction == 1?_grade.pivotUpBorderColor:_grade.pivotDownBordeColor)
            _pivot.box  := _box
        box.set_rightbottom(_box,_pivot.endTime, _pivot.low )
    if(array.indexof(_pivots,_pivot) <= -1)
        //å°ä¸­æ¢å å¥éåä¸­
        //print("direction"+str.tostring(_pivot.direction))
        array.push(_pivots,_pivot)
//æ ¹æ®çº¿æ®µæå»ºä¸­æ¢       
createPivot(int _gradeNum,Segment _segment,Pen[] _pens) =>
    //ä¸­éä¿®å¤ï¼æ¯æ¬¡éæ°æå»ºè¯¥çº¿æ®µä¸­æ¢
    if(array.size(_segment.pivots)>0)
        for i=0 to array.size(_segment.pivots)-1
            delPivot(_gradeNum,array.get(_segment.pivots,i),_segment)
        _segment.pivots := array.new<Pivot>()
    Grade _grade = array.get(grades,_gradeNum)
    //åå¾è¯¥çº¿æ®µæåçä¸­æ¢
    Pivot _lastPivot = na
    int _startPenIndex = _segment.startPenIndex
    int _endPenIndex   = _segment.endPenIndex
    string ini = str.tostring(_startPenIndex)+":"+str.tostring(_endPenIndex)
    string ini1 = ""
    if(array.size(_segment.pivots)>0)
        _lastPivot := array.get(_segment.pivots,array.size(_segment.pivots)-1)
        _startPenIndex :=  _lastPivot.endPenIndex
        ini1 := "**:"+str.tostring(_startPenIndex)+":"+str.tostring(_endPenIndex)
        //debugInfo.debugInfo += "\nstartPenIndex:"+str.tostring(_startPenIndex)+"\n _endPenIndex:"+str.tostring(_endPenIndex)
    //debugInfo.debugInfo +="\npivotsize:"+str.tostring(array.size(_segment.pivots))+"\n_startPenIndex:"+str.tostring(_startPenIndex)
    for _checkSegmentIndex =_startPenIndex to _endPenIndex
        if(_checkSegmentIndex < _startPenIndex)
            continue
        if(_startPenIndex > _endPenIndex)
            continue
        //éªè¯åç»­æ¯å¦æä¸­æ¢
        bool isExtend = false
        // if(array.size(_pens)==879)
        //     runtime.error(ini+"==="+ini1+" åºç°879:"+str.tostring(_startPenIndex)+":"+str.tostring(_endPenIndex))
        //5ç¬ä¿¡æ¯
        Pen _pen1 = array.get(_pens,_checkSegmentIndex+0)
        Pen _pen2 = na
        if(_checkSegmentIndex+1<=_endPenIndex)
            _pen2 := array.get(_pens,_checkSegmentIndex+1)
        Pen _pen3 = na
        if(_checkSegmentIndex+2<=_endPenIndex)
            _pen3 := array.get(_pens,_checkSegmentIndex+2)
        Pen _pen4 = na
        if(_checkSegmentIndex+3<=_endPenIndex)
            _pen4 := array.get(_pens,_checkSegmentIndex+3)
        Pen _pen5 = na
        if(_checkSegmentIndex+4<=_endPenIndex)
            _pen5 := array.get(_pens,_checkSegmentIndex+4)
        //å¤æ­ä¹åå¦ææä¸­æ¢çè¯ï¼å¹¶ä¸è¯¥ç¬å¨ä¸­æ¢åå°±å»¶ä¼¸ä¸­æ¢
        if(not na(_lastPivot) ) //and _startPenIndex != _checkSegmentIndex
            //if(_lastPivot.direction != _pen1.direction)
            //åå¾çº¿æ®µå¯¹åºçæåä¸ç¬
            //Pen _lastPen = array.get(_pens,_segment.endPenIndex)
            //å¤æ­è¯¥ç¬æ¯å¦å¨ä¸­æ¢èå´ä¸­ï¼å¨èå´ä¸­çè¯å°±å»¶ç»­ä¸­æ¢
            //print("\ndirection:"+str.tostring(_pen1.direction !=_lastPivot.direction))
            if (  not na(_pen2) and  _lastPivot.state ==1) //_pen1.direction !=_lastPivot.direction and
                if(_pen2.high > _lastPivot.low and _pen2.low < _lastPivot.high)
                    _lastPivot.endTime :=_pen2.endTime 
                    _lastPivot.endPenIndex := array.indexof(_pens,_pen2)+1
                    drawPivot(_gradeNum,_lastPivot,_segment)
                    isExtend  := true
                else
                    _lastPivot.state :=2
            if (  not na(_pen4) and  _lastPivot.state ==1) //_pen1.direction !=_lastPivot.direction and
                if(array.indexof(pens,_pen4) == 790)
                    print("790_2")
                if(_pen4.high > _lastPivot.low and _pen4.low < _lastPivot.high)
                    _lastPivot.endTime :=_pen4.endTime 
                    _lastPivot.endPenIndex := array.indexof(_pens,_pen4)+1
                    drawPivot(_gradeNum,_lastPivot,_segment)
                    isExtend  := true
                else
                    _lastPivot.state :=2
        //debugInfo.debugInfo+="\nisExtend:"+str.tostring(isExtend)+"\n _checkSegmentIndex:"+str.tostring(_checkSegmentIndex)+"\n_endPenIndex:"+str.tostring(_endPenIndex)
        // if(_endPenIndex == 799)
        //     print(debugInfo.debugInfo)
        //     break
        //æ²¡æå»¶ç»­çè¯åå¤æ­è³å°æ5ç¬éå æè½ææä¸­æ¢
        if( not isExtend and _checkSegmentIndex+4<=_endPenIndex)
            // _pen2 = array.get(_pens,_checkSegmentIndex+1)
            // _pen3 = array.get(_pens,_checkSegmentIndex+2)
            // _pen4 = array.get(_pens,_checkSegmentIndex+3)
            // _pen5 = array.get(_pens,_checkSegmentIndex+4)
            float _minPrice = math.max(_pen1.low,_pen2.low,_pen3.low,_pen4.low,_pen5.low)
            float _maxPrice = math.min(_pen1.high,_pen2.high,_pen3.high,_pen4.high,_pen5.high)
            bool _hasInclude = _maxPrice > _minPrice
            //debugInfo.debugInfo +="\pen1.high:"+str.tostring(_pen1.high)+"\n_pen1.low:"+str.tostring(_pen1.low)
            _hasInclude :=_hasInclude and _pen1.high >= _maxPrice and _pen1.low <= _minPrice
            _hasInclude :=_hasInclude and _pen2.high >= _maxPrice and _pen2.low <= _minPrice
            _hasInclude :=_hasInclude and _pen3.high >= _maxPrice and _pen3.low <= _minPrice
            _hasInclude :=_hasInclude and _pen4.high >= _maxPrice and _pen4.low <= _minPrice
            _hasInclude :=_hasInclude and _pen5.high >= _maxPrice and _pen5.low <= _minPrice
            //debugInfo.debugInfo +="\_hasInclude:"+str.tostring(_hasInclude)
            if(_hasInclude)
                //debugInfo.debugInfo +="\n_pen2.low:"+str.tostring(_pen2.low)+"\n_pen3.low:"+str.tostring(_pen3.low)+"\n_pen4.low:"+str.tostring(_pen4.low)
                _minPrice := math.max(_pen2.low,_pen3.low,_pen4.low)
                _maxPrice := math.min(_pen2.high,_pen3.high,_pen4.high)
                //debugInfo.debugInfo += "\n_minPrice:"+str.tostring(_minPrice)+"\n_maxPrice:"+str.tostring(_maxPrice)
                //print(debugInfo.debugInfo)
                Pen _lastPen =  array.get(_pens,array.size(_pens)-1)
                Pivot _pivot = Pivot.new(_maxPrice,_minPrice,_pen1.endTime,_pen5.startTime,_checkSegmentIndex,_checkSegmentIndex+4,_segment.direction,1)
                // debugInfo.debugInfo +="\n_minPrice:"+str.tostring(_minPrice)+"\n_maxPrice:"+str.tostring(_maxPrice)
                //      +"\n_checkSegmentIndex:"+str.tostring(_checkSegmentIndex)+"\n"
                //print(debugInfo.debugInfo)
                drawPivot(_gradeNum,_pivot,_segment)
                //print("\n------------------------------------"+str.tostring(array.size(_segment.pivots)))
        // else
        //     print(debugInfo.debugInfo)
        //ä¸ºå¥è¿æ ·åï¼è¯´äºä½ åä¸æ,ä¹è®¸ä½ ä»¥ä¸ºä½ æäºï¼ä½ä½ å¶å®å¥é½ä¸æ
        if(array.size(_segment.pivots)>0)
            _lastPivot := array.get(_segment.pivots,array.size(_segment.pivots)-1)
            _startPenIndex :=  _lastPivot.endPenIndex
    // if(_gradeNum == 1)
    //     print(debugInfo.debugInfo)

// createPenPivotBy(Pen _startPen) =>
//     //å¤æ­æ¹å
//     _direction   = 0
//     //1:é¦åæ ¹æ®ç¬¬ä¸ä¸ªèµ·ç¬å¤æ­
//     Pen _pen = na
//     Pen _lastPen = na
//     i = 0
//     _startIndex = array.indexof(pens,_startPen)
//     //print(str.tostring((array.size(pens) - array.indexof(pens,_startPen))%5 + 1))
//     while(i< (array.size(pens) -_startIndex )%5 + 1)
//         if(i+_startIndex+4 > array.size(pens)-1)
//             break
//         _pen :=  array.get(pens,i+_startIndex)
//         if(_pen.direction == -1)
//             _lastPen :=  array.get(pens,i+_startIndex+4)
//             if(_lastPen.low < _pen.low)
//                 _direction := -1
//                 break
//         if(_pen.direction == 1)
//             _lastPen :=  array.get(pens,i+_startIndex+4)
//             if(_lastPen.high > _pen.high)
//                 _direction := 1
//                 break
//         i += 1
//     //(str.tostring(_direction))
//     if (_direction != 0)
//         Pen _pen1 = array.get(pens,array.indexof(pens,_pen)+1)
//         Pen _pen2 = array.get(pens,array.indexof(pens,_pen)+2)
//         Pen _pen3 = array.get(pens,array.indexof(pens,_pen)+3)
//         //å¤æ­è¿ä¸ç¬æ¯å¦éå
//         bool ioInclude = _pen1.high > _pen3.low or _pen1.low < _pen3.high
//         //å¦ææéåå°±æå»ºä¸­æ¢
//         if(ioInclude)
//             //print("_pen1.high:"+str.tostring(_pen1.high)+"\n_pen3.low:"+str.tostring(_pen3.low)+"\n_pen1.low:"+str.tostring(_pen1.low)+"\n_pen3.highï¼"+str.tostring(_pen3.high))
//             //åå¾éååºåçé« ä½ç¹
//             float _maxPrice = math.min(_pen1.high,_pen2.high,_pen3.high)
//             float _minPrice = math.max(_pen1.low,_pen2.low,_pen3.low)
//             Pivot _pivot = Pivot.new(_maxPrice,_minPrice,_pen1.startTime
//                   , _pen3.endTime,_direction)
//             box box = box.new(_pivot.startTime,_pivot.high,_pivot.endTime,_pivot.low,xloc = xloc.bar_time
//                              ,bgcolor = _direction == 1?penPivotUpBgColor:penPivotDownBgColor
//                              ,border_color = _direction == 1?penPivotUpBorderColor:penPivotDownBorderColor)
//             _pivot.box := box
//             _pivot
// //æå»ºç¬ä¸­æ¢
// createPenPivot() =>
//     Pen _lastPen = array.get(pens,array.size(pens) -1)
//     Pivot _lastPenPivot = na
//     if(array.size(penPivots) > 0)
//         _lastPenPivot := array.get(penPivots,array.size(penPivots)-1)
//     //åå¾ä¸ä¸ä¸ªç¬ä¸­æ¢
//     if(na (_lastPenPivot))
//         if(array.size(pens) >= 5)
//             _lastPenPivot := createPenPivotBy(array.get(pens,0))
//             if(not na(_lastPenPivot))
//                 array.push(penPivots,_lastPenPivot)
//     else if(_lastPenPivot.state == 2)
//         createPenPivotBy(array.get(pens,array.indexof(pens,_lastPenPivot.overPen)-1))
//     else
//         //æ¥çæ¯å¦æå¯¹æ­¤ä¸­æ¢çä¸ä¹°å
//         if(_lastPen.direction == 1 and _lastPen.high < _lastPenPivot.low)//ä¸å
//             _lastPenPivot.state := 2
//             _lastPenPivot.overPen := _lastPen
//         else if(_lastPen.direction == -1 and _lastPen.low > _lastPenPivot.high)//ä¸ä¹°
//             _lastPenPivot.state := 2
//             _lastPenPivot.overPen := _lastPen
//         else
//             box.set_right(_lastPenPivot.box,_lastPen.endTime)
//     true
//æ£æ¥æå»ºä¸­æ¢
// createPivot() =>
//     createPenPivot()
    //2:å¤æ­åä¸ç¬é«ä½ç¹ç¶åµ
//#endregion

//#region æå»ºçº¿æ®µ
//ç§»é¤çº¿æ®µ
delSegment(int _gradeNum,Segment[] _segments,Pen[] _selfPens,Segment _segment) =>
    if(array.indexof(_segments,_segment) >= 0)
        Grade _grade = array.get(grades,_gradeNum)
        Pen[] _pens= getGradePens(_gradeNum)
        line.delete(_segment.line)
        //ç§»é¤å¯¹åºä¸­æ¢æ¾ç¤º
        for i = 0 to (array.size(_segment.pivots) >0? array.size(_segment.pivots)-1: na)
            delPivot(_gradeNum,array.get(_segment.pivots,i),_segment)
        array.remove(_segments,array.indexof(_segments,_segment))
        //ç§»é¤æ¨¡ææå»ºçç¬
        if(not na(_selfPens) and array.indexof(_selfPens,_segment.pen)>0)
            //print("index:"+str.tostring(array.indexof(_selfPens,_segment.pen))+"\n size:"+str.tostring(array.size(_selfPens)))
            delDrawPenOperate(_gradeNum,_segment.pen)
            array.remove(_selfPens,array.indexof(_selfPens,_segment.pen))
        if(array.size(_segments)>0)
            Segment _preSegment = array.get(_segments,array.size(_segments)-1)
            _preSegment.segmentState := 1
            line.set_style(_preSegment.line,line.style_dashed)
//ç»å¶çº¿æ®µ
drawSegment(int _gradeNum,Segment _segment) =>
    Grade _grade = array.get(grades,_gradeNum)
    Segment[] _segments = getGradeSegments(_gradeNum)
    Pen[] _selfPens = getGradeSelfPens(_gradeNum)
    Pen[] _pens= getGradePens(_gradeNum)
    Segment[] _ableSegments= getGradeAbleSegments(_gradeNum)
    line _line = _segment.line
    //æ²¡æçº¿å°±ååå»º
    if(na(_line))
        _line := line.new(na,na,na,na,width =segmentWidth ,xloc = xloc.bar_time,color = _grade.segmentLineColor,style = _grade.segmentLineNoOverStyle)
        _segment.line  := _line
    line.set_xy1(_line,_segment.startTime,_segment.direction == 1 ? _segment.low : _segment.high)
    line.set_xy2(_line,_segment.endTime,  _segment.direction == 1 ? _segment.high : _segment.low)
    if(array.indexof(_segments,_segment) <= -1)
        //å¦ææåä¸ç¬çè¯æ´æ°åä¸ç¬ä¸ºç¡®å®ç¶æ
        if(array.size(_segments)>0)
            Segment _preSegment = array.get(_segments,array.size(_segments)-1)
            _preSegment.segmentState := 2
            line.set_style(_preSegment.line,_grade.segmentLineOverStyle)
        _segment.pivots := array.new<Pivot>()
        //å°çº¿æ®µå å¥éåä¸­
        array.push(_segments,_segment)
    if(_segment.segmentState == 2)
        line.set_style(_segment.line,_grade.segmentLineOverStyle)
    if(array.indexof(_segments,_segment) == array.size(_segments) -1)
        _segment.segmentState := 1
        line.set_style(_segment.line,_grade.segmentLineNoOverStyle)

        //print("insert:"+str.tostring(array.size(segments)))
    //print("\n startPenIndex:"+str.tostring(_segment.startPenIndex)+"\nendPenIndex:"+str.tostring(_segment.endPenIndex))
    if(_segment.segmentState == 2)
        line.set_style(_line,line.style_solid)
    //æå»ºæ¨¡æè¯¥çº¿æ®µå¯¹åºçç¬å¯¹è±¡
    if(not na(_selfPens))
        if(na(_segment.pen))
            Pen _virtualPen = Pen.new(_segment.high,_segment.low,_segment.startTime,_segment.endTime,1,_segment.direction,na)
            _segment.pen := _virtualPen
            array.push(_selfPens,_virtualPen)
        else
            Pen _virtualPen =_segment.pen
            _virtualPen.high := _segment.high
            _virtualPen.low := _segment.low
            _virtualPen.startTime := _segment.startTime
            _virtualPen.endTime := _segment.endTime
    //ç»å¶ä¸­æ¢
    createPivot(_gradeNum,_segment,_pens)
    //éæ°ç»å¶ä¹°åç¹
    if( _gradeNum+1 <= array.size(grades)-1)
        penOperateHandler(_gradeNum+1)
//æ£æµçº¿æ®µæç«æ¡ä»¶
checkSegmentCondition(Segment _lastSegment,Pen[] _pens)=>
    //å½åéªè¯çº¿æ®µæ¹å
    int _direction = -_lastSegment.direction
    int _overNum = 0
    //1:å¤æ­ä»æåpenå½å½åæ¯å¦è³å°3æ ¹å¹¶ä¸æåä¸æ ¹åæåçº¿æ®µæ¹åç¸å
    int _lastEndPenIndex = _lastSegment.endPenIndex
    if(array.size(_pens) -_lastEndPenIndex > 3 )
        _overNum += 1
    //2:å¤æ­æåä¸ç¬æå¼æ¯å¦è¶è¿ä¸ä¸ç¬
    if(_overNum>=1)
        Pen _lastDirectionPen = na
        //ä»ä¸ä¸ç¬å¼å§ï¼éªè¯æ¯å¦æ
        for i=_lastSegment.endPenIndex+1 to array.size(_pens)-1
            Pen _tempPen =  array.get(_pens,i)
            if(_tempPen.direction == _direction)
                if(na(_lastDirectionPen))
                    _lastDirectionPen := _tempPen
                else
                    if(_direction == -1)
                        if(_tempPen.low < _lastDirectionPen.low)
                            _overNum += 1
                            break
                        else
                            _lastDirectionPen := _tempPen
                    if(_direction == 1)
                        if(_tempPen.high > _lastDirectionPen.high)
                            _overNum += 1
                            break
                        else
                            _lastDirectionPen := _tempPen
    //3:ç¹æ®å¤ççº¿æ®µï¼å¦æå½åä¸ç¬å¹åº¦ååä¸ä¸ªçº¿æ®µç¸æ¯è¾¾å°æå®æ°å¼åè®¸ç´æ¥å¯ä»¥ä¸ç¬ææ®µ(æ¹ååå½åçº¿æ®µæ¹åç¸åæè¡)
    // if(_overNum  <2 and array.size(_pens)-1 != _lastSegment.endPenIndex)
    //     //åå¾æåä¸ç¬
    //     Pen _lastPen = array.get(_pens,array.size(_pens)-1)
    //     if(math.abs(_lastPen.high - _lastPen.low)/math.abs(_lastSegment.high - _lastSegment.low) >= p_penToSegmentRadio 
    //          and _lastPen.direction != _lastSegment.direction)
    //         _overNum := 2
        
        // Pen _startPen = array.get(_pens,_lastSegment.endPenIndex+1)
        // Pen _lastPen = array.get(_pens,array.size(_pens)-1)
        // if(_direction == -1)
        //     if(_lastPen.low < _startPen.low)
        //         _overNum += 1
        // if(_direction == 1)
        //     if(_lastPen.high > _startPen.high)
        //         _overNum += 1
    _overNum>=2
//è¯¥æ¹æ³å¤æ­çº¿æ®µç ´åæåµç¶åµ
//æ­¤æ¹æ³å¤æ­çº¿æ®µåå2ç§æ¹å¼
checkSegmentOverType(Segment segment,Pen[] _pens,int _endPenIndex)=>
    //1:è·å¾è¯¥çº¿æ®µæ¹å
    int _segmentDirection = segment.direction
    //2:è·å¾æ æ¤ç¹å¾åºå
    Pen[] _resultPen = array.new<Pen>()
    //åç°å¯¹åºååindex
    int _topOrBottomIndex = -1
    //æ¯å¦æç¼ºå£
    bool _hasGap = false
    //æç§é¡ºåºåå¹¶ç¬
    for i=segment.startPenIndex to _endPenIndex
        Pen _currentPen = array.get(_pens,i)
        //æ¹åç¸åç´æ¥ä¸å¤ç
        if(_currentPen.direction == _segmentDirection)
            break
        Pen _lastResultPen = na
        if(array.size(_resultPen)>0)
            _lastResultPen := array.get(_resultPen,array.size(_resultPen)-1)
        if(na(_lastResultPen))
            array.push(_resultPen,_currentPen)
        else
            //å¤æ­æ¯å¦å­å¨åå«å³ç³»
            isLeftContain  =   (_lastResultPen.high >= _currentPen.high and _lastResultPen.low <= _currentPen.low)
            isRightContain =   (_currentPen.high >= _lastResultPen.high  and _currentPen.low <= _lastResultPen.low)
            isContain      =   isLeftContain or isRightContain  
            if(isContain)
                Pen _mergePen =na
                if(_segmentDirection == -1)
                    _mergePen := Pen.new(math.min(_currentPen.high , _lastResultPen.high),math.min(_currentPen.low  , _lastResultPen.low))
                else if(_segmentDirection == 1)
                    _mergePen := Pen.new(math.max(_currentPen.high , _lastResultPen.high),math.max(_currentPen.low  , _lastResultPen.low))
                array.push(_resultPen,_mergePen)
            else
                array.push(_resultPen,_currentPen)
            //å¤æ­æ¯å¦åºç°å¯¹åºåå
            Pen _lastPen1 =  array.get(_resultPen,array.size(_resultPen)-1)
            Pen _lastPen2 =  array.get(_resultPen,array.size(_resultPen)-2)
            if(_segmentDirection == -1)
                if(_lastPen2.low < _lastPen1.low)
                    _topOrBottomIndex := array.size(_resultPen)-2
            else if(_segmentDirection == 1)
                if(_lastPen2.high > _lastPen1.high)
                    _topOrBottomIndex := array.size(_resultPen)-2
    //3:å¤æ­æ¯å¦ææå¯¹åºåååæ¯å¦å­å¨ç¼ºå£
    if(_topOrBottomIndex > 0)
        Pen _lastPen1 =  array.get(_resultPen,_topOrBottomIndex-1)
        Pen _lastPen2 =  array.get(_resultPen,_topOrBottomIndex)
        if(_segmentDirection == -1)
            if(_lastPen2.high > _lastPen1.low)
                _hasGap :=true
        else if(_segmentDirection == 1)
            if(_lastPen2.low > _lastPen1.high)
                _hasGap :=true
    [_topOrBottomIndex,_hasGap]
//æ ¡éªæ¯å¦å é¤å½åçº¿æ®µä¿®å¤ä¸ä¸ä¸ªçº¿æ®µ
checkChangeSegment(int _gradeNum,Segment _preSegment,Segment _lastSegment,Pen _lastPen)=>
    bool isChange = false
    Pen[] _pens= getGradePens(_gradeNum)
    //ä¹åçº¿æ®µæ¹å
    int _preDirection = _preSegment.direction
    //å¤æ­ä¹åçº¿æ®µæ¯å¦å­å¨ç¼ºå£
    bool isGap = false
    //æ¯å¦è¶è¿ä¹åçº¿æ®µæå¼
    bool isMaxNum = false
    Pen _lastSegementFirstPen = array.get(_pens,_lastSegment.startPenIndex)
    Pen _preSegmentLastPen = array.get(_pens,_preSegment.endPenIndex -1)
    //ä¹åçº¿æ®µæ¯ä¸åçº¿æ®µ
    if(_preDirection == 1 )
        if(_lastPen.high > _preSegment.high and _lastSegment.low >= _preSegment.low)
            isMaxNum :=true
        if(_lastSegementFirstPen.low > _preSegmentLastPen.high)
            isGap := true
    //ä¹åçº¿æ®µæ¯ä¸éçº¿æ®µ
    else
        if(_lastPen.low < _preSegment.low and _lastSegment.high <=_preSegment.high) 
            isMaxNum :=true
        if(_lastSegementFirstPen.high < _preSegmentLastPen.low)
            isGap := true
    //å­å¨ç¼ºå£ï¼å¹¶ä¸åºç°æå¼
    //print("isGap:"+str.tostring(isGap)+"\nisMaxNum:"+str.tostring(isMaxNum))
    if(isGap)
        if(isMaxNum)
            isChange :=true
        //åæ¬¡è¿æ»¤ï¼å¦ææ¬çº¿æ®µå·²ç»æä¸­æ¢ï¼å¹¶ä¸åä¸ä¸ªä¹æä¸­æ¢ï¼ä»·ä½è¿å¥åçº¿æ®µæåä¸­æ¢
        if(isChange and array.size(_preSegment.pivots)>=1 and array.size(_lastSegment.pivots)>=1)
            Pivot _lastTwoPivot = array.get(_preSegment.pivots,array.size(_preSegment.pivots)-1)
            Pen _segmentLastPen = _lastPen
            if(_lastSegment.endPenIndex <= array.size(_pens)-1)//åç¬é®é¢è¿æ»¤
                _segmentLastPen := array.get(_pens,_lastSegment.endPenIndex)
            if(_lastSegment.direction == -1 and _segmentLastPen.low <= _lastTwoPivot.high)
                isChange :=false
            if(_lastSegment.direction == 1 and _segmentLastPen.high >= _lastTwoPivot.low)
                isChange :=false    
    else //ä¸å­å¨ç¼ºå£
        if(isMaxNum and p_Segment_Change_Ratio != -1)//åºç°æå¼å°±åæ¬¡å¤æ­æåçº¿æ®µåä¹åçº¿æ®µåè°æ¯ä¾
            float _checkRadio = math.abs(_lastSegment.high-_lastSegment.low)/math.abs(_preSegment.high-_preSegment.low)
            if(_checkRadio < p_Segment_Change_Ratio/100)
                isChange :=true
            //åæ¬¡åé»è¾å¤çå¯¹ç¹æ®æåµè¿è¡è¿æ»¤(æ¯å¦åºç°å¯¹åºåå)
            if(not isChange)
                [_topOrBottomIndex,_hasGap] = checkSegmentOverType(_preSegment,_pens,_lastSegment.endPenIndex)
                if(_topOrBottomIndex == -1)
                    isChange :=true
            //åæ¬¡ä¸ªæ°è¿æ»¤ï¼å¦æåé¢çº¿æ®µæ2ä¸ªä¸­æ¢ï¼æ¬çº¿æ®µå·²ç»è¾¾å°åæ°2ä¸ªä¸­æ¢çè¯ä¹
            if(isChange and array.size(_preSegment.pivots)>=2)
                Pivot _lastTwoPivot = array.get(_preSegment.pivots,array.size(_preSegment.pivots)-2)
                Pen _segmentLastPen = _lastPen
                if(_lastSegment.endPenIndex <= array.size(_pens)-1)//åç¬é®é¢è¿æ»¤
                    _segmentLastPen := array.get(_pens,_lastSegment.endPenIndex)
                if(_lastSegment.direction == -1 and _segmentLastPen.low <= _lastTwoPivot.high)
                    isChange :=false
                if(_lastSegment.direction == 1 and _segmentLastPen.high >= _lastTwoPivot.low)
                    isChange :=false
            //åæ¬¡è¿æ»¤ï¼å¦ææ¬çº¿æ®µå·²ç»æä¸­æ¢ï¼å¹¶ä¸åä¸ä¸ªä¹æä¸­æ¢ï¼ä»·ä½è¿å¥åçº¿æ®µæåä¸­æ¢
            if(isChange and array.size(_preSegment.pivots)>=1 and array.size(_lastSegment.pivots)>=1)
                Pivot _lastTwoPivot = array.get(_preSegment.pivots,array.size(_preSegment.pivots)-1)
                Pen _segmentLastPen = _lastPen
                if(_lastSegment.endPenIndex <= array.size(_pens)-1)//åç¬é®é¢è¿æ»¤
                    _segmentLastPen := array.get(_pens,_lastSegment.endPenIndex)
                if(_lastSegment.direction == -1 and _segmentLastPen.low <= _lastTwoPivot.high)
                    isChange :=false
                if(_lastSegment.direction == 1 and _segmentLastPen.high >= _lastTwoPivot.low)
                    isChange :=false      

    isChange
// //å¤æ­çº¿æ®µæ¯å¦æç¼ºå£,ååç¬åå¹¶å
// checkSegmentGap(Segment _segment)=>
//     bool _haveGap = false
//     if(_segment.direction == 1) //æ¹ååä¸ï¼å¤æ­é¡¶ååæ¯å¦æç¼ºå£
//         //çº¿æ®µé¡¶ååæä½ç¹
//         Pen _nextPen = array.get(pens,_segment.endPenIndex+1)
//         float _maxLow = _nextPen.low
//         float[] _prices =  array.new_float()
//         for i=_segment.startPenIndex to _segment.endPenIndex
//             Pen _pen = array.get(pens,i)
//             if(_pen.direction != _segment.direction)
//                 array.push(_prices,_pen.high)
//         //é¡¶ååå·¦ä¾§æé«ç¹
//         float _maxHigh = array.max(_prices,na)
//         if(_maxHigh < _maxLow)
//             _haveGap := true
//     else if(_segment.direction == 2) //æ¹ååä¸ï¼å¤æ­åºååæ¯å¦æç¼ºå£
//         //çº¿æ®µé¡¶ååæä½ç¹
//         Pen _nextPen = array.get(pens,_segment.endPenIndex+1)
//         float _maxHigh = _nextPen.high
//         float[] _prices =  array.new_float()
//         for i=_segment.startPenIndex to _segment.endPenIndex
//             Pen _pen = array.get(pens,i)
//             if(_pen.direction != _segment.direction)
//                 array.push(_prices,_pen.low)
//         //é¡¶ååå·¦ä¾§æä½ç¹
//         float _maxLow = array.min(_prices,na)
//         if(_maxLow >_maxHigh )
//             _haveGap := true
//     _haveGap

//æ£æ¥æå»ºçº¿æ®µ
createSegmentCommon(int _startPenIndex,int _endPenIndex,int _gradeNum) =>
    Grade _grade = array.get(grades,_gradeNum)
    Segment[] _segments = getGradeSegments(_gradeNum)
    Pen[] _selfPens = getGradeSelfPens(_gradeNum)
    Pen[] _pens= getGradePens(_gradeNum)
    Segment[] _ableSegments= getGradeAbleSegments(_gradeNum)
    Pen _currentPen = array.get(_pens,_startPenIndex)
    //debugInfo.debugInfo += "\n_startPenIndex:"+str.tostring(_startPenIndex)+"\n_endPenIndex:"+str.tostring(_endPenIndex)
    bool _hasFind = false
    //ç¹æ®æ¯ä¾æçº¿æ®µ(åç¬ååä¸ç¬æ¯ä¾è¾¾å°æ­¤å¼)
    //print("1:"+str.tostring(array.size(_segments))+"\n_startPenIndexï¼"+str.tostring(_startPenIndex)+"\n_endPenIndex:"+str.tostring(_endPenIndex))
    if(array.size(_segments)>0 and _startPenIndex==_endPenIndex)
        Segment _lastSegment = array.get(_segments,array.size(_segments)-1)
        Pen _prePen = array.get(_pens, _startPenIndex-1)
        //print("2222"+str.tostring(_prePen.direction != _lastSegment.direction))
        if(_currentPen.direction != _lastSegment.direction)
            //åå¾æ¯å¹æ¯ä¾
            float _changeRadio = (_currentPen.high-_currentPen.low)/(_prePen.high - _prePen.low)
            //print("11111111"+str.tostring(_changeRadio))
            if(_changeRadio > p_penToSegmentRadio)
                Segment _segment = Segment.new(_currentPen.high,_currentPen.low,_currentPen.startTime,_currentPen.endTime,_startPenIndex,_startPenIndex,1,_currentPen.direction)
                drawSegment(_gradeNum,_segment)
                _hasFind := true
    for int _checkSegmentIndex =_startPenIndex+2 to _endPenIndex by 2
        if(_checkSegmentIndex >_endPenIndex)
            break
        //debugInfo.debugInfo += "\n_checkSegmentIndex:"+str.tostring(_checkSegmentIndex)
        //å¤æ­æ¯å¦çææ°ççº¿æ®µ
        Pen _nextPen = array.get(_pens, _checkSegmentIndex)
        if(_currentPen.direction == -1 and _nextPen.low < _currentPen.low)
            Segment _segment = Segment.new(_currentPen.high,_nextPen.low,_currentPen.startTime,_nextPen.endTime,_startPenIndex,_checkSegmentIndex,1,-1)
            drawSegment(_gradeNum,_segment)
            break
        else if(_currentPen.direction == 1 and _nextPen.high > _currentPen.high)
            Segment _segment = Segment.new(_nextPen.high,_currentPen.low,_currentPen.startTime,_nextPen.endTime,_startPenIndex,_checkSegmentIndex,1,1)
            drawSegment(_gradeNum,_segment)
            break
        // else
        //     //print(debugInfo.debugInfo)
        //     break

//@function æå»ºçº¿æ®µ
//@param _segments:å¯¹åºççº¿æ®µéå  
//@param _pens:å¯¹åºçç¬éå  
//@param _selfPens:èªèº«çæ¨¡æç¬éå
//@param _ableSegments:å¯è½ææ®µéå
createSegment(int _gradeNum) =>
    Grade _grade = array.get(grades,_gradeNum)
    Segment[] _segments = getGradeSegments(_gradeNum)
    Pen[] _selfPens = getGradeSelfPens(_gradeNum)
    Pen[] _pens= getGradePens(_gradeNum)
    Segment[] _ableSegments= getGradeAbleSegments(_gradeNum)
    //åå¾æåä¸ä¸ªçº¿æ®µ
    Segment _lastSegment = na
    if(array.size(_segments)>0)
        _lastSegment := array.get(_segments,array.size(_segments)-1)
    //ä¸ä¸ªçº¿æ®µ
    Segment _preSegment = na
    if(array.size(_segments)>=2)
        _preSegment := array.get(_segments,array.size(_segments)-2)
    //åå¾ææ°çç¬
    Pen _lastPen = array.get(_pens,array.size(_pens)-1)
    //print("_gradeNum:"+str.tostring(_gradeNum)+"\n _grade:"+str.tostring(_grade.gradeNum)+"\n_grade.pens:"+str.tostring(array.size(_grade.pens))+"\npens:"+str.tostring(array.size(pens)))
    //æ¯å¦äº§ççæ°ççº¿æ®µ
    int _oldSegmentSize = array.size(_segments)
    if(na(_lastSegment)) //æ ¹æ®æ¡ä»¶çæç¬¬ä¸ä¸ªçº¿æ®µ
        //print("SegmentSize:"+str.tostring(array.size(segments)))
        for i =0 to array.size(_pens)-1
            createSegmentCommon(i,array.size(_pens)-1,_gradeNum)
        
    if(not na(_lastSegment)) //ä¿®æ­£å·²æçº¿æ®µæäº§çæ°ççº¿æ®µ
        //å¤æ­æ¯å¦äº§çæ°ççº¿æ®µ
        Segment _newSegment = na
        bool _haveNew = false
        // //éªè¯å¯è½ææ®µæ¯å¦æç«
        // if(array.size(_ableSegments)>0)
        //     Segment _ableSegment = array.get(_ableSegments,0)
        //     _haveNew :=  checkSegmentCondition(_ableSegment,_pens)
        //     //print("ä¸­é´ç¬æç¬å¤æ­:"+debugInfo.debugInfo)
        //     if(_haveNew)
        //         bool _isChange = true
        //         if(_ableSegment.direction == 1 )
        //             //éæ°æ´æ°æåä¸æ®µ
        //             _lastSegment.low := _ableSegment.low
        //             _lastSegment.endTime := _ableSegment.startTime
        //             _lastSegment.endPenIndex := _lastSegment.startPenIndex-1
        //             drawSegment(_gradeNum,_lastSegment)
        //             //æ·»å å¯è½æç¬ä¸ºæ­£å¼ææ®µ
        //             drawSegment(_gradeNum,_ableSegment)
        //             //åç»­ä¸æ®µ
        //             Segment _resolveLastSegment = Segment.new(_ableSegment.high,_lastPen.low,_ableSegment.endTime,_lastPen.endTime,_ableSegment.endPenIndex+1,array.indexof(_pens,_lastPen),1,-1)
        //             _newSegment := _resolveLastSegment
        //             drawSegment(_gradeNum,_newSegment)
        //             array.remove(_ableSegments,array.indexof(_ableSegments,_ableSegment))
        //         else if(_ableSegment.direction == -1 )
        //             //éæ°æ´æ°æåä¸æ®µ
        //             _lastSegment.high := _ableSegment.high
        //             _lastSegment.endTime := _ableSegment.startTime
        //             _lastSegment.endPenIndex := _lastSegment.startPenIndex-1
        //             drawSegment(_gradeNum,_lastSegment)
        //             //æ·»å å¯è½æç¬ä¸ºæ­£å¼ææ®µ
        //             drawSegment(_gradeNum,_ableSegment)
        //             //åç»­ä¸æ®µ
        //             Segment _resolveLastSegment = Segment.new(_lastPen.high,_ableSegment.low,_ableSegment.endTime,_lastPen.endTime,_ableSegment.endPenIndex+1,array.indexof(_pens,_lastPen),1,1)
        //             _newSegment := _resolveLastSegment
        //             drawSegment(_gradeNum,_newSegment)
        //             array.remove(_ableSegments,array.indexof(_ableSegments,_ableSegment))
        //éªè¯å½åè¿è¡ä¸­çæ¯å¦ææ®µ   
        _haveNew := not  _haveNew and checkSegmentCondition(_lastSegment,_pens) 
        if(_haveNew) //ææ°ççº¿æ®µ
            int _newDirection =  -_lastSegment.direction
            float _high = _newDirection==1?_lastPen.high:_lastSegment.high
            float _low = _newDirection==1?_lastSegment.low:_lastPen.low
            _newSegment := Segment.new(_high,_low,_lastSegment.endTime,_lastPen.endTime,_lastSegment.endPenIndex+1,array.indexof(_pens,_lastPen),1,_newDirection)
            drawSegment(_gradeNum,_newSegment)
            array.clear(ableSegments)
        if(na(_newSegment))
            if(_lastSegment.direction == _lastPen.direction)
                if( (_lastSegment.direction == -1 and _lastPen.low < _lastSegment.low) or 
                        (_lastSegment.direction == -1 and array.size(_pens)-1 == _lastSegment.endPenIndex) )
                    //æ´æ°çº¿æ®µ
                    _lastSegment.low := _lastPen.low
                    _lastSegment.endTime := _lastPen.endTime
                    _lastSegment.endPenIndex := array.size(_pens)-1
                    drawSegment(_gradeNum,_lastSegment)
                if( (_lastSegment.direction ==  1 and _lastPen.high > _lastSegment.high)  or
                        (_lastSegment.direction == 1 and array.size(_pens)-1 == _lastSegment.endPenIndex) )
                    //æ´æ°çº¿æ®µ
                    _lastSegment.high := _lastPen.high
                    _lastSegment.endTime := _lastPen.endTime
                    _lastSegment.endPenIndex := array.size(_pens)-1
                    drawSegment(_gradeNum,_lastSegment)
        //æ²¡æäº§çæ°çº¿æ®µçæ¶åè¿è¡çº¿æ®µä¿®å¤å¤ç
        //print("_newSegment:"+str.tostring(na(_newSegment))+"\n_preSegment:"+str.tostring(not na(_preSegment)))
        if(na(_newSegment) and not na(_preSegment))
            // if(array.size(_segments) <= _oldSegmentSize and not na(_preSegment))
            //     //å¤æ­åçº¿æ®µæ¯å¦å­å¨ç¼ºå£,ä¸å­å¨ç¼ºå£çè¯ä¸è¿è¡ä¿®å¤ï¼åªæå­å¨ç¼ºå£æä¿®æ­£çº¿æ®µ
            //     bool _hasGap =  checkSegmentGap(_preSegment)
            //ä¿®å¤å¢å ä¸æ­¥ï¼å¦æå½åçº¿æ®µæå¼è¶è¿ä¸ä¸ç¬æå¼å°±ä¸åä¿®å¤
            //å¤æ­å½åç¬åä¸ä¸çº¿æ®µæ¯å¦åæ¹åï¼å¹¶ä¸æå¼>ä¹åçº¿æ®µ
            //(_lastPen.low >= _preSegment.low ä¿®å¤å¢å ä¸æ­¥ï¼å¦æå½åçº¿æ®µæå¼è¶è¿ä¸ä¸ç¬æå¼å°±ä¸åä¿®å¤)
            bool _isChange = checkChangeSegment(_gradeNum,_preSegment,_lastSegment,_lastPen)
            //print("direction:"+str.tostring(_preSegment.direction)+"\n bool1:"+str.tostring(_lastPen.high > _preSegment.high)+"\n bool2:"+str.tostring(_lastSegment.low >= _preSegment.low))
            if(_preSegment.direction == 1 and _isChange)
                // //åæ¬¡å¢å æ¯ä¾éå¶
                // if(p_Segment_Change_Ratio != -1)
                //     if(math.abs(_lastSegment.high - _lastSegment.low)/math.abs(_preSegment.high - _preSegment.low)>p_Segment_Change_Ratio/100)
                //         _isChange := false
                // //åæ¬¡éªè¯æåä¸ç¬å¹åº¦è¶è¿ä¸ä¸çº¿æ®µä¹éè¦æ´æ°
                // if(not _isChange)
                //     if(_lastPen.high - _lastPen.low >= _preSegment.high - _preSegment.low)
                //         _isChange := true
                // if(_isChange)
                //     print("1:"+str.tostring(_gradeNum)+"-1"+str.tostring(math.abs(_lastSegment.high - _lastSegment.low)/math.abs(_preSegment.high - _preSegment.low)))
                //ä¿®æ­£ä¹åçº¿æ®µ
                _preSegment.high := _lastPen.high
                _preSegment.endTime := _lastPen.endTime
                _preSegment.endPenIndex := array.indexof(_pens,_lastPen)
                //ç§»å¨ä¸­æ¢å°ä¸ä¸ä¸ª
                //array.concat(_preSegment.pivots,_lastSegment.pivots)
                //_preSegment.pivots := array.new<Pivot>()
                drawSegment(_gradeNum,_preSegment)
                //å é¤èçº¿æ®µ
                array.clear(_ableSegments)
                array.push(_ableSegments,_lastSegment)
                delSegment(_gradeNum,_segments,_selfPens,_lastSegment)
            else if(_preSegment.direction == -1 and _isChange )
                //åæ¬¡å¢å æ¯ä¾éå¶
                // if(p_Segment_Change_Ratio != -1)
                //     if(math.abs(_lastSegment.high - _lastSegment.low)/math.abs(_preSegment.high - _preSegment.low)>p_Segment_Change_Ratio/100)
                //         _isChange := false
                // //åæ¬¡éªè¯æåä¸ç¬å¹åº¦è¶è¿ä¸ä¸çº¿æ®µä¹éè¦æ´æ°
                // if(not _isChange)
                //     if(_lastPen.high - _lastPen.low >= _preSegment.high - _preSegment.low)
                //         _isChange := true
                // if(_isChange)
                //     print("2:"+str.tostring(_gradeNum)+"-1"+str.tostring(math.abs(_lastSegment.high - _lastSegment.low)/math.abs(_preSegment.high - _preSegment.low)))
                //ä¿®æ­£ä¹åçº¿æ®µ
                _preSegment.low := _lastPen.low
                _preSegment.endTime := _lastPen.endTime
                //_preSegment.pivots := array.new<Pivot>()
                _preSegment.endPenIndex := array.indexof(_pens,_lastPen)
                //ç§»å¨ä¸­æ¢å°ä¸ä¸ä¸ª
                //array.concat(_preSegment.pivots,_lastSegment.pivots)
                drawSegment(_gradeNum,_preSegment)
                //å é¤èçº¿æ®µ
                array.clear(_ableSegments)
                array.push(_ableSegments,_lastSegment)
                delSegment(_gradeNum,_segments,_selfPens,_lastSegment)
//#endregion

//#region @function æå»ºç¬
drawRunningPen(Pen _lastPen)=>
    if(isShowRunningPen)
        runningPen.startTime := _lastPen.endTime
        runningPen.endTime   := time
        // line _line = line.new(runningPen.startTime,0,runningPen.endTime,0,xloc = xloc.bar_time,style = line.style_dotted,color=penColr,width=1)
        // runningPen.line := _line
        float y1 = 0
        float y2 = _lastPen.direction == 1? low:high
        if(_lastPen.direction == -1)
            if(array.indexof(mergeTime,_lastPen.endTime) > 0 )
                y1 := array.get(mergeLow,array.indexof(mergeTime,_lastPen.endTime))
            if(low < _lastPen.low)
                y2 :=na(line.get_y2(runningPen.line))?low : math.min(line.get_y2(runningPen.line),low)
            else
                y2 :=na(line.get_y2(runningPen.line))?y2 : math.max(line.get_y2(runningPen.line),y2)
        else if(_lastPen.direction == 1)
            if(array.indexof(mergeTime,_lastPen.endTime) > 0 )
                y1 := array.get(mergeHigh,array.indexof(mergeTime,_lastPen.endTime))
            if(high > _lastPen.high)
                y2 :=na(line.get_y2(runningPen.line))?high : math.max(line.get_y2(runningPen.line),high)
            else
                y2 :=na(line.get_y2(runningPen.line))?y2: math.min(line.get_y2(runningPen.line),y2)
        if(y1 != 0)
            line.set_xy1(runningPen.line,runningPen.startTime,y1)
        line.set_xy2(runningPen.line,runningPen.endTime,y2)
        line.delete(runningPen.line)
        line _copyLine = line.copy(runningPen.line)
        runningPen.line:=_copyLine

        //print("y1:"+str.tostring(y1)+"\y2:"+str.tostring(_lastPen.direction == 1? high:low))

//å é¤ç¬
delPen(Pen _pen) =>
    if(array.indexof(pens,_pen) >= 0)
        line.delete(_pen.line)
        //print(">0:"+str.tostring(array.indexof(pens,_pen) >= 0)+"\npen index:"+str.tostring(array.indexof(pens,_pen)+1)+"\n:"+str.tostring(array.size(pens)))
        //if(array.indexof(pens,_pen) >= 0 and array.indexof(pens,_pen)+1< array.size(pens))
        array.remove(pens,array.indexof(pens,_pen))
        if(array.size(pens)>0)
            Pen _prePen = array.get(pens,array.size(pens)-1)
            _prePen.penState := 1
            line.set_style(_prePen.line,line.style_dashed)
        //ç»å¶åå»ºçº¿æ®µ
        createSegment(1)
        delDrawPenOperate(1,_pen)
        //éæ°ç»å¶ä¹°åç¹
        penOperateHandler(1)
//ç»å¶ç¬å¹¶ååç»­å¤ç
drawPen(Pen _pen) =>
    line _line = _pen.line
    if(na(_line))
        _line := line.new(na,na,na,na,width =penWidth ,xloc = xloc.bar_time,color = penColr,style = line.style_dashed)
        _pen.line  := _line
    line.set_xy1(_line,_pen.startTime,_pen.direction == 1 ? _pen.low : _pen.high)
    line.set_xy2(_line,_pen.endTime,  _pen.direction == 1 ? _pen.high : _pen.low)
    if(array.indexof(pens,_pen) <= -1)
        //å¦ææåä¸ç¬çè¯æ´æ°åä¸ç¬ä¸ºç¡®å®ç¶æ
        if(array.size(pens)>0)
            Pen _prePen = array.get(pens,array.size(pens)-1)
            _prePen.penState := 2
            line.set_style(_prePen.line,line.style_solid)
        //å°ç¬å å¥éåä¸­
        array.push(pens,_pen)
    if(_pen.penState == 2)
        line.set_style(_line,line.style_solid)
    //éç½®è¿è¡ä¸­çç¬
    if(_pen.direction == -1)
        line.set_xy1(runningPen.line,_pen.endTime,_pen.low)
    else
        line.set_xy1(runningPen.line,_pen.endTime,_pen.high)
    line.set_xy2(runningPen.line,_pen.endTime,na)
    //ç»å¶åå»ºçº¿æ®µ
    createSegment(1)
    //éæ°ç»å¶ä¹°åç¹
    penOperateHandler(1)
//æ¬æ¹æ³éå¯¹ç¬¬ä¸ç¬ç¹æ®å¤ç
createFistPen(_isTopOrBottom,_topOrBottomTime,_topOrBottomPrice) =>
    Pen _pen = na
    //æé«çé¡¶kçº¿å¯¹åºçæ¶é´
    var int maxTopTime = time
    var float maxTopPrice = high
    //æä½çåºkçº¿å¯¹åºçæ¶é´
    var int minBottomTime = time
    var float minBottomPrice = low
    if(_isTopOrBottom == 1 and ( _topOrBottomPrice > maxTopPrice))
        maxTopPrice := _topOrBottomPrice
        maxTopTime  := _topOrBottomTime
    else if(_isTopOrBottom == -1 and  (_topOrBottomPrice < minBottomPrice))
        minBottomPrice := _topOrBottomPrice
        minBottomTime  := _topOrBottomTime
    // else
    //     if(low < minBottomPrice)
    //         minBottomPrice := low
    //         minBottomTime  := time
    //     if(high > maxTopPrice)
    //         maxTopPrice := high
    //         maxTopTime  := time
    //æé«é¡¶åºä¹é´kçº¿æ°é>æå®æ°éå°±å¯ä»¥æç¬äº
    if(math.abs(array.indexof(mergeTime,maxTopTime) - array.indexof(mergeTime,minBottomTime)) + 1 >= penType )
        _pen := Pen.new(maxTopPrice,minBottomPrice
                                ,(maxTopTime > minBottomTime)?minBottomTime:maxTopTime
                                ,(maxTopTime > minBottomTime)?maxTopTime:minBottomTime
                                ,1
                                ,(maxTopTime > minBottomTime)?1:-1)
        //è®¾ç½®ç¬¬ä¸ç¬åå¹¶barä¿¡æ¯,åªä¿çå½åé¡¶åºååè®¾è®¡ç2æ ¹
        float[] _nextMergeHigh = array.new_float()
        array.push(_nextMergeHigh,array.get(mergeHigh,array.indexof(mergeTime,_topOrBottomTime)))
        array.push(_nextMergeHigh,array.get(mergeHigh,array.indexof(mergeTime,_topOrBottomTime)+1))
        float[] _nextMergeLow = array.new_float()
        array.push(_nextMergeLow,array.get(mergeLow,array.indexof(mergeTime,_topOrBottomTime)))
        array.push(_nextMergeLow,array.get(mergeLow,array.indexof(mergeTime,_topOrBottomTime)+1))
        int[] _nextMergeTime = array.new_int()
        array.push(_nextMergeTime,array.get(mergeTime,array.indexof(mergeTime,_topOrBottomTime)))
        array.push(_nextMergeTime,array.get(mergeTime,array.indexof(mergeTime,_topOrBottomTime)+1))
        _pen.mergeHigh := _nextMergeHigh
        _pen.mergeLow := _nextMergeLow
        _pen.mergeTime := _nextMergeTime
        // print("high1:"+str.tostring(array.get(_nextMergeHigh,0))+" low1:"+str.tostring(array.get(_nextMergeLow,0))
        //      +"\nhigh2:"+str.tostring(array.get(_nextMergeHigh,1))+" low2:"+str.tostring(array.get(_nextMergeLow,1)))
        drawPen(_pen)
    _pen
//æç¬åºç¡æ¡ä»¶ 1:é¡¶åºç¸è¿,ä»æé«å°æä½æ»¡è¶³æå®æ¡æ° 
checkPenCondition1(_lastPen,_topOrBottomTime) =>
    bool _checkResult = false
    //éªè¯é¡¶->åº æ åº->é¡¶ä¹é´kçº¿æ°éæ¯å¦æ»¡è¶³
    int _startIndex = array.indexof(mergeTime,_lastPen.endTime)
    int _endIndex   = array.indexof(mergeTime,_topOrBottomTime)
    // string info = "\n_startIndex:"+str.tostring(_startIndex)+" _endIndex:"+str.tostring(_endIndex)
    // for i =_startIndex to _endIndex
    //     info+="\n high:"+str.tostring(array.get(mergeHigh,i))+" low:"+str.tostring(array.get(mergeLow,i))
    // print(info)
    //debugInfo.debugInfo += "kNum:"+str.tostring(math.abs(_endIndex - _startIndex)+1)
    if(math.abs(_endIndex - _startIndex)+1 >= math.abs(penType))
        _checkResult := true
    if( penType == -4 and _checkResult)//æ°ç¬(ä¹é´æå°5æ ¹Kçº¿ï¼4æ ¹ä¸åå«å³ç³»çkçº¿)
        if(math.abs(_lastPen.endTime - _topOrBottomTime)/1000/timeframe.in_seconds() < 4)
            _checkResult := false
    // //èç¬ç¹æ®æåµ,4ä¸ªæç¬
    // if(penType ==5 and not _checkResult )
    //     if(_lastPen.direction== 1 )
    //         _topOrBottomPrice = array.get(mergeLow,array.indexof(mergeTime,_topOrBottomTime))
    //         if(math.abs(_topOrBottomPrice -_lastPen.high) >= math.abs(_lastPen.high - _lastPen.low))
    //             if((_topOrBottomTime-_lastPen.endTime)/1000/timeframe.in_seconds() >=4)
    //                 _checkResult:=true
    //     else if(_lastPen.direction== -1 )
    //         _topOrBottomPrice = array.get(mergeHigh,array.indexof(mergeTime,_topOrBottomTime))
    //         if(math.abs(_topOrBottomPrice -_lastPen.low) >= math.abs(_lastPen.high - _lastPen.low))
    //             if((_topOrBottomTime-_lastPen.endTime)/1000/timeframe.in_seconds() >=4)
    //                 _checkResult:=true
    _checkResult
//éªè¯åå¹¶åçæ°éæ¯å¦æç«
checkPenNumHasOver(int[] _mergeTimes,int _startIndex,int _endIndex) =>
    bool _penNumHasOver = false
    int _startTime =  array.get(_mergeTimes,_startIndex)
    int _endTime = array.get(_mergeTimes,_endIndex)
    if(math.abs(_endIndex - _startIndex)+1 >= math.abs(penType))
        _penNumHasOver := true
    if( penType == -4 and _penNumHasOver)//æ°ç¬(ä¹é´æå°5æ ¹Kçº¿ï¼4æ ¹ä¸åå«å³ç³»çkçº¿)
        if(math.abs(_startTime - _endTime)/1000/timeframe.in_seconds() < 4)
            _penNumHasOver := false
    _penNumHasOver
//åå¹¶penä¸­çkçº¿
mergePenKbar(Pen _pen)=>
    //è·å¾åå¹¶æ¹å
    int _mergeDirection = array.get(_pen.mergeHigh,array.size(_pen.mergeHigh)-1)>array.get(_pen.mergeHigh,array.size(_pen.mergeHigh)-2)?1:-1
    float preHigh = array.get(_pen.mergeHigh,array.size(_pen.mergeHigh)-1)
    float preLow = array.get(_pen.mergeLow,array.size(_pen.mergeLow)-1)
    int preTime = array.get(_pen.mergeTime,array.size(_pen.mergeTime)-1)
    //å¤æ­æ¯å¦å­å¨åå«å³ç³»
    isLeftContain  =   (preHigh >= high and preLow <= low)
    isRightContain =   (high >= preHigh and low <= preLow)
    isContain      =   isLeftContain or isRightContain
    if (isContain)
        array.pop(_pen.mergeHigh)
        array.pop(_pen.mergeLow)
        array.pop(_pen.mergeTime)
        array.push(_pen.mergeHigh,_mergeDirection == 1 ? math.max(high , preHigh) :  math.min(high , preHigh))
        array.push(_pen.mergeLow ,_mergeDirection == 1 ? math.max(low  , preLow)  :  math.min(low  , preLow))
        //print("_mergeDirection:"+str.tostring(_mergeDirection)+"\nhigh:"+str.tostring(array.get(_pen.mergeHigh,array.size(_pen.mergeHigh)-1))+"\nlow:"+str.tostring(array.get(_pen.mergeLow,array.size(_pen.mergeLow)-1)))
        //æ¶é´è®¾ç½®ä¸ºåå«å³ç³»ä¸­é¡ºåºæ¹åçæå¼baræ¶é´
        array.push(_pen.mergeTime,_mergeDirection == 1 ? (high >= preHigh ? time :preTime) : (low <= preLow ? time :preTime) )
    else
        // if(array.indexof(pens,_pen) == array.size(pens)-1)
        //     print("size:"+str.tostring(array.size(_pen.mergeHigh))+"\npreHigh:"+str.tostring(preHigh)+"\npreLow:"+str.tostring(preLow)+"\nhigh:"+str.tostring(high)+"\nlow:"+str.tostring(low))
        array.push(_pen.mergeHigh, high )
        array.push(_pen.mergeLow , low )
        array.push(_pen.mergeTime, time)
//å½åºç°æ°ç¬æèå½åç¬ä¿®æ´åéç½®åå¹¶barä¿¡æ¯
penResetMergeBar(Pen _fromPen,Pen _toPen)=>
    int _endIndex = array.size(_fromPen.mergeTime) -1
    //print("mergeTime:"+str.tostring(array.size(_fromPen.mergeTime))+"\n mergeHigh:"+ str.tostring(array.size(_fromPen.mergeHigh)) +"\n mergeLow:"+str.tostring(array.size(_fromPen.mergeLow)))
    //è®¾ç½®åå¹¶barä¿¡æ¯,åªä¿çå½åé¡¶åºååæ¶åç2æ ¹
    float[] _nextMergeHigh = array.new_float()
    array.push(_nextMergeHigh,array.get(_fromPen.mergeHigh,_endIndex - 1))
    array.push(_nextMergeHigh,array.get(_fromPen.mergeHigh,_endIndex))
    float[] _nextMergeLow = array.new_float()
    array.push(_nextMergeLow,array.get(_fromPen.mergeLow,_endIndex - 1))
    array.push(_nextMergeLow,array.get(_fromPen.mergeLow,_endIndex ))
    int[] _nextMergeTime = array.new_int()
    array.push(_nextMergeTime,array.get(_fromPen.mergeTime,_endIndex - 1))
    array.push(_nextMergeTime,array.get(_fromPen.mergeTime,_endIndex ))
    _toPen.mergeHigh := _nextMergeHigh
    _toPen.mergeLow := _nextMergeLow
    _toPen.mergeTime := _nextMergeTime
//å¦æå½åç¬éè¦ä¿®æ­£çè¯è¿è¡ä¿®æ­£
penChange(Pen _pen)=>
    //è·å¾å½åç¬æ¹å
    int _direction = _pen.direction
    int _endIndex   = array.size(_pen.mergeTime) - 1
    //å¤æ­æ¯å¦æç«æ¬ç¬çä¿®æ­£é¡¶åºåå
    bool _hasSelfTB = false
    if(_direction == 1 and _endIndex>=2)
        //é¡¶åå
        _hasSelfTB := array.get(_pen.mergeLow,_endIndex)  < array.get(_pen.mergeLow,_endIndex - 1)  
    if(_direction == -1 and _endIndex>=2)
        //åºåå
        _hasSelfTB := array.get(_pen.mergeHigh,_endIndex) > array.get(_pen.mergeHigh,_endIndex - 1)
    if(_hasSelfTB)
        //print("_direction:"+str.tostring(_direction)+"\nhigh:"+str.tostring(array.get(_pen.mergeHigh,_endIndex-1))+"\n prehigh:"+str.tostring(_pen.high))
        //ä¿®æ­£æ¬ç¬
        if(_direction == 1 and array.get(_pen.mergeHigh,_endIndex-1) > _pen.high)
            _pen.high    := array.get(_pen.mergeHigh,_endIndex-1)
            _pen.endTime := array.get(_pen.mergeTime,_endIndex-1)
            penResetMergeBar(_pen,_pen)
            if(array.indexof(ablePen,_pen)<0)
                drawPen(_pen)
                setTopBottomLabel(_pen.endTime,_pen.high,1)
        else if(_direction == -1 and array.get(_pen.mergeLow,_endIndex-1) < _pen.low)
            _pen.low    := array.get(_pen.mergeLow,_endIndex-1)
            _pen.endTime := array.get(_pen.mergeTime,_endIndex-1)
            penResetMergeBar(_pen,_pen)
            //print("***:"+str.tostring(array.size(_pen.mergeTime)))
            if(array.indexof(ablePen,_pen)<0)
                drawPen(_pen)
                setTopBottomLabel(_pen.endTime,_pen.low,-1)

    //å¨ç¬ä¸åçæ¹åçæ¶åå¤æ­éªè¯ååæ¯å¦æç«
    if(array.indexof(pens,_pen) and (p_operatePoint_filter_part or p_operatePoint_filter_part_base) )
        if(filterOperateVerifyType(1,_pen))
            penOperateHandler(1)

//å¤æ­æ¯å¦çæä¸ä¸ç¬
//@return çæçæ°ç¬
penGenerateNextPen(Pen _pen)=>
    Pen _nextPen = na
    //è·å¾å½åç¬æ¹å
    int _direction = _pen.direction
    //å¤æ­ä¸ä¸ç¬æ°éæ¯å¦è¶³å¤
    int _startIndex = array.indexof(_pen.mergeTime,_pen.endTime)
    int _endIndex   = array.size(_pen.mergeTime) - 1
    //å¤æ­ä¸ä¸ç¬æ¯å¦åºç°åå
    bool _hasNextTB = false
    if(_direction == 1 and _endIndex >= 2)
        //åºåå
        _hasNextTB := array.get(_pen.mergeHigh,_endIndex) > array.get(_pen.mergeHigh,_endIndex - 1)
        _hasNextTB := _hasNextTB and array.get(_pen.mergeLow,_endIndex-1)  < array.get(_pen.mergeLow,_endIndex - 2)
    if(_direction == -1 and _endIndex >= 2)
        //é¡¶åå
        _hasNextTB := array.get(_pen.mergeLow,_endIndex)  < array.get(_pen.mergeLow,_endIndex - 1)
        _hasNextTB := _hasNextTB and array.get(_pen.mergeHigh,_endIndex-1)  > array.get(_pen.mergeHigh,_endIndex - 2)
    //å¤æ­ä¸ä¸ç¬æ°éæ¯å¦æ»¡è¶³
    bool _penNumHasOver = false
    //æ»¡è¶³çè¯å¤æ­æ¯å¦å½¢æå¯¹åºåå
    if(_hasNextTB)
        _penNumHasOver := checkPenNumHasOver(_pen.mergeTime,_startIndex,_endIndex-1)
    //éªè¯é¡¶åºååæ¯å¦ç¬¦åæ¡ä»¶
    bool _checkCondition2 =false
    if(_penNumHasOver)
        if(_direction == 1)
            //åºåå
            _checkCondition2 := _pen.high > array.get(_pen.mergeHigh,_endIndex - 1) 
        if(_direction == -1)
            //print("******")
            //é¡¶åå
            _checkCondition2 := array.get(_pen.mergeHigh,_endIndex -1)  > array.get(_pen.mergeHigh,array.indexof(_pen.mergeTime,_pen.endTime))
    //æ»¡è¶³æ¡ä»¶çææ°ç¬
    if(_checkCondition2)
        float _nextHigh = _direction == 1?_pen.high:array.get(_pen.mergeHigh,_endIndex - 1) 
        float _nextLow = _direction == 1?array.get(_pen.mergeLow,_endIndex - 1): _pen.low
        int   _nextEndTime = array.get(_pen.mergeTime,_endIndex - 1)
        _nextPen := Pen.new( _nextHigh,_nextLow, _pen.endTime,_nextEndTime,1, -_direction)
        penResetMergeBar(_pen,_nextPen)
        //print("\ndirection:"+str.tostring( _pen.direction)+"\nhigh:"+str.tostring( _pen.high)+"\nlow:"+str.tostring( _pen.low)+"\able:"+str.tostring(array.indexof(ablePen,_pen)))
        //è¯¥ç¬ä¸æ¯å¯è½æç¬çè¯æç«å»è¿è¡åçº¿
        if(array.indexof(ablePen,_pen) == -1 )
            drawPen(_nextPen)
            array.clear(ablePen)
            if(_direction ==1)
                setTopBottomLabel(_nextPen.endTime,_nextPen.low,-1)
            else
                setTopBottomLabel(_nextPen.endTime,_nextPen.high,1)
    _nextPen
//å¯¹æåä¸ç¬è¿è¡æå
penSplit(Pen _ablePen,Pen _nextPen)=>
    //åå¾æåä¸ç¬
    Pen _lastPen = array.get(pens,array.size(pens) - 1)
    float _topOrBottomPrice =_nextPen.direction ==1 ? _nextPen.high:_nextPen.low
    int _topOrBottomTime = _nextPen.endTime
    bool _isChange = true
    if(_ablePen.direction == 1 )
        if(_topOrBottomPrice > _lastPen.low)
            _isChange := false
            //array.remove(ablePen,array.indexof(ablePen,_ablePen))
        if(_isChange)
            //éæ°æ´æ°æåä¸ç¬
            _lastPen.endTime := _ablePen.startTime
            _lastPen.low := _ablePen.low
            drawPen(_lastPen)
            //æ·»å å¯è½æç¬ä¸ºæ­£å¼æç¬
            drawPen(_ablePen)
            //åç»­ä¸ç¬
            drawPen(_nextPen)
            array.remove(ablePen,array.indexof(ablePen,_ablePen))
    else if(_ablePen.direction == -1 )
        if(_topOrBottomPrice < _lastPen.high)
            _isChange := false
            //array.remove(ablePen,array.indexof(ablePen,_ablePen))
        if(_isChange)
            //éæ°æ´æ°æåä¸ç¬
            _lastPen.endTime := _ablePen.startTime
            _lastPen.high := _ablePen.high
            drawPen(_lastPen)
            // //æ·»å å¯è½æç¬ä¸ºæ­£å¼æç¬
            drawPen(_ablePen)
            //åç»­ä¸ç¬
            drawPen(_nextPen)
            array.remove(ablePen,array.indexof(ablePen,_ablePen))

//ç¬åé¨çå¤çé»è¾
penInnerHandler(Pen _pen)=>
    //è·å¾å½åç¬æ¹å
    int _direction = _pen.direction
    //åå¹¶Kçº¿bar
    mergePenKbar(_pen)
    //å¤æ­ä¸ä¸ç¬æ°éæ¯å¦è¶³å¤
    int _startIndex = array.indexof(_pen.mergeTime,_pen.endTime)
    int _endIndex   = array.size(_pen.mergeTime) - 1
    Pen _nextPen = na
    //å¤æ­æ¯å¦æç«æ¬ç¬çä¿®æ­£é¡¶åºåå
    penChange(_pen)
    //å¤æ­æ¯å¦äº§çä¸ä¸ç¬
    _nextPen := penGenerateNextPen(_pen)
    //å¦æå½åç¬æ¯å¯è½æç¬ä¸­çè¯ï¼å¹¶ä¸äº§çæ°ç¬ï¼è¿è¡ç¬æå
    if(array.indexof(ablePen,_pen)>=0 and not na(_nextPen))
        penSplit(_pen,_nextPen)
    _nextPen
//å¤çæ´ä¸ªæç¬é»è¾
penHandler(_isTopOrBottom,_topOrBottomTime,_topOrBottomPrice)=>
    if(array.size(pens) <= 0)
        Pen _firstPen = createFistPen(_isTopOrBottom,_topOrBottomTime,_topOrBottomPrice)
    else
        //åå¾æåçç¬
        Pen _lastPen =  array.get(pens,array.size(pens)-1)
        //ä¸ä¸ä¸ªåæ¹åç¬
        Pen _prePen = na
        if(array.size(pens) >= 2)
            _prePen := array.get(pens,array.size(pens)-2)
        //çæçæ°ç¬
        Pen _nextPen = na
        //å¦æå­å¯è½æç¬åå¤ç
        if(array.size(ablePen)>0)
            _nextPen := penInnerHandler(array.get(ablePen,0))
        //å¤çå½åè¿è¡ä¸­çç¬

        if(na(_nextPen))
            _nextPen := penInnerHandler(_lastPen)
        else //æ è®ºæ¯å¦æ§è¡å½åç¬çææµç¨ï¼ä½åå¹¶å¿é¡»è¦è¿è¡
            //åå¹¶Kçº¿bar
            mergePenKbar(_lastPen)
        //ä¿®æ­£ç¬(åä¸¤ç¬)
        if(na(_nextPen) and not na(_prePen) and _isTopOrBottom != 0)
            //print("11111")
            if(_prePen.direction == 1 and _isTopOrBottom == 1 and _topOrBottomPrice > _prePen.high)
                //print("1**************")
                //å¤æ­ä¸¤èå¹åº¦
                //if(math.abs(_topOrBottomPrice -_prePen.high) > math.abs(_prePen.high - _lastPen.low))
                _prePen.high := _topOrBottomPrice
                _prePen.endTime :=  _topOrBottomTime
                //print("_topOrBottomPrice:"+str.tostring(_topOrBottomPrice))
                penResetMergeBar(_lastPen,_prePen)
                // print("mergeHigh1:"+str.tostring(array.get(_prePen.mergeHigh,0))+"\nmergeLow1:"+str.tostring(array.get(_prePen.mergeLow,0))+
                //      "\nmergeHigh2:"+str.tostring(array.get(_prePen.mergeHigh,1))+"\nmergeLow2:"+str.tostring(array.get(_prePen.mergeLow,1)))
                //å°å é¤çç¬æ¾å¥å¯è½æç¬ä¸­
                array.clear(ablePen)
                array.push(ablePen,_lastPen)
                delPen(_lastPen)
                drawPen(_prePen)
            else if(_prePen.direction == -1 and _isTopOrBottom == -1 and _topOrBottomPrice < _prePen.low)
                //print("2*****************")
                //å¤æ­ä¸¤èå¹åº¦
                //print("1:"+str.tostring(_topOrBottomPrice -_prePen.low)+"\n2:"+str.tostring(_lastPen.high - _prePen.low))
                //if(math.abs(_topOrBottomPrice -_prePen.low) > math.abs(_lastPen.high - _prePen.low))
                _prePen.low := _topOrBottomPrice
                _prePen.endTime :=  _topOrBottomTime
                penResetMergeBar(_lastPen,_prePen)
                // print("mergeHigh1:"+str.tostring( array.get(_lastPen.mergeHigh,array.size(_lastPen.mergeHigh)-2 ) )+"\nmergeLow1:"+str.tostring(array.get(_lastPen.mergeLow,array.size(_lastPen.mergeHigh)-2))
                //       +"\nmergeHigh2:"+str.tostring(array.get(_lastPen.mergeHigh,array.size(_lastPen.mergeHigh)-1))+"\nmergeLow2:"+str.tostring(array.get(_lastPen.mergeLow,array.size(_lastPen.mergeHigh)-1)))
                //å°å é¤çç¬æ¾å¥å¯è½æç¬ä¸­
                array.clear(ablePen)
                array.push(ablePen,_lastPen)
                delPen(_lastPen)
                drawPen(_prePen)
    if(array.size(pens)>0)
        drawRunningPen(array.get(pens,array.size(pens)-1))

    true
//é¡¶åºååæé« æä½ç¹ä¸è½éå
checkPenCondition2(_lastPen,_topOrBottomTime) =>
    bool _checkResult = true
    //å½åè¿è¡ç¬çæ¹å(åè®¾åä¸ä¸ç¬ç¸åæ¹å)
    int _direction = - _lastPen.direction
    //åå¾ä¸ä¸ç¬ææååçæé« æä½ç¹
    int _searchIndex =  array.indexof(mergeTime,_lastPen.endTime)
    //print("======================checkPenCondition2:"+str.tostring(_searchIndex)+"\n_directionï¼"+str.tostring(_direction))
    if(_searchIndex > 0 )
        float preMaxPrice = math.max(array.get(mergeHigh,_searchIndex-1),array.get(mergeHigh,_searchIndex),array.get(mergeHigh,_searchIndex+1))
        float preMinPrice = math.min(array.get(mergeLow,_searchIndex-1),array.get(mergeLow,_searchIndex),array.get(mergeLow,_searchIndex+1))
        //åå¾å½åååæé« æä½
        _searchIndex :=  array.indexof(mergeTime,_topOrBottomTime)
        float maxPrice = math.max(array.get(mergeHigh,_searchIndex-1),array.get(mergeHigh,_searchIndex),array.get(mergeHigh,_searchIndex+1))
        float minPrice = math.min(array.get(mergeLow,_searchIndex-1),array.get(mergeLow,_searchIndex),array.get(mergeLow,_searchIndex+1))
        _searchIndex :=  array.indexof(mergeTime,_lastPen.endTime)
        //å¤æ­ä¸ä¸ªæ¯å¦æç¼ºå£ï¼å¦ææ²¡æç¼ºå£çè¯æè¿è¡é¡¶ åºåå«å¤ç
        bool isCheckContain = true
        //é¡¶åºkçº¿æé´éçè¯å°±ä¸è¿è¡ åååå«å³ç³»éªè¯
        // if(_direction == 1)
        //     if(array.get(mergeLow,array.indexof(mergeTime,_topOrBottomTime)) > array.get(mergeHigh,array.indexof(mergeTime,_lastPen.endTime)))
        //         isCheckContain := false
        // if(_direction == -1)
        //     if(array.get(mergeHigh,array.indexof(mergeTime,_topOrBottomTime)) < array.get(mergeLow,array.indexof(mergeTime,_lastPen.endTime)))
        //         isCheckContain := false
        float _originalPreHigh = high[(time-_lastPen.endTime)/1000/timeframe.in_seconds()]
        float _originalPreLow = low[(time-_lastPen.endTime)/1000/timeframe.in_seconds()]
        float _originalHigh = high[(time-_topOrBottomTime)/1000/timeframe.in_seconds()]
        float _originalLow = low[(time-_topOrBottomTime)/1000/timeframe.in_seconds()]
        //print("_originalPreHigh:"+str.tostring(_originalPreHigh)+"\n _originalPreLow:"+str.tostring(_originalPreLow)+"\n_originalHigh:"+str.tostring(_originalHigh)+"\n_originalLow:"+str.tostring(_originalLow))
        if(_direction == 1)
            if(_originalHigh <= _originalPreHigh)
                _checkResult := false
            if(_originalLow <= _originalPreLow)
                _checkResult := false
        if(_direction == -1)
            if(_originalHigh >= _originalPreHigh)
                _checkResult := false
            if(_originalLow >= _originalPreLow)
                _checkResult := false
                
        //debugInfo.debugInfo+="isCheckContain:"+str.tostring(isCheckContain)
        // if(_direction == 1)
        //     if(array.get(mergeLow,_searchIndex-1) > array.get(mergeHigh,_searchIndex))
        //         isCheckContain := false
        //     if(array.get(mergeLow,_searchIndex+1) > array.get(mergeHigh,_searchIndex))
        //         isCheckContain := false
        // else
        //     if(array.get(mergeHigh,_searchIndex-1) < array.get(mergeLow,_searchIndex))
        //         isCheckContain := false
        //     if(array.get(mergeHigh,_searchIndex+1) < array.get(mergeLow,_searchIndex))
        //         isCheckContain := false
        // if( p_TopAndBottom_Ratio > 0 )
        //     float _num = 0
        //     if(_lastPen.direction == 1)
        //         _num := (_lastPen.high - array.get(mergeLow,array.indexof(mergeTime,_topOrBottomTime)))/(_lastPen.high - _lastPen.low)
        //     if(_lastPen.direction == -1)
        //         _num := (array.get(mergeHigh,array.indexof(mergeTime,_topOrBottomTime)) -_lastPen.low )/(_lastPen.high - _lastPen.low)
        //     // if(_num >= p_TopAndBottom_Ratio/100)
        //     //     isCheckContain := false
        //     //     _checkResult := true
        // if(isCheckContain)
        //     if(_direction == 1)//å½ååä¸ç¬ï¼é¡¶ååæé«ç¹ä¸è½<=ä¸åºååæé«ç¹
        //         if( maxPrice <= preMaxPrice)
        //             _checkResult := false
        //         if(preMinPrice >= minPrice )
        //             _checkResult := false
        //     else //å½ååä¸ç¬ï¼åºååæåºç¹ä¸è½ >= ä¸é¡¶ååæä½ç¹
        //         if(minPrice >= preMinPrice)
        //             _checkResult := false
        //         if(maxPrice >= preMaxPrice)
        //             _checkResult := false

    _checkResult
//æç¬åºæ¬æ¡ä»¶ç»è£
checkBasePenCondition(_lastPen,_isTopOrBottom,_topOrBottomTime) =>
    int _overNum = 0
    //1:å¿é¡»æ¯é¡¶ -> åº æè  åº -> é¡¶ç¸è¿
    if(_lastPen.direction == 1 and _isTopOrBottom == -1)
        _overNum += 1
    if(_lastPen.direction == -1 and _isTopOrBottom == 1 )
        _overNum += 1
    //2:æç¬æ°ééå¶
    if(_overNum >= 1)
        if(checkPenCondition1(_lastPen,_topOrBottomTime) )
            _overNum += 1
    //debugInfo.debugInfo +="\n_overNum:"+str.tostring(_overNum)
    //3:é¡¶åºåååéåå¤å®
    if(_overNum >= 2)
        if(checkPenCondition2(_lastPen,_topOrBottomTime) )
            _overNum += 1
    _overNum >= 3

//å¤æ­é¡¶åºæ¯å¦æå¬ç¨kçº¿
haveTopOrBottom(_preTime,_nextTime) =>
    int _preIndex = array.indexof(mergeTime,_preTime)
    int _nextIndex = array.indexof(mergeTime,_nextTime)
    //print(str.tostring(_preIndex)+":"+str.tostring(_nextIndex))
    math.abs(_preIndex - _nextIndex)>=3

//ç¹æ®æç¬1ï¼é¡¶åºæ¯ä¾è¾¾å°æå®å¼å°±å¯ä»¥æç¬
checkPenSpecialCondition1(_lastPen,_isTopOrBottom,_topOrBottomTime)=>
    int _overNum = 0
    // //1:å¿é¡»æ¯é¡¶ -> åº æè  åº -> é¡¶ç¸è¿
    // if(_lastPen.direction == 1 and _isTopOrBottom == -1)
    //     _overNum += 1
    // if(_lastPen.direction == -1 and _isTopOrBottom == 1 )
    //     _overNum += 1
    // if(_overNum >= 1 and p_TopAndBottom_Ratio > 0 and haveTopOrBottom(_lastPen.endTime,_topOrBottomTime) )
    //     float _num = 0
    //     if(_lastPen.direction == 1)
    //         _num := (_lastPen.high - array.get(mergeLow,array.indexof(mergeTime,_topOrBottomTime)))/(_lastPen.high - _lastPen.low)
    //     if(_lastPen.direction == -1)
    //         _num := (array.get(mergeHigh,array.indexof(mergeTime,_topOrBottomTime)) -_lastPen.low )/(_lastPen.high - _lastPen.low)
    //     if(_num >= p_TopAndBottom_Ratio/100)
    //         _overNum += 1
    _overNum >= 2
//æç»éªè¯æç¬æ¡ä»¶
checkPenCondition(_lastPen,_isTopOrBottom,_topOrBottomTime)=>
    bool baseCheck = checkBasePenCondition(_lastPen,_isTopOrBottom,_topOrBottomTime)
    //ç¹æ®æç¬
    bool special1Check = checkPenSpecialCondition1(_lastPen,_isTopOrBottom,_topOrBottomTime)
    baseCheck or special1Check

//æ¯å¦éè¦ä¿®æ­£
// isNeedChange(_lastPen,_prePen) =>
//     bool _needChange = true
//     //åå¾ä¸ä¸ç¬ ä¸ä¸ä¸ªåæ¹åç¬
//     if(_lastPen.direction == 1 and _lastPen.high > _prePen.high)
//         _needChange := false
//     if(_lastPen.direction == -1 and _lastPen.low < _prePen.low)
//         _needChange := false  
//     _needChange
//æ¯å¦è¿è¡ç¬çä¿®æ­£
// checkChangePrePen(_prePen,_lastPen,_isTopOrBottom,_topOrBottomTime,_topOrBottomPrice) =>
//     bool _isHave = false
//     Pen _tempPen = Pen.copy(_prePen)
//     //æ¯å¦ä¹ååºç°æ°çæå¼ç¹
//     _startIndex = array.indexof(mergeTime,_prePen.endTime) + 1
//     if(_prePen.direction == -1)
//         _num = _prePen.low
//         for i=_startIndex to array.size(mergeTime) - 1
//             if(array.get(mergeLow,i) < _num)
//                 _num := array.get(mergeLow,i)
//                 _isHave := true
//                 _tempPen.low := array.get(mergeLow,i)
//                 _tempPen.endTime := array.get(mergeTime,i)
//     else
//         _num = _prePen.high
//         for i=_startIndex to array.size(mergeTime) - 1
//             if(array.get(mergeHigh,i) > _num)
//                 _num := array.get(mergeHigh,i)
//                 _isHave := true
//                 _tempPen.high := array.get(mergeHigh,i)
//                 _tempPen.endTime := array.get(mergeTime,i)
//     if(_isHave)
//         //print(str.tostring(_tempPen.high)+"\n"+str.tostring(_tempPen.low))
//         //å¤æ­åç»­ææ²¡æå½¢æåæ¹åçç¬
//         bool _haveNewPen = checkPenCondition(_tempPen,_isTopOrBottom,_topOrBottomTime)
//         if(_haveNewPen)//ä¿®æ­£åä¸¤ç¬
//             if(_prePen.direction == 1)
//                 _prePen.high := _tempPen.high
//                 _prePen.endTime :=  _tempPen.endTime
//                 _lastPen.high := _tempPen.high
//                 _lastPen.startTime :=  _tempPen.endTime
//                 _lastPen.low := _topOrBottomPrice
//                 _lastPen.endTime := _topOrBottomTime
//                 drawPen(_prePen)
//                 drawPen(_lastPen)
//             else
//                 _prePen.low := _tempPen.low 
//                 _prePen.endTime :=  _tempPen.endTime
//                 _lastPen.low := _tempPen.low
//                 _lastPen.startTime :=  _tempPen.endTime
//                 _lastPen.high := _topOrBottomPrice
//                 _lastPen.endTime := _topOrBottomTime
//                 drawPen(_prePen)
//                 drawPen(_lastPen)
//         // else
//         //     if(_prePen.direction == 1)
//         //         _prePen.high := _tempPen.high
//         //         _prePen.endTime :=  _tempPen.endTime
//         //         drawPen(_prePen)
//         //         print(str.tostring(array.indexof(pens,_lastPen))+"\n"+str.tostring(array.size(pens)))
//         //         //array.remove(pens,array.indexof(pens,_lastPen))
//         //         line.delete(_lastPen.line)
                
//         //     else
//         //         _prePen.low := _tempPen.low 
//         //         _prePen.endTime :=  _tempPen.endTime
//         //         drawPen(_prePen)
//         //         print(str.tostring(array.indexof(pens,_lastPen))+"\n"+str.tostring(array.size(pens)))
//         //         line.delete(_lastPen.line)
//         //         //array.remove(pens,array.indexof(pens,_lastPen))
//     _isHave

createPen(_isTopOrBottom,_topOrBottomTime,_topOrBottomPrice) =>
    if(array.size(pens) <= 0)
        createFistPen(_isTopOrBottom,_topOrBottomTime,_topOrBottomPrice)
    //åå¾æåçç¬
    Pen _lastPen = na
    if(array.size(pens) > 0)
        _lastPen := array.get(pens,array.size(pens)-1)
    //ä¸ä¸ä¸ªåæ¹åç¬
    Pen _prePen = na
    if(array.size(pens) >= 2)
        _prePen := array.get(pens,array.size(pens)-2)
    Pen _pen = na
    if(not na(_lastPen))
        bool _haveNewPen = false
        //å¤æ­å¯è½æç¬ä¿¡æ¯åé¢æ¯å¦äº§çæ°ç¬,å¦æäº§çæ°ç¬å°±æ´æ°ä¹åç¬ä¿¡æ¯
        if(array.size(ablePen)>0)
            Pen _ablePen = array.get(ablePen,0)
            // if(_ablePen.direction == 1 and _isTopOrBottom == 1 and  _topOrBottomPrice   >  _ablePen.high)
            //     _ablePen.high    := _topOrBottomPrice
            //     _ablePen.endTime := _topOrBottomTime
            // if(_ablePen.direction == -1 and _isTopOrBottom == -1 and _topOrBottomPrice < _ablePen.low)
            //     _ablePen.low    := _topOrBottomPrice
            //     _ablePen.endTime := _topOrBottomTime
            _haveNewPen := checkPenCondition(_ablePen,_isTopOrBottom,_topOrBottomTime)
            //print("ä¸­é´ç¬æç¬å¤æ­:"+debugInfo.debugInfo)
            if(_haveNewPen)
                //print("4")
                bool _isChange = true
                if(_ablePen.direction == 1 )
                    if(_topOrBottomPrice > _lastPen.low)
                        _isChange := false
                        array.remove(ablePen,array.indexof(ablePen,_ablePen))
                    if(_isChange)
                        //éæ°æ´æ°æåä¸ç¬
                        _lastPen.endTime := _ablePen.startTime
                        _lastPen.low := _ablePen.low
                        drawPen(_lastPen)
                        //æ·»å å¯è½æç¬ä¸ºæ­£å¼æç¬
                        drawPen(_ablePen)
                        //åç»­ä¸ç¬
                        Pen _resolveLastPen = Pen.new( _ablePen.high,_topOrBottomPrice, _ablePen.endTime,_topOrBottomTime,1, -1)
                        _pen := _resolveLastPen
                        drawPen(_resolveLastPen)
                        array.remove(ablePen,array.indexof(ablePen,_ablePen))
                else if(_ablePen.direction == -1 )
                    if(_topOrBottomPrice < _prePen.high)
                        _isChange := false
                        array.remove(ablePen,array.indexof(ablePen,_ablePen))
                    if(_isChange)
                        //éæ°æ´æ°æåä¸ç¬
                        _lastPen.endTime := _ablePen.startTime
                        _lastPen.high := _ablePen.high
                        drawPen(_lastPen)
                        // //æ·»å å¯è½æç¬ä¸ºæ­£å¼æç¬
                        drawPen(_ablePen)
                        //åç»­ä¸ç¬
                        Pen _resolveLastPen = Pen.new( _topOrBottomPrice,_ablePen.low, _ablePen.endTime,_topOrBottomTime,1, 1)
                        _pen := _resolveLastPen
                        drawPen(_resolveLastPen)
                        array.remove(ablePen,array.indexof(ablePen,_ablePen))
        _haveNewPen := (not _haveNewPen) and checkPenCondition(_lastPen,_isTopOrBottom,_topOrBottomTime)
        if(_haveNewPen)//å»¶è¿æ»¡è¶³æç¬
            //print("3")
            //æ°ç¬æ¹å
            int _newPenDirection =  -_lastPen.direction
            Pen _temppen = Pen.new(_newPenDirection == 1? _topOrBottomPrice :_lastPen.high  
                        , _newPenDirection == 1? _lastPen.low :_topOrBottomPrice
                        , _lastPen.endTime,_topOrBottomTime,1
                        , _newPenDirection)
            _pen :=  _temppen
            drawPen(_pen)
            //æ¸ç©ºä¸­é´å·²ç»æç¬ï¼ä½å ä¸ºç¬ä¿®å¤å¯¼è´å¤±æçç¬
            array.clear(ablePen)
        //ä¿®å¤åä¸ç¬
        if(na(_pen))
            drawRunningPen(_lastPen)
            if(_lastPen.direction == 1 and _isTopOrBottom == 1 and  _topOrBottomPrice   >  _lastPen.high)
                //print("1")
                _lastPen.high    := _topOrBottomPrice
                _lastPen.endTime := _topOrBottomTime
                drawPen(_lastPen)
            if(_lastPen.direction == -1 and _isTopOrBottom == -1 and _topOrBottomPrice < _lastPen.low)
                //print("2")
                _lastPen.low    := _topOrBottomPrice
                _lastPen.endTime := _topOrBottomTime
                line.set_xy2(_lastPen.line,_lastPen.endTime,_lastPen.low) 
                drawPen(_lastPen)
            if(array.size(ablePen)>0)//ä¿®æ­£å¯è½æç¬ä¿¡æ¯
                Pen _ablePen = array.get(ablePen,0)
                if(_ablePen.direction == 1 and _isTopOrBottom == 1 and  _topOrBottomPrice   >  _ablePen.high)
                    _ablePen.high    := _topOrBottomPrice
                    _ablePen.endTime := _topOrBottomTime
                if(_ablePen.direction == -1 and _isTopOrBottom == -1 and _topOrBottomPrice < _ablePen.low)
                    _ablePen.low    := _topOrBottomPrice
                    _ablePen.endTime := _topOrBottomTime
        //ä¿®æ­£ç¬(åä¸¤ç¬)
        if(na(_pen) and not na(_prePen) and _isTopOrBottom != 0)
            if(_prePen.direction == 1 and _isTopOrBottom == 1 and _topOrBottomPrice > _prePen.high)
                //å¤æ­ä¸¤èå¹åº¦
                if(math.abs(_topOrBottomPrice -_prePen.high) > math.abs(_prePen.high - _lastPen.low))
                    _prePen.high := _topOrBottomPrice
                    _prePen.endTime :=  _topOrBottomTime
                    //å°å é¤çç¬æ¾å¥å¯è½æç¬ä¸­
                    array.clear(ablePen)
                    array.push(ablePen,_lastPen)
                    delPen(_lastPen)
                    drawPen(_prePen)
            else if(_prePen.direction == -1 and _isTopOrBottom == -1 and _topOrBottomPrice < _prePen.low)
                //å¤æ­ä¸¤èå¹åº¦
                //print("1:"+str.tostring(_topOrBottomPrice -_prePen.low)+"\n2:"+str.tostring(_lastPen.high - _prePen.low))
                if(math.abs(_topOrBottomPrice -_prePen.low) > math.abs(_lastPen.high - _prePen.low))
                    _prePen.low := _topOrBottomPrice
                    _prePen.endTime :=  _topOrBottomTime
                    //å°å é¤çç¬æ¾å¥å¯è½æç¬ä¸­
                    array.clear(ablePen)
                    array.push(ablePen,_lastPen)
                    delPen(_lastPen)
                    drawPen(_prePen)     
    _pen            
//#endregion
initAlertFlag()
//ç³»ç»å¯å¨æ¯é¦æ¬¡åå§åçº§å«ä¿¡æ¯
initGrade()
//å¤çåå¹¶åå«å³ç³»çbar
// if(barstate.isconfirmed)
[isTopOrBottom,topOrBottomTime,topOrBottomPrice] = mergeBarAndFindTopAndBottom()
//æå»ºç¬
if(barstate.isconfirmed )
    penHandler(isTopOrBottom,topOrBottomTime,topOrBottomPrice)
    //createPen(isTopOrBottom,topOrBottomTime,topOrBottomPrice)
//ç»å¶é«çº§å«çº¿æ®µåæ¬çº§å«ä¸­æ¢
if(barstate.isconfirmed and  array.size(segments)>0 and isTopOrBottom!=0)
    createSegment(2)
//æ¥è­¦ç¸å³è®¾ç½®
//æ¬çº§å«
alertcondition(array.get(alertFlag,1)>0,"4:æ¬çº§å«1ä¹°",'{{ticker}}:{{timenow}} {{interval}} æ¬çº§å«1ä¹°,ä»·ä½:{{close}}')
alertcondition(array.get(alertFlag,1)<0,"4:æ¬çº§å«1å",'{{ticker}}:{{timenow}} {{interval}} æ¬çº§å«1å,ä»·ä½:{{close}}')
alertcondition(array.get(alertFlag,2)>0,"4:æ¬çº§å«2ä¹°",'{{ticker}}:{{timenow}} {{interval}} æ¬çº§å«2ä¹°,ä»·ä½:{{close}}')
alertcondition(array.get(alertFlag,2)<0,"4:æ¬çº§å«2å",'{{ticker}}:{{timenow}} {{interval}} æ¬çº§å«2å,ä»·ä½:{{close}}')
alertcondition(array.get(alertFlag,3)>0,"4:æ¬çº§å«3ä¹°",'{{ticker}}:{{timenow}} {{interval}} æ¬çº§å«3ä¹°,ä»·ä½:{{close}}')
alertcondition(array.get(alertFlag,3)<0,"4:æ¬çº§å«3å",'{{ticker}}:{{timenow}} {{interval}} æ¬çº§å«3å,ä»·ä½:{{close}}')
//æ¬¡çº§å«
alertcondition(array.get(alertSubFlag,1)>0,"3:æ¬¡çº§å«1ä¹°",'{{ticker}}:{{timenow}} {{interval}} æ¬¡çº§å«1ä¹°,ä»·ä½:{{close}}')
alertcondition(array.get(alertSubFlag,1)<0,"3:æ¬¡çº§å«1å",'{{ticker}}:{{timenow}} {{interval}} æ¬¡çº§å«1å,ä»·ä½:{{close}}')
alertcondition(array.get(alertSubFlag,2)>0,"3:æ¬¡çº§å«2ä¹°",'{{ticker}}:{{timenow}} {{interval}} æ¬¡çº§å«2ä¹°,ä»·ä½:{{close}}')
alertcondition(array.get(alertSubFlag,2)<0,"3:æ¬¡çº§å«2å",'{{ticker}}:{{timenow}} {{interval}} æ¬¡çº§å«2å,ä»·ä½:{{close}}')
alertcondition(array.get(alertSubFlag,3)>0,"3:æ¬¡çº§å«3ä¹°",'{{ticker}}:{{timenow}} {{interval}} æ¬¡çº§å«3ä¹°,ä»·ä½:{{close}}')
alertcondition(array.get(alertSubFlag,3)<0,"3:æ¬¡çº§å«3å",'{{ticker}}:{{timenow}} {{interval}} æ¬¡çº§å«3å,ä»·ä½:{{close}}')

//ç»åä¹°åç¹
alertcondition(array.get(alertSubFlag,1)>0 or array.get(alertFlag,1)>0,"2:æ¬çº§å«ææ¬¡çº§å«1ä¹°",'{{ticker}}:{{timenow}} {{interval}} æ¬çº§å«ææ¬¡çº§å«1ä¹°,ä»·ä½:{{close}}')
alertcondition(array.get(alertSubFlag,1)<0 or array.get(alertFlag,1)<0,"2:æ¬çº§å«ææ¬¡çº§å«1å",'{{ticker}}:{{timenow}} {{interval}} æ¬çº§å«ææ¬¡çº§å«1å,ä»·ä½:{{close}}')
alertcondition(array.get(alertSubFlag,2)>0 or array.get(alertFlag,2)>0,"2:æ¬çº§å«ææ¬¡çº§å«2ä¹°",'{{ticker}}:{{timenow}} {{interval}} æ¬çº§å«ææ¬¡çº§å«2ä¹°,ä»·ä½:{{close}}')
alertcondition(array.get(alertSubFlag,2)<0 or array.get(alertFlag,3)<0,"2:æ¬çº§å«ææ¬¡çº§å«2å",'{{ticker}}:{{timenow}} {{interval}} æ¬çº§å«ææ¬¡çº§å«2å,ä»·ä½:{{close}}')
alertcondition(array.get(alertSubFlag,3)>0 or array.get(alertFlag,3)>0,"2:æ¬çº§å«ææ¬¡çº§å«3ä¹°",'{{ticker}}:{{timenow}} {{interval}} æ¬çº§å«ææ¬¡çº§å«3ä¹°,ä»·ä½:{{close}}')
alertcondition(array.get(alertSubFlag,3)<0 or array.get(alertFlag,3)<0,"2:æ¬çº§å«ææ¬¡çº§å«3å",'{{ticker}}:{{timenow}} {{interval}} æ¬çº§å«ææ¬¡çº§å«3å,ä»·ä½:{{close}}')

//ä¸é®ææä¹°åç¹

bool alertAll = false
if(array.get(alertSubFlag,1)!=0 or array.get(alertSubFlag,2)!=0 or array.get(alertSubFlag,3)!=0
        or array.get(alertFlag,1)!=0 or array.get(alertFlag,2)!=0 or array.get(alertFlag,3)!=0)
    alertAll :=true
alertcondition(alertAll,"1:è®¢éææä¹°åç¹",'{{ticker}}:{{timenow}} {{interval}} ææä¹°åç¹,ä»·ä½:{{close}}')
//æ¬¡çº§å«ææä¹°åç¹
bool alertSubAll = false
if(array.get(alertSubFlag,1)!=0 or array.get(alertSubFlag,2)!=0 or array.get(alertSubFlag,3)!=0)
    alertSubAll :=true
alertcondition(alertSubAll,'1.1:è®¢éæ¬¡çº§å«ææä¹°åç¹','{{ticker}}:{{timenow}} {{interval}} æææ¬¡çº§å«ä¹°åç¹,ä»·ä½:{{close}}')
//æ¬çº§å«ææä¹°åç¹
bool alertSelfAll = false
if(array.get(alertFlag,1)!=0 or array.get(alertFlag,2)!=0 or array.get(alertFlag,3)!=0)
    alertSelfAll :=true
alertcondition(alertSelfAll,"1.2:è®¢éæ¬çº§å«ææä¹°åç¹",'{{ticker}}:{{timenow}} {{interval}} æææ¬çº§å«ä¹°åç¹,ä»·ä½:{{close}}')

//å¤§å°çº§å«ä¹°åç¹å±æ¯
bool alertSync = false
if(alertSubAll and alertSelfAll)
    alertSync :=true
alertcondition(alertSelfAll,"1.3:è®¢éå¤§å°çº§å«å±æ¯ä¹°åç¹",'{{ticker}}:{{timenow}} {{interval}} æææ¬çº§å«ä¹°åç¹,ä»·ä½:{{close}}')
'''
}

matreshka = {
'Extreme Trend Reversal Points':
'''
// This source code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/1.0/
// Â© HeWhoMustNotBeNamed

//   __    __            __       __  __                  __       __                        __      __    __              __      _______             __    __                                          __ 
//  /  |  /  |          /  |  _  /  |/  |                /  \     /  |                      /  |    /  \  /  |            /  |    /       \           /  \  /  |                                        /  |
//  $$ |  $$ |  ______  $$ | / \ $$ |$$ |____    ______  $$  \   /$$ | __    __   _______  _$$ |_   $$  \ $$ |  ______   _$$ |_   $$$$$$$  |  ______  $$  \ $$ |  ______   _____  ____    ______    ____$$ |
//  $$ |__$$ | /      \ $$ |/$  \$$ |$$      \  /      \ $$$  \ /$$$ |/  |  /  | /       |/ $$   |  $$$  \$$ | /      \ / $$   |  $$ |__$$ | /      \ $$$  \$$ | /      \ /     \/    \  /      \  /    $$ |
//  $$    $$ |/$$$$$$  |$$ /$$$  $$ |$$$$$$$  |/$$$$$$  |$$$$  /$$$$ |$$ |  $$ |/$$$$$$$/ $$$$$$/   $$$$  $$ |/$$$$$$  |$$$$$$/   $$    $$< /$$$$$$  |$$$$  $$ | $$$$$$  |$$$$$$ $$$$  |/$$$$$$  |/$$$$$$$ |
//  $$$$$$$$ |$$    $$ |$$ $$/$$ $$ |$$ |  $$ |$$ |  $$ |$$ $$ $$/$$ |$$ |  $$ |$$      \   $$ | __ $$ $$ $$ |$$ |  $$ |  $$ | __ $$$$$$$  |$$    $$ |$$ $$ $$ | /    $$ |$$ | $$ | $$ |$$    $$ |$$ |  $$ |
//  $$ |  $$ |$$$$$$$$/ $$$$/  $$$$ |$$ |  $$ |$$ \__$$ |$$ |$$$/ $$ |$$ \__$$ | $$$$$$  |  $$ |/  |$$ |$$$$ |$$ \__$$ |  $$ |/  |$$ |__$$ |$$$$$$$$/ $$ |$$$$ |/$$$$$$$ |$$ | $$ | $$ |$$$$$$$$/ $$ \__$$ |
//  $$ |  $$ |$$       |$$$/    $$$ |$$ |  $$ |$$    $$/ $$ | $/  $$ |$$    $$/ /     $$/   $$  $$/ $$ | $$$ |$$    $$/   $$  $$/ $$    $$/ $$       |$$ | $$$ |$$    $$ |$$ | $$ | $$ |$$       |$$    $$ |
//  $$/   $$/  $$$$$$$/ $$/      $$/ $$/   $$/  $$$$$$/  $$/      $$/  $$$$$$/  $$$$$$$/     $$$$/  $$/   $$/  $$$$$$/     $$$$/  $$$$$$$/   $$$$$$$/ $$/   $$/  $$$$$$$/ $$/  $$/  $$/  $$$$$$$/  $$$$$$$/ 
//                                                                                                                                                                                                          
//                                                                                                                                                                                                          
//
//@version=5
indicator("Extreme Trend Reversal Points [HeWhoMustNotBeNamed]", shorttitle = "ETRP[HWMNBN]", overlay=true)
import Batut/_matrix/1 as ma
import Batut/arrayutils/1 as ar
import Batut/enhanced_ta/1 as eta
import Batut/drawingutils/1 as dr
import Batut/arrays/1 as pa

source = input.source(close, "Source", group="Moving Average")
type = input.string("sma", "Type", options = ["sma", "ema", "rma", "wma"], group="Moving Average")
length = input.int(20, "Length", step=5, group="Moving Average")
level = input.int(10, "Level", minval = 5, step=5, group="Moving Average")
minMaxRangePercentile = input.int(20, 'Range Percentile', minval=5, maxval=45, step=5)
extremeMinMaxRangePercentile = input.int(45, 'Extreme Range Percentile', minval=40, maxval=48, step=2)
history = input.int(1000, 'Percentile History', minval=1000, maxval=5000, step=500)
realTimeAlerts = input.bool(false, 'Real Time Alerts', 'If set to true, alerts are fired on latest candle - which may repaint. For safer option set this to false')
maxHistory = length-1

ema(float currentEma, float source, simple int length) =>
    k = 2 / (length + 1)
    ema = source * k + (1 - k) * currentEma
    ema

rma(float currentRma, float source, simple int length) =>
    k = 2 / (length + 1)
    rma = (currentRma * (length-1) + source)/length
    rma

var maMatrix = matrix.new<float>(1, level+1, source)

if(type == "ema")
    emaArray = array.new<float>(1, source)
    for i=1 to matrix.columns(maMatrix)-1
        ema = ema(matrix.get(maMatrix, 0, i), array.get(emaArray, array.size(emaArray)-1), length)
        array.push(emaArray, ema)
    ma.unshift(maMatrix, emaArray, maxHistory)

if(type == "rma")
    rmaArray = array.new<float>(1, source)
    for i=1 to matrix.columns(maMatrix)-1
        rma = rma(matrix.get(maMatrix, 0, i), array.get(rmaArray, array.size(rmaArray)-1), length)
        array.push(rmaArray, rma)
    ma.unshift(maMatrix, rmaArray, maxHistory)

if(type == "sma" or type == "wma")
    maArray = array.new<float>(1, source)
    for i=1 to matrix.columns(maMatrix)-1
        values = matrix.col(maMatrix, i-1)
        tmpArray = array.new<float>(1, array.get(maArray, i-1))
        tmpArray := array.concat(tmpArray, values)
        array.push(maArray, ar.ma(tmpArray, type, length))

    ma.unshift(maMatrix, maArray, maxHistory)

strength = 0
bearishStrength = 0
diffMatrix = matrix.new<float>(level+1, level+1, 0)

var linesArray = array.new<line>()
var labelsArray = array.new<label>()

ar.clear(linesArray)
ar.clear(labelsArray)

for i = 0 to level
    for j = 0 to level
        pma = matrix.get(maMatrix, 0, i)
        nma = matrix.get(maMatrix, 0, j)
        
        //strength := pma > nma ? strength+1 : strength
        if(j > i)
            strength := pma > nma ? strength+1 : strength
        matrix.set(diffMatrix, i, j, math.sign(pma-nma))
       
lastRow = matrix.row(maMatrix, 0)
lastRowIndex = array.sort_indices(array.slice(lastRow, 1, array.size(lastRow)), order.descending)

if(barstate.islast)
    for i=1 to level
        levelColor = color.from_gradient(i, 1, level, color.green, color.red)
        dr.draw_labelled_line(array.get(lastRow, i), type+'('+str.tostring(i)+')',levelColor, levelColor, 0, true, linesArray, labelsArray)

minRange = ta.percentile_nearest_rank(strength, history, 50-minMaxRangePercentile)
maxRange = ta.percentile_nearest_rank(strength, history, 50+minMaxRangePercentile)

extremeMinRange = ta.percentile_nearest_rank(strength, history, 50-extremeMinMaxRangePercentile)
extremeMaxRange = ta.percentile_nearest_rank(strength, history, 50+extremeMinMaxRangePercentile)
plotColor = strength > extremeMaxRange? color.green :
                 strength > maxRange? color.lime :
                 strength < extremeMinRange ? color.red : 
                 strength < minRange? color.orange : color.silver

strengthRange = strength > extremeMaxRange? 2 :
                 strength > maxRange? 1 :
                 strength > minRange ? 0 : 
                 strength < extremeMinRange? -1 : -2
maxStrength = level * (level+1)/1

ma = eta.ma(source, type, length)

bullishTrendReversalPoint = strength[1]== maxStrength and ta.crossunder(source, ma)
bearishTrendReversalPoint = strength[1]==0 and ta.crossover(source, ma)

plotshape(bullishTrendReversalPoint, 'Bullish Trend Reversal Point',
                     style=shape.triangledown, location=location.abovebar, color=color.red, size=size.small)
plotshape(bearishTrendReversalPoint, 'Bearish Trend Reversal Point',
                     style=shape.triangleup, location=location.belowbar, color=color.green, size=size.small)

plot(strength, "Strength", color=color.silver, display = display.data_window)
plot(minRange, "Min Range", color=color.orange, display = display.data_window)
plot(maxRange, "Max Range", color=color.lime, display = display.data_window)
plot(extremeMinRange, "Extreme Min Range", color=color.red, display = display.data_window)
plot(extremeMaxRange, "Extreme Max Range", color=color.green, display = display.data_window)
plot(strengthRange, "Strength Range", color=color.blue, display = display.data_window)
plot(ma, "Moving Average", plotColor)

alertcondition(bullishTrendReversalPoint[realTimeAlerts?0:1], "Bullish Trend Reversal", "Possible reversal of bullish trend")
alertcondition(bearishTrendReversalPoint[realTimeAlerts?0:1], "Bearish Trend Reversal", "Possible reversal of bearish trend")
'''
}



k2 = {
1 : '''
//@version=5
indicator("My script")
f0(a0) => a0 + 1
plot(f0(0))
f1(a1) => a1 + 1
plot(f1(1))
f2(a2) => a2 + 1
plot(f2(2))
f3(a3) => a3 + 1
plot(f3(3))
f4(a4) => a4 + 1
plot(f4(4))
f5(a5) => a5 + 1
plot(f5(5))
f6(a6) => a6 + 1
plot(f6(6))
f7(a7) => a7 + 1
plot(f7(7))
f8(a8) => a8 + 1
plot(f8(8))
f9(a9) => a9 + 1
plot(f9(9))
f10(a10) => a10 + 1
plot(f10(10))
f11(a11) => a11 + 1
plot(f11(11))
f12(a12) => a12 + 1
plot(f12(12))
f13(a13) => a13 + 1
plot(f13(13))
f14(a14) => a14 + 1
plot(f14(14))
f15(a15) => a15 + 1
plot(f15(15))
f16(a16) => a16 + 1
plot(f16(16))
f17(a17) => a17 + 1
plot(f17(17))
f18(a18) => a18 + 1
plot(f18(18))
f19(a19) => a19 + 1
plot(f19(19))
f20(a20) => a20 + 1
plot(f20(20))
f21(a21) => a21 + 1
plot(f21(21))
f22(a22) => a22 + 1
plot(f22(22))
f23(a23) => a23 + 1
plot(f23(23))
f24(a24) => a24 + 1
plot(f24(24))
f25(a25) => a25 + 1
plot(f25(25))
f26(a26) => a26 + 1
plot(f26(26))
f27(a27) => a27 + 1
plot(f27(27))
f28(a28) => a28 + 1
plot(f28(28))
f29(a29) => a29 + 1
plot(f29(29))
f30(a30) => a30 + 1
plot(f30(30))
f31(a31) => a31 + 1
plot(f31(31))
f32(a32) => a32 + 1
plot(f32(32))
f33(a33) => a33 + 1
plot(f33(33))
f34(a34) => a34 + 1
plot(f34(34))
f35(a35) => a35 + 1
plot(f35(35))
f36(a36) => a36 + 1
plot(f36(36))
f37(a37) => a37 + 1
plot(f37(37))
f38(a38) => a38 + 1
plot(f38(38))
f39(a39) => a39 + 1
plot(f39(39))
f40(a40) => a40 + 1
plot(f40(40))
f41(a41) => a41 + 1
plot(f41(41))
f42(a42) => a42 + 1
plot(f42(42))
f43(a43) => a43 + 1
plot(f43(43))
f44(a44) => a44 + 1
plot(f44(44))
f45(a45) => a45 + 1
plot(f45(45))
f46(a46) => a46 + 1
plot(f46(46))
f47(a47) => a47 + 1
plot(f47(47))
f48(a48) => a48 + 1
plot(f48(48))
f49(a49) => a49 + 1
plot(f49(49))
f50(a50) => a50 + 1
plot(f50(50))
f51(a51) => a51 + 1
plot(f51(51))
f52(a52) => a52 + 1
plot(f52(52))
f53(a53) => a53 + 1
plot(f53(53))
f54(a54) => a54 + 1
plot(f54(54))
f55(a55) => a55 + 1
plot(f55(55))
f56(a56) => a56 + 1
plot(f56(56))
f57(a57) => a57 + 1
plot(f57(57))
f58(a58) => a58 + 1
plot(f58(58))
f59(a59) => a59 + 1
plot(f59(59))
f60(a60) => a60 + 1
plot(f60(60))
f61(a61) => a61 + 1
plot(f61(61))
f62(a62) => a62 + 1
plot(f62(62))
f63(a63) => a63 + 1
plot(f63(63))
f64(a64) => a64 + 1
plot(f64(64))
f65(a65) => a65 + 1
plot(f65(65))
f66(a66) => a66 + 1
plot(f66(66))
f67(a67) => a67 + 1
plot(f67(67))
f68(a68) => a68 + 1
plot(f68(68))
f69(a69) => a69 + 1
plot(f69(69))
f70(a70) => a70 + 1
plot(f70(70))
f71(a71) => a71 + 1
plot(f71(71))
f72(a72) => a72 + 1
plot(f72(72))
f73(a73) => a73 + 1
plot(f73(73))
f74(a74) => a74 + 1
plot(f74(74))
f75(a75) => a75 + 1
plot(f75(75))
f76(a76) => a76 + 1
plot(f76(76))
f77(a77) => a77 + 1
plot(f77(77))
f78(a78) => a78 + 1
plot(f78(78))
f79(a79) => a79 + 1
plot(f79(79))
f80(a80) => a80 + 1
plot(f80(80))
f81(a81) => a81 + 1
plot(f81(81))
f82(a82) => a82 + 1
plot(f82(82))
f83(a83) => a83 + 1
plot(f83(83))
f84(a84) => a84 + 1
plot(f84(84))
f85(a85) => a85 + 1
plot(f85(85))
f86(a86) => a86 + 1
plot(f86(86))
f87(a87) => a87 + 1
plot(f87(87))
f88(a88) => a88 + 1
plot(f88(88))
f89(a89) => a89 + 1
plot(f89(89))
f90(a90) => a90 + 1
plot(f90(90))
f91(a91) => a91 + 1
plot(f91(91))
f92(a92) => a92 + 1
plot(f92(92))
f93(a93) => a93 + 1
plot(f93(93))
f94(a94) => a94 + 1
plot(f94(94))
f95(a95) => a95 + 1
plot(f95(95))
f96(a96) => a96 + 1
plot(f96(96))
f97(a97) => a97 + 1
plot(f97(97))
f98(a98) => a98 + 1
plot(f98(98))
f99(a99) => a99 + 1
plot(f99(99))
f100(a100) => a100 + 1
plot(f100(100))
f101(a101) => a101 + 1
plot(f101(101))
f102(a102) => a102 + 1
plot(f102(102))
f103(a103) => a103 + 1
plot(f103(103))
f104(a104) => a104 + 1
plot(f104(104))
f105(a105) => a105 + 1
plot(f105(105))
f106(a106) => a106 + 1
plot(f106(106))
f107(a107) => a107 + 1
plot(f107(107))
f108(a108) => a108 + 1
plot(f108(108))
f109(a109) => a109 + 1
plot(f109(109))
f110(a110) => a110 + 1
plot(f110(110))
f111(a111) => a111 + 1
plot(f111(111))
f112(a112) => a112 + 1
plot(f112(112))
f113(a113) => a113 + 1
plot(f113(113))
f114(a114) => a114 + 1
plot(f114(114))
f115(a115) => a115 + 1
plot(f115(115))
f116(a116) => a116 + 1
plot(f116(116))
f117(a117) => a117 + 1
plot(f117(117))
f118(a118) => a118 + 1
plot(f118(118))
f119(a119) => a119 + 1
plot(f119(119))
f120(a120) => a120 + 1
plot(f120(120))
f121(a121) => a121 + 1
plot(f121(121))
f122(a122) => a122 + 1
plot(f122(122))
f123(a123) => a123 + 1
plot(f123(123))
f124(a124) => a124 + 1
plot(f124(124))
f125(a125) => a125 + 1
plot(f125(125))
f126(a126) => a126 + 1
plot(f126(126))
f127(a127) => a127 + 1
plot(f127(127))
f128(a128) => a128 + 1
plot(f128(128))
f129(a129) => a129 + 1
plot(f129(129))
f130(a130) => a130 + 1
plot(f130(130))
f131(a131) => a131 + 1
plot(f131(131))
f132(a132) => a132 + 1
plot(f132(132))
f133(a133) => a133 + 1
plot(f133(133))
f134(a134) => a134 + 1
plot(f134(134))
f135(a135) => a135 + 1
plot(f135(135))
f136(a136) => a136 + 1
plot(f136(136))
f137(a137) => a137 + 1
plot(f137(137))
f138(a138) => a138 + 1
plot(f138(138))
f139(a139) => a139 + 1
plot(f139(139))
f140(a140) => a140 + 1
plot(f140(140))
f141(a141) => a141 + 1
plot(f141(141))
f142(a142) => a142 + 1
plot(f142(142))
f143(a143) => a143 + 1
plot(f143(143))
f144(a144) => a144 + 1
plot(f144(144))
f145(a145) => a145 + 1
plot(f145(145))
f146(a146) => a146 + 1
plot(f146(146))
f147(a147) => a147 + 1
plot(f147(147))
f148(a148) => a148 + 1
plot(f148(148))
f149(a149) => a149 + 1
plot(f149(149))
f150(a150) => a150 + 1
plot(f150(150))
f151(a151) => a151 + 1
plot(f151(151))
f152(a152) => a152 + 1
plot(f152(152))
f153(a153) => a153 + 1
plot(f153(153))
f154(a154) => a154 + 1
plot(f154(154))
f155(a155) => a155 + 1
plot(f155(155))
f156(a156) => a156 + 1
plot(f156(156))
f157(a157) => a157 + 1
plot(f157(157))
f158(a158) => a158 + 1
plot(f158(158))
f159(a159) => a159 + 1
plot(f159(159))
f160(a160) => a160 + 1
plot(f160(160))
f161(a161) => a161 + 1
plot(f161(161))
f162(a162) => a162 + 1
plot(f162(162))
f163(a163) => a163 + 1
plot(f163(163))
f164(a164) => a164 + 1
plot(f164(164))
f165(a165) => a165 + 1
plot(f165(165))
f166(a166) => a166 + 1
plot(f166(166))
f167(a167) => a167 + 1
plot(f167(167))
f168(a168) => a168 + 1
plot(f168(168))
f169(a169) => a169 + 1
plot(f169(169))
f170(a170) => a170 + 1
plot(f170(170))
f171(a171) => a171 + 1
plot(f171(171))
f172(a172) => a172 + 1
plot(f172(172))
f173(a173) => a173 + 1
plot(f173(173))
f174(a174) => a174 + 1
plot(f174(174))
f175(a175) => a175 + 1
plot(f175(175))
f176(a176) => a176 + 1
plot(f176(176))
f177(a177) => a177 + 1
plot(f177(177))
f178(a178) => a178 + 1
plot(f178(178))
f179(a179) => a179 + 1
plot(f179(179))
f180(a180) => a180 + 1
plot(f180(180))
f181(a181) => a181 + 1
plot(f181(181))
f182(a182) => a182 + 1
plot(f182(182))
f183(a183) => a183 + 1
plot(f183(183))
f184(a184) => a184 + 1
plot(f184(184))
f185(a185) => a185 + 1
plot(f185(185))
f186(a186) => a186 + 1
plot(f186(186))
f187(a187) => a187 + 1
plot(f187(187))
f188(a188) => a188 + 1
plot(f188(188))
f189(a189) => a189 + 1
plot(f189(189))
f190(a190) => a190 + 1
plot(f190(190))
f191(a191) => a191 + 1
plot(f191(191))
f192(a192) => a192 + 1
plot(f192(192))
f193(a193) => a193 + 1
plot(f193(193))
f194(a194) => a194 + 1
plot(f194(194))
f195(a195) => a195 + 1
plot(f195(195))
f196(a196) => a196 + 1
plot(f196(196))
f197(a197) => a197 + 1
plot(f197(197))
f198(a198) => a198 + 1
plot(f198(198))
f199(a199) => a199 + 1
plot(f199(199))
f200(a200) => a200 + 1
plot(f200(200))
f201(a201) => a201 + 1
plot(f201(201))
f202(a202) => a202 + 1
plot(f202(202))
f203(a203) => a203 + 1
plot(f203(203))
f204(a204) => a204 + 1
plot(f204(204))
f205(a205) => a205 + 1
plot(f205(205))
f206(a206) => a206 + 1
plot(f206(206))
f207(a207) => a207 + 1
plot(f207(207))
f208(a208) => a208 + 1
plot(f208(208))
f209(a209) => a209 + 1
plot(f209(209))
f210(a210) => a210 + 1
plot(f210(210))
f211(a211) => a211 + 1
plot(f211(211))
f212(a212) => a212 + 1
plot(f212(212))
f213(a213) => a213 + 1
plot(f213(213))
f214(a214) => a214 + 1
plot(f214(214))
f215(a215) => a215 + 1
plot(f215(215))
f216(a216) => a216 + 1
plot(f216(216))
f217(a217) => a217 + 1
plot(f217(217))
f218(a218) => a218 + 1
plot(f218(218))
f219(a219) => a219 + 1
plot(f219(219))
f220(a220) => a220 + 1
plot(f220(220))
f221(a221) => a221 + 1
plot(f221(221))
f222(a222) => a222 + 1
plot(f222(222))
f223(a223) => a223 + 1
plot(f223(223))
f224(a224) => a224 + 1
plot(f224(224))
f225(a225) => a225 + 1
plot(f225(225))
f226(a226) => a226 + 1
plot(f226(226))
f227(a227) => a227 + 1
plot(f227(227))
f228(a228) => a228 + 1
plot(f228(228))
f229(a229) => a229 + 1
plot(f229(229))
f230(a230) => a230 + 1
plot(f230(230))
f231(a231) => a231 + 1
plot(f231(231))
f232(a232) => a232 + 1
plot(f232(232))
f233(a233) => a233 + 1
plot(f233(233))
f234(a234) => a234 + 1
plot(f234(234))
f235(a235) => a235 + 1
plot(f235(235))
f236(a236) => a236 + 1
plot(f236(236))
f237(a237) => a237 + 1
plot(f237(237))
f238(a238) => a238 + 1
plot(f238(238))
f239(a239) => a239 + 1
plot(f239(239))
f240(a240) => a240 + 1
plot(f240(240))
f241(a241) => a241 + 1
plot(f241(241))
f242(a242) => a242 + 1
plot(f242(242))
f243(a243) => a243 + 1
plot(f243(243))
f244(a244) => a244 + 1
plot(f244(244))
f245(a245) => a245 + 1
plot(f245(245))
f246(a246) => a246 + 1
plot(f246(246))
f247(a247) => a247 + 1
plot(f247(247))
f248(a248) => a248 + 1
plot(f248(248))
f249(a249) => a249 + 1
plot(f249(249))
f250(a250) => a250 + 1
plot(f250(250))
f251(a251) => a251 + 1
plot(f251(251))
f252(a252) => a252 + 1
plot(f252(252))
f253(a253) => a253 + 1
plot(f253(253))
f254(a254) => a254 + 1
plot(f254(254))
f255(a255) => a255 + 1
plot(f255(255))
f256(a256) => a256 + 1
plot(f256(256))
f257(a257) => a257 + 1
plot(f257(257))
f258(a258) => a258 + 1
plot(f258(258))
f259(a259) => a259 + 1
plot(f259(259))
f260(a260) => a260 + 1
plot(f260(260))
f261(a261) => a261 + 1
plot(f261(261))
f262(a262) => a262 + 1
plot(f262(262))
f263(a263) => a263 + 1
plot(f263(263))
f264(a264) => a264 + 1
plot(f264(264))
f265(a265) => a265 + 1
plot(f265(265))
f266(a266) => a266 + 1
plot(f266(266))
f267(a267) => a267 + 1
plot(f267(267))
f268(a268) => a268 + 1
plot(f268(268))
f269(a269) => a269 + 1
plot(f269(269))
f270(a270) => a270 + 1
plot(f270(270))
f271(a271) => a271 + 1
plot(f271(271))
f272(a272) => a272 + 1
plot(f272(272))
f273(a273) => a273 + 1
plot(f273(273))
f274(a274) => a274 + 1
plot(f274(274))
f275(a275) => a275 + 1
plot(f275(275))
f276(a276) => a276 + 1
plot(f276(276))
f277(a277) => a277 + 1
plot(f277(277))
f278(a278) => a278 + 1
plot(f278(278))
f279(a279) => a279 + 1
plot(f279(279))
f280(a280) => a280 + 1
plot(f280(280))
f281(a281) => a281 + 1
plot(f281(281))
f282(a282) => a282 + 1
plot(f282(282))
f283(a283) => a283 + 1
plot(f283(283))
f284(a284) => a284 + 1
plot(f284(284))
f285(a285) => a285 + 1
plot(f285(285))
f286(a286) => a286 + 1
plot(f286(286))
f287(a287) => a287 + 1
plot(f287(287))
f288(a288) => a288 + 1
plot(f288(288))
f289(a289) => a289 + 1
plot(f289(289))
f290(a290) => a290 + 1
plot(f290(290))
f291(a291) => a291 + 1
plot(f291(291))
f292(a292) => a292 + 1
plot(f292(292))
f293(a293) => a293 + 1
plot(f293(293))
f294(a294) => a294 + 1
plot(f294(294))
f295(a295) => a295 + 1
plot(f295(295))
f296(a296) => a296 + 1
plot(f296(296))
f297(a297) => a297 + 1
plot(f297(297))
f298(a298) => a298 + 1
plot(f298(298))
f299(a299) => a299 + 1
plot(f299(299))
f300(a300) => a300 + 1
plot(f300(300))
f301(a301) => a301 + 1
plot(f301(301))
f302(a302) => a302 + 1
plot(f302(302))
f303(a303) => a303 + 1
plot(f303(303))
f304(a304) => a304 + 1
plot(f304(304))
f305(a305) => a305 + 1
plot(f305(305))
f306(a306) => a306 + 1
plot(f306(306))
f307(a307) => a307 + 1
plot(f307(307))
f308(a308) => a308 + 1
plot(f308(308))
f309(a309) => a309 + 1
plot(f309(309))
f310(a310) => a310 + 1
plot(f310(310))
f311(a311) => a311 + 1
plot(f311(311))
f312(a312) => a312 + 1
plot(f312(312))
f313(a313) => a313 + 1
plot(f313(313))
f314(a314) => a314 + 1
plot(f314(314))
f315(a315) => a315 + 1
plot(f315(315))
f316(a316) => a316 + 1
plot(f316(316))
f317(a317) => a317 + 1
plot(f317(317))
f318(a318) => a318 + 1
plot(f318(318))
f319(a319) => a319 + 1
plot(f319(319))
f320(a320) => a320 + 1
plot(f320(320))
f321(a321) => a321 + 1
plot(f321(321))
f322(a322) => a322 + 1
plot(f322(322))
f323(a323) => a323 + 1
plot(f323(323))
f324(a324) => a324 + 1
plot(f324(324))
f325(a325) => a325 + 1
plot(f325(325))
f326(a326) => a326 + 1
plot(f326(326))
f327(a327) => a327 + 1
plot(f327(327))
f328(a328) => a328 + 1
plot(f328(328))
f329(a329) => a329 + 1
plot(f329(329))
f330(a330) => a330 + 1
plot(f330(330))
f331(a331) => a331 + 1
plot(f331(331))
f332(a332) => a332 + 1
plot(f332(332))
f333(a333) => a333 + 1
plot(f333(333))
f334(a334) => a334 + 1
plot(f334(334))
f335(a335) => a335 + 1
plot(f335(335))
f336(a336) => a336 + 1
plot(f336(336))
f337(a337) => a337 + 1
plot(f337(337))
f338(a338) => a338 + 1
plot(f338(338))
f339(a339) => a339 + 1
plot(f339(339))
f340(a340) => a340 + 1
plot(f340(340))
f341(a341) => a341 + 1
plot(f341(341))
f342(a342) => a342 + 1
plot(f342(342))
f343(a343) => a343 + 1
plot(f343(343))
f344(a344) => a344 + 1
plot(f344(344))
f345(a345) => a345 + 1
plot(f345(345))
f346(a346) => a346 + 1
plot(f346(346))
f347(a347) => a347 + 1
plot(f347(347))
f348(a348) => a348 + 1
plot(f348(348))
f349(a349) => a349 + 1
plot(f349(349))
f350(a350) => a350 + 1
plot(f350(350))
f351(a351) => a351 + 1
plot(f351(351))
f352(a352) => a352 + 1
plot(f352(352))
f353(a353) => a353 + 1
plot(f353(353))
f354(a354) => a354 + 1
plot(f354(354))
f355(a355) => a355 + 1
plot(f355(355))
f356(a356) => a356 + 1
plot(f356(356))
f357(a357) => a357 + 1
plot(f357(357))
f358(a358) => a358 + 1
plot(f358(358))
f359(a359) => a359 + 1
plot(f359(359))
f360(a360) => a360 + 1
plot(f360(360))
f361(a361) => a361 + 1
plot(f361(361))
f362(a362) => a362 + 1
plot(f362(362))
f363(a363) => a363 + 1
plot(f363(363))
f364(a364) => a364 + 1
plot(f364(364))
f365(a365) => a365 + 1
plot(f365(365))
f366(a366) => a366 + 1
plot(f366(366))
f367(a367) => a367 + 1
plot(f367(367))
f368(a368) => a368 + 1
plot(f368(368))
f369(a369) => a369 + 1
plot(f369(369))
f370(a370) => a370 + 1
plot(f370(370))
f371(a371) => a371 + 1
plot(f371(371))
f372(a372) => a372 + 1
plot(f372(372))
f373(a373) => a373 + 1
plot(f373(373))
f374(a374) => a374 + 1
plot(f374(374))
f375(a375) => a375 + 1
plot(f375(375))
f376(a376) => a376 + 1
plot(f376(376))
f377(a377) => a377 + 1
plot(f377(377))
f378(a378) => a378 + 1
plot(f378(378))
f379(a379) => a379 + 1
plot(f379(379))
f380(a380) => a380 + 1
plot(f380(380))
f381(a381) => a381 + 1
plot(f381(381))
f382(a382) => a382 + 1
plot(f382(382))
f383(a383) => a383 + 1
plot(f383(383))
f384(a384) => a384 + 1
plot(f384(384))
f385(a385) => a385 + 1
plot(f385(385))
f386(a386) => a386 + 1
plot(f386(386))
f387(a387) => a387 + 1
plot(f387(387))
f388(a388) => a388 + 1
plot(f388(388))
f389(a389) => a389 + 1
plot(f389(389))
f390(a390) => a390 + 1
plot(f390(390))
f391(a391) => a391 + 1
plot(f391(391))
f392(a392) => a392 + 1
plot(f392(392))
f393(a393) => a393 + 1
plot(f393(393))
f394(a394) => a394 + 1
plot(f394(394))
f395(a395) => a395 + 1
plot(f395(395))
f396(a396) => a396 + 1
plot(f396(396))
f397(a397) => a397 + 1
plot(f397(397))
f398(a398) => a398 + 1
plot(f398(398))
f399(a399) => a399 + 1
plot(f399(399))
f400(a400) => a400 + 1
plot(f400(400))
f401(a401) => a401 + 1
plot(f401(401))
f402(a402) => a402 + 1
plot(f402(402))
f403(a403) => a403 + 1
plot(f403(403))
f404(a404) => a404 + 1
plot(f404(404))
f405(a405) => a405 + 1
plot(f405(405))
f406(a406) => a406 + 1
plot(f406(406))
f407(a407) => a407 + 1
plot(f407(407))
f408(a408) => a408 + 1
plot(f408(408))
f409(a409) => a409 + 1
plot(f409(409))
f410(a410) => a410 + 1
plot(f410(410))
f411(a411) => a411 + 1
plot(f411(411))
f412(a412) => a412 + 1
plot(f412(412))
f413(a413) => a413 + 1
plot(f413(413))
f414(a414) => a414 + 1
plot(f414(414))
f415(a415) => a415 + 1
plot(f415(415))
f416(a416) => a416 + 1
plot(f416(416))
f417(a417) => a417 + 1
plot(f417(417))
f418(a418) => a418 + 1
plot(f418(418))
f419(a419) => a419 + 1
plot(f419(419))
f420(a420) => a420 + 1
plot(f420(420))
f421(a421) => a421 + 1
plot(f421(421))
f422(a422) => a422 + 1
plot(f422(422))
f423(a423) => a423 + 1
plot(f423(423))
f424(a424) => a424 + 1
plot(f424(424))
f425(a425) => a425 + 1
plot(f425(425))
f426(a426) => a426 + 1
plot(f426(426))
f427(a427) => a427 + 1
plot(f427(427))
f428(a428) => a428 + 1
plot(f428(428))
f429(a429) => a429 + 1
plot(f429(429))
f430(a430) => a430 + 1
plot(f430(430))
f431(a431) => a431 + 1
plot(f431(431))
f432(a432) => a432 + 1
plot(f432(432))
f433(a433) => a433 + 1
plot(f433(433))
f434(a434) => a434 + 1
plot(f434(434))
f435(a435) => a435 + 1
plot(f435(435))
f436(a436) => a436 + 1
plot(f436(436))
f437(a437) => a437 + 1
plot(f437(437))
f438(a438) => a438 + 1
plot(f438(438))
f439(a439) => a439 + 1
plot(f439(439))
f440(a440) => a440 + 1
plot(f440(440))
f441(a441) => a441 + 1
plot(f441(441))
f442(a442) => a442 + 1
plot(f442(442))
f443(a443) => a443 + 1
plot(f443(443))
f444(a444) => a444 + 1
plot(f444(444))
f445(a445) => a445 + 1
plot(f445(445))
f446(a446) => a446 + 1
plot(f446(446))
f447(a447) => a447 + 1
plot(f447(447))
f448(a448) => a448 + 1
plot(f448(448))
f449(a449) => a449 + 1
plot(f449(449))
f450(a450) => a450 + 1
plot(f450(450))
f451(a451) => a451 + 1
plot(f451(451))
f452(a452) => a452 + 1
plot(f452(452))
f453(a453) => a453 + 1
plot(f453(453))
f454(a454) => a454 + 1
plot(f454(454))
f455(a455) => a455 + 1
plot(f455(455))
f456(a456) => a456 + 1
plot(f456(456))
f457(a457) => a457 + 1
plot(f457(457))
f458(a458) => a458 + 1
plot(f458(458))
f459(a459) => a459 + 1
plot(f459(459))
f460(a460) => a460 + 1
plot(f460(460))
f461(a461) => a461 + 1
plot(f461(461))
f462(a462) => a462 + 1
plot(f462(462))
f463(a463) => a463 + 1
plot(f463(463))
f464(a464) => a464 + 1
plot(f464(464))
f465(a465) => a465 + 1
plot(f465(465))
f466(a466) => a466 + 1
plot(f466(466))
f467(a467) => a467 + 1
plot(f467(467))
f468(a468) => a468 + 1
plot(f468(468))
f469(a469) => a469 + 1
plot(f469(469))
f470(a470) => a470 + 1
plot(f470(470))
f471(a471) => a471 + 1
plot(f471(471))
f472(a472) => a472 + 1
plot(f472(472))
f473(a473) => a473 + 1
plot(f473(473))
f474(a474) => a474 + 1
plot(f474(474))
f475(a475) => a475 + 1
plot(f475(475))
f476(a476) => a476 + 1
plot(f476(476))
f477(a477) => a477 + 1
plot(f477(477))
f478(a478) => a478 + 1
plot(f478(478))
f479(a479) => a479 + 1
plot(f479(479))
f480(a480) => a480 + 1
plot(f480(480))
f481(a481) => a481 + 1
plot(f481(481))
f482(a482) => a482 + 1
plot(f482(482))
f483(a483) => a483 + 1
plot(f483(483))
f484(a484) => a484 + 1
plot(f484(484))
f485(a485) => a485 + 1
plot(f485(485))
f486(a486) => a486 + 1
plot(f486(486))
f487(a487) => a487 + 1
plot(f487(487))
f488(a488) => a488 + 1
plot(f488(488))
f489(a489) => a489 + 1
plot(f489(489))
f490(a490) => a490 + 1
plot(f490(490))
f491(a491) => a491 + 1
plot(f491(491))
f492(a492) => a492 + 1
plot(f492(492))
f493(a493) => a493 + 1
plot(f493(493))
f494(a494) => a494 + 1
plot(f494(494))
f495(a495) => a495 + 1
plot(f495(495))
f496(a496) => a496 + 1
plot(f496(496))
f497(a497) => a497 + 1
plot(f497(497))
f498(a498) => a498 + 1
plot(f498(498))
f499(a499) => a499 + 1
plot(f499(499))
f500(a500) => a500 + 1
plot(f500(500))
f501(a501) => a501 + 1
plot(f501(501))
f502(a502) => a502 + 1
plot(f502(502))
f503(a503) => a503 + 1
plot(f503(503))
f504(a504) => a504 + 1
plot(f504(504))
f505(a505) => a505 + 1
plot(f505(505))
f506(a506) => a506 + 1
plot(f506(506))
f507(a507) => a507 + 1
plot(f507(507))
f508(a508) => a508 + 1
plot(f508(508))
f509(a509) => a509 + 1
plot(f509(509))
f510(a510) => a510 + 1
plot(f510(510))
f511(a511) => a511 + 1
plot(f511(511))
f512(a512) => a512 + 1
plot(f512(512))
f513(a513) => a513 + 1
plot(f513(513))
f514(a514) => a514 + 1
plot(f514(514))
f515(a515) => a515 + 1
plot(f515(515))
f516(a516) => a516 + 1
plot(f516(516))
f517(a517) => a517 + 1
plot(f517(517))
f518(a518) => a518 + 1
plot(f518(518))
f519(a519) => a519 + 1
plot(f519(519))
f520(a520) => a520 + 1
plot(f520(520))
f521(a521) => a521 + 1
plot(f521(521))
f522(a522) => a522 + 1
plot(f522(522))
f523(a523) => a523 + 1
plot(f523(523))
f524(a524) => a524 + 1
plot(f524(524))
f525(a525) => a525 + 1
plot(f525(525))
f526(a526) => a526 + 1
plot(f526(526))
f527(a527) => a527 + 1
plot(f527(527))
f528(a528) => a528 + 1
plot(f528(528))
f529(a529) => a529 + 1
plot(f529(529))
f530(a530) => a530 + 1
plot(f530(530))
f531(a531) => a531 + 1
plot(f531(531))
f532(a532) => a532 + 1
plot(f532(532))
f533(a533) => a533 + 1
plot(f533(533))
f534(a534) => a534 + 1
plot(f534(534))
f535(a535) => a535 + 1
plot(f535(535))
f536(a536) => a536 + 1
plot(f536(536))
f537(a537) => a537 + 1
plot(f537(537))
f538(a538) => a538 + 1
plot(f538(538))
f539(a539) => a539 + 1
plot(f539(539))
f540(a540) => a540 + 1
plot(f540(540))
f541(a541) => a541 + 1
plot(f541(541))
f542(a542) => a542 + 1
plot(f542(542))
f543(a543) => a543 + 1
plot(f543(543))
f544(a544) => a544 + 1
plot(f544(544))
f545(a545) => a545 + 1
plot(f545(545))
f546(a546) => a546 + 1
plot(f546(546))
f547(a547) => a547 + 1
plot(f547(547))
f548(a548) => a548 + 1
plot(f548(548))
f549(a549) => a549 + 1
plot(f549(549))
f550(a550) => a550 + 1
plot(f550(550))
f551(a551) => a551 + 1
plot(f551(551))
f552(a552) => a552 + 1
plot(f552(552))
f553(a553) => a553 + 1
plot(f553(553))
f554(a554) => a554 + 1
plot(f554(554))
f555(a555) => a555 + 1
plot(f555(555))
f556(a556) => a556 + 1
plot(f556(556))
f557(a557) => a557 + 1
plot(f557(557))
f558(a558) => a558 + 1
plot(f558(558))
f559(a559) => a559 + 1
plot(f559(559))
f560(a560) => a560 + 1
plot(f560(560))
f561(a561) => a561 + 1
plot(f561(561))
f562(a562) => a562 + 1
plot(f562(562))
f563(a563) => a563 + 1
plot(f563(563))
f564(a564) => a564 + 1
plot(f564(564))
f565(a565) => a565 + 1
plot(f565(565))
f566(a566) => a566 + 1
plot(f566(566))
f567(a567) => a567 + 1
plot(f567(567))
f568(a568) => a568 + 1
plot(f568(568))
f569(a569) => a569 + 1
plot(f569(569))
f570(a570) => a570 + 1
plot(f570(570))
f571(a571) => a571 + 1
plot(f571(571))
f572(a572) => a572 + 1
plot(f572(572))
f573(a573) => a573 + 1
plot(f573(573))
f574(a574) => a574 + 1
plot(f574(574))
f575(a575) => a575 + 1
plot(f575(575))
f576(a576) => a576 + 1
plot(f576(576))
f577(a577) => a577 + 1
plot(f577(577))
f578(a578) => a578 + 1
plot(f578(578))
f579(a579) => a579 + 1
plot(f579(579))
f580(a580) => a580 + 1
plot(f580(580))
f581(a581) => a581 + 1
plot(f581(581))
f582(a582) => a582 + 1
plot(f582(582))
f583(a583) => a583 + 1
plot(f583(583))
f584(a584) => a584 + 1
plot(f584(584))
f585(a585) => a585 + 1
plot(f585(585))
f586(a586) => a586 + 1
plot(f586(586))
f587(a587) => a587 + 1
plot(f587(587))
f588(a588) => a588 + 1
plot(f588(588))
f589(a589) => a589 + 1
plot(f589(589))
f590(a590) => a590 + 1
plot(f590(590))
f591(a591) => a591 + 1
plot(f591(591))
f592(a592) => a592 + 1
plot(f592(592))
f593(a593) => a593 + 1
plot(f593(593))
f594(a594) => a594 + 1
plot(f594(594))
f595(a595) => a595 + 1
plot(f595(595))
f596(a596) => a596 + 1
plot(f596(596))
f597(a597) => a597 + 1
plot(f597(597))
f598(a598) => a598 + 1
plot(f598(598))
f599(a599) => a599 + 1
plot(f599(599))
f600(a600) => a600 + 1
plot(f600(600))
f601(a601) => a601 + 1
plot(f601(601))
f602(a602) => a602 + 1
plot(f602(602))
f603(a603) => a603 + 1
plot(f603(603))
f604(a604) => a604 + 1
plot(f604(604))
f605(a605) => a605 + 1
plot(f605(605))
f606(a606) => a606 + 1
plot(f606(606))
f607(a607) => a607 + 1
plot(f607(607))
f608(a608) => a608 + 1
plot(f608(608))
f609(a609) => a609 + 1
plot(f609(609))
f610(a610) => a610 + 1
plot(f610(610))
f611(a611) => a611 + 1
plot(f611(611))
f612(a612) => a612 + 1
plot(f612(612))
f613(a613) => a613 + 1
plot(f613(613))
f614(a614) => a614 + 1
plot(f614(614))
f615(a615) => a615 + 1
plot(f615(615))
f616(a616) => a616 + 1
plot(f616(616))
f617(a617) => a617 + 1
plot(f617(617))
f618(a618) => a618 + 1
plot(f618(618))
f619(a619) => a619 + 1
plot(f619(619))
f620(a620) => a620 + 1
plot(f620(620))
f621(a621) => a621 + 1
plot(f621(621))
f622(a622) => a622 + 1
plot(f622(622))
f623(a623) => a623 + 1
plot(f623(623))
f624(a624) => a624 + 1
plot(f624(624))
f625(a625) => a625 + 1
plot(f625(625))
f626(a626) => a626 + 1
plot(f626(626))
f627(a627) => a627 + 1
plot(f627(627))
f628(a628) => a628 + 1
plot(f628(628))
f629(a629) => a629 + 1
plot(f629(629))
f630(a630) => a630 + 1
plot(f630(630))
f631(a631) => a631 + 1
plot(f631(631))
f632(a632) => a632 + 1
plot(f632(632))
f633(a633) => a633 + 1
plot(f633(633))
f634(a634) => a634 + 1
plot(f634(634))
f635(a635) => a635 + 1
plot(f635(635))
f636(a636) => a636 + 1
plot(f636(636))
f637(a637) => a637 + 1
plot(f637(637))
f638(a638) => a638 + 1
plot(f638(638))
f639(a639) => a639 + 1
plot(f639(639))
f640(a640) => a640 + 1
plot(f640(640))
f641(a641) => a641 + 1
plot(f641(641))
f642(a642) => a642 + 1
plot(f642(642))
f643(a643) => a643 + 1
plot(f643(643))
f644(a644) => a644 + 1
plot(f644(644))
f645(a645) => a645 + 1
plot(f645(645))
f646(a646) => a646 + 1
plot(f646(646))
f647(a647) => a647 + 1
plot(f647(647))
f648(a648) => a648 + 1
plot(f648(648))
f649(a649) => a649 + 1
plot(f649(649))
f650(a650) => a650 + 1
plot(f650(650))
f651(a651) => a651 + 1
plot(f651(651))
f652(a652) => a652 + 1
plot(f652(652))
f653(a653) => a653 + 1
plot(f653(653))
f654(a654) => a654 + 1
plot(f654(654))
f655(a655) => a655 + 1
plot(f655(655))
f656(a656) => a656 + 1
plot(f656(656))
f657(a657) => a657 + 1
plot(f657(657))
f658(a658) => a658 + 1
plot(f658(658))
f659(a659) => a659 + 1
plot(f659(659))
f660(a660) => a660 + 1
plot(f660(660))
f661(a661) => a661 + 1
plot(f661(661))
f662(a662) => a662 + 1
plot(f662(662))
f663(a663) => a663 + 1
plot(f663(663))
f664(a664) => a664 + 1
plot(f664(664))
f665(a665) => a665 + 1
plot(f665(665))
f666(a666) => a666 + 1
plot(f666(666))
f667(a667) => a667 + 1
plot(f667(667))
f668(a668) => a668 + 1
plot(f668(668))
f669(a669) => a669 + 1
plot(f669(669))
f670(a670) => a670 + 1
plot(f670(670))
f671(a671) => a671 + 1
plot(f671(671))
f672(a672) => a672 + 1
plot(f672(672))
f673(a673) => a673 + 1
plot(f673(673))
f674(a674) => a674 + 1
plot(f674(674))
f675(a675) => a675 + 1
plot(f675(675))
f676(a676) => a676 + 1
plot(f676(676))
f677(a677) => a677 + 1
plot(f677(677))
f678(a678) => a678 + 1
plot(f678(678))
f679(a679) => a679 + 1
plot(f679(679))
f680(a680) => a680 + 1
plot(f680(680))
f681(a681) => a681 + 1
plot(f681(681))
f682(a682) => a682 + 1
plot(f682(682))
f683(a683) => a683 + 1
plot(f683(683))
f684(a684) => a684 + 1
plot(f684(684))
f685(a685) => a685 + 1
plot(f685(685))
f686(a686) => a686 + 1
plot(f686(686))
f687(a687) => a687 + 1
plot(f687(687))
f688(a688) => a688 + 1
plot(f688(688))
f689(a689) => a689 + 1
plot(f689(689))
f690(a690) => a690 + 1
plot(f690(690))
f691(a691) => a691 + 1
plot(f691(691))
f692(a692) => a692 + 1
plot(f692(692))
f693(a693) => a693 + 1
plot(f693(693))
f694(a694) => a694 + 1
plot(f694(694))
f695(a695) => a695 + 1
plot(f695(695))
f696(a696) => a696 + 1
plot(f696(696))
f697(a697) => a697 + 1
plot(f697(697))
f698(a698) => a698 + 1
plot(f698(698))
f699(a699) => a699 + 1
plot(f699(699))
f700(a700) => a700 + 1
plot(f700(700))
f701(a701) => a701 + 1
plot(f701(701))
f702(a702) => a702 + 1
plot(f702(702))
f703(a703) => a703 + 1
plot(f703(703))
f704(a704) => a704 + 1
plot(f704(704))
f705(a705) => a705 + 1
plot(f705(705))
f706(a706) => a706 + 1
plot(f706(706))
f707(a707) => a707 + 1
plot(f707(707))
f708(a708) => a708 + 1
plot(f708(708))
f709(a709) => a709 + 1
plot(f709(709))
f710(a710) => a710 + 1
plot(f710(710))
f711(a711) => a711 + 1
plot(f711(711))
f712(a712) => a712 + 1
plot(f712(712))
f713(a713) => a713 + 1
plot(f713(713))
f714(a714) => a714 + 1
plot(f714(714))
f715(a715) => a715 + 1
plot(f715(715))
f716(a716) => a716 + 1
plot(f716(716))
f717(a717) => a717 + 1
plot(f717(717))
f718(a718) => a718 + 1
plot(f718(718))
f719(a719) => a719 + 1
plot(f719(719))
f720(a720) => a720 + 1
plot(f720(720))
f721(a721) => a721 + 1
plot(f721(721))
f722(a722) => a722 + 1
plot(f722(722))
f723(a723) => a723 + 1
plot(f723(723))
f724(a724) => a724 + 1
plot(f724(724))
f725(a725) => a725 + 1
plot(f725(725))
f726(a726) => a726 + 1
plot(f726(726))
f727(a727) => a727 + 1
plot(f727(727))
f728(a728) => a728 + 1
plot(f728(728))
f729(a729) => a729 + 1
plot(f729(729))
f730(a730) => a730 + 1
plot(f730(730))
f731(a731) => a731 + 1
plot(f731(731))
f732(a732) => a732 + 1
plot(f732(732))
f733(a733) => a733 + 1
plot(f733(733))
f734(a734) => a734 + 1
plot(f734(734))
f735(a735) => a735 + 1
plot(f735(735))
f736(a736) => a736 + 1
plot(f736(736))
f737(a737) => a737 + 1
plot(f737(737))
f738(a738) => a738 + 1
plot(f738(738))
f739(a739) => a739 + 1
plot(f739(739))
f740(a740) => a740 + 1
plot(f740(740))
f741(a741) => a741 + 1
plot(f741(741))
f742(a742) => a742 + 1
plot(f742(742))
f743(a743) => a743 + 1
plot(f743(743))
f744(a744) => a744 + 1
plot(f744(744))
f745(a745) => a745 + 1
plot(f745(745))
f746(a746) => a746 + 1
plot(f746(746))
f747(a747) => a747 + 1
plot(f747(747))
f748(a748) => a748 + 1
plot(f748(748))
f749(a749) => a749 + 1
plot(f749(749))
f750(a750) => a750 + 1
plot(f750(750))
f751(a751) => a751 + 1
plot(f751(751))
f752(a752) => a752 + 1
plot(f752(752))
f753(a753) => a753 + 1
plot(f753(753))
f754(a754) => a754 + 1
plot(f754(754))
f755(a755) => a755 + 1
plot(f755(755))
f756(a756) => a756 + 1
plot(f756(756))
f757(a757) => a757 + 1
plot(f757(757))
f758(a758) => a758 + 1
plot(f758(758))
f759(a759) => a759 + 1
plot(f759(759))
f760(a760) => a760 + 1
plot(f760(760))
f761(a761) => a761 + 1
plot(f761(761))
f762(a762) => a762 + 1
plot(f762(762))
f763(a763) => a763 + 1
plot(f763(763))
f764(a764) => a764 + 1
plot(f764(764))
f765(a765) => a765 + 1
plot(f765(765))
f766(a766) => a766 + 1
plot(f766(766))
f767(a767) => a767 + 1
plot(f767(767))
f768(a768) => a768 + 1
plot(f768(768))
f769(a769) => a769 + 1
plot(f769(769))
f770(a770) => a770 + 1
plot(f770(770))
f771(a771) => a771 + 1
plot(f771(771))
f772(a772) => a772 + 1
plot(f772(772))
f773(a773) => a773 + 1
plot(f773(773))
f774(a774) => a774 + 1
plot(f774(774))
f775(a775) => a775 + 1
plot(f775(775))
f776(a776) => a776 + 1
plot(f776(776))
f777(a777) => a777 + 1
plot(f777(777))
f778(a778) => a778 + 1
plot(f778(778))
f779(a779) => a779 + 1
plot(f779(779))
f780(a780) => a780 + 1
plot(f780(780))
f781(a781) => a781 + 1
plot(f781(781))
f782(a782) => a782 + 1
plot(f782(782))
f783(a783) => a783 + 1
plot(f783(783))
f784(a784) => a784 + 1
plot(f784(784))
f785(a785) => a785 + 1
plot(f785(785))
f786(a786) => a786 + 1
plot(f786(786))
f787(a787) => a787 + 1
plot(f787(787))
f788(a788) => a788 + 1
plot(f788(788))
f789(a789) => a789 + 1
plot(f789(789))
f790(a790) => a790 + 1
plot(f790(790))
f791(a791) => a791 + 1
plot(f791(791))
f792(a792) => a792 + 1
plot(f792(792))
f793(a793) => a793 + 1
plot(f793(793))
f794(a794) => a794 + 1
plot(f794(794))
f795(a795) => a795 + 1
plot(f795(795))
f796(a796) => a796 + 1
plot(f796(796))
f797(a797) => a797 + 1
plot(f797(797))
f798(a798) => a798 + 1
plot(f798(798))
f799(a799) => a799 + 1
plot(f799(799))
f800(a800) => a800 + 1
plot(f800(800))
f801(a801) => a801 + 1
plot(f801(801))
f802(a802) => a802 + 1
plot(f802(802))
f803(a803) => a803 + 1
plot(f803(803))
f804(a804) => a804 + 1
plot(f804(804))
f805(a805) => a805 + 1
plot(f805(805))
f806(a806) => a806 + 1
plot(f806(806))
f807(a807) => a807 + 1
plot(f807(807))
f808(a808) => a808 + 1
plot(f808(808))
f809(a809) => a809 + 1
plot(f809(809))
f810(a810) => a810 + 1
plot(f810(810))
f811(a811) => a811 + 1
plot(f811(811))
f812(a812) => a812 + 1
plot(f812(812))
f813(a813) => a813 + 1
plot(f813(813))
f814(a814) => a814 + 1
plot(f814(814))
f815(a815) => a815 + 1
plot(f815(815))
f816(a816) => a816 + 1
plot(f816(816))
f817(a817) => a817 + 1
plot(f817(817))
f818(a818) => a818 + 1
plot(f818(818))
f819(a819) => a819 + 1
plot(f819(819))
f820(a820) => a820 + 1
plot(f820(820))
f821(a821) => a821 + 1
plot(f821(821))
f822(a822) => a822 + 1
plot(f822(822))
f823(a823) => a823 + 1
plot(f823(823))
f824(a824) => a824 + 1
plot(f824(824))
f825(a825) => a825 + 1
plot(f825(825))
f826(a826) => a826 + 1
plot(f826(826))
f827(a827) => a827 + 1
plot(f827(827))
f828(a828) => a828 + 1
plot(f828(828))
f829(a829) => a829 + 1
plot(f829(829))
f830(a830) => a830 + 1
plot(f830(830))
f831(a831) => a831 + 1
plot(f831(831))
f832(a832) => a832 + 1
plot(f832(832))
f833(a833) => a833 + 1
plot(f833(833))
f834(a834) => a834 + 1
plot(f834(834))
f835(a835) => a835 + 1
plot(f835(835))
f836(a836) => a836 + 1
plot(f836(836))
f837(a837) => a837 + 1
plot(f837(837))
f838(a838) => a838 + 1
plot(f838(838))
f839(a839) => a839 + 1
plot(f839(839))
f840(a840) => a840 + 1
plot(f840(840))
f841(a841) => a841 + 1
plot(f841(841))
f842(a842) => a842 + 1
plot(f842(842))
f843(a843) => a843 + 1
plot(f843(843))
f844(a844) => a844 + 1
plot(f844(844))
f845(a845) => a845 + 1
plot(f845(845))
f846(a846) => a846 + 1
plot(f846(846))
f847(a847) => a847 + 1
plot(f847(847))
f848(a848) => a848 + 1
plot(f848(848))
f849(a849) => a849 + 1
plot(f849(849))
f850(a850) => a850 + 1
plot(f850(850))
f851(a851) => a851 + 1
plot(f851(851))
f852(a852) => a852 + 1
plot(f852(852))
f853(a853) => a853 + 1
plot(f853(853))
f854(a854) => a854 + 1
plot(f854(854))
f855(a855) => a855 + 1
plot(f855(855))
f856(a856) => a856 + 1
plot(f856(856))
f857(a857) => a857 + 1
plot(f857(857))
f858(a858) => a858 + 1
plot(f858(858))
f859(a859) => a859 + 1
plot(f859(859))
f860(a860) => a860 + 1
plot(f860(860))
f861(a861) => a861 + 1
plot(f861(861))
f862(a862) => a862 + 1
plot(f862(862))
f863(a863) => a863 + 1
plot(f863(863))
f864(a864) => a864 + 1
plot(f864(864))
f865(a865) => a865 + 1
plot(f865(865))
f866(a866) => a866 + 1
plot(f866(866))
f867(a867) => a867 + 1
plot(f867(867))
f868(a868) => a868 + 1
plot(f868(868))
f869(a869) => a869 + 1
plot(f869(869))
f870(a870) => a870 + 1
plot(f870(870))
f871(a871) => a871 + 1
plot(f871(871))
f872(a872) => a872 + 1
plot(f872(872))
f873(a873) => a873 + 1
plot(f873(873))
f874(a874) => a874 + 1
plot(f874(874))
f875(a875) => a875 + 1
plot(f875(875))
f876(a876) => a876 + 1
plot(f876(876))
f877(a877) => a877 + 1
plot(f877(877))
f878(a878) => a878 + 1
plot(f878(878))
f879(a879) => a879 + 1
plot(f879(879))
f880(a880) => a880 + 1
plot(f880(880))
f881(a881) => a881 + 1
plot(f881(881))
f882(a882) => a882 + 1
plot(f882(882))
f883(a883) => a883 + 1
plot(f883(883))
f884(a884) => a884 + 1
plot(f884(884))
f885(a885) => a885 + 1
plot(f885(885))
f886(a886) => a886 + 1
plot(f886(886))
f887(a887) => a887 + 1
plot(f887(887))
f888(a888) => a888 + 1
plot(f888(888))
f889(a889) => a889 + 1
plot(f889(889))
f890(a890) => a890 + 1
plot(f890(890))
f891(a891) => a891 + 1
plot(f891(891))
f892(a892) => a892 + 1
plot(f892(892))
f893(a893) => a893 + 1
plot(f893(893))
f894(a894) => a894 + 1
plot(f894(894))
f895(a895) => a895 + 1
plot(f895(895))
f896(a896) => a896 + 1
plot(f896(896))
f897(a897) => a897 + 1
plot(f897(897))
f898(a898) => a898 + 1
plot(f898(898))
f899(a899) => a899 + 1
plot(f899(899))
f900(a900) => a900 + 1
plot(f900(900))
f901(a901) => a901 + 1
plot(f901(901))
f902(a902) => a902 + 1
plot(f902(902))
f903(a903) => a903 + 1
plot(f903(903))
f904(a904) => a904 + 1
plot(f904(904))
f905(a905) => a905 + 1
plot(f905(905))
f906(a906) => a906 + 1
plot(f906(906))
f907(a907) => a907 + 1
plot(f907(907))
f908(a908) => a908 + 1
plot(f908(908))
f909(a909) => a909 + 1
plot(f909(909))
f910(a910) => a910 + 1
plot(f910(910))
f911(a911) => a911 + 1
plot(f911(911))
f912(a912) => a912 + 1
plot(f912(912))
f913(a913) => a913 + 1
plot(f913(913))
f914(a914) => a914 + 1
plot(f914(914))
f915(a915) => a915 + 1
plot(f915(915))
f916(a916) => a916 + 1
plot(f916(916))
f917(a917) => a917 + 1
plot(f917(917))
f918(a918) => a918 + 1
plot(f918(918))
f919(a919) => a919 + 1
plot(f919(919))
f920(a920) => a920 + 1
plot(f920(920))
f921(a921) => a921 + 1
plot(f921(921))
f922(a922) => a922 + 1
plot(f922(922))
f923(a923) => a923 + 1
plot(f923(923))
f924(a924) => a924 + 1
plot(f924(924))
f925(a925) => a925 + 1
plot(f925(925))
f926(a926) => a926 + 1
plot(f926(926))
f927(a927) => a927 + 1
plot(f927(927))
f928(a928) => a928 + 1
plot(f928(928))
f929(a929) => a929 + 1
plot(f929(929))
f930(a930) => a930 + 1
plot(f930(930))
f931(a931) => a931 + 1
plot(f931(931))
f932(a932) => a932 + 1
plot(f932(932))
f933(a933) => a933 + 1
plot(f933(933))
f934(a934) => a934 + 1
plot(f934(934))
f935(a935) => a935 + 1
plot(f935(935))
f936(a936) => a936 + 1
plot(f936(936))
f937(a937) => a937 + 1
plot(f937(937))
f938(a938) => a938 + 1
plot(f938(938))
f939(a939) => a939 + 1
plot(f939(939))
f940(a940) => a940 + 1
plot(f940(940))
f941(a941) => a941 + 1
plot(f941(941))
f942(a942) => a942 + 1
plot(f942(942))
f943(a943) => a943 + 1
plot(f943(943))
f944(a944) => a944 + 1
plot(f944(944))
f945(a945) => a945 + 1
plot(f945(945))
f946(a946) => a946 + 1
plot(f946(946))
f947(a947) => a947 + 1
plot(f947(947))
f948(a948) => a948 + 1
plot(f948(948))
f949(a949) => a949 + 1
plot(f949(949))
f950(a950) => a950 + 1
plot(f950(950))
f951(a951) => a951 + 1
plot(f951(951))
f952(a952) => a952 + 1
plot(f952(952))
f953(a953) => a953 + 1
plot(f953(953))
f954(a954) => a954 + 1
plot(f954(954))
f955(a955) => a955 + 1
plot(f955(955))
f956(a956) => a956 + 1
plot(f956(956))
f957(a957) => a957 + 1
plot(f957(957))
f958(a958) => a958 + 1
plot(f958(958))
f959(a959) => a959 + 1
plot(f959(959))
f960(a960) => a960 + 1
plot(f960(960))
f961(a961) => a961 + 1
plot(f961(961))
f962(a962) => a962 + 1
plot(f962(962))
f963(a963) => a963 + 1
plot(f963(963))
f964(a964) => a964 + 1
plot(f964(964))
f965(a965) => a965 + 1
plot(f965(965))
f966(a966) => a966 + 1
plot(f966(966))
f967(a967) => a967 + 1
plot(f967(967))
f968(a968) => a968 + 1
plot(f968(968))
f969(a969) => a969 + 1
plot(f969(969))
f970(a970) => a970 + 1
plot(f970(970))
f971(a971) => a971 + 1
plot(f971(971))
f972(a972) => a972 + 1
plot(f972(972))
f973(a973) => a973 + 1
plot(f973(973))
f974(a974) => a974 + 1
plot(f974(974))
f975(a975) => a975 + 1
plot(f975(975))
f976(a976) => a976 + 1
plot(f976(976))
f977(a977) => a977 + 1
plot(f977(977))
f978(a978) => a978 + 1
plot(f978(978))
f979(a979) => a979 + 1
plot(f979(979))
f980(a980) => a980 + 1
plot(f980(980))
f981(a981) => a981 + 1
plot(f981(981))
f982(a982) => a982 + 1
plot(f982(982))
f983(a983) => a983 + 1
plot(f983(983))
f984(a984) => a984 + 1
plot(f984(984))
f985(a985) => a985 + 1
plot(f985(985))
f986(a986) => a986 + 1
plot(f986(986))
f987(a987) => a987 + 1
plot(f987(987))
f988(a988) => a988 + 1
plot(f988(988))
f989(a989) => a989 + 1
plot(f989(989))
f990(a990) => a990 + 1
plot(f990(990))
f991(a991) => a991 + 1
plot(f991(991))
f992(a992) => a992 + 1
plot(f992(992))
f993(a993) => a993 + 1
plot(f993(993))
f994(a994) => a994 + 1
plot(f994(994))
f995(a995) => a995 + 1
plot(f995(995))
f996(a996) => a996 + 1
plot(f996(996))
f997(a997) => a997 + 1
plot(f997(997))
f998(a998) => a998 + 1
plot(f998(998))
f999(a999) => a999 + 1
plot(f999(999))
f1000(a1000) => a1000 + 1
plot(f1000(1000))
f1001(a1001) => a1001 + 1
plot(f1001(1001))
f1002(a1002) => a1002 + 1
plot(f1002(1002))
f1003(a1003) => a1003 + 1
plot(f1003(1003))
f1004(a1004) => a1004 + 1
plot(f1004(1004))
f1005(a1005) => a1005 + 1
plot(f1005(1005))
f1006(a1006) => a1006 + 1
plot(f1006(1006))
f1007(a1007) => a1007 + 1
plot(f1007(1007))
f1008(a1008) => a1008 + 1
plot(f1008(1008))
f1009(a1009) => a1009 + 1
plot(f1009(1009))
f1010(a1010) => a1010 + 1
plot(f1010(1010))
f1011(a1011) => a1011 + 1
plot(f1011(1011))
f1012(a1012) => a1012 + 1
plot(f1012(1012))
f1013(a1013) => a1013 + 1
plot(f1013(1013))
f1014(a1014) => a1014 + 1
plot(f1014(1014))
f1015(a1015) => a1015 + 1
plot(f1015(1015))
f1016(a1016) => a1016 + 1
plot(f1016(1016))
f1017(a1017) => a1017 + 1
plot(f1017(1017))
f1018(a1018) => a1018 + 1
plot(f1018(1018))
f1019(a1019) => a1019 + 1
plot(f1019(1019))
f1020(a1020) => a1020 + 1
plot(f1020(1020))
f1021(a1021) => a1021 + 1
plot(f1021(1021))
f1022(a1022) => a1022 + 1
plot(f1022(1022))
f1023(a1023) => a1023 + 1
plot(f1023(1023))
f1024(a1024) => a1024 + 1
plot(f1024(1024))
f1025(a1025) => a1025 + 1
plot(f1025(1025))
f1026(a1026) => a1026 + 1
plot(f1026(1026))
f1027(a1027) => a1027 + 1
plot(f1027(1027))
f1028(a1028) => a1028 + 1
plot(f1028(1028))
f1029(a1029) => a1029 + 1
plot(f1029(1029))
f1030(a1030) => a1030 + 1
plot(f1030(1030))
f1031(a1031) => a1031 + 1
plot(f1031(1031))
f1032(a1032) => a1032 + 1
plot(f1032(1032))
f1033(a1033) => a1033 + 1
plot(f1033(1033))
f1034(a1034) => a1034 + 1
plot(f1034(1034))
f1035(a1035) => a1035 + 1
plot(f1035(1035))
f1036(a1036) => a1036 + 1
plot(f1036(1036))
f1037(a1037) => a1037 + 1
plot(f1037(1037))
f1038(a1038) => a1038 + 1
plot(f1038(1038))
f1039(a1039) => a1039 + 1
plot(f1039(1039))
f1040(a1040) => a1040 + 1
plot(f1040(1040))
f1041(a1041) => a1041 + 1
plot(f1041(1041))
f1042(a1042) => a1042 + 1
plot(f1042(1042))
f1043(a1043) => a1043 + 1
plot(f1043(1043))
f1044(a1044) => a1044 + 1
plot(f1044(1044))
f1045(a1045) => a1045 + 1
plot(f1045(1045))
f1046(a1046) => a1046 + 1
plot(f1046(1046))
f1047(a1047) => a1047 + 1
plot(f1047(1047))
f1048(a1048) => a1048 + 1
plot(f1048(1048))
f1049(a1049) => a1049 + 1
plot(f1049(1049))
f1050(a1050) => a1050 + 1
plot(f1050(1050))
f1051(a1051) => a1051 + 1
plot(f1051(1051))
f1052(a1052) => a1052 + 1
plot(f1052(1052))
f1053(a1053) => a1053 + 1
plot(f1053(1053))
f1054(a1054) => a1054 + 1
plot(f1054(1054))
f1055(a1055) => a1055 + 1
plot(f1055(1055))
f1056(a1056) => a1056 + 1
plot(f1056(1056))
f1057(a1057) => a1057 + 1
plot(f1057(1057))
f1058(a1058) => a1058 + 1
plot(f1058(1058))
f1059(a1059) => a1059 + 1
plot(f1059(1059))
f1060(a1060) => a1060 + 1
plot(f1060(1060))
f1061(a1061) => a1061 + 1
plot(f1061(1061))
f1062(a1062) => a1062 + 1
plot(f1062(1062))
f1063(a1063) => a1063 + 1
plot(f1063(1063))
f1064(a1064) => a1064 + 1
plot(f1064(1064))
f1065(a1065) => a1065 + 1
plot(f1065(1065))
f1066(a1066) => a1066 + 1
plot(f1066(1066))
f1067(a1067) => a1067 + 1
plot(f1067(1067))
f1068(a1068) => a1068 + 1
plot(f1068(1068))
f1069(a1069) => a1069 + 1
plot(f1069(1069))
f1070(a1070) => a1070 + 1
plot(f1070(1070))
f1071(a1071) => a1071 + 1
plot(f1071(1071))
f1072(a1072) => a1072 + 1
plot(f1072(1072))
f1073(a1073) => a1073 + 1
plot(f1073(1073))
f1074(a1074) => a1074 + 1
plot(f1074(1074))
f1075(a1075) => a1075 + 1
plot(f1075(1075))
f1076(a1076) => a1076 + 1
plot(f1076(1076))
f1077(a1077) => a1077 + 1
plot(f1077(1077))
f1078(a1078) => a1078 + 1
plot(f1078(1078))
f1079(a1079) => a1079 + 1
plot(f1079(1079))
f1080(a1080) => a1080 + 1
plot(f1080(1080))
f1081(a1081) => a1081 + 1
plot(f1081(1081))
f1082(a1082) => a1082 + 1
plot(f1082(1082))
f1083(a1083) => a1083 + 1
plot(f1083(1083))
f1084(a1084) => a1084 + 1
plot(f1084(1084))
f1085(a1085) => a1085 + 1
plot(f1085(1085))
f1086(a1086) => a1086 + 1
plot(f1086(1086))
f1087(a1087) => a1087 + 1
plot(f1087(1087))
f1088(a1088) => a1088 + 1
plot(f1088(1088))
f1089(a1089) => a1089 + 1
plot(f1089(1089))
f1090(a1090) => a1090 + 1
plot(f1090(1090))
f1091(a1091) => a1091 + 1
plot(f1091(1091))
f1092(a1092) => a1092 + 1
plot(f1092(1092))
f1093(a1093) => a1093 + 1
plot(f1093(1093))
f1094(a1094) => a1094 + 1
plot(f1094(1094))
f1095(a1095) => a1095 + 1
plot(f1095(1095))
f1096(a1096) => a1096 + 1
plot(f1096(1096))
f1097(a1097) => a1097 + 1
plot(f1097(1097))
f1098(a1098) => a1098 + 1
plot(f1098(1098))
f1099(a1099) => a1099 + 1
plot(f1099(1099))
f1100(a1100) => a1100 + 1
plot(f1100(1100))
f1101(a1101) => a1101 + 1
plot(f1101(1101))
f1102(a1102) => a1102 + 1
plot(f1102(1102))
f1103(a1103) => a1103 + 1
plot(f1103(1103))
f1104(a1104) => a1104 + 1
plot(f1104(1104))
f1105(a1105) => a1105 + 1
plot(f1105(1105))
f1106(a1106) => a1106 + 1
plot(f1106(1106))
f1107(a1107) => a1107 + 1
plot(f1107(1107))
f1108(a1108) => a1108 + 1
plot(f1108(1108))
f1109(a1109) => a1109 + 1
plot(f1109(1109))
f1110(a1110) => a1110 + 1
plot(f1110(1110))
f1111(a1111) => a1111 + 1
plot(f1111(1111))
f1112(a1112) => a1112 + 1
plot(f1112(1112))
f1113(a1113) => a1113 + 1
plot(f1113(1113))
f1114(a1114) => a1114 + 1
plot(f1114(1114))
f1115(a1115) => a1115 + 1
plot(f1115(1115))
f1116(a1116) => a1116 + 1
plot(f1116(1116))
f1117(a1117) => a1117 + 1
plot(f1117(1117))
f1118(a1118) => a1118 + 1
plot(f1118(1118))
f1119(a1119) => a1119 + 1
plot(f1119(1119))
f1120(a1120) => a1120 + 1
plot(f1120(1120))
f1121(a1121) => a1121 + 1
plot(f1121(1121))
f1122(a1122) => a1122 + 1
plot(f1122(1122))
f1123(a1123) => a1123 + 1
plot(f1123(1123))
f1124(a1124) => a1124 + 1
plot(f1124(1124))
f1125(a1125) => a1125 + 1
plot(f1125(1125))
f1126(a1126) => a1126 + 1
plot(f1126(1126))
f1127(a1127) => a1127 + 1
plot(f1127(1127))
f1128(a1128) => a1128 + 1
plot(f1128(1128))
f1129(a1129) => a1129 + 1
plot(f1129(1129))
f1130(a1130) => a1130 + 1
plot(f1130(1130))
f1131(a1131) => a1131 + 1
plot(f1131(1131))
f1132(a1132) => a1132 + 1
plot(f1132(1132))
f1133(a1133) => a1133 + 1
plot(f1133(1133))
f1134(a1134) => a1134 + 1
plot(f1134(1134))
f1135(a1135) => a1135 + 1
plot(f1135(1135))
f1136(a1136) => a1136 + 1
plot(f1136(1136))
f1137(a1137) => a1137 + 1
plot(f1137(1137))
f1138(a1138) => a1138 + 1
plot(f1138(1138))
f1139(a1139) => a1139 + 1
plot(f1139(1139))
f1140(a1140) => a1140 + 1
plot(f1140(1140))
f1141(a1141) => a1141 + 1
plot(f1141(1141))
f1142(a1142) => a1142 + 1
plot(f1142(1142))
f1143(a1143) => a1143 + 1
plot(f1143(1143))
f1144(a1144) => a1144 + 1
plot(f1144(1144))
f1145(a1145) => a1145 + 1
plot(f1145(1145))
f1146(a1146) => a1146 + 1
plot(f1146(1146))
f1147(a1147) => a1147 + 1
plot(f1147(1147))
f1148(a1148) => a1148 + 1
plot(f1148(1148))
f1149(a1149) => a1149 + 1
plot(f1149(1149))
f1150(a1150) => a1150 + 1
plot(f1150(1150))
f1151(a1151) => a1151 + 1
plot(f1151(1151))
f1152(a1152) => a1152 + 1
plot(f1152(1152))
f1153(a1153) => a1153 + 1
plot(f1153(1153))
f1154(a1154) => a1154 + 1
plot(f1154(1154))
f1155(a1155) => a1155 + 1
plot(f1155(1155))
f1156(a1156) => a1156 + 1
plot(f1156(1156))
f1157(a1157) => a1157 + 1
plot(f1157(1157))
f1158(a1158) => a1158 + 1
plot(f1158(1158))
f1159(a1159) => a1159 + 1
plot(f1159(1159))
f1160(a1160) => a1160 + 1
plot(f1160(1160))
f1161(a1161) => a1161 + 1
plot(f1161(1161))
f1162(a1162) => a1162 + 1
plot(f1162(1162))
f1163(a1163) => a1163 + 1
plot(f1163(1163))
f1164(a1164) => a1164 + 1
plot(f1164(1164))
f1165(a1165) => a1165 + 1
plot(f1165(1165))
f1166(a1166) => a1166 + 1
plot(f1166(1166))
f1167(a1167) => a1167 + 1
plot(f1167(1167))
f1168(a1168) => a1168 + 1
plot(f1168(1168))
f1169(a1169) => a1169 + 1
plot(f1169(1169))
f1170(a1170) => a1170 + 1
plot(f1170(1170))
f1171(a1171) => a1171 + 1
plot(f1171(1171))
f1172(a1172) => a1172 + 1
plot(f1172(1172))
f1173(a1173) => a1173 + 1
plot(f1173(1173))
f1174(a1174) => a1174 + 1
plot(f1174(1174))
f1175(a1175) => a1175 + 1
plot(f1175(1175))
f1176(a1176) => a1176 + 1
plot(f1176(1176))
f1177(a1177) => a1177 + 1
plot(f1177(1177))
f1178(a1178) => a1178 + 1
plot(f1178(1178))
f1179(a1179) => a1179 + 1
plot(f1179(1179))
f1180(a1180) => a1180 + 1
plot(f1180(1180))
f1181(a1181) => a1181 + 1
plot(f1181(1181))
f1182(a1182) => a1182 + 1
plot(f1182(1182))
f1183(a1183) => a1183 + 1
plot(f1183(1183))
f1184(a1184) => a1184 + 1
plot(f1184(1184))
f1185(a1185) => a1185 + 1
plot(f1185(1185))
f1186(a1186) => a1186 + 1
plot(f1186(1186))
f1187(a1187) => a1187 + 1
plot(f1187(1187))
f1188(a1188) => a1188 + 1
plot(f1188(1188))
f1189(a1189) => a1189 + 1
plot(f1189(1189))
f1190(a1190) => a1190 + 1
plot(f1190(1190))
f1191(a1191) => a1191 + 1
plot(f1191(1191))
f1192(a1192) => a1192 + 1
plot(f1192(1192))
f1193(a1193) => a1193 + 1
plot(f1193(1193))
f1194(a1194) => a1194 + 1
plot(f1194(1194))
f1195(a1195) => a1195 + 1
plot(f1195(1195))
f1196(a1196) => a1196 + 1
plot(f1196(1196))
f1197(a1197) => a1197 + 1
plot(f1197(1197))
f1198(a1198) => a1198 + 1
plot(f1198(1198))
f1199(a1199) => a1199 + 1
plot(f1199(1199))
f1200(a1200) => a1200 + 1
plot(f1200(1200))
f1201(a1201) => a1201 + 1
plot(f1201(1201))
f1202(a1202) => a1202 + 1
plot(f1202(1202))
f1203(a1203) => a1203 + 1
plot(f1203(1203))
f1204(a1204) => a1204 + 1
plot(f1204(1204))
f1205(a1205) => a1205 + 1
plot(f1205(1205))
f1206(a1206) => a1206 + 1
plot(f1206(1206))
f1207(a1207) => a1207 + 1
plot(f1207(1207))
f1208(a1208) => a1208 + 1
plot(f1208(1208))
f1209(a1209) => a1209 + 1
plot(f1209(1209))
f1210(a1210) => a1210 + 1
plot(f1210(1210))
f1211(a1211) => a1211 + 1
plot(f1211(1211))
f1212(a1212) => a1212 + 1
plot(f1212(1212))
f1213(a1213) => a1213 + 1
plot(f1213(1213))
f1214(a1214) => a1214 + 1
plot(f1214(1214))
f1215(a1215) => a1215 + 1
plot(f1215(1215))
f1216(a1216) => a1216 + 1
plot(f1216(1216))
f1217(a1217) => a1217 + 1
plot(f1217(1217))
f1218(a1218) => a1218 + 1
plot(f1218(1218))
f1219(a1219) => a1219 + 1
plot(f1219(1219))
f1220(a1220) => a1220 + 1
plot(f1220(1220))
f1221(a1221) => a1221 + 1
plot(f1221(1221))
f1222(a1222) => a1222 + 1
plot(f1222(1222))
f1223(a1223) => a1223 + 1
plot(f1223(1223))
f1224(a1224) => a1224 + 1
plot(f1224(1224))
f1225(a1225) => a1225 + 1
plot(f1225(1225))
f1226(a1226) => a1226 + 1
plot(f1226(1226))
f1227(a1227) => a1227 + 1
plot(f1227(1227))
f1228(a1228) => a1228 + 1
plot(f1228(1228))
f1229(a1229) => a1229 + 1
plot(f1229(1229))
f1230(a1230) => a1230 + 1
plot(f1230(1230))
f1231(a1231) => a1231 + 1
plot(f1231(1231))
f1232(a1232) => a1232 + 1
plot(f1232(1232))
f1233(a1233) => a1233 + 1
plot(f1233(1233))
f1234(a1234) => a1234 + 1
plot(f1234(1234))
f1235(a1235) => a1235 + 1
plot(f1235(1235))
f1236(a1236) => a1236 + 1
plot(f1236(1236))
f1237(a1237) => a1237 + 1
plot(f1237(1237))
f1238(a1238) => a1238 + 1
plot(f1238(1238))
f1239(a1239) => a1239 + 1
plot(f1239(1239))
f1240(a1240) => a1240 + 1
plot(f1240(1240))
f1241(a1241) => a1241 + 1
plot(f1241(1241))
f1242(a1242) => a1242 + 1
plot(f1242(1242))
f1243(a1243) => a1243 + 1
plot(f1243(1243))
f1244(a1244) => a1244 + 1
plot(f1244(1244))
f1245(a1245) => a1245 + 1
plot(f1245(1245))
f1246(a1246) => a1246 + 1
plot(f1246(1246))
f1247(a1247) => a1247 + 1
plot(f1247(1247))
f1248(a1248) => a1248 + 1
plot(f1248(1248))
f1249(a1249) => a1249 + 1
plot(f1249(1249))
f1250(a1250) => a1250 + 1
plot(f1250(1250))
f1251(a1251) => a1251 + 1
plot(f1251(1251))
f1252(a1252) => a1252 + 1
plot(f1252(1252))
f1253(a1253) => a1253 + 1
plot(f1253(1253))
f1254(a1254) => a1254 + 1
plot(f1254(1254))
f1255(a1255) => a1255 + 1
plot(f1255(1255))
f1256(a1256) => a1256 + 1
plot(f1256(1256))
f1257(a1257) => a1257 + 1
plot(f1257(1257))
f1258(a1258) => a1258 + 1
plot(f1258(1258))
f1259(a1259) => a1259 + 1
plot(f1259(1259))
f1260(a1260) => a1260 + 1
plot(f1260(1260))
f1261(a1261) => a1261 + 1
plot(f1261(1261))
f1262(a1262) => a1262 + 1
plot(f1262(1262))
f1263(a1263) => a1263 + 1
plot(f1263(1263))
f1264(a1264) => a1264 + 1
plot(f1264(1264))
f1265(a1265) => a1265 + 1
plot(f1265(1265))
f1266(a1266) => a1266 + 1
plot(f1266(1266))
f1267(a1267) => a1267 + 1
plot(f1267(1267))
f1268(a1268) => a1268 + 1
plot(f1268(1268))
f1269(a1269) => a1269 + 1
plot(f1269(1269))
f1270(a1270) => a1270 + 1
plot(f1270(1270))
f1271(a1271) => a1271 + 1
plot(f1271(1271))
f1272(a1272) => a1272 + 1
plot(f1272(1272))
f1273(a1273) => a1273 + 1
plot(f1273(1273))
f1274(a1274) => a1274 + 1
plot(f1274(1274))
f1275(a1275) => a1275 + 1
plot(f1275(1275))
f1276(a1276) => a1276 + 1
plot(f1276(1276))
f1277(a1277) => a1277 + 1
plot(f1277(1277))
f1278(a1278) => a1278 + 1
plot(f1278(1278))
f1279(a1279) => a1279 + 1
plot(f1279(1279))
f1280(a1280) => a1280 + 1
plot(f1280(1280))
f1281(a1281) => a1281 + 1
plot(f1281(1281))
f1282(a1282) => a1282 + 1
plot(f1282(1282))
f1283(a1283) => a1283 + 1
plot(f1283(1283))
f1284(a1284) => a1284 + 1
plot(f1284(1284))
f1285(a1285) => a1285 + 1
plot(f1285(1285))
f1286(a1286) => a1286 + 1
plot(f1286(1286))
f1287(a1287) => a1287 + 1
plot(f1287(1287))
f1288(a1288) => a1288 + 1
plot(f1288(1288))
f1289(a1289) => a1289 + 1
plot(f1289(1289))
f1290(a1290) => a1290 + 1
plot(f1290(1290))
f1291(a1291) => a1291 + 1
plot(f1291(1291))
f1292(a1292) => a1292 + 1
plot(f1292(1292))
f1293(a1293) => a1293 + 1
plot(f1293(1293))
f1294(a1294) => a1294 + 1
plot(f1294(1294))
f1295(a1295) => a1295 + 1
plot(f1295(1295))
f1296(a1296) => a1296 + 1
plot(f1296(1296))
f1297(a1297) => a1297 + 1
plot(f1297(1297))
f1298(a1298) => a1298 + 1
plot(f1298(1298))
f1299(a1299) => a1299 + 1
plot(f1299(1299))
f1300(a1300) => a1300 + 1
plot(f1300(1300))
f1301(a1301) => a1301 + 1
plot(f1301(1301))
f1302(a1302) => a1302 + 1
plot(f1302(1302))
f1303(a1303) => a1303 + 1
plot(f1303(1303))
f1304(a1304) => a1304 + 1
plot(f1304(1304))
f1305(a1305) => a1305 + 1
plot(f1305(1305))
f1306(a1306) => a1306 + 1
plot(f1306(1306))
f1307(a1307) => a1307 + 1
plot(f1307(1307))
f1308(a1308) => a1308 + 1
plot(f1308(1308))
f1309(a1309) => a1309 + 1
plot(f1309(1309))
f1310(a1310) => a1310 + 1
plot(f1310(1310))
f1311(a1311) => a1311 + 1
plot(f1311(1311))
f1312(a1312) => a1312 + 1
plot(f1312(1312))
f1313(a1313) => a1313 + 1
plot(f1313(1313))
f1314(a1314) => a1314 + 1
plot(f1314(1314))
f1315(a1315) => a1315 + 1
plot(f1315(1315))
f1316(a1316) => a1316 + 1
plot(f1316(1316))
f1317(a1317) => a1317 + 1
plot(f1317(1317))
f1318(a1318) => a1318 + 1
plot(f1318(1318))
f1319(a1319) => a1319 + 1
plot(f1319(1319))
f1320(a1320) => a1320 + 1
plot(f1320(1320))
f1321(a1321) => a1321 + 1
plot(f1321(1321))
f1322(a1322) => a1322 + 1
plot(f1322(1322))
f1323(a1323) => a1323 + 1
plot(f1323(1323))
f1324(a1324) => a1324 + 1
plot(f1324(1324))
f1325(a1325) => a1325 + 1
plot(f1325(1325))
f1326(a1326) => a1326 + 1
plot(f1326(1326))
f1327(a1327) => a1327 + 1
plot(f1327(1327))
f1328(a1328) => a1328 + 1
plot(f1328(1328))
f1329(a1329) => a1329 + 1
plot(f1329(1329))
f1330(a1330) => a1330 + 1
plot(f1330(1330))
f1331(a1331) => a1331 + 1
plot(f1331(1331))
f1332(a1332) => a1332 + 1
plot(f1332(1332))
f1333(a1333) => a1333 + 1
plot(f1333(1333))
f1334(a1334) => a1334 + 1
plot(f1334(1334))
f1335(a1335) => a1335 + 1
plot(f1335(1335))
f1336(a1336) => a1336 + 1
plot(f1336(1336))
f1337(a1337) => a1337 + 1
plot(f1337(1337))
f1338(a1338) => a1338 + 1
plot(f1338(1338))
f1339(a1339) => a1339 + 1
plot(f1339(1339))
f1340(a1340) => a1340 + 1
plot(f1340(1340))
f1341(a1341) => a1341 + 1
plot(f1341(1341))
f1342(a1342) => a1342 + 1
plot(f1342(1342))
f1343(a1343) => a1343 + 1
plot(f1343(1343))
f1344(a1344) => a1344 + 1
plot(f1344(1344))
f1345(a1345) => a1345 + 1
plot(f1345(1345))
f1346(a1346) => a1346 + 1
plot(f1346(1346))
f1347(a1347) => a1347 + 1
plot(f1347(1347))
f1348(a1348) => a1348 + 1
plot(f1348(1348))
f1349(a1349) => a1349 + 1
plot(f1349(1349))
f1350(a1350) => a1350 + 1
plot(f1350(1350))
f1351(a1351) => a1351 + 1
plot(f1351(1351))
f1352(a1352) => a1352 + 1
plot(f1352(1352))
f1353(a1353) => a1353 + 1
plot(f1353(1353))
f1354(a1354) => a1354 + 1
plot(f1354(1354))
f1355(a1355) => a1355 + 1
plot(f1355(1355))
f1356(a1356) => a1356 + 1
plot(f1356(1356))
f1357(a1357) => a1357 + 1
plot(f1357(1357))
f1358(a1358) => a1358 + 1
plot(f1358(1358))
f1359(a1359) => a1359 + 1
plot(f1359(1359))
f1360(a1360) => a1360 + 1
plot(f1360(1360))
f1361(a1361) => a1361 + 1
plot(f1361(1361))
f1362(a1362) => a1362 + 1
plot(f1362(1362))
f1363(a1363) => a1363 + 1
plot(f1363(1363))
f1364(a1364) => a1364 + 1
plot(f1364(1364))
f1365(a1365) => a1365 + 1
plot(f1365(1365))
f1366(a1366) => a1366 + 1
plot(f1366(1366))
f1367(a1367) => a1367 + 1
plot(f1367(1367))
f1368(a1368) => a1368 + 1
plot(f1368(1368))
f1369(a1369) => a1369 + 1
plot(f1369(1369))
f1370(a1370) => a1370 + 1
plot(f1370(1370))
f1371(a1371) => a1371 + 1
plot(f1371(1371))
f1372(a1372) => a1372 + 1
plot(f1372(1372))
f1373(a1373) => a1373 + 1
plot(f1373(1373))
f1374(a1374) => a1374 + 1
plot(f1374(1374))
f1375(a1375) => a1375 + 1
plot(f1375(1375))
f1376(a1376) => a1376 + 1
plot(f1376(1376))
f1377(a1377) => a1377 + 1
plot(f1377(1377))
f1378(a1378) => a1378 + 1
plot(f1378(1378))
f1379(a1379) => a1379 + 1
plot(f1379(1379))
f1380(a1380) => a1380 + 1
plot(f1380(1380))
f1381(a1381) => a1381 + 1
plot(f1381(1381))
f1382(a1382) => a1382 + 1
plot(f1382(1382))
f1383(a1383) => a1383 + 1
plot(f1383(1383))
f1384(a1384) => a1384 + 1
plot(f1384(1384))
f1385(a1385) => a1385 + 1
plot(f1385(1385))
f1386(a1386) => a1386 + 1
plot(f1386(1386))
f1387(a1387) => a1387 + 1
plot(f1387(1387))
f1388(a1388) => a1388 + 1
plot(f1388(1388))
f1389(a1389) => a1389 + 1
plot(f1389(1389))
f1390(a1390) => a1390 + 1
plot(f1390(1390))
f1391(a1391) => a1391 + 1
plot(f1391(1391))
f1392(a1392) => a1392 + 1
plot(f1392(1392))
f1393(a1393) => a1393 + 1
plot(f1393(1393))
f1394(a1394) => a1394 + 1
plot(f1394(1394))
f1395(a1395) => a1395 + 1
plot(f1395(1395))
f1396(a1396) => a1396 + 1
plot(f1396(1396))
f1397(a1397) => a1397 + 1
plot(f1397(1397))
f1398(a1398) => a1398 + 1
plot(f1398(1398))
f1399(a1399) => a1399 + 1
plot(f1399(1399))
f1400(a1400) => a1400 + 1
plot(f1400(1400))
f1401(a1401) => a1401 + 1
plot(f1401(1401))
f1402(a1402) => a1402 + 1
plot(f1402(1402))
f1403(a1403) => a1403 + 1
plot(f1403(1403))
f1404(a1404) => a1404 + 1
plot(f1404(1404))
f1405(a1405) => a1405 + 1
plot(f1405(1405))
f1406(a1406) => a1406 + 1
plot(f1406(1406))
f1407(a1407) => a1407 + 1
plot(f1407(1407))
f1408(a1408) => a1408 + 1
plot(f1408(1408))
f1409(a1409) => a1409 + 1
plot(f1409(1409))
f1410(a1410) => a1410 + 1
plot(f1410(1410))
f1411(a1411) => a1411 + 1
plot(f1411(1411))
f1412(a1412) => a1412 + 1
plot(f1412(1412))
f1413(a1413) => a1413 + 1
plot(f1413(1413))
f1414(a1414) => a1414 + 1
plot(f1414(1414))
f1415(a1415) => a1415 + 1
plot(f1415(1415))
f1416(a1416) => a1416 + 1
plot(f1416(1416))
f1417(a1417) => a1417 + 1
plot(f1417(1417))
f1418(a1418) => a1418 + 1
plot(f1418(1418))
f1419(a1419) => a1419 + 1
plot(f1419(1419))
f1420(a1420) => a1420 + 1
plot(f1420(1420))
f1421(a1421) => a1421 + 1
plot(f1421(1421))
f1422(a1422) => a1422 + 1
plot(f1422(1422))
f1423(a1423) => a1423 + 1
plot(f1423(1423))
f1424(a1424) => a1424 + 1
plot(f1424(1424))
f1425(a1425) => a1425 + 1
plot(f1425(1425))
f1426(a1426) => a1426 + 1
plot(f1426(1426))
f1427(a1427) => a1427 + 1
plot(f1427(1427))
f1428(a1428) => a1428 + 1
plot(f1428(1428))
f1429(a1429) => a1429 + 1
plot(f1429(1429))
f1430(a1430) => a1430 + 1
plot(f1430(1430))
f1431(a1431) => a1431 + 1
plot(f1431(1431))
f1432(a1432) => a1432 + 1
plot(f1432(1432))
f1433(a1433) => a1433 + 1
plot(f1433(1433))
f1434(a1434) => a1434 + 1
plot(f1434(1434))
f1435(a1435) => a1435 + 1
plot(f1435(1435))
f1436(a1436) => a1436 + 1
plot(f1436(1436))
f1437(a1437) => a1437 + 1
plot(f1437(1437))
f1438(a1438) => a1438 + 1
plot(f1438(1438))
f1439(a1439) => a1439 + 1
plot(f1439(1439))
f1440(a1440) => a1440 + 1
plot(f1440(1440))
f1441(a1441) => a1441 + 1
plot(f1441(1441))
f1442(a1442) => a1442 + 1
plot(f1442(1442))
f1443(a1443) => a1443 + 1
plot(f1443(1443))
f1444(a1444) => a1444 + 1
plot(f1444(1444))
f1445(a1445) => a1445 + 1
plot(f1445(1445))
f1446(a1446) => a1446 + 1
plot(f1446(1446))
f1447(a1447) => a1447 + 1
plot(f1447(1447))
f1448(a1448) => a1448 + 1
plot(f1448(1448))
f1449(a1449) => a1449 + 1
plot(f1449(1449))
f1450(a1450) => a1450 + 1
plot(f1450(1450))
f1451(a1451) => a1451 + 1
plot(f1451(1451))
f1452(a1452) => a1452 + 1
plot(f1452(1452))
f1453(a1453) => a1453 + 1
plot(f1453(1453))
f1454(a1454) => a1454 + 1
plot(f1454(1454))
f1455(a1455) => a1455 + 1
plot(f1455(1455))
f1456(a1456) => a1456 + 1
plot(f1456(1456))
f1457(a1457) => a1457 + 1
plot(f1457(1457))
f1458(a1458) => a1458 + 1
plot(f1458(1458))
f1459(a1459) => a1459 + 1
plot(f1459(1459))
f1460(a1460) => a1460 + 1
plot(f1460(1460))
f1461(a1461) => a1461 + 1
plot(f1461(1461))
f1462(a1462) => a1462 + 1
plot(f1462(1462))
f1463(a1463) => a1463 + 1
plot(f1463(1463))
f1464(a1464) => a1464 + 1
plot(f1464(1464))
f1465(a1465) => a1465 + 1
plot(f1465(1465))
f1466(a1466) => a1466 + 1
plot(f1466(1466))
f1467(a1467) => a1467 + 1
plot(f1467(1467))
f1468(a1468) => a1468 + 1
plot(f1468(1468))
f1469(a1469) => a1469 + 1
plot(f1469(1469))
f1470(a1470) => a1470 + 1
plot(f1470(1470))
f1471(a1471) => a1471 + 1
plot(f1471(1471))
f1472(a1472) => a1472 + 1
plot(f1472(1472))
f1473(a1473) => a1473 + 1
plot(f1473(1473))
f1474(a1474) => a1474 + 1
plot(f1474(1474))
f1475(a1475) => a1475 + 1
plot(f1475(1475))
f1476(a1476) => a1476 + 1
plot(f1476(1476))
f1477(a1477) => a1477 + 1
plot(f1477(1477))
f1478(a1478) => a1478 + 1
plot(f1478(1478))
f1479(a1479) => a1479 + 1
plot(f1479(1479))
f1480(a1480) => a1480 + 1
plot(f1480(1480))
f1481(a1481) => a1481 + 1
plot(f1481(1481))
f1482(a1482) => a1482 + 1
plot(f1482(1482))
f1483(a1483) => a1483 + 1
plot(f1483(1483))
f1484(a1484) => a1484 + 1
plot(f1484(1484))
f1485(a1485) => a1485 + 1
plot(f1485(1485))
f1486(a1486) => a1486 + 1
plot(f1486(1486))
f1487(a1487) => a1487 + 1
plot(f1487(1487))
f1488(a1488) => a1488 + 1
plot(f1488(1488))
f1489(a1489) => a1489 + 1
plot(f1489(1489))
f1490(a1490) => a1490 + 1
plot(f1490(1490))
f1491(a1491) => a1491 + 1
plot(f1491(1491))
f1492(a1492) => a1492 + 1
plot(f1492(1492))
f1493(a1493) => a1493 + 1
plot(f1493(1493))
f1494(a1494) => a1494 + 1
plot(f1494(1494))
f1495(a1495) => a1495 + 1
plot(f1495(1495))
f1496(a1496) => a1496 + 1
plot(f1496(1496))
f1497(a1497) => a1497 + 1
plot(f1497(1497))
f1498(a1498) => a1498 + 1
plot(f1498(1498))
f1499(a1499) => a1499 + 1
plot(f1499(1499))
f1500(a1500) => a1500 + 1
plot(f1500(1500))
f1501(a1501) => a1501 + 1
plot(f1501(1501))
f1502(a1502) => a1502 + 1
plot(f1502(1502))
f1503(a1503) => a1503 + 1
plot(f1503(1503))
f1504(a1504) => a1504 + 1
plot(f1504(1504))
f1505(a1505) => a1505 + 1
plot(f1505(1505))
f1506(a1506) => a1506 + 1
plot(f1506(1506))
f1507(a1507) => a1507 + 1
plot(f1507(1507))
f1508(a1508) => a1508 + 1
plot(f1508(1508))
f1509(a1509) => a1509 + 1
plot(f1509(1509))
f1510(a1510) => a1510 + 1
plot(f1510(1510))
f1511(a1511) => a1511 + 1
plot(f1511(1511))
f1512(a1512) => a1512 + 1
plot(f1512(1512))
f1513(a1513) => a1513 + 1
plot(f1513(1513))
f1514(a1514) => a1514 + 1
plot(f1514(1514))
f1515(a1515) => a1515 + 1
plot(f1515(1515))
f1516(a1516) => a1516 + 1
plot(f1516(1516))
f1517(a1517) => a1517 + 1
plot(f1517(1517))
f1518(a1518) => a1518 + 1
plot(f1518(1518))
f1519(a1519) => a1519 + 1
plot(f1519(1519))
f1520(a1520) => a1520 + 1
plot(f1520(1520))
f1521(a1521) => a1521 + 1
plot(f1521(1521))
f1522(a1522) => a1522 + 1
plot(f1522(1522))
f1523(a1523) => a1523 + 1
plot(f1523(1523))
f1524(a1524) => a1524 + 1
plot(f1524(1524))
f1525(a1525) => a1525 + 1
plot(f1525(1525))
f1526(a1526) => a1526 + 1
plot(f1526(1526))
f1527(a1527) => a1527 + 1
plot(f1527(1527))
f1528(a1528) => a1528 + 1
plot(f1528(1528))
f1529(a1529) => a1529 + 1
plot(f1529(1529))
f1530(a1530) => a1530 + 1
plot(f1530(1530))
f1531(a1531) => a1531 + 1
plot(f1531(1531))
f1532(a1532) => a1532 + 1
plot(f1532(1532))
f1533(a1533) => a1533 + 1
plot(f1533(1533))
f1534(a1534) => a1534 + 1
plot(f1534(1534))
f1535(a1535) => a1535 + 1
plot(f1535(1535))
f1536(a1536) => a1536 + 1
plot(f1536(1536))
f1537(a1537) => a1537 + 1
plot(f1537(1537))
f1538(a1538) => a1538 + 1
plot(f1538(1538))
f1539(a1539) => a1539 + 1
plot(f1539(1539))
f1540(a1540) => a1540 + 1
plot(f1540(1540))
f1541(a1541) => a1541 + 1
plot(f1541(1541))
f1542(a1542) => a1542 + 1
plot(f1542(1542))
f1543(a1543) => a1543 + 1
plot(f1543(1543))
f1544(a1544) => a1544 + 1
plot(f1544(1544))
f1545(a1545) => a1545 + 1
plot(f1545(1545))
f1546(a1546) => a1546 + 1
plot(f1546(1546))
f1547(a1547) => a1547 + 1
plot(f1547(1547))
f1548(a1548) => a1548 + 1
plot(f1548(1548))
f1549(a1549) => a1549 + 1
plot(f1549(1549))
f1550(a1550) => a1550 + 1
plot(f1550(1550))
f1551(a1551) => a1551 + 1
plot(f1551(1551))
f1552(a1552) => a1552 + 1
plot(f1552(1552))
f1553(a1553) => a1553 + 1
plot(f1553(1553))
f1554(a1554) => a1554 + 1
plot(f1554(1554))
f1555(a1555) => a1555 + 1
plot(f1555(1555))
f1556(a1556) => a1556 + 1
plot(f1556(1556))
f1557(a1557) => a1557 + 1
plot(f1557(1557))
f1558(a1558) => a1558 + 1
plot(f1558(1558))
f1559(a1559) => a1559 + 1
plot(f1559(1559))
f1560(a1560) => a1560 + 1
plot(f1560(1560))
f1561(a1561) => a1561 + 1
plot(f1561(1561))
f1562(a1562) => a1562 + 1
plot(f1562(1562))
f1563(a1563) => a1563 + 1
plot(f1563(1563))
f1564(a1564) => a1564 + 1
plot(f1564(1564))
f1565(a1565) => a1565 + 1
plot(f1565(1565))
f1566(a1566) => a1566 + 1
plot(f1566(1566))
f1567(a1567) => a1567 + 1
plot(f1567(1567))
f1568(a1568) => a1568 + 1
plot(f1568(1568))
f1569(a1569) => a1569 + 1
plot(f1569(1569))
f1570(a1570) => a1570 + 1
plot(f1570(1570))
f1571(a1571) => a1571 + 1
plot(f1571(1571))
f1572(a1572) => a1572 + 1
plot(f1572(1572))
f1573(a1573) => a1573 + 1
plot(f1573(1573))
f1574(a1574) => a1574 + 1
plot(f1574(1574))
f1575(a1575) => a1575 + 1
plot(f1575(1575))
f1576(a1576) => a1576 + 1
plot(f1576(1576))
f1577(a1577) => a1577 + 1
plot(f1577(1577))
f1578(a1578) => a1578 + 1
plot(f1578(1578))
f1579(a1579) => a1579 + 1
plot(f1579(1579))
f1580(a1580) => a1580 + 1
plot(f1580(1580))
f1581(a1581) => a1581 + 1
plot(f1581(1581))
f1582(a1582) => a1582 + 1
plot(f1582(1582))
f1583(a1583) => a1583 + 1
plot(f1583(1583))
f1584(a1584) => a1584 + 1
plot(f1584(1584))
f1585(a1585) => a1585 + 1
plot(f1585(1585))
f1586(a1586) => a1586 + 1
plot(f1586(1586))
f1587(a1587) => a1587 + 1
plot(f1587(1587))
f1588(a1588) => a1588 + 1
plot(f1588(1588))
f1589(a1589) => a1589 + 1
plot(f1589(1589))
f1590(a1590) => a1590 + 1
plot(f1590(1590))
f1591(a1591) => a1591 + 1
plot(f1591(1591))
f1592(a1592) => a1592 + 1
plot(f1592(1592))
f1593(a1593) => a1593 + 1
plot(f1593(1593))
f1594(a1594) => a1594 + 1
plot(f1594(1594))
f1595(a1595) => a1595 + 1
plot(f1595(1595))
f1596(a1596) => a1596 + 1
plot(f1596(1596))
f1597(a1597) => a1597 + 1
plot(f1597(1597))
f1598(a1598) => a1598 + 1
plot(f1598(1598))
f1599(a1599) => a1599 + 1
plot(f1599(1599))
f1600(a1600) => a1600 + 1
plot(f1600(1600))
f1601(a1601) => a1601 + 1
plot(f1601(1601))
f1602(a1602) => a1602 + 1
plot(f1602(1602))
f1603(a1603) => a1603 + 1
plot(f1603(1603))
f1604(a1604) => a1604 + 1
plot(f1604(1604))
f1605(a1605) => a1605 + 1
plot(f1605(1605))
f1606(a1606) => a1606 + 1
plot(f1606(1606))
f1607(a1607) => a1607 + 1
plot(f1607(1607))
f1608(a1608) => a1608 + 1
plot(f1608(1608))
f1609(a1609) => a1609 + 1
plot(f1609(1609))
f1610(a1610) => a1610 + 1
plot(f1610(1610))
f1611(a1611) => a1611 + 1
plot(f1611(1611))
f1612(a1612) => a1612 + 1
plot(f1612(1612))
f1613(a1613) => a1613 + 1
plot(f1613(1613))
f1614(a1614) => a1614 + 1
plot(f1614(1614))
f1615(a1615) => a1615 + 1
plot(f1615(1615))
f1616(a1616) => a1616 + 1
plot(f1616(1616))
f1617(a1617) => a1617 + 1
plot(f1617(1617))
f1618(a1618) => a1618 + 1
plot(f1618(1618))
f1619(a1619) => a1619 + 1
plot(f1619(1619))
f1620(a1620) => a1620 + 1
plot(f1620(1620))
f1621(a1621) => a1621 + 1
plot(f1621(1621))
f1622(a1622) => a1622 + 1
plot(f1622(1622))
f1623(a1623) => a1623 + 1
plot(f1623(1623))
f1624(a1624) => a1624 + 1
plot(f1624(1624))
f1625(a1625) => a1625 + 1
plot(f1625(1625))
f1626(a1626) => a1626 + 1
plot(f1626(1626))
f1627(a1627) => a1627 + 1
plot(f1627(1627))
f1628(a1628) => a1628 + 1
plot(f1628(1628))
f1629(a1629) => a1629 + 1
plot(f1629(1629))
f1630(a1630) => a1630 + 1
plot(f1630(1630))
f1631(a1631) => a1631 + 1
plot(f1631(1631))
f1632(a1632) => a1632 + 1
plot(f1632(1632))
f1633(a1633) => a1633 + 1
plot(f1633(1633))
f1634(a1634) => a1634 + 1
plot(f1634(1634))
f1635(a1635) => a1635 + 1
plot(f1635(1635))
f1636(a1636) => a1636 + 1
plot(f1636(1636))
f1637(a1637) => a1637 + 1
plot(f1637(1637))
f1638(a1638) => a1638 + 1
plot(f1638(1638))
f1639(a1639) => a1639 + 1
plot(f1639(1639))
f1640(a1640) => a1640 + 1
plot(f1640(1640))
f1641(a1641) => a1641 + 1
plot(f1641(1641))
f1642(a1642) => a1642 + 1
plot(f1642(1642))
f1643(a1643) => a1643 + 1
plot(f1643(1643))
f1644(a1644) => a1644 + 1
plot(f1644(1644))
f1645(a1645) => a1645 + 1
plot(f1645(1645))
f1646(a1646) => a1646 + 1
plot(f1646(1646))
f1647(a1647) => a1647 + 1
plot(f1647(1647))
f1648(a1648) => a1648 + 1
plot(f1648(1648))
f1649(a1649) => a1649 + 1
plot(f1649(1649))
f1650(a1650) => a1650 + 1
plot(f1650(1650))
f1651(a1651) => a1651 + 1
plot(f1651(1651))
f1652(a1652) => a1652 + 1
plot(f1652(1652))
f1653(a1653) => a1653 + 1
plot(f1653(1653))
f1654(a1654) => a1654 + 1
plot(f1654(1654))
f1655(a1655) => a1655 + 1
plot(f1655(1655))
f1656(a1656) => a1656 + 1
plot(f1656(1656))
f1657(a1657) => a1657 + 1
plot(f1657(1657))
f1658(a1658) => a1658 + 1
plot(f1658(1658))
f1659(a1659) => a1659 + 1
plot(f1659(1659))
f1660(a1660) => a1660 + 1
plot(f1660(1660))
f1661(a1661) => a1661 + 1
plot(f1661(1661))
f1662(a1662) => a1662 + 1
plot(f1662(1662))
f1663(a1663) => a1663 + 1
plot(f1663(1663))
f1664(a1664) => a1664 + 1
plot(f1664(1664))
f1665(a1665) => a1665 + 1
plot(f1665(1665))
f1666(a1666) => a1666 + 1
plot(f1666(1666))
f1667(a1667) => a1667 + 1
plot(f1667(1667))
f1668(a1668) => a1668 + 1
plot(f1668(1668))
f1669(a1669) => a1669 + 1
plot(f1669(1669))
f1670(a1670) => a1670 + 1
plot(f1670(1670))
f1671(a1671) => a1671 + 1
plot(f1671(1671))
f1672(a1672) => a1672 + 1
plot(f1672(1672))
f1673(a1673) => a1673 + 1
plot(f1673(1673))
f1674(a1674) => a1674 + 1
plot(f1674(1674))
f1675(a1675) => a1675 + 1
plot(f1675(1675))
f1676(a1676) => a1676 + 1
plot(f1676(1676))
f1677(a1677) => a1677 + 1
plot(f1677(1677))
f1678(a1678) => a1678 + 1
plot(f1678(1678))
f1679(a1679) => a1679 + 1
plot(f1679(1679))
f1680(a1680) => a1680 + 1
plot(f1680(1680))
f1681(a1681) => a1681 + 1
plot(f1681(1681))
f1682(a1682) => a1682 + 1
plot(f1682(1682))
f1683(a1683) => a1683 + 1
plot(f1683(1683))
f1684(a1684) => a1684 + 1
plot(f1684(1684))
f1685(a1685) => a1685 + 1
plot(f1685(1685))
f1686(a1686) => a1686 + 1
plot(f1686(1686))
f1687(a1687) => a1687 + 1
plot(f1687(1687))
f1688(a1688) => a1688 + 1
plot(f1688(1688))
f1689(a1689) => a1689 + 1
plot(f1689(1689))
f1690(a1690) => a1690 + 1
plot(f1690(1690))
f1691(a1691) => a1691 + 1
plot(f1691(1691))
f1692(a1692) => a1692 + 1
plot(f1692(1692))
f1693(a1693) => a1693 + 1
plot(f1693(1693))
f1694(a1694) => a1694 + 1
plot(f1694(1694))
f1695(a1695) => a1695 + 1
plot(f1695(1695))
f1696(a1696) => a1696 + 1
plot(f1696(1696))
f1697(a1697) => a1697 + 1
plot(f1697(1697))
f1698(a1698) => a1698 + 1
plot(f1698(1698))
f1699(a1699) => a1699 + 1
plot(f1699(1699))
f1700(a1700) => a1700 + 1
plot(f1700(1700))
f1701(a1701) => a1701 + 1
plot(f1701(1701))
f1702(a1702) => a1702 + 1
plot(f1702(1702))
f1703(a1703) => a1703 + 1
plot(f1703(1703))
f1704(a1704) => a1704 + 1
plot(f1704(1704))
f1705(a1705) => a1705 + 1
plot(f1705(1705))
f1706(a1706) => a1706 + 1
plot(f1706(1706))
f1707(a1707) => a1707 + 1
plot(f1707(1707))
f1708(a1708) => a1708 + 1
plot(f1708(1708))
f1709(a1709) => a1709 + 1
plot(f1709(1709))
f1710(a1710) => a1710 + 1
plot(f1710(1710))
f1711(a1711) => a1711 + 1
plot(f1711(1711))
f1712(a1712) => a1712 + 1
plot(f1712(1712))
f1713(a1713) => a1713 + 1
plot(f1713(1713))
f1714(a1714) => a1714 + 1
plot(f1714(1714))
f1715(a1715) => a1715 + 1
plot(f1715(1715))
f1716(a1716) => a1716 + 1
plot(f1716(1716))
f1717(a1717) => a1717 + 1
plot(f1717(1717))
f1718(a1718) => a1718 + 1
plot(f1718(1718))
f1719(a1719) => a1719 + 1
plot(f1719(1719))
f1720(a1720) => a1720 + 1
plot(f1720(1720))
f1721(a1721) => a1721 + 1
plot(f1721(1721))
f1722(a1722) => a1722 + 1
plot(f1722(1722))
f1723(a1723) => a1723 + 1
plot(f1723(1723))
f1724(a1724) => a1724 + 1
plot(f1724(1724))
f1725(a1725) => a1725 + 1
plot(f1725(1725))
f1726(a1726) => a1726 + 1
plot(f1726(1726))
f1727(a1727) => a1727 + 1
plot(f1727(1727))
f1728(a1728) => a1728 + 1
plot(f1728(1728))
f1729(a1729) => a1729 + 1
plot(f1729(1729))
f1730(a1730) => a1730 + 1
plot(f1730(1730))
f1731(a1731) => a1731 + 1
plot(f1731(1731))
f1732(a1732) => a1732 + 1
plot(f1732(1732))
f1733(a1733) => a1733 + 1
plot(f1733(1733))
f1734(a1734) => a1734 + 1
plot(f1734(1734))
f1735(a1735) => a1735 + 1
plot(f1735(1735))
f1736(a1736) => a1736 + 1
plot(f1736(1736))
f1737(a1737) => a1737 + 1
plot(f1737(1737))
f1738(a1738) => a1738 + 1
plot(f1738(1738))
f1739(a1739) => a1739 + 1
plot(f1739(1739))
f1740(a1740) => a1740 + 1
plot(f1740(1740))
f1741(a1741) => a1741 + 1
plot(f1741(1741))
f1742(a1742) => a1742 + 1
plot(f1742(1742))
f1743(a1743) => a1743 + 1
plot(f1743(1743))
f1744(a1744) => a1744 + 1
plot(f1744(1744))
f1745(a1745) => a1745 + 1
plot(f1745(1745))
f1746(a1746) => a1746 + 1
plot(f1746(1746))
f1747(a1747) => a1747 + 1
plot(f1747(1747))
f1748(a1748) => a1748 + 1
plot(f1748(1748))
f1749(a1749) => a1749 + 1
plot(f1749(1749))
f1750(a1750) => a1750 + 1
plot(f1750(1750))
f1751(a1751) => a1751 + 1
plot(f1751(1751))
f1752(a1752) => a1752 + 1
plot(f1752(1752))
f1753(a1753) => a1753 + 1
plot(f1753(1753))
f1754(a1754) => a1754 + 1
plot(f1754(1754))
f1755(a1755) => a1755 + 1
plot(f1755(1755))
f1756(a1756) => a1756 + 1
plot(f1756(1756))
f1757(a1757) => a1757 + 1
plot(f1757(1757))
f1758(a1758) => a1758 + 1
plot(f1758(1758))
f1759(a1759) => a1759 + 1
plot(f1759(1759))
f1760(a1760) => a1760 + 1
plot(f1760(1760))
f1761(a1761) => a1761 + 1
plot(f1761(1761))
f1762(a1762) => a1762 + 1
plot(f1762(1762))
f1763(a1763) => a1763 + 1
plot(f1763(1763))
f1764(a1764) => a1764 + 1
plot(f1764(1764))
f1765(a1765) => a1765 + 1
plot(f1765(1765))
f1766(a1766) => a1766 + 1
plot(f1766(1766))
f1767(a1767) => a1767 + 1
plot(f1767(1767))
f1768(a1768) => a1768 + 1
plot(f1768(1768))
f1769(a1769) => a1769 + 1
plot(f1769(1769))
f1770(a1770) => a1770 + 1
plot(f1770(1770))
f1771(a1771) => a1771 + 1
plot(f1771(1771))
f1772(a1772) => a1772 + 1
plot(f1772(1772))
f1773(a1773) => a1773 + 1
plot(f1773(1773))
f1774(a1774) => a1774 + 1
plot(f1774(1774))
f1775(a1775) => a1775 + 1
plot(f1775(1775))
f1776(a1776) => a1776 + 1
plot(f1776(1776))
f1777(a1777) => a1777 + 1
plot(f1777(1777))
f1778(a1778) => a1778 + 1
plot(f1778(1778))
f1779(a1779) => a1779 + 1
plot(f1779(1779))
f1780(a1780) => a1780 + 1
plot(f1780(1780))
f1781(a1781) => a1781 + 1
plot(f1781(1781))
f1782(a1782) => a1782 + 1
plot(f1782(1782))
f1783(a1783) => a1783 + 1
plot(f1783(1783))
f1784(a1784) => a1784 + 1
plot(f1784(1784))
f1785(a1785) => a1785 + 1
plot(f1785(1785))
f1786(a1786) => a1786 + 1
plot(f1786(1786))
f1787(a1787) => a1787 + 1
plot(f1787(1787))
f1788(a1788) => a1788 + 1
plot(f1788(1788))
f1789(a1789) => a1789 + 1
plot(f1789(1789))
f1790(a1790) => a1790 + 1
plot(f1790(1790))
f1791(a1791) => a1791 + 1
plot(f1791(1791))
f1792(a1792) => a1792 + 1
plot(f1792(1792))
f1793(a1793) => a1793 + 1
plot(f1793(1793))
f1794(a1794) => a1794 + 1
plot(f1794(1794))
f1795(a1795) => a1795 + 1
plot(f1795(1795))
f1796(a1796) => a1796 + 1
plot(f1796(1796))
f1797(a1797) => a1797 + 1
plot(f1797(1797))
f1798(a1798) => a1798 + 1
plot(f1798(1798))
f1799(a1799) => a1799 + 1
plot(f1799(1799))
f1800(a1800) => a1800 + 1
plot(f1800(1800))
f1801(a1801) => a1801 + 1
plot(f1801(1801))
f1802(a1802) => a1802 + 1
plot(f1802(1802))
f1803(a1803) => a1803 + 1
plot(f1803(1803))
f1804(a1804) => a1804 + 1
plot(f1804(1804))
f1805(a1805) => a1805 + 1
plot(f1805(1805))
f1806(a1806) => a1806 + 1
plot(f1806(1806))
f1807(a1807) => a1807 + 1
plot(f1807(1807))
f1808(a1808) => a1808 + 1
plot(f1808(1808))
f1809(a1809) => a1809 + 1
plot(f1809(1809))
f1810(a1810) => a1810 + 1
plot(f1810(1810))
f1811(a1811) => a1811 + 1
plot(f1811(1811))
f1812(a1812) => a1812 + 1
plot(f1812(1812))
f1813(a1813) => a1813 + 1
plot(f1813(1813))
f1814(a1814) => a1814 + 1
plot(f1814(1814))
f1815(a1815) => a1815 + 1
plot(f1815(1815))
f1816(a1816) => a1816 + 1
plot(f1816(1816))
f1817(a1817) => a1817 + 1
plot(f1817(1817))
f1818(a1818) => a1818 + 1
plot(f1818(1818))
f1819(a1819) => a1819 + 1
plot(f1819(1819))
f1820(a1820) => a1820 + 1
plot(f1820(1820))
f1821(a1821) => a1821 + 1
plot(f1821(1821))
f1822(a1822) => a1822 + 1
plot(f1822(1822))
f1823(a1823) => a1823 + 1
plot(f1823(1823))
f1824(a1824) => a1824 + 1
plot(f1824(1824))
f1825(a1825) => a1825 + 1
plot(f1825(1825))
f1826(a1826) => a1826 + 1
plot(f1826(1826))
f1827(a1827) => a1827 + 1
plot(f1827(1827))
f1828(a1828) => a1828 + 1
plot(f1828(1828))
f1829(a1829) => a1829 + 1
plot(f1829(1829))
f1830(a1830) => a1830 + 1
plot(f1830(1830))
f1831(a1831) => a1831 + 1
plot(f1831(1831))
f1832(a1832) => a1832 + 1
plot(f1832(1832))
f1833(a1833) => a1833 + 1
plot(f1833(1833))
f1834(a1834) => a1834 + 1
plot(f1834(1834))
f1835(a1835) => a1835 + 1
plot(f1835(1835))
f1836(a1836) => a1836 + 1
plot(f1836(1836))
f1837(a1837) => a1837 + 1
plot(f1837(1837))
f1838(a1838) => a1838 + 1
plot(f1838(1838))
f1839(a1839) => a1839 + 1
plot(f1839(1839))
f1840(a1840) => a1840 + 1
plot(f1840(1840))
f1841(a1841) => a1841 + 1
plot(f1841(1841))
f1842(a1842) => a1842 + 1
plot(f1842(1842))
f1843(a1843) => a1843 + 1
plot(f1843(1843))
f1844(a1844) => a1844 + 1
plot(f1844(1844))
f1845(a1845) => a1845 + 1
plot(f1845(1845))
f1846(a1846) => a1846 + 1
plot(f1846(1846))
f1847(a1847) => a1847 + 1
plot(f1847(1847))
f1848(a1848) => a1848 + 1
plot(f1848(1848))
f1849(a1849) => a1849 + 1
plot(f1849(1849))
f1850(a1850) => a1850 + 1
plot(f1850(1850))
f1851(a1851) => a1851 + 1
plot(f1851(1851))
f1852(a1852) => a1852 + 1
plot(f1852(1852))
f1853(a1853) => a1853 + 1
plot(f1853(1853))
f1854(a1854) => a1854 + 1
plot(f1854(1854))
f1855(a1855) => a1855 + 1
plot(f1855(1855))
f1856(a1856) => a1856 + 1
plot(f1856(1856))
f1857(a1857) => a1857 + 1
plot(f1857(1857))
f1858(a1858) => a1858 + 1
plot(f1858(1858))
f1859(a1859) => a1859 + 1
plot(f1859(1859))
f1860(a1860) => a1860 + 1
plot(f1860(1860))
f1861(a1861) => a1861 + 1
plot(f1861(1861))
f1862(a1862) => a1862 + 1
plot(f1862(1862))
f1863(a1863) => a1863 + 1
plot(f1863(1863))
f1864(a1864) => a1864 + 1
plot(f1864(1864))
f1865(a1865) => a1865 + 1
plot(f1865(1865))
f1866(a1866) => a1866 + 1
plot(f1866(1866))
f1867(a1867) => a1867 + 1
plot(f1867(1867))
f1868(a1868) => a1868 + 1
plot(f1868(1868))
f1869(a1869) => a1869 + 1
plot(f1869(1869))
f1870(a1870) => a1870 + 1
plot(f1870(1870))
f1871(a1871) => a1871 + 1
plot(f1871(1871))
f1872(a1872) => a1872 + 1
plot(f1872(1872))
f1873(a1873) => a1873 + 1
plot(f1873(1873))
f1874(a1874) => a1874 + 1
plot(f1874(1874))
f1875(a1875) => a1875 + 1
plot(f1875(1875))
f1876(a1876) => a1876 + 1
plot(f1876(1876))
f1877(a1877) => a1877 + 1
plot(f1877(1877))
f1878(a1878) => a1878 + 1
plot(f1878(1878))
f1879(a1879) => a1879 + 1
plot(f1879(1879))
f1880(a1880) => a1880 + 1
plot(f1880(1880))
f1881(a1881) => a1881 + 1
plot(f1881(1881))
f1882(a1882) => a1882 + 1
plot(f1882(1882))
f1883(a1883) => a1883 + 1
plot(f1883(1883))
f1884(a1884) => a1884 + 1
plot(f1884(1884))
f1885(a1885) => a1885 + 1
plot(f1885(1885))
f1886(a1886) => a1886 + 1
plot(f1886(1886))
f1887(a1887) => a1887 + 1
plot(f1887(1887))
f1888(a1888) => a1888 + 1
plot(f1888(1888))
f1889(a1889) => a1889 + 1
plot(f1889(1889))
f1890(a1890) => a1890 + 1
plot(f1890(1890))
f1891(a1891) => a1891 + 1
plot(f1891(1891))
f1892(a1892) => a1892 + 1
plot(f1892(1892))
f1893(a1893) => a1893 + 1
plot(f1893(1893))
f1894(a1894) => a1894 + 1
plot(f1894(1894))
f1895(a1895) => a1895 + 1
plot(f1895(1895))
f1896(a1896) => a1896 + 1
plot(f1896(1896))
f1897(a1897) => a1897 + 1
plot(f1897(1897))
f1898(a1898) => a1898 + 1
plot(f1898(1898))
f1899(a1899) => a1899 + 1
plot(f1899(1899))
f1900(a1900) => a1900 + 1
plot(f1900(1900))
f1901(a1901) => a1901 + 1
plot(f1901(1901))
f1902(a1902) => a1902 + 1
plot(f1902(1902))
f1903(a1903) => a1903 + 1
plot(f1903(1903))
f1904(a1904) => a1904 + 1
plot(f1904(1904))
f1905(a1905) => a1905 + 1
plot(f1905(1905))
f1906(a1906) => a1906 + 1
plot(f1906(1906))
f1907(a1907) => a1907 + 1
plot(f1907(1907))
f1908(a1908) => a1908 + 1
plot(f1908(1908))
f1909(a1909) => a1909 + 1
plot(f1909(1909))
f1910(a1910) => a1910 + 1
plot(f1910(1910))
f1911(a1911) => a1911 + 1
plot(f1911(1911))
f1912(a1912) => a1912 + 1
plot(f1912(1912))
f1913(a1913) => a1913 + 1
plot(f1913(1913))
f1914(a1914) => a1914 + 1
plot(f1914(1914))
f1915(a1915) => a1915 + 1
plot(f1915(1915))
f1916(a1916) => a1916 + 1
plot(f1916(1916))
f1917(a1917) => a1917 + 1
plot(f1917(1917))
f1918(a1918) => a1918 + 1
plot(f1918(1918))
f1919(a1919) => a1919 + 1
plot(f1919(1919))
f1920(a1920) => a1920 + 1
plot(f1920(1920))
f1921(a1921) => a1921 + 1
plot(f1921(1921))
f1922(a1922) => a1922 + 1
plot(f1922(1922))
f1923(a1923) => a1923 + 1
plot(f1923(1923))
f1924(a1924) => a1924 + 1
plot(f1924(1924))
f1925(a1925) => a1925 + 1
plot(f1925(1925))
f1926(a1926) => a1926 + 1
plot(f1926(1926))
f1927(a1927) => a1927 + 1
plot(f1927(1927))
f1928(a1928) => a1928 + 1
plot(f1928(1928))
f1929(a1929) => a1929 + 1
plot(f1929(1929))
f1930(a1930) => a1930 + 1
plot(f1930(1930))
f1931(a1931) => a1931 + 1
plot(f1931(1931))
f1932(a1932) => a1932 + 1
plot(f1932(1932))
f1933(a1933) => a1933 + 1
plot(f1933(1933))
f1934(a1934) => a1934 + 1
plot(f1934(1934))
f1935(a1935) => a1935 + 1
plot(f1935(1935))
f1936(a1936) => a1936 + 1
plot(f1936(1936))
f1937(a1937) => a1937 + 1
plot(f1937(1937))
f1938(a1938) => a1938 + 1
plot(f1938(1938))
f1939(a1939) => a1939 + 1
plot(f1939(1939))
f1940(a1940) => a1940 + 1
plot(f1940(1940))
f1941(a1941) => a1941 + 1
plot(f1941(1941))
f1942(a1942) => a1942 + 1
plot(f1942(1942))
f1943(a1943) => a1943 + 1
plot(f1943(1943))
f1944(a1944) => a1944 + 1
plot(f1944(1944))
f1945(a1945) => a1945 + 1
plot(f1945(1945))
f1946(a1946) => a1946 + 1
plot(f1946(1946))
f1947(a1947) => a1947 + 1
plot(f1947(1947))
f1948(a1948) => a1948 + 1
plot(f1948(1948))
f1949(a1949) => a1949 + 1
plot(f1949(1949))
f1950(a1950) => a1950 + 1
plot(f1950(1950))
f1951(a1951) => a1951 + 1
plot(f1951(1951))
f1952(a1952) => a1952 + 1
plot(f1952(1952))
f1953(a1953) => a1953 + 1
plot(f1953(1953))
f1954(a1954) => a1954 + 1
plot(f1954(1954))
f1955(a1955) => a1955 + 1
plot(f1955(1955))
f1956(a1956) => a1956 + 1
plot(f1956(1956))
f1957(a1957) => a1957 + 1
plot(f1957(1957))
f1958(a1958) => a1958 + 1
plot(f1958(1958))
f1959(a1959) => a1959 + 1
plot(f1959(1959))
f1960(a1960) => a1960 + 1
plot(f1960(1960))
f1961(a1961) => a1961 + 1
plot(f1961(1961))
f1962(a1962) => a1962 + 1
plot(f1962(1962))
f1963(a1963) => a1963 + 1
plot(f1963(1963))
f1964(a1964) => a1964 + 1
plot(f1964(1964))
f1965(a1965) => a1965 + 1
plot(f1965(1965))
f1966(a1966) => a1966 + 1
plot(f1966(1966))
f1967(a1967) => a1967 + 1
plot(f1967(1967))
f1968(a1968) => a1968 + 1
plot(f1968(1968))
f1969(a1969) => a1969 + 1
plot(f1969(1969))
f1970(a1970) => a1970 + 1
plot(f1970(1970))
f1971(a1971) => a1971 + 1
plot(f1971(1971))
f1972(a1972) => a1972 + 1
plot(f1972(1972))
f1973(a1973) => a1973 + 1
plot(f1973(1973))
f1974(a1974) => a1974 + 1
plot(f1974(1974))
f1975(a1975) => a1975 + 1
plot(f1975(1975))
f1976(a1976) => a1976 + 1
plot(f1976(1976))
f1977(a1977) => a1977 + 1
plot(f1977(1977))
f1978(a1978) => a1978 + 1
plot(f1978(1978))
f1979(a1979) => a1979 + 1
plot(f1979(1979))
f1980(a1980) => a1980 + 1
plot(f1980(1980))
f1981(a1981) => a1981 + 1
plot(f1981(1981))
f1982(a1982) => a1982 + 1
plot(f1982(1982))
f1983(a1983) => a1983 + 1
plot(f1983(1983))
f1984(a1984) => a1984 + 1
plot(f1984(1984))
f1985(a1985) => a1985 + 1
plot(f1985(1985))
f1986(a1986) => a1986 + 1
plot(f1986(1986))
f1987(a1987) => a1987 + 1
plot(f1987(1987))
f1988(a1988) => a1988 + 1
plot(f1988(1988))
f1989(a1989) => a1989 + 1
plot(f1989(1989))
f1990(a1990) => a1990 + 1
plot(f1990(1990))
f1991(a1991) => a1991 + 1
plot(f1991(1991))
f1992(a1992) => a1992 + 1
plot(f1992(1992))
f1993(a1993) => a1993 + 1
plot(f1993(1993))

f1994(a1994) => a1994 + 1
plot(f1994(1994))
f1995(a1995) => a1995 + 1
plot(f1995(1995))
f1996(a1996) => a1996 + 1
plot(f1996(1996))
f1997(a1997) => a1997 + 1
plot(f1997(1997))
f1998(a1998) => a1998 + 1
plot(f1998(1998))
f1999(a1999) => a1999 + 1
plot(f1999(1999))
'''
}


k12 = {
    1 :'''
//@version=5
indicator("My script")
f0(a0) => a0 + 1
plot(f0(0))
f1(a1) => a1 + 1
plot(f1(1))
f2(a2) => a2 + 1
plot(f2(2))
f3(a3) => a3 + 1
plot(f3(3))
f4(a4) => a4 + 1
plot(f4(4))
f5(a5) => a5 + 1
plot(f5(5))
f6(a6) => a6 + 1
plot(f6(6))
f7(a7) => a7 + 1
plot(f7(7))
f8(a8) => a8 + 1
plot(f8(8))
f9(a9) => a9 + 1
plot(f9(9))
f10(a10) => a10 + 1
plot(f10(10))
f11(a11) => a11 + 1
plot(f11(11))
f12(a12) => a12 + 1
plot(f12(12))
f13(a13) => a13 + 1
plot(f13(13))
f14(a14) => a14 + 1
plot(f14(14))
f15(a15) => a15 + 1
plot(f15(15))
f16(a16) => a16 + 1
plot(f16(16))
f17(a17) => a17 + 1
plot(f17(17))
f18(a18) => a18 + 1
plot(f18(18))
f19(a19) => a19 + 1
plot(f19(19))
f20(a20) => a20 + 1
plot(f20(20))
f21(a21) => a21 + 1
plot(f21(21))
f22(a22) => a22 + 1
plot(f22(22))
f23(a23) => a23 + 1
plot(f23(23))
f24(a24) => a24 + 1
plot(f24(24))
f25(a25) => a25 + 1
plot(f25(25))
f26(a26) => a26 + 1
plot(f26(26))
f27(a27) => a27 + 1
plot(f27(27))
f28(a28) => a28 + 1
plot(f28(28))
f29(a29) => a29 + 1
plot(f29(29))
f30(a30) => a30 + 1
plot(f30(30))
f31(a31) => a31 + 1
plot(f31(31))
f32(a32) => a32 + 1
plot(f32(32))
f33(a33) => a33 + 1
plot(f33(33))
f34(a34) => a34 + 1
plot(f34(34))
f35(a35) => a35 + 1
plot(f35(35))
f36(a36) => a36 + 1
plot(f36(36))
f37(a37) => a37 + 1
plot(f37(37))
f38(a38) => a38 + 1
plot(f38(38))
f39(a39) => a39 + 1
plot(f39(39))
f40(a40) => a40 + 1
plot(f40(40))
f41(a41) => a41 + 1
plot(f41(41))
f42(a42) => a42 + 1
plot(f42(42))
f43(a43) => a43 + 1
plot(f43(43))
f44(a44) => a44 + 1
plot(f44(44))
f45(a45) => a45 + 1
plot(f45(45))
f46(a46) => a46 + 1
plot(f46(46))
f47(a47) => a47 + 1
plot(f47(47))
f48(a48) => a48 + 1
plot(f48(48))
f49(a49) => a49 + 1
plot(f49(49))
f50(a50) => a50 + 1
plot(f50(50))
f51(a51) => a51 + 1
plot(f51(51))
f52(a52) => a52 + 1
plot(f52(52))
f53(a53) => a53 + 1
plot(f53(53))
f54(a54) => a54 + 1
plot(f54(54))
f55(a55) => a55 + 1
plot(f55(55))
f56(a56) => a56 + 1
plot(f56(56))
f57(a57) => a57 + 1
plot(f57(57))
f58(a58) => a58 + 1
plot(f58(58))
f59(a59) => a59 + 1
plot(f59(59))
f60(a60) => a60 + 1
plot(f60(60))
f61(a61) => a61 + 1
plot(f61(61))
f62(a62) => a62 + 1
plot(f62(62))
f63(a63) => a63 + 1
plot(f63(63))
f64(a64) => a64 + 1
plot(f64(64))
f65(a65) => a65 + 1
plot(f65(65))
f66(a66) => a66 + 1
plot(f66(66))
f67(a67) => a67 + 1
plot(f67(67))
f68(a68) => a68 + 1
plot(f68(68))
f69(a69) => a69 + 1
plot(f69(69))
f70(a70) => a70 + 1
plot(f70(70))
f71(a71) => a71 + 1
plot(f71(71))
f72(a72) => a72 + 1
plot(f72(72))
f73(a73) => a73 + 1
plot(f73(73))
f74(a74) => a74 + 1
plot(f74(74))
f75(a75) => a75 + 1
plot(f75(75))
f76(a76) => a76 + 1
plot(f76(76))
f77(a77) => a77 + 1
plot(f77(77))
f78(a78) => a78 + 1
plot(f78(78))
f79(a79) => a79 + 1
plot(f79(79))
f80(a80) => a80 + 1
plot(f80(80))
f81(a81) => a81 + 1
plot(f81(81))
f82(a82) => a82 + 1
plot(f82(82))
f83(a83) => a83 + 1
plot(f83(83))
f84(a84) => a84 + 1
plot(f84(84))
f85(a85) => a85 + 1
plot(f85(85))
f86(a86) => a86 + 1
plot(f86(86))
f87(a87) => a87 + 1
plot(f87(87))
f88(a88) => a88 + 1
plot(f88(88))
f89(a89) => a89 + 1
plot(f89(89))
f90(a90) => a90 + 1
plot(f90(90))
f91(a91) => a91 + 1
plot(f91(91))
f92(a92) => a92 + 1
plot(f92(92))
f93(a93) => a93 + 1
plot(f93(93))
f94(a94) => a94 + 1
plot(f94(94))
f95(a95) => a95 + 1
plot(f95(95))
f96(a96) => a96 + 1
plot(f96(96))
f97(a97) => a97 + 1
plot(f97(97))
f98(a98) => a98 + 1
plot(f98(98))
f99(a99) => a99 + 1
plot(f99(99))
f100(a100) => a100 + 1
plot(f100(100))
f101(a101) => a101 + 1
plot(f101(101))
f102(a102) => a102 + 1
plot(f102(102))
f103(a103) => a103 + 1
plot(f103(103))
f104(a104) => a104 + 1
plot(f104(104))
f105(a105) => a105 + 1
plot(f105(105))
f106(a106) => a106 + 1
plot(f106(106))
f107(a107) => a107 + 1
plot(f107(107))
f108(a108) => a108 + 1
plot(f108(108))
f109(a109) => a109 + 1
plot(f109(109))
f110(a110) => a110 + 1
plot(f110(110))
f111(a111) => a111 + 1
plot(f111(111))
f112(a112) => a112 + 1
plot(f112(112))
f113(a113) => a113 + 1
plot(f113(113))
f114(a114) => a114 + 1
plot(f114(114))
f115(a115) => a115 + 1
plot(f115(115))
f116(a116) => a116 + 1
plot(f116(116))
f117(a117) => a117 + 1
plot(f117(117))
f118(a118) => a118 + 1
plot(f118(118))
f119(a119) => a119 + 1
plot(f119(119))
f120(a120) => a120 + 1
plot(f120(120))
f121(a121) => a121 + 1
plot(f121(121))
f122(a122) => a122 + 1
plot(f122(122))
f123(a123) => a123 + 1
plot(f123(123))
f124(a124) => a124 + 1
plot(f124(124))
f125(a125) => a125 + 1
plot(f125(125))
f126(a126) => a126 + 1
plot(f126(126))
f127(a127) => a127 + 1
plot(f127(127))
f128(a128) => a128 + 1
plot(f128(128))
f129(a129) => a129 + 1
plot(f129(129))
f130(a130) => a130 + 1
plot(f130(130))
f131(a131) => a131 + 1
plot(f131(131))
f132(a132) => a132 + 1
plot(f132(132))
f133(a133) => a133 + 1
plot(f133(133))
f134(a134) => a134 + 1
plot(f134(134))
f135(a135) => a135 + 1
plot(f135(135))
f136(a136) => a136 + 1
plot(f136(136))
f137(a137) => a137 + 1
plot(f137(137))
f138(a138) => a138 + 1
plot(f138(138))
f139(a139) => a139 + 1
plot(f139(139))
f140(a140) => a140 + 1
plot(f140(140))
f141(a141) => a141 + 1
plot(f141(141))
f142(a142) => a142 + 1
plot(f142(142))
f143(a143) => a143 + 1
plot(f143(143))
f144(a144) => a144 + 1
plot(f144(144))
f145(a145) => a145 + 1
plot(f145(145))
f146(a146) => a146 + 1
plot(f146(146))
f147(a147) => a147 + 1
plot(f147(147))
f148(a148) => a148 + 1
plot(f148(148))
f149(a149) => a149 + 1
plot(f149(149))
f150(a150) => a150 + 1
plot(f150(150))
f151(a151) => a151 + 1
plot(f151(151))
f152(a152) => a152 + 1
plot(f152(152))
f153(a153) => a153 + 1
plot(f153(153))
f154(a154) => a154 + 1
plot(f154(154))
f155(a155) => a155 + 1
plot(f155(155))
f156(a156) => a156 + 1
plot(f156(156))
f157(a157) => a157 + 1
plot(f157(157))
f158(a158) => a158 + 1
plot(f158(158))
f159(a159) => a159 + 1
plot(f159(159))
f160(a160) => a160 + 1
plot(f160(160))
f161(a161) => a161 + 1
plot(f161(161))
f162(a162) => a162 + 1
plot(f162(162))
f163(a163) => a163 + 1
plot(f163(163))
f164(a164) => a164 + 1
plot(f164(164))
f165(a165) => a165 + 1
plot(f165(165))
f166(a166) => a166 + 1
plot(f166(166))
f167(a167) => a167 + 1
plot(f167(167))
f168(a168) => a168 + 1
plot(f168(168))
f169(a169) => a169 + 1
plot(f169(169))
f170(a170) => a170 + 1
plot(f170(170))
f171(a171) => a171 + 1
plot(f171(171))
f172(a172) => a172 + 1
plot(f172(172))
f173(a173) => a173 + 1
plot(f173(173))
f174(a174) => a174 + 1
plot(f174(174))
f175(a175) => a175 + 1
plot(f175(175))
f176(a176) => a176 + 1
plot(f176(176))
f177(a177) => a177 + 1
plot(f177(177))
f178(a178) => a178 + 1
plot(f178(178))
f179(a179) => a179 + 1
plot(f179(179))
f180(a180) => a180 + 1
plot(f180(180))
f181(a181) => a181 + 1
plot(f181(181))
f182(a182) => a182 + 1
plot(f182(182))
f183(a183) => a183 + 1
plot(f183(183))
f184(a184) => a184 + 1
plot(f184(184))
f185(a185) => a185 + 1
plot(f185(185))
f186(a186) => a186 + 1
plot(f186(186))
f187(a187) => a187 + 1
plot(f187(187))
f188(a188) => a188 + 1
plot(f188(188))
f189(a189) => a189 + 1
plot(f189(189))
f190(a190) => a190 + 1
plot(f190(190))
f191(a191) => a191 + 1
plot(f191(191))
f192(a192) => a192 + 1
plot(f192(192))
f193(a193) => a193 + 1
plot(f193(193))
f194(a194) => a194 + 1
plot(f194(194))
f195(a195) => a195 + 1
plot(f195(195))
f196(a196) => a196 + 1
plot(f196(196))
f197(a197) => a197 + 1
plot(f197(197))
f198(a198) => a198 + 1
plot(f198(198))
f199(a199) => a199 + 1
plot(f199(199))
f200(a200) => a200 + 1
plot(f200(200))
f201(a201) => a201 + 1
plot(f201(201))
f202(a202) => a202 + 1
plot(f202(202))
f203(a203) => a203 + 1
plot(f203(203))
f204(a204) => a204 + 1
plot(f204(204))
f205(a205) => a205 + 1
plot(f205(205))
f206(a206) => a206 + 1
plot(f206(206))
f207(a207) => a207 + 1
plot(f207(207))
f208(a208) => a208 + 1
plot(f208(208))
f209(a209) => a209 + 1
plot(f209(209))
f210(a210) => a210 + 1
plot(f210(210))
f211(a211) => a211 + 1
plot(f211(211))
f212(a212) => a212 + 1
plot(f212(212))
f213(a213) => a213 + 1
plot(f213(213))
f214(a214) => a214 + 1
plot(f214(214))
f215(a215) => a215 + 1
plot(f215(215))
f216(a216) => a216 + 1
plot(f216(216))
f217(a217) => a217 + 1
plot(f217(217))
f218(a218) => a218 + 1
plot(f218(218))
f219(a219) => a219 + 1
plot(f219(219))
f220(a220) => a220 + 1
plot(f220(220))
f221(a221) => a221 + 1
plot(f221(221))
f222(a222) => a222 + 1
plot(f222(222))
f223(a223) => a223 + 1
plot(f223(223))
f224(a224) => a224 + 1
plot(f224(224))
f225(a225) => a225 + 1
plot(f225(225))
f226(a226) => a226 + 1
plot(f226(226))
f227(a227) => a227 + 1
plot(f227(227))
f228(a228) => a228 + 1
plot(f228(228))
f229(a229) => a229 + 1
plot(f229(229))
f230(a230) => a230 + 1
plot(f230(230))
f231(a231) => a231 + 1
plot(f231(231))
f232(a232) => a232 + 1
plot(f232(232))
f233(a233) => a233 + 1
plot(f233(233))
f234(a234) => a234 + 1
plot(f234(234))
f235(a235) => a235 + 1
plot(f235(235))
f236(a236) => a236 + 1
plot(f236(236))
f237(a237) => a237 + 1
plot(f237(237))
f238(a238) => a238 + 1
plot(f238(238))
f239(a239) => a239 + 1
plot(f239(239))
f240(a240) => a240 + 1
plot(f240(240))
f241(a241) => a241 + 1
plot(f241(241))
f242(a242) => a242 + 1
plot(f242(242))
f243(a243) => a243 + 1
plot(f243(243))
f244(a244) => a244 + 1
plot(f244(244))
f245(a245) => a245 + 1
plot(f245(245))
f246(a246) => a246 + 1
plot(f246(246))
f247(a247) => a247 + 1
plot(f247(247))
f248(a248) => a248 + 1
plot(f248(248))
f249(a249) => a249 + 1
plot(f249(249))
f250(a250) => a250 + 1
plot(f250(250))
f251(a251) => a251 + 1
plot(f251(251))
f252(a252) => a252 + 1
plot(f252(252))
f253(a253) => a253 + 1
plot(f253(253))
f254(a254) => a254 + 1
plot(f254(254))
f255(a255) => a255 + 1
plot(f255(255))
f256(a256) => a256 + 1
plot(f256(256))
f257(a257) => a257 + 1
plot(f257(257))
f258(a258) => a258 + 1
plot(f258(258))
f259(a259) => a259 + 1
plot(f259(259))
f260(a260) => a260 + 1
plot(f260(260))
f261(a261) => a261 + 1
plot(f261(261))
f262(a262) => a262 + 1
plot(f262(262))
f263(a263) => a263 + 1
plot(f263(263))
f264(a264) => a264 + 1
plot(f264(264))
f265(a265) => a265 + 1
plot(f265(265))
f266(a266) => a266 + 1
plot(f266(266))
f267(a267) => a267 + 1
plot(f267(267))
f268(a268) => a268 + 1
plot(f268(268))
f269(a269) => a269 + 1
plot(f269(269))
f270(a270) => a270 + 1
plot(f270(270))
f271(a271) => a271 + 1
plot(f271(271))
f272(a272) => a272 + 1
plot(f272(272))
f273(a273) => a273 + 1
plot(f273(273))
f274(a274) => a274 + 1
plot(f274(274))
f275(a275) => a275 + 1
plot(f275(275))
f276(a276) => a276 + 1
plot(f276(276))
f277(a277) => a277 + 1
plot(f277(277))
f278(a278) => a278 + 1
plot(f278(278))
f279(a279) => a279 + 1
plot(f279(279))
f280(a280) => a280 + 1
plot(f280(280))
f281(a281) => a281 + 1
plot(f281(281))
f282(a282) => a282 + 1
plot(f282(282))
f283(a283) => a283 + 1
plot(f283(283))
f284(a284) => a284 + 1
plot(f284(284))
f285(a285) => a285 + 1
plot(f285(285))
f286(a286) => a286 + 1
plot(f286(286))
f287(a287) => a287 + 1
plot(f287(287))
f288(a288) => a288 + 1
plot(f288(288))
f289(a289) => a289 + 1
plot(f289(289))
f290(a290) => a290 + 1
plot(f290(290))
f291(a291) => a291 + 1
plot(f291(291))
f292(a292) => a292 + 1
plot(f292(292))
f293(a293) => a293 + 1
plot(f293(293))
f294(a294) => a294 + 1
plot(f294(294))
f295(a295) => a295 + 1
plot(f295(295))
f296(a296) => a296 + 1
plot(f296(296))
f297(a297) => a297 + 1
plot(f297(297))
f298(a298) => a298 + 1
plot(f298(298))
f299(a299) => a299 + 1
plot(f299(299))
f300(a300) => a300 + 1
plot(f300(300))
f301(a301) => a301 + 1
plot(f301(301))
f302(a302) => a302 + 1
plot(f302(302))
f303(a303) => a303 + 1
plot(f303(303))
f304(a304) => a304 + 1
plot(f304(304))
f305(a305) => a305 + 1
plot(f305(305))
f306(a306) => a306 + 1
plot(f306(306))
f307(a307) => a307 + 1
plot(f307(307))
f308(a308) => a308 + 1
plot(f308(308))
f309(a309) => a309 + 1
plot(f309(309))
f310(a310) => a310 + 1
plot(f310(310))
f311(a311) => a311 + 1
plot(f311(311))
f312(a312) => a312 + 1
plot(f312(312))
f313(a313) => a313 + 1
plot(f313(313))
f314(a314) => a314 + 1
plot(f314(314))
f315(a315) => a315 + 1
plot(f315(315))
f316(a316) => a316 + 1
plot(f316(316))
f317(a317) => a317 + 1
plot(f317(317))
f318(a318) => a318 + 1
plot(f318(318))
f319(a319) => a319 + 1
plot(f319(319))
f320(a320) => a320 + 1
plot(f320(320))
f321(a321) => a321 + 1
plot(f321(321))
f322(a322) => a322 + 1
plot(f322(322))
f323(a323) => a323 + 1
plot(f323(323))
f324(a324) => a324 + 1
plot(f324(324))
f325(a325) => a325 + 1
plot(f325(325))
f326(a326) => a326 + 1
plot(f326(326))
f327(a327) => a327 + 1
plot(f327(327))
f328(a328) => a328 + 1
plot(f328(328))
f329(a329) => a329 + 1
plot(f329(329))
f330(a330) => a330 + 1
plot(f330(330))
f331(a331) => a331 + 1
plot(f331(331))
f332(a332) => a332 + 1
plot(f332(332))
f333(a333) => a333 + 1
plot(f333(333))
f334(a334) => a334 + 1
plot(f334(334))
f335(a335) => a335 + 1
plot(f335(335))
f336(a336) => a336 + 1
plot(f336(336))
f337(a337) => a337 + 1
plot(f337(337))
f338(a338) => a338 + 1
plot(f338(338))
f339(a339) => a339 + 1
plot(f339(339))
f340(a340) => a340 + 1
plot(f340(340))
f341(a341) => a341 + 1
plot(f341(341))
f342(a342) => a342 + 1
plot(f342(342))
f343(a343) => a343 + 1
plot(f343(343))
f344(a344) => a344 + 1
plot(f344(344))
f345(a345) => a345 + 1
plot(f345(345))
f346(a346) => a346 + 1
plot(f346(346))
f347(a347) => a347 + 1
plot(f347(347))
f348(a348) => a348 + 1
plot(f348(348))
f349(a349) => a349 + 1
plot(f349(349))
f350(a350) => a350 + 1
plot(f350(350))
f351(a351) => a351 + 1
plot(f351(351))
f352(a352) => a352 + 1
plot(f352(352))
f353(a353) => a353 + 1
plot(f353(353))
f354(a354) => a354 + 1
plot(f354(354))
f355(a355) => a355 + 1
plot(f355(355))
f356(a356) => a356 + 1
plot(f356(356))
f357(a357) => a357 + 1
plot(f357(357))
f358(a358) => a358 + 1
plot(f358(358))
f359(a359) => a359 + 1
plot(f359(359))
f360(a360) => a360 + 1
plot(f360(360))
f361(a361) => a361 + 1
plot(f361(361))
f362(a362) => a362 + 1
plot(f362(362))
f363(a363) => a363 + 1
plot(f363(363))
f364(a364) => a364 + 1
plot(f364(364))
f365(a365) => a365 + 1
plot(f365(365))
f366(a366) => a366 + 1
plot(f366(366))
f367(a367) => a367 + 1
plot(f367(367))
f368(a368) => a368 + 1
plot(f368(368))
f369(a369) => a369 + 1
plot(f369(369))
f370(a370) => a370 + 1
plot(f370(370))
f371(a371) => a371 + 1
plot(f371(371))
f372(a372) => a372 + 1
plot(f372(372))
f373(a373) => a373 + 1
plot(f373(373))
f374(a374) => a374 + 1
plot(f374(374))
f375(a375) => a375 + 1
plot(f375(375))
f376(a376) => a376 + 1
plot(f376(376))
f377(a377) => a377 + 1
plot(f377(377))
f378(a378) => a378 + 1
plot(f378(378))
f379(a379) => a379 + 1
plot(f379(379))
f380(a380) => a380 + 1
plot(f380(380))
f381(a381) => a381 + 1
plot(f381(381))
f382(a382) => a382 + 1
plot(f382(382))
f383(a383) => a383 + 1
plot(f383(383))
f384(a384) => a384 + 1
plot(f384(384))
f385(a385) => a385 + 1
plot(f385(385))
f386(a386) => a386 + 1
plot(f386(386))
f387(a387) => a387 + 1
plot(f387(387))
f388(a388) => a388 + 1
plot(f388(388))
f389(a389) => a389 + 1
plot(f389(389))
f390(a390) => a390 + 1
plot(f390(390))
f391(a391) => a391 + 1
plot(f391(391))
f392(a392) => a392 + 1
plot(f392(392))
f393(a393) => a393 + 1
plot(f393(393))
f394(a394) => a394 + 1
plot(f394(394))
f395(a395) => a395 + 1
plot(f395(395))
f396(a396) => a396 + 1
plot(f396(396))
f397(a397) => a397 + 1
plot(f397(397))
f398(a398) => a398 + 1
plot(f398(398))
f399(a399) => a399 + 1
plot(f399(399))
f400(a400) => a400 + 1
plot(f400(400))
f401(a401) => a401 + 1
plot(f401(401))
f402(a402) => a402 + 1
plot(f402(402))
f403(a403) => a403 + 1
plot(f403(403))
f404(a404) => a404 + 1
plot(f404(404))
f405(a405) => a405 + 1
plot(f405(405))
f406(a406) => a406 + 1
plot(f406(406))
f407(a407) => a407 + 1
plot(f407(407))
f408(a408) => a408 + 1
plot(f408(408))
f409(a409) => a409 + 1
plot(f409(409))
f410(a410) => a410 + 1
plot(f410(410))
f411(a411) => a411 + 1
plot(f411(411))
f412(a412) => a412 + 1
plot(f412(412))
f413(a413) => a413 + 1
plot(f413(413))
f414(a414) => a414 + 1
plot(f414(414))
f415(a415) => a415 + 1
plot(f415(415))
f416(a416) => a416 + 1
plot(f416(416))
f417(a417) => a417 + 1
plot(f417(417))
f418(a418) => a418 + 1
plot(f418(418))
f419(a419) => a419 + 1
plot(f419(419))
f420(a420) => a420 + 1
plot(f420(420))
f421(a421) => a421 + 1
plot(f421(421))
f422(a422) => a422 + 1
plot(f422(422))
f423(a423) => a423 + 1
plot(f423(423))
f424(a424) => a424 + 1
plot(f424(424))
f425(a425) => a425 + 1
plot(f425(425))
f426(a426) => a426 + 1
plot(f426(426))
f427(a427) => a427 + 1
plot(f427(427))
f428(a428) => a428 + 1
plot(f428(428))
f429(a429) => a429 + 1
plot(f429(429))
f430(a430) => a430 + 1
plot(f430(430))
f431(a431) => a431 + 1
plot(f431(431))
f432(a432) => a432 + 1
plot(f432(432))
f433(a433) => a433 + 1
plot(f433(433))
f434(a434) => a434 + 1
plot(f434(434))
f435(a435) => a435 + 1
plot(f435(435))
f436(a436) => a436 + 1
plot(f436(436))
f437(a437) => a437 + 1
plot(f437(437))
f438(a438) => a438 + 1
plot(f438(438))
f439(a439) => a439 + 1
plot(f439(439))
f440(a440) => a440 + 1
plot(f440(440))
f441(a441) => a441 + 1
plot(f441(441))
f442(a442) => a442 + 1
plot(f442(442))
f443(a443) => a443 + 1
plot(f443(443))
f444(a444) => a444 + 1
plot(f444(444))
f445(a445) => a445 + 1
plot(f445(445))
f446(a446) => a446 + 1
plot(f446(446))
f447(a447) => a447 + 1
plot(f447(447))
f448(a448) => a448 + 1
plot(f448(448))
f449(a449) => a449 + 1
plot(f449(449))
f450(a450) => a450 + 1
plot(f450(450))
f451(a451) => a451 + 1
plot(f451(451))
f452(a452) => a452 + 1
plot(f452(452))
f453(a453) => a453 + 1
plot(f453(453))
f454(a454) => a454 + 1
plot(f454(454))
f455(a455) => a455 + 1
plot(f455(455))
f456(a456) => a456 + 1
plot(f456(456))
f457(a457) => a457 + 1
plot(f457(457))
f458(a458) => a458 + 1
plot(f458(458))
f459(a459) => a459 + 1
plot(f459(459))
f460(a460) => a460 + 1
plot(f460(460))
f461(a461) => a461 + 1
plot(f461(461))
f462(a462) => a462 + 1
plot(f462(462))
f463(a463) => a463 + 1
plot(f463(463))
f464(a464) => a464 + 1
plot(f464(464))
f465(a465) => a465 + 1
plot(f465(465))
f466(a466) => a466 + 1
plot(f466(466))
f467(a467) => a467 + 1
plot(f467(467))
f468(a468) => a468 + 1
plot(f468(468))
f469(a469) => a469 + 1
plot(f469(469))
f470(a470) => a470 + 1
plot(f470(470))
f471(a471) => a471 + 1
plot(f471(471))
f472(a472) => a472 + 1
plot(f472(472))
f473(a473) => a473 + 1
plot(f473(473))
f474(a474) => a474 + 1
plot(f474(474))
f475(a475) => a475 + 1
plot(f475(475))
f476(a476) => a476 + 1
plot(f476(476))
f477(a477) => a477 + 1
plot(f477(477))
f478(a478) => a478 + 1
plot(f478(478))
f479(a479) => a479 + 1
plot(f479(479))
f480(a480) => a480 + 1
plot(f480(480))
f481(a481) => a481 + 1
plot(f481(481))
f482(a482) => a482 + 1
plot(f482(482))
f483(a483) => a483 + 1
plot(f483(483))
f484(a484) => a484 + 1
plot(f484(484))
f485(a485) => a485 + 1
plot(f485(485))
f486(a486) => a486 + 1
plot(f486(486))
f487(a487) => a487 + 1
plot(f487(487))
f488(a488) => a488 + 1
plot(f488(488))
f489(a489) => a489 + 1
plot(f489(489))
f490(a490) => a490 + 1
plot(f490(490))
f491(a491) => a491 + 1
plot(f491(491))
f492(a492) => a492 + 1
plot(f492(492))
f493(a493) => a493 + 1
plot(f493(493))
f494(a494) => a494 + 1
plot(f494(494))
f495(a495) => a495 + 1
plot(f495(495))
f496(a496) => a496 + 1
plot(f496(496))
f497(a497) => a497 + 1
plot(f497(497))
f498(a498) => a498 + 1
plot(f498(498))
f499(a499) => a499 + 1
plot(f499(499))
f500(a500) => a500 + 1
plot(f500(500))
f501(a501) => a501 + 1
plot(f501(501))
f502(a502) => a502 + 1
plot(f502(502))
f503(a503) => a503 + 1
plot(f503(503))
f504(a504) => a504 + 1
plot(f504(504))
f505(a505) => a505 + 1
plot(f505(505))
f506(a506) => a506 + 1
plot(f506(506))
f507(a507) => a507 + 1
plot(f507(507))
f508(a508) => a508 + 1
plot(f508(508))
f509(a509) => a509 + 1
plot(f509(509))
f510(a510) => a510 + 1
plot(f510(510))
f511(a511) => a511 + 1
plot(f511(511))
f512(a512) => a512 + 1
plot(f512(512))
f513(a513) => a513 + 1
plot(f513(513))
f514(a514) => a514 + 1
plot(f514(514))
f515(a515) => a515 + 1
plot(f515(515))
f516(a516) => a516 + 1
plot(f516(516))
f517(a517) => a517 + 1
plot(f517(517))
f518(a518) => a518 + 1
plot(f518(518))
f519(a519) => a519 + 1
plot(f519(519))
f520(a520) => a520 + 1
plot(f520(520))
f521(a521) => a521 + 1
plot(f521(521))
f522(a522) => a522 + 1
plot(f522(522))
f523(a523) => a523 + 1
plot(f523(523))
f524(a524) => a524 + 1
plot(f524(524))
f525(a525) => a525 + 1
plot(f525(525))
f526(a526) => a526 + 1
plot(f526(526))
f527(a527) => a527 + 1
plot(f527(527))
f528(a528) => a528 + 1
plot(f528(528))
f529(a529) => a529 + 1
plot(f529(529))
f530(a530) => a530 + 1
plot(f530(530))
f531(a531) => a531 + 1
plot(f531(531))
f532(a532) => a532 + 1
plot(f532(532))
f533(a533) => a533 + 1
plot(f533(533))
f534(a534) => a534 + 1
plot(f534(534))
f535(a535) => a535 + 1
plot(f535(535))
f536(a536) => a536 + 1
plot(f536(536))
f537(a537) => a537 + 1
plot(f537(537))
f538(a538) => a538 + 1
plot(f538(538))
f539(a539) => a539 + 1
plot(f539(539))
f540(a540) => a540 + 1
plot(f540(540))
f541(a541) => a541 + 1
plot(f541(541))
f542(a542) => a542 + 1
plot(f542(542))
f543(a543) => a543 + 1
plot(f543(543))
f544(a544) => a544 + 1
plot(f544(544))
f545(a545) => a545 + 1
plot(f545(545))
f546(a546) => a546 + 1
plot(f546(546))
f547(a547) => a547 + 1
plot(f547(547))
f548(a548) => a548 + 1
plot(f548(548))
f549(a549) => a549 + 1
plot(f549(549))
f550(a550) => a550 + 1
plot(f550(550))
f551(a551) => a551 + 1
plot(f551(551))
f552(a552) => a552 + 1
plot(f552(552))
f553(a553) => a553 + 1
plot(f553(553))
f554(a554) => a554 + 1
plot(f554(554))
f555(a555) => a555 + 1
plot(f555(555))
f556(a556) => a556 + 1
plot(f556(556))
f557(a557) => a557 + 1
plot(f557(557))
f558(a558) => a558 + 1
plot(f558(558))
f559(a559) => a559 + 1
plot(f559(559))
f560(a560) => a560 + 1
plot(f560(560))
f561(a561) => a561 + 1
plot(f561(561))
f562(a562) => a562 + 1
plot(f562(562))
f563(a563) => a563 + 1
plot(f563(563))
f564(a564) => a564 + 1
plot(f564(564))
f565(a565) => a565 + 1
plot(f565(565))
f566(a566) => a566 + 1
plot(f566(566))
f567(a567) => a567 + 1
plot(f567(567))
f568(a568) => a568 + 1
plot(f568(568))
f569(a569) => a569 + 1
plot(f569(569))
f570(a570) => a570 + 1
plot(f570(570))
f571(a571) => a571 + 1
plot(f571(571))
f572(a572) => a572 + 1
plot(f572(572))
f573(a573) => a573 + 1
plot(f573(573))
f574(a574) => a574 + 1
plot(f574(574))
f575(a575) => a575 + 1
plot(f575(575))
f576(a576) => a576 + 1
plot(f576(576))
f577(a577) => a577 + 1
plot(f577(577))
f578(a578) => a578 + 1
plot(f578(578))
f579(a579) => a579 + 1
plot(f579(579))
f580(a580) => a580 + 1
plot(f580(580))
f581(a581) => a581 + 1
plot(f581(581))
f582(a582) => a582 + 1
plot(f582(582))
f583(a583) => a583 + 1
plot(f583(583))
f584(a584) => a584 + 1
plot(f584(584))
f585(a585) => a585 + 1
plot(f585(585))
f586(a586) => a586 + 1
plot(f586(586))
f587(a587) => a587 + 1
plot(f587(587))
f588(a588) => a588 + 1
plot(f588(588))
f589(a589) => a589 + 1
plot(f589(589))
f590(a590) => a590 + 1
plot(f590(590))
f591(a591) => a591 + 1
plot(f591(591))
f592(a592) => a592 + 1
plot(f592(592))
f593(a593) => a593 + 1
plot(f593(593))
f594(a594) => a594 + 1
plot(f594(594))
f595(a595) => a595 + 1
plot(f595(595))
f596(a596) => a596 + 1
plot(f596(596))
f597(a597) => a597 + 1
plot(f597(597))
f598(a598) => a598 + 1
plot(f598(598))
f599(a599) => a599 + 1
plot(f599(599))
f600(a600) => a600 + 1
plot(f600(600))
f601(a601) => a601 + 1
plot(f601(601))
f602(a602) => a602 + 1
plot(f602(602))
f603(a603) => a603 + 1
plot(f603(603))
f604(a604) => a604 + 1
plot(f604(604))
f605(a605) => a605 + 1
plot(f605(605))
f606(a606) => a606 + 1
plot(f606(606))
f607(a607) => a607 + 1
plot(f607(607))
f608(a608) => a608 + 1
plot(f608(608))
f609(a609) => a609 + 1
plot(f609(609))
f610(a610) => a610 + 1
plot(f610(610))
f611(a611) => a611 + 1
plot(f611(611))
f612(a612) => a612 + 1
plot(f612(612))
f613(a613) => a613 + 1
plot(f613(613))
f614(a614) => a614 + 1
plot(f614(614))
f615(a615) => a615 + 1
plot(f615(615))
f616(a616) => a616 + 1
plot(f616(616))
f617(a617) => a617 + 1
plot(f617(617))
f618(a618) => a618 + 1
plot(f618(618))
f619(a619) => a619 + 1
plot(f619(619))
f620(a620) => a620 + 1
plot(f620(620))
f621(a621) => a621 + 1
plot(f621(621))
f622(a622) => a622 + 1
plot(f622(622))
f623(a623) => a623 + 1
plot(f623(623))
f624(a624) => a624 + 1
plot(f624(624))
f625(a625) => a625 + 1
plot(f625(625))
f626(a626) => a626 + 1
plot(f626(626))
f627(a627) => a627 + 1
plot(f627(627))
f628(a628) => a628 + 1
plot(f628(628))
f629(a629) => a629 + 1
plot(f629(629))
f630(a630) => a630 + 1
plot(f630(630))
f631(a631) => a631 + 1
plot(f631(631))
f632(a632) => a632 + 1
plot(f632(632))
f633(a633) => a633 + 1
plot(f633(633))
f634(a634) => a634 + 1
plot(f634(634))
f635(a635) => a635 + 1
plot(f635(635))
f636(a636) => a636 + 1
plot(f636(636))
f637(a637) => a637 + 1
plot(f637(637))
f638(a638) => a638 + 1
plot(f638(638))
f639(a639) => a639 + 1
plot(f639(639))
f640(a640) => a640 + 1
plot(f640(640))
f641(a641) => a641 + 1
plot(f641(641))
f642(a642) => a642 + 1
plot(f642(642))
f643(a643) => a643 + 1
plot(f643(643))
f644(a644) => a644 + 1
plot(f644(644))
f645(a645) => a645 + 1
plot(f645(645))
f646(a646) => a646 + 1
plot(f646(646))
f647(a647) => a647 + 1
plot(f647(647))
f648(a648) => a648 + 1
plot(f648(648))
f649(a649) => a649 + 1
plot(f649(649))
f650(a650) => a650 + 1
plot(f650(650))
f651(a651) => a651 + 1
plot(f651(651))
f652(a652) => a652 + 1
plot(f652(652))
f653(a653) => a653 + 1
plot(f653(653))
f654(a654) => a654 + 1
plot(f654(654))
f655(a655) => a655 + 1
plot(f655(655))
f656(a656) => a656 + 1
plot(f656(656))
f657(a657) => a657 + 1
plot(f657(657))
f658(a658) => a658 + 1
plot(f658(658))
f659(a659) => a659 + 1
plot(f659(659))
f660(a660) => a660 + 1
plot(f660(660))
f661(a661) => a661 + 1
plot(f661(661))
f662(a662) => a662 + 1
plot(f662(662))
f663(a663) => a663 + 1
plot(f663(663))
f664(a664) => a664 + 1
plot(f664(664))
f665(a665) => a665 + 1
plot(f665(665))
f666(a666) => a666 + 1
plot(f666(666))
f667(a667) => a667 + 1
plot(f667(667))
f668(a668) => a668 + 1
plot(f668(668))
f669(a669) => a669 + 1
plot(f669(669))
f670(a670) => a670 + 1
plot(f670(670))
f671(a671) => a671 + 1
plot(f671(671))
f672(a672) => a672 + 1
plot(f672(672))
f673(a673) => a673 + 1
plot(f673(673))
f674(a674) => a674 + 1
plot(f674(674))
f675(a675) => a675 + 1
plot(f675(675))
f676(a676) => a676 + 1
plot(f676(676))
f677(a677) => a677 + 1
plot(f677(677))
f678(a678) => a678 + 1
plot(f678(678))
f679(a679) => a679 + 1
plot(f679(679))
f680(a680) => a680 + 1
plot(f680(680))
f681(a681) => a681 + 1
plot(f681(681))
f682(a682) => a682 + 1
plot(f682(682))
f683(a683) => a683 + 1
plot(f683(683))
f684(a684) => a684 + 1
plot(f684(684))
f685(a685) => a685 + 1
plot(f685(685))
f686(a686) => a686 + 1
plot(f686(686))
f687(a687) => a687 + 1
plot(f687(687))
f688(a688) => a688 + 1
plot(f688(688))
f689(a689) => a689 + 1
plot(f689(689))
f690(a690) => a690 + 1
plot(f690(690))
f691(a691) => a691 + 1
plot(f691(691))
f692(a692) => a692 + 1
plot(f692(692))
f693(a693) => a693 + 1
plot(f693(693))
f694(a694) => a694 + 1
plot(f694(694))
f695(a695) => a695 + 1
plot(f695(695))
f696(a696) => a696 + 1
plot(f696(696))
f697(a697) => a697 + 1
plot(f697(697))
f698(a698) => a698 + 1
plot(f698(698))
f699(a699) => a699 + 1
plot(f699(699))
f700(a700) => a700 + 1
plot(f700(700))
f701(a701) => a701 + 1
plot(f701(701))
f702(a702) => a702 + 1
plot(f702(702))
f703(a703) => a703 + 1
plot(f703(703))
f704(a704) => a704 + 1
plot(f704(704))
f705(a705) => a705 + 1
plot(f705(705))
f706(a706) => a706 + 1
plot(f706(706))
f707(a707) => a707 + 1
plot(f707(707))
f708(a708) => a708 + 1
plot(f708(708))
f709(a709) => a709 + 1
plot(f709(709))
f710(a710) => a710 + 1
plot(f710(710))
f711(a711) => a711 + 1
plot(f711(711))
f712(a712) => a712 + 1
plot(f712(712))
f713(a713) => a713 + 1
plot(f713(713))
f714(a714) => a714 + 1
plot(f714(714))
f715(a715) => a715 + 1
plot(f715(715))
f716(a716) => a716 + 1
plot(f716(716))
f717(a717) => a717 + 1
plot(f717(717))
f718(a718) => a718 + 1
plot(f718(718))
f719(a719) => a719 + 1
plot(f719(719))
f720(a720) => a720 + 1
plot(f720(720))
f721(a721) => a721 + 1
plot(f721(721))
f722(a722) => a722 + 1
plot(f722(722))
f723(a723) => a723 + 1
plot(f723(723))
f724(a724) => a724 + 1
plot(f724(724))
f725(a725) => a725 + 1
plot(f725(725))
f726(a726) => a726 + 1
plot(f726(726))
f727(a727) => a727 + 1
plot(f727(727))
f728(a728) => a728 + 1
plot(f728(728))
f729(a729) => a729 + 1
plot(f729(729))
f730(a730) => a730 + 1
plot(f730(730))
f731(a731) => a731 + 1
plot(f731(731))
f732(a732) => a732 + 1
plot(f732(732))
f733(a733) => a733 + 1
plot(f733(733))
f734(a734) => a734 + 1
plot(f734(734))
f735(a735) => a735 + 1
plot(f735(735))
f736(a736) => a736 + 1
plot(f736(736))
f737(a737) => a737 + 1
plot(f737(737))
f738(a738) => a738 + 1
plot(f738(738))
f739(a739) => a739 + 1
plot(f739(739))
f740(a740) => a740 + 1
plot(f740(740))
f741(a741) => a741 + 1
plot(f741(741))
f742(a742) => a742 + 1
plot(f742(742))
f743(a743) => a743 + 1
plot(f743(743))
f744(a744) => a744 + 1
plot(f744(744))
f745(a745) => a745 + 1
plot(f745(745))
f746(a746) => a746 + 1
plot(f746(746))
f747(a747) => a747 + 1
plot(f747(747))
f748(a748) => a748 + 1
plot(f748(748))
f749(a749) => a749 + 1
plot(f749(749))
f750(a750) => a750 + 1
plot(f750(750))
f751(a751) => a751 + 1
plot(f751(751))
f752(a752) => a752 + 1
plot(f752(752))
f753(a753) => a753 + 1
plot(f753(753))
f754(a754) => a754 + 1
plot(f754(754))
f755(a755) => a755 + 1
plot(f755(755))
f756(a756) => a756 + 1
plot(f756(756))
f757(a757) => a757 + 1
plot(f757(757))
f758(a758) => a758 + 1
plot(f758(758))
f759(a759) => a759 + 1
plot(f759(759))
f760(a760) => a760 + 1
plot(f760(760))
f761(a761) => a761 + 1
plot(f761(761))
f762(a762) => a762 + 1
plot(f762(762))
f763(a763) => a763 + 1
plot(f763(763))
f764(a764) => a764 + 1
plot(f764(764))
f765(a765) => a765 + 1
plot(f765(765))
f766(a766) => a766 + 1
plot(f766(766))
f767(a767) => a767 + 1
plot(f767(767))
f768(a768) => a768 + 1
plot(f768(768))
f769(a769) => a769 + 1
plot(f769(769))
f770(a770) => a770 + 1
plot(f770(770))
f771(a771) => a771 + 1
plot(f771(771))
f772(a772) => a772 + 1
plot(f772(772))
f773(a773) => a773 + 1
plot(f773(773))
f774(a774) => a774 + 1
plot(f774(774))
f775(a775) => a775 + 1
plot(f775(775))
f776(a776) => a776 + 1
plot(f776(776))
f777(a777) => a777 + 1
plot(f777(777))
f778(a778) => a778 + 1
plot(f778(778))
f779(a779) => a779 + 1
plot(f779(779))
f780(a780) => a780 + 1
plot(f780(780))
f781(a781) => a781 + 1
plot(f781(781))
f782(a782) => a782 + 1
plot(f782(782))
f783(a783) => a783 + 1
plot(f783(783))
f784(a784) => a784 + 1
plot(f784(784))
f785(a785) => a785 + 1
plot(f785(785))
f786(a786) => a786 + 1
plot(f786(786))
f787(a787) => a787 + 1
plot(f787(787))
f788(a788) => a788 + 1
plot(f788(788))
f789(a789) => a789 + 1
plot(f789(789))
f790(a790) => a790 + 1
plot(f790(790))
f791(a791) => a791 + 1
plot(f791(791))
f792(a792) => a792 + 1
plot(f792(792))
f793(a793) => a793 + 1
plot(f793(793))
f794(a794) => a794 + 1
plot(f794(794))
f795(a795) => a795 + 1
plot(f795(795))
f796(a796) => a796 + 1
plot(f796(796))
f797(a797) => a797 + 1
plot(f797(797))
f798(a798) => a798 + 1
plot(f798(798))
f799(a799) => a799 + 1
plot(f799(799))
f800(a800) => a800 + 1
plot(f800(800))
f801(a801) => a801 + 1
plot(f801(801))
f802(a802) => a802 + 1
plot(f802(802))
f803(a803) => a803 + 1
plot(f803(803))
f804(a804) => a804 + 1
plot(f804(804))
f805(a805) => a805 + 1
plot(f805(805))
f806(a806) => a806 + 1
plot(f806(806))
f807(a807) => a807 + 1
plot(f807(807))
f808(a808) => a808 + 1
plot(f808(808))
f809(a809) => a809 + 1
plot(f809(809))
f810(a810) => a810 + 1
plot(f810(810))
f811(a811) => a811 + 1
plot(f811(811))
f812(a812) => a812 + 1
plot(f812(812))
f813(a813) => a813 + 1
plot(f813(813))
f814(a814) => a814 + 1
plot(f814(814))
f815(a815) => a815 + 1
plot(f815(815))
f816(a816) => a816 + 1
plot(f816(816))
f817(a817) => a817 + 1
plot(f817(817))
f818(a818) => a818 + 1
plot(f818(818))
f819(a819) => a819 + 1
plot(f819(819))
f820(a820) => a820 + 1
plot(f820(820))
f821(a821) => a821 + 1
plot(f821(821))
f822(a822) => a822 + 1
plot(f822(822))
f823(a823) => a823 + 1
plot(f823(823))
f824(a824) => a824 + 1
plot(f824(824))
f825(a825) => a825 + 1
plot(f825(825))
f826(a826) => a826 + 1
plot(f826(826))
f827(a827) => a827 + 1
plot(f827(827))
f828(a828) => a828 + 1
plot(f828(828))
f829(a829) => a829 + 1
plot(f829(829))
f830(a830) => a830 + 1
plot(f830(830))
f831(a831) => a831 + 1
plot(f831(831))
f832(a832) => a832 + 1
plot(f832(832))
f833(a833) => a833 + 1
plot(f833(833))
f834(a834) => a834 + 1
plot(f834(834))
f835(a835) => a835 + 1
plot(f835(835))
f836(a836) => a836 + 1
plot(f836(836))
f837(a837) => a837 + 1
plot(f837(837))
f838(a838) => a838 + 1
plot(f838(838))
f839(a839) => a839 + 1
plot(f839(839))
f840(a840) => a840 + 1
plot(f840(840))
f841(a841) => a841 + 1
plot(f841(841))
f842(a842) => a842 + 1
plot(f842(842))
f843(a843) => a843 + 1
plot(f843(843))
f844(a844) => a844 + 1
plot(f844(844))
f845(a845) => a845 + 1
plot(f845(845))
f846(a846) => a846 + 1
plot(f846(846))
f847(a847) => a847 + 1
plot(f847(847))
f848(a848) => a848 + 1
plot(f848(848))
f849(a849) => a849 + 1
plot(f849(849))
f850(a850) => a850 + 1
plot(f850(850))
f851(a851) => a851 + 1
plot(f851(851))
f852(a852) => a852 + 1
plot(f852(852))
f853(a853) => a853 + 1
plot(f853(853))
f854(a854) => a854 + 1
plot(f854(854))
f855(a855) => a855 + 1
plot(f855(855))
f856(a856) => a856 + 1
plot(f856(856))
f857(a857) => a857 + 1
plot(f857(857))
f858(a858) => a858 + 1
plot(f858(858))
f859(a859) => a859 + 1
plot(f859(859))
f860(a860) => a860 + 1
plot(f860(860))
f861(a861) => a861 + 1
plot(f861(861))
f862(a862) => a862 + 1
plot(f862(862))
f863(a863) => a863 + 1
plot(f863(863))
f864(a864) => a864 + 1
plot(f864(864))
f865(a865) => a865 + 1
plot(f865(865))
f866(a866) => a866 + 1
plot(f866(866))
f867(a867) => a867 + 1
plot(f867(867))
f868(a868) => a868 + 1
plot(f868(868))
f869(a869) => a869 + 1
plot(f869(869))
f870(a870) => a870 + 1
plot(f870(870))
f871(a871) => a871 + 1
plot(f871(871))
f872(a872) => a872 + 1
plot(f872(872))
f873(a873) => a873 + 1
plot(f873(873))
f874(a874) => a874 + 1
plot(f874(874))
f875(a875) => a875 + 1
plot(f875(875))
f876(a876) => a876 + 1
plot(f876(876))
f877(a877) => a877 + 1
plot(f877(877))
f878(a878) => a878 + 1
plot(f878(878))
f879(a879) => a879 + 1
plot(f879(879))
f880(a880) => a880 + 1
plot(f880(880))
f881(a881) => a881 + 1
plot(f881(881))
f882(a882) => a882 + 1
plot(f882(882))
f883(a883) => a883 + 1
plot(f883(883))
f884(a884) => a884 + 1
plot(f884(884))
f885(a885) => a885 + 1
plot(f885(885))
f886(a886) => a886 + 1
plot(f886(886))
f887(a887) => a887 + 1
plot(f887(887))
f888(a888) => a888 + 1
plot(f888(888))
f889(a889) => a889 + 1
plot(f889(889))
f890(a890) => a890 + 1
plot(f890(890))
f891(a891) => a891 + 1
plot(f891(891))
f892(a892) => a892 + 1
plot(f892(892))
f893(a893) => a893 + 1
plot(f893(893))
f894(a894) => a894 + 1
plot(f894(894))
f895(a895) => a895 + 1
plot(f895(895))
f896(a896) => a896 + 1
plot(f896(896))
f897(a897) => a897 + 1
plot(f897(897))
f898(a898) => a898 + 1
plot(f898(898))
f899(a899) => a899 + 1
plot(f899(899))
f900(a900) => a900 + 1
plot(f900(900))
f901(a901) => a901 + 1
plot(f901(901))
f902(a902) => a902 + 1
plot(f902(902))
f903(a903) => a903 + 1
plot(f903(903))
f904(a904) => a904 + 1
plot(f904(904))
f905(a905) => a905 + 1
plot(f905(905))
f906(a906) => a906 + 1
plot(f906(906))
f907(a907) => a907 + 1
plot(f907(907))
f908(a908) => a908 + 1
plot(f908(908))
f909(a909) => a909 + 1
plot(f909(909))
f910(a910) => a910 + 1
plot(f910(910))
f911(a911) => a911 + 1
plot(f911(911))
f912(a912) => a912 + 1
plot(f912(912))
f913(a913) => a913 + 1
plot(f913(913))
f914(a914) => a914 + 1
plot(f914(914))
f915(a915) => a915 + 1
plot(f915(915))
f916(a916) => a916 + 1
plot(f916(916))
f917(a917) => a917 + 1
plot(f917(917))
f918(a918) => a918 + 1
plot(f918(918))
f919(a919) => a919 + 1
plot(f919(919))
f920(a920) => a920 + 1
plot(f920(920))
f921(a921) => a921 + 1
plot(f921(921))
f922(a922) => a922 + 1
plot(f922(922))
f923(a923) => a923 + 1
plot(f923(923))
f924(a924) => a924 + 1
plot(f924(924))
f925(a925) => a925 + 1
plot(f925(925))
f926(a926) => a926 + 1
plot(f926(926))
f927(a927) => a927 + 1
plot(f927(927))
f928(a928) => a928 + 1
plot(f928(928))
f929(a929) => a929 + 1
plot(f929(929))
f930(a930) => a930 + 1
plot(f930(930))
f931(a931) => a931 + 1
plot(f931(931))
f932(a932) => a932 + 1
plot(f932(932))
f933(a933) => a933 + 1
plot(f933(933))
f934(a934) => a934 + 1
plot(f934(934))
f935(a935) => a935 + 1
plot(f935(935))
f936(a936) => a936 + 1
plot(f936(936))
f937(a937) => a937 + 1
plot(f937(937))
f938(a938) => a938 + 1
plot(f938(938))
f939(a939) => a939 + 1
plot(f939(939))
f940(a940) => a940 + 1
plot(f940(940))
f941(a941) => a941 + 1
plot(f941(941))
f942(a942) => a942 + 1
plot(f942(942))
f943(a943) => a943 + 1
plot(f943(943))
f944(a944) => a944 + 1
plot(f944(944))
f945(a945) => a945 + 1
plot(f945(945))
f946(a946) => a946 + 1
plot(f946(946))
f947(a947) => a947 + 1
plot(f947(947))
f948(a948) => a948 + 1
plot(f948(948))
f949(a949) => a949 + 1
plot(f949(949))
f950(a950) => a950 + 1
plot(f950(950))
f951(a951) => a951 + 1
plot(f951(951))
f952(a952) => a952 + 1
plot(f952(952))
f953(a953) => a953 + 1
plot(f953(953))
f954(a954) => a954 + 1
plot(f954(954))
f955(a955) => a955 + 1
plot(f955(955))
f956(a956) => a956 + 1
plot(f956(956))
f957(a957) => a957 + 1
plot(f957(957))
f958(a958) => a958 + 1
plot(f958(958))
f959(a959) => a959 + 1
plot(f959(959))
f960(a960) => a960 + 1
plot(f960(960))
f961(a961) => a961 + 1
plot(f961(961))
f962(a962) => a962 + 1
plot(f962(962))
f963(a963) => a963 + 1
plot(f963(963))
f964(a964) => a964 + 1
plot(f964(964))
f965(a965) => a965 + 1
plot(f965(965))
f966(a966) => a966 + 1
plot(f966(966))
f967(a967) => a967 + 1
plot(f967(967))
f968(a968) => a968 + 1
plot(f968(968))
f969(a969) => a969 + 1
plot(f969(969))
f970(a970) => a970 + 1
plot(f970(970))
f971(a971) => a971 + 1
plot(f971(971))
f972(a972) => a972 + 1
plot(f972(972))
f973(a973) => a973 + 1
plot(f973(973))
f974(a974) => a974 + 1
plot(f974(974))
f975(a975) => a975 + 1
plot(f975(975))
f976(a976) => a976 + 1
plot(f976(976))
f977(a977) => a977 + 1
plot(f977(977))
f978(a978) => a978 + 1
plot(f978(978))
f979(a979) => a979 + 1
plot(f979(979))
f980(a980) => a980 + 1
plot(f980(980))
f981(a981) => a981 + 1
plot(f981(981))
f982(a982) => a982 + 1
plot(f982(982))
f983(a983) => a983 + 1
plot(f983(983))
f984(a984) => a984 + 1
plot(f984(984))
f985(a985) => a985 + 1
plot(f985(985))
f986(a986) => a986 + 1
plot(f986(986))
f987(a987) => a987 + 1
plot(f987(987))
f988(a988) => a988 + 1
plot(f988(988))
f989(a989) => a989 + 1
plot(f989(989))
f990(a990) => a990 + 1
plot(f990(990))
f991(a991) => a991 + 1
plot(f991(991))
f992(a992) => a992 + 1
plot(f992(992))
f993(a993) => a993 + 1
plot(f993(993))
f994(a994) => a994 + 1
plot(f994(994))
f995(a995) => a995 + 1
plot(f995(995))
f996(a996) => a996 + 1
plot(f996(996))
f997(a997) => a997 + 1
plot(f997(997))
f998(a998) => a998 + 1
plot(f998(998))
f999(a999) => a999 + 1
plot(f999(999))
f1000(a1000) => a1000 + 1
plot(f1000(1000))
f1001(a1001) => a1001 + 1
plot(f1001(1001))
f1002(a1002) => a1002 + 1
plot(f1002(1002))
f1003(a1003) => a1003 + 1
plot(f1003(1003))
f1004(a1004) => a1004 + 1
plot(f1004(1004))
f1005(a1005) => a1005 + 1
plot(f1005(1005))
f1006(a1006) => a1006 + 1
plot(f1006(1006))
f1007(a1007) => a1007 + 1
plot(f1007(1007))
f1008(a1008) => a1008 + 1
plot(f1008(1008))
f1009(a1009) => a1009 + 1
plot(f1009(1009))
f1010(a1010) => a1010 + 1
plot(f1010(1010))
f1011(a1011) => a1011 + 1
plot(f1011(1011))
f1012(a1012) => a1012 + 1
plot(f1012(1012))
f1013(a1013) => a1013 + 1
plot(f1013(1013))
f1014(a1014) => a1014 + 1
plot(f1014(1014))
f1015(a1015) => a1015 + 1
plot(f1015(1015))
f1016(a1016) => a1016 + 1
plot(f1016(1016))
f1017(a1017) => a1017 + 1
plot(f1017(1017))
f1018(a1018) => a1018 + 1
plot(f1018(1018))
f1019(a1019) => a1019 + 1
plot(f1019(1019))
f1020(a1020) => a1020 + 1
plot(f1020(1020))
f1021(a1021) => a1021 + 1
plot(f1021(1021))
f1022(a1022) => a1022 + 1
plot(f1022(1022))
f1023(a1023) => a1023 + 1
plot(f1023(1023))
f1024(a1024) => a1024 + 1
plot(f1024(1024))
f1025(a1025) => a1025 + 1
plot(f1025(1025))
f1026(a1026) => a1026 + 1
plot(f1026(1026))
f1027(a1027) => a1027 + 1
plot(f1027(1027))
f1028(a1028) => a1028 + 1
plot(f1028(1028))
f1029(a1029) => a1029 + 1
plot(f1029(1029))
f1030(a1030) => a1030 + 1
plot(f1030(1030))
f1031(a1031) => a1031 + 1
plot(f1031(1031))
f1032(a1032) => a1032 + 1
plot(f1032(1032))
f1033(a1033) => a1033 + 1
plot(f1033(1033))
f1034(a1034) => a1034 + 1
plot(f1034(1034))
f1035(a1035) => a1035 + 1
plot(f1035(1035))
f1036(a1036) => a1036 + 1
plot(f1036(1036))
f1037(a1037) => a1037 + 1
plot(f1037(1037))
f1038(a1038) => a1038 + 1
plot(f1038(1038))
f1039(a1039) => a1039 + 1
plot(f1039(1039))
f1040(a1040) => a1040 + 1
plot(f1040(1040))
f1041(a1041) => a1041 + 1
plot(f1041(1041))
f1042(a1042) => a1042 + 1
plot(f1042(1042))
f1043(a1043) => a1043 + 1
plot(f1043(1043))
f1044(a1044) => a1044 + 1
plot(f1044(1044))
f1045(a1045) => a1045 + 1
plot(f1045(1045))
f1046(a1046) => a1046 + 1
plot(f1046(1046))
f1047(a1047) => a1047 + 1
plot(f1047(1047))
f1048(a1048) => a1048 + 1
plot(f1048(1048))
f1049(a1049) => a1049 + 1
plot(f1049(1049))
f1050(a1050) => a1050 + 1
plot(f1050(1050))
f1051(a1051) => a1051 + 1
plot(f1051(1051))
f1052(a1052) => a1052 + 1
plot(f1052(1052))
f1053(a1053) => a1053 + 1
plot(f1053(1053))
f1054(a1054) => a1054 + 1
plot(f1054(1054))
f1055(a1055) => a1055 + 1
plot(f1055(1055))
f1056(a1056) => a1056 + 1
plot(f1056(1056))
f1057(a1057) => a1057 + 1
plot(f1057(1057))
f1058(a1058) => a1058 + 1
plot(f1058(1058))
f1059(a1059) => a1059 + 1
plot(f1059(1059))
f1060(a1060) => a1060 + 1
plot(f1060(1060))
f1061(a1061) => a1061 + 1
plot(f1061(1061))
f1062(a1062) => a1062 + 1
plot(f1062(1062))
f1063(a1063) => a1063 + 1
plot(f1063(1063))
f1064(a1064) => a1064 + 1
plot(f1064(1064))
f1065(a1065) => a1065 + 1
plot(f1065(1065))
f1066(a1066) => a1066 + 1
plot(f1066(1066))
f1067(a1067) => a1067 + 1
plot(f1067(1067))
f1068(a1068) => a1068 + 1
plot(f1068(1068))
f1069(a1069) => a1069 + 1
plot(f1069(1069))
f1070(a1070) => a1070 + 1
plot(f1070(1070))
f1071(a1071) => a1071 + 1
plot(f1071(1071))
f1072(a1072) => a1072 + 1
plot(f1072(1072))
f1073(a1073) => a1073 + 1
plot(f1073(1073))
f1074(a1074) => a1074 + 1
plot(f1074(1074))
f1075(a1075) => a1075 + 1
plot(f1075(1075))
f1076(a1076) => a1076 + 1
plot(f1076(1076))
f1077(a1077) => a1077 + 1
plot(f1077(1077))
f1078(a1078) => a1078 + 1
plot(f1078(1078))
f1079(a1079) => a1079 + 1
plot(f1079(1079))
f1080(a1080) => a1080 + 1
plot(f1080(1080))
f1081(a1081) => a1081 + 1
plot(f1081(1081))
f1082(a1082) => a1082 + 1
plot(f1082(1082))
f1083(a1083) => a1083 + 1
plot(f1083(1083))
f1084(a1084) => a1084 + 1
plot(f1084(1084))
f1085(a1085) => a1085 + 1
plot(f1085(1085))
f1086(a1086) => a1086 + 1
plot(f1086(1086))
f1087(a1087) => a1087 + 1
plot(f1087(1087))
f1088(a1088) => a1088 + 1
plot(f1088(1088))
f1089(a1089) => a1089 + 1
plot(f1089(1089))
f1090(a1090) => a1090 + 1
plot(f1090(1090))
f1091(a1091) => a1091 + 1
plot(f1091(1091))
f1092(a1092) => a1092 + 1
plot(f1092(1092))
f1093(a1093) => a1093 + 1
plot(f1093(1093))
f1094(a1094) => a1094 + 1
plot(f1094(1094))
f1095(a1095) => a1095 + 1
plot(f1095(1095))
f1096(a1096) => a1096 + 1
plot(f1096(1096))
f1097(a1097) => a1097 + 1
plot(f1097(1097))
f1098(a1098) => a1098 + 1
plot(f1098(1098))
f1099(a1099) => a1099 + 1
plot(f1099(1099))
f1100(a1100) => a1100 + 1
plot(f1100(1100))
f1101(a1101) => a1101 + 1
plot(f1101(1101))
f1102(a1102) => a1102 + 1
plot(f1102(1102))
f1103(a1103) => a1103 + 1
plot(f1103(1103))
f1104(a1104) => a1104 + 1
plot(f1104(1104))
f1105(a1105) => a1105 + 1
plot(f1105(1105))
f1106(a1106) => a1106 + 1
plot(f1106(1106))
f1107(a1107) => a1107 + 1
plot(f1107(1107))
f1108(a1108) => a1108 + 1
plot(f1108(1108))
f1109(a1109) => a1109 + 1
plot(f1109(1109))
f1110(a1110) => a1110 + 1
plot(f1110(1110))
f1111(a1111) => a1111 + 1
plot(f1111(1111))
f1112(a1112) => a1112 + 1
plot(f1112(1112))
f1113(a1113) => a1113 + 1
plot(f1113(1113))
f1114(a1114) => a1114 + 1
plot(f1114(1114))
f1115(a1115) => a1115 + 1
plot(f1115(1115))
f1116(a1116) => a1116 + 1
plot(f1116(1116))
f1117(a1117) => a1117 + 1
plot(f1117(1117))
f1118(a1118) => a1118 + 1
plot(f1118(1118))
f1119(a1119) => a1119 + 1
plot(f1119(1119))
f1120(a1120) => a1120 + 1
plot(f1120(1120))
f1121(a1121) => a1121 + 1
plot(f1121(1121))
f1122(a1122) => a1122 + 1
plot(f1122(1122))
f1123(a1123) => a1123 + 1
plot(f1123(1123))
f1124(a1124) => a1124 + 1
plot(f1124(1124))
f1125(a1125) => a1125 + 1
plot(f1125(1125))
f1126(a1126) => a1126 + 1
plot(f1126(1126))
f1127(a1127) => a1127 + 1
plot(f1127(1127))
f1128(a1128) => a1128 + 1
plot(f1128(1128))
f1129(a1129) => a1129 + 1
plot(f1129(1129))
f1130(a1130) => a1130 + 1
plot(f1130(1130))
f1131(a1131) => a1131 + 1
plot(f1131(1131))
f1132(a1132) => a1132 + 1
plot(f1132(1132))
f1133(a1133) => a1133 + 1
plot(f1133(1133))
f1134(a1134) => a1134 + 1
plot(f1134(1134))
f1135(a1135) => a1135 + 1
plot(f1135(1135))
f1136(a1136) => a1136 + 1
plot(f1136(1136))
f1137(a1137) => a1137 + 1
plot(f1137(1137))
f1138(a1138) => a1138 + 1
plot(f1138(1138))
f1139(a1139) => a1139 + 1
plot(f1139(1139))
f1140(a1140) => a1140 + 1
plot(f1140(1140))
f1141(a1141) => a1141 + 1
plot(f1141(1141))
f1142(a1142) => a1142 + 1
plot(f1142(1142))
f1143(a1143) => a1143 + 1
plot(f1143(1143))
f1144(a1144) => a1144 + 1
plot(f1144(1144))
f1145(a1145) => a1145 + 1
plot(f1145(1145))
f1146(a1146) => a1146 + 1
plot(f1146(1146))
f1147(a1147) => a1147 + 1
plot(f1147(1147))
f1148(a1148) => a1148 + 1
plot(f1148(1148))
f1149(a1149) => a1149 + 1
plot(f1149(1149))
f1150(a1150) => a1150 + 1
plot(f1150(1150))
f1151(a1151) => a1151 + 1
plot(f1151(1151))
f1152(a1152) => a1152 + 1
plot(f1152(1152))
f1153(a1153) => a1153 + 1
plot(f1153(1153))
f1154(a1154) => a1154 + 1
plot(f1154(1154))
f1155(a1155) => a1155 + 1
plot(f1155(1155))
f1156(a1156) => a1156 + 1
plot(f1156(1156))
f1157(a1157) => a1157 + 1
plot(f1157(1157))
f1158(a1158) => a1158 + 1
plot(f1158(1158))
f1159(a1159) => a1159 + 1
plot(f1159(1159))
f1160(a1160) => a1160 + 1
plot(f1160(1160))
f1161(a1161) => a1161 + 1
plot(f1161(1161))
f1162(a1162) => a1162 + 1
plot(f1162(1162))
f1163(a1163) => a1163 + 1
plot(f1163(1163))
f1164(a1164) => a1164 + 1
plot(f1164(1164))
f1165(a1165) => a1165 + 1
plot(f1165(1165))
f1166(a1166) => a1166 + 1
plot(f1166(1166))
f1167(a1167) => a1167 + 1
plot(f1167(1167))
f1168(a1168) => a1168 + 1
plot(f1168(1168))
f1169(a1169) => a1169 + 1
plot(f1169(1169))
f1170(a1170) => a1170 + 1
plot(f1170(1170))
f1171(a1171) => a1171 + 1
plot(f1171(1171))
f1172(a1172) => a1172 + 1
plot(f1172(1172))
f1173(a1173) => a1173 + 1
plot(f1173(1173))
f1174(a1174) => a1174 + 1
plot(f1174(1174))
f1175(a1175) => a1175 + 1
plot(f1175(1175))
f1176(a1176) => a1176 + 1
plot(f1176(1176))
f1177(a1177) => a1177 + 1
plot(f1177(1177))
f1178(a1178) => a1178 + 1
plot(f1178(1178))
f1179(a1179) => a1179 + 1
plot(f1179(1179))
f1180(a1180) => a1180 + 1
plot(f1180(1180))
f1181(a1181) => a1181 + 1
plot(f1181(1181))
f1182(a1182) => a1182 + 1
plot(f1182(1182))
f1183(a1183) => a1183 + 1
plot(f1183(1183))
f1184(a1184) => a1184 + 1
plot(f1184(1184))
f1185(a1185) => a1185 + 1
plot(f1185(1185))
f1186(a1186) => a1186 + 1
plot(f1186(1186))
f1187(a1187) => a1187 + 1
plot(f1187(1187))
f1188(a1188) => a1188 + 1
plot(f1188(1188))
f1189(a1189) => a1189 + 1
plot(f1189(1189))
f1190(a1190) => a1190 + 1
plot(f1190(1190))
f1191(a1191) => a1191 + 1
plot(f1191(1191))
f1192(a1192) => a1192 + 1
plot(f1192(1192))
f1193(a1193) => a1193 + 1
plot(f1193(1193))
f1194(a1194) => a1194 + 1
plot(f1194(1194))
f1195(a1195) => a1195 + 1
plot(f1195(1195))
f1196(a1196) => a1196 + 1
plot(f1196(1196))
f1197(a1197) => a1197 + 1
plot(f1197(1197))
f1198(a1198) => a1198 + 1
plot(f1198(1198))
f1199(a1199) => a1199 + 1
plot(f1199(1199))
f1200(a1200) => a1200 + 1
plot(f1200(1200))
f1201(a1201) => a1201 + 1
plot(f1201(1201))
f1202(a1202) => a1202 + 1
plot(f1202(1202))
f1203(a1203) => a1203 + 1
plot(f1203(1203))
f1204(a1204) => a1204 + 1
plot(f1204(1204))
f1205(a1205) => a1205 + 1
plot(f1205(1205))
f1206(a1206) => a1206 + 1
plot(f1206(1206))
f1207(a1207) => a1207 + 1
plot(f1207(1207))
f1208(a1208) => a1208 + 1
plot(f1208(1208))
f1209(a1209) => a1209 + 1
plot(f1209(1209))
f1210(a1210) => a1210 + 1
plot(f1210(1210))
f1211(a1211) => a1211 + 1
plot(f1211(1211))
f1212(a1212) => a1212 + 1
plot(f1212(1212))
f1213(a1213) => a1213 + 1
plot(f1213(1213))
f1214(a1214) => a1214 + 1
plot(f1214(1214))
f1215(a1215) => a1215 + 1
plot(f1215(1215))
f1216(a1216) => a1216 + 1
plot(f1216(1216))
f1217(a1217) => a1217 + 1
plot(f1217(1217))
f1218(a1218) => a1218 + 1
plot(f1218(1218))
f1219(a1219) => a1219 + 1
plot(f1219(1219))
f1220(a1220) => a1220 + 1
plot(f1220(1220))
f1221(a1221) => a1221 + 1
plot(f1221(1221))
f1222(a1222) => a1222 + 1
plot(f1222(1222))
f1223(a1223) => a1223 + 1
plot(f1223(1223))
f1224(a1224) => a1224 + 1
plot(f1224(1224))
f1225(a1225) => a1225 + 1
plot(f1225(1225))
f1226(a1226) => a1226 + 1
plot(f1226(1226))
f1227(a1227) => a1227 + 1
plot(f1227(1227))
f1228(a1228) => a1228 + 1
plot(f1228(1228))
f1229(a1229) => a1229 + 1
plot(f1229(1229))
f1230(a1230) => a1230 + 1
plot(f1230(1230))
f1231(a1231) => a1231 + 1
plot(f1231(1231))
f1232(a1232) => a1232 + 1
plot(f1232(1232))
f1233(a1233) => a1233 + 1
plot(f1233(1233))
f1234(a1234) => a1234 + 1
plot(f1234(1234))
f1235(a1235) => a1235 + 1
plot(f1235(1235))
f1236(a1236) => a1236 + 1
plot(f1236(1236))
f1237(a1237) => a1237 + 1
plot(f1237(1237))
f1238(a1238) => a1238 + 1
plot(f1238(1238))
f1239(a1239) => a1239 + 1
plot(f1239(1239))
f1240(a1240) => a1240 + 1
plot(f1240(1240))
f1241(a1241) => a1241 + 1
plot(f1241(1241))
f1242(a1242) => a1242 + 1
plot(f1242(1242))
f1243(a1243) => a1243 + 1
plot(f1243(1243))
f1244(a1244) => a1244 + 1
plot(f1244(1244))
f1245(a1245) => a1245 + 1
plot(f1245(1245))
f1246(a1246) => a1246 + 1
plot(f1246(1246))
f1247(a1247) => a1247 + 1
plot(f1247(1247))
f1248(a1248) => a1248 + 1
plot(f1248(1248))
f1249(a1249) => a1249 + 1
plot(f1249(1249))
f1250(a1250) => a1250 + 1
plot(f1250(1250))
f1251(a1251) => a1251 + 1
plot(f1251(1251))
f1252(a1252) => a1252 + 1
plot(f1252(1252))
f1253(a1253) => a1253 + 1
plot(f1253(1253))
f1254(a1254) => a1254 + 1
plot(f1254(1254))
f1255(a1255) => a1255 + 1
plot(f1255(1255))
f1256(a1256) => a1256 + 1
plot(f1256(1256))
f1257(a1257) => a1257 + 1
plot(f1257(1257))
f1258(a1258) => a1258 + 1
plot(f1258(1258))
f1259(a1259) => a1259 + 1
plot(f1259(1259))
f1260(a1260) => a1260 + 1
plot(f1260(1260))
f1261(a1261) => a1261 + 1
plot(f1261(1261))
f1262(a1262) => a1262 + 1
plot(f1262(1262))
f1263(a1263) => a1263 + 1
plot(f1263(1263))
f1264(a1264) => a1264 + 1
plot(f1264(1264))
f1265(a1265) => a1265 + 1
plot(f1265(1265))
f1266(a1266) => a1266 + 1
plot(f1266(1266))
f1267(a1267) => a1267 + 1
plot(f1267(1267))
f1268(a1268) => a1268 + 1
plot(f1268(1268))
f1269(a1269) => a1269 + 1
plot(f1269(1269))
f1270(a1270) => a1270 + 1
plot(f1270(1270))
f1271(a1271) => a1271 + 1
plot(f1271(1271))
f1272(a1272) => a1272 + 1
plot(f1272(1272))
f1273(a1273) => a1273 + 1
plot(f1273(1273))
f1274(a1274) => a1274 + 1
plot(f1274(1274))
f1275(a1275) => a1275 + 1
plot(f1275(1275))
f1276(a1276) => a1276 + 1
plot(f1276(1276))
f1277(a1277) => a1277 + 1
plot(f1277(1277))
f1278(a1278) => a1278 + 1
plot(f1278(1278))
f1279(a1279) => a1279 + 1
plot(f1279(1279))
f1280(a1280) => a1280 + 1
plot(f1280(1280))
f1281(a1281) => a1281 + 1
plot(f1281(1281))
f1282(a1282) => a1282 + 1
plot(f1282(1282))
f1283(a1283) => a1283 + 1
plot(f1283(1283))
f1284(a1284) => a1284 + 1
plot(f1284(1284))
f1285(a1285) => a1285 + 1
plot(f1285(1285))
f1286(a1286) => a1286 + 1
plot(f1286(1286))
f1287(a1287) => a1287 + 1
plot(f1287(1287))
f1288(a1288) => a1288 + 1
plot(f1288(1288))
f1289(a1289) => a1289 + 1
plot(f1289(1289))
f1290(a1290) => a1290 + 1
plot(f1290(1290))
f1291(a1291) => a1291 + 1
plot(f1291(1291))
f1292(a1292) => a1292 + 1
plot(f1292(1292))
f1293(a1293) => a1293 + 1
plot(f1293(1293))
f1294(a1294) => a1294 + 1
plot(f1294(1294))
f1295(a1295) => a1295 + 1
plot(f1295(1295))
f1296(a1296) => a1296 + 1
plot(f1296(1296))
f1297(a1297) => a1297 + 1
plot(f1297(1297))
f1298(a1298) => a1298 + 1
plot(f1298(1298))
f1299(a1299) => a1299 + 1
plot(f1299(1299))
f1300(a1300) => a1300 + 1
plot(f1300(1300))
f1301(a1301) => a1301 + 1
plot(f1301(1301))
f1302(a1302) => a1302 + 1
plot(f1302(1302))
f1303(a1303) => a1303 + 1
plot(f1303(1303))
f1304(a1304) => a1304 + 1
plot(f1304(1304))
f1305(a1305) => a1305 + 1
plot(f1305(1305))
f1306(a1306) => a1306 + 1
plot(f1306(1306))
f1307(a1307) => a1307 + 1
plot(f1307(1307))
f1308(a1308) => a1308 + 1
plot(f1308(1308))
f1309(a1309) => a1309 + 1
plot(f1309(1309))
f1310(a1310) => a1310 + 1
plot(f1310(1310))
f1311(a1311) => a1311 + 1
plot(f1311(1311))
f1312(a1312) => a1312 + 1
plot(f1312(1312))
f1313(a1313) => a1313 + 1
plot(f1313(1313))
f1314(a1314) => a1314 + 1
plot(f1314(1314))
f1315(a1315) => a1315 + 1
plot(f1315(1315))
f1316(a1316) => a1316 + 1
plot(f1316(1316))
f1317(a1317) => a1317 + 1
plot(f1317(1317))
f1318(a1318) => a1318 + 1
plot(f1318(1318))
f1319(a1319) => a1319 + 1
plot(f1319(1319))
f1320(a1320) => a1320 + 1
plot(f1320(1320))
f1321(a1321) => a1321 + 1
plot(f1321(1321))
f1322(a1322) => a1322 + 1
plot(f1322(1322))
f1323(a1323) => a1323 + 1
plot(f1323(1323))
f1324(a1324) => a1324 + 1
plot(f1324(1324))
f1325(a1325) => a1325 + 1
plot(f1325(1325))
f1326(a1326) => a1326 + 1
plot(f1326(1326))
f1327(a1327) => a1327 + 1
plot(f1327(1327))
f1328(a1328) => a1328 + 1
plot(f1328(1328))
f1329(a1329) => a1329 + 1
plot(f1329(1329))
f1330(a1330) => a1330 + 1
plot(f1330(1330))
f1331(a1331) => a1331 + 1
plot(f1331(1331))
f1332(a1332) => a1332 + 1
plot(f1332(1332))
f1333(a1333) => a1333 + 1
plot(f1333(1333))
f1334(a1334) => a1334 + 1
plot(f1334(1334))
f1335(a1335) => a1335 + 1
plot(f1335(1335))
f1336(a1336) => a1336 + 1
plot(f1336(1336))
f1337(a1337) => a1337 + 1
plot(f1337(1337))
f1338(a1338) => a1338 + 1
plot(f1338(1338))
f1339(a1339) => a1339 + 1
plot(f1339(1339))
f1340(a1340) => a1340 + 1
plot(f1340(1340))
f1341(a1341) => a1341 + 1
plot(f1341(1341))
f1342(a1342) => a1342 + 1
plot(f1342(1342))
f1343(a1343) => a1343 + 1
plot(f1343(1343))
f1344(a1344) => a1344 + 1
plot(f1344(1344))
f1345(a1345) => a1345 + 1
plot(f1345(1345))
f1346(a1346) => a1346 + 1
plot(f1346(1346))
f1347(a1347) => a1347 + 1
plot(f1347(1347))
f1348(a1348) => a1348 + 1
plot(f1348(1348))
f1349(a1349) => a1349 + 1
plot(f1349(1349))
f1350(a1350) => a1350 + 1
plot(f1350(1350))
f1351(a1351) => a1351 + 1
plot(f1351(1351))
f1352(a1352) => a1352 + 1
plot(f1352(1352))
f1353(a1353) => a1353 + 1
plot(f1353(1353))
f1354(a1354) => a1354 + 1
plot(f1354(1354))
f1355(a1355) => a1355 + 1
plot(f1355(1355))
f1356(a1356) => a1356 + 1
plot(f1356(1356))
f1357(a1357) => a1357 + 1
plot(f1357(1357))
f1358(a1358) => a1358 + 1
plot(f1358(1358))
f1359(a1359) => a1359 + 1
plot(f1359(1359))
f1360(a1360) => a1360 + 1
plot(f1360(1360))
f1361(a1361) => a1361 + 1
plot(f1361(1361))
f1362(a1362) => a1362 + 1
plot(f1362(1362))
f1363(a1363) => a1363 + 1
plot(f1363(1363))
f1364(a1364) => a1364 + 1
plot(f1364(1364))
f1365(a1365) => a1365 + 1
plot(f1365(1365))
f1366(a1366) => a1366 + 1
plot(f1366(1366))
f1367(a1367) => a1367 + 1
plot(f1367(1367))
f1368(a1368) => a1368 + 1
plot(f1368(1368))
f1369(a1369) => a1369 + 1
plot(f1369(1369))
f1370(a1370) => a1370 + 1
plot(f1370(1370))
f1371(a1371) => a1371 + 1
plot(f1371(1371))
f1372(a1372) => a1372 + 1
plot(f1372(1372))
f1373(a1373) => a1373 + 1
plot(f1373(1373))
f1374(a1374) => a1374 + 1
plot(f1374(1374))
f1375(a1375) => a1375 + 1
plot(f1375(1375))
f1376(a1376) => a1376 + 1
plot(f1376(1376))
f1377(a1377) => a1377 + 1
plot(f1377(1377))
f1378(a1378) => a1378 + 1
plot(f1378(1378))
f1379(a1379) => a1379 + 1
plot(f1379(1379))
f1380(a1380) => a1380 + 1
plot(f1380(1380))
f1381(a1381) => a1381 + 1
plot(f1381(1381))
f1382(a1382) => a1382 + 1
plot(f1382(1382))
f1383(a1383) => a1383 + 1
plot(f1383(1383))
f1384(a1384) => a1384 + 1
plot(f1384(1384))
f1385(a1385) => a1385 + 1
plot(f1385(1385))
f1386(a1386) => a1386 + 1
plot(f1386(1386))
f1387(a1387) => a1387 + 1
plot(f1387(1387))
f1388(a1388) => a1388 + 1
plot(f1388(1388))
f1389(a1389) => a1389 + 1
plot(f1389(1389))
f1390(a1390) => a1390 + 1
plot(f1390(1390))
f1391(a1391) => a1391 + 1
plot(f1391(1391))
f1392(a1392) => a1392 + 1
plot(f1392(1392))
f1393(a1393) => a1393 + 1
plot(f1393(1393))
f1394(a1394) => a1394 + 1
plot(f1394(1394))
f1395(a1395) => a1395 + 1
plot(f1395(1395))
f1396(a1396) => a1396 + 1
plot(f1396(1396))
f1397(a1397) => a1397 + 1
plot(f1397(1397))
f1398(a1398) => a1398 + 1
plot(f1398(1398))
f1399(a1399) => a1399 + 1
plot(f1399(1399))
f1400(a1400) => a1400 + 1
plot(f1400(1400))
f1401(a1401) => a1401 + 1
plot(f1401(1401))
f1402(a1402) => a1402 + 1
plot(f1402(1402))
f1403(a1403) => a1403 + 1
plot(f1403(1403))
f1404(a1404) => a1404 + 1
plot(f1404(1404))
f1405(a1405) => a1405 + 1
plot(f1405(1405))
f1406(a1406) => a1406 + 1
plot(f1406(1406))
f1407(a1407) => a1407 + 1
plot(f1407(1407))
f1408(a1408) => a1408 + 1
plot(f1408(1408))
f1409(a1409) => a1409 + 1
plot(f1409(1409))
f1410(a1410) => a1410 + 1
plot(f1410(1410))
f1411(a1411) => a1411 + 1
plot(f1411(1411))
f1412(a1412) => a1412 + 1
plot(f1412(1412))
f1413(a1413) => a1413 + 1
plot(f1413(1413))
f1414(a1414) => a1414 + 1
plot(f1414(1414))
f1415(a1415) => a1415 + 1
plot(f1415(1415))
f1416(a1416) => a1416 + 1
plot(f1416(1416))
f1417(a1417) => a1417 + 1
plot(f1417(1417))
f1418(a1418) => a1418 + 1
plot(f1418(1418))
f1419(a1419) => a1419 + 1
plot(f1419(1419))
f1420(a1420) => a1420 + 1
plot(f1420(1420))
f1421(a1421) => a1421 + 1
plot(f1421(1421))
f1422(a1422) => a1422 + 1
plot(f1422(1422))
f1423(a1423) => a1423 + 1
plot(f1423(1423))
f1424(a1424) => a1424 + 1
plot(f1424(1424))
f1425(a1425) => a1425 + 1
plot(f1425(1425))
f1426(a1426) => a1426 + 1
plot(f1426(1426))
f1427(a1427) => a1427 + 1
plot(f1427(1427))
f1428(a1428) => a1428 + 1
plot(f1428(1428))
f1429(a1429) => a1429 + 1
plot(f1429(1429))
f1430(a1430) => a1430 + 1
plot(f1430(1430))
f1431(a1431) => a1431 + 1
plot(f1431(1431))
f1432(a1432) => a1432 + 1
plot(f1432(1432))
f1433(a1433) => a1433 + 1
plot(f1433(1433))
f1434(a1434) => a1434 + 1
plot(f1434(1434))
f1435(a1435) => a1435 + 1
plot(f1435(1435))
f1436(a1436) => a1436 + 1
plot(f1436(1436))
f1437(a1437) => a1437 + 1
plot(f1437(1437))
f1438(a1438) => a1438 + 1
plot(f1438(1438))
f1439(a1439) => a1439 + 1
plot(f1439(1439))
f1440(a1440) => a1440 + 1
plot(f1440(1440))
f1441(a1441) => a1441 + 1
plot(f1441(1441))
f1442(a1442) => a1442 + 1
plot(f1442(1442))
f1443(a1443) => a1443 + 1
plot(f1443(1443))
f1444(a1444) => a1444 + 1
plot(f1444(1444))
f1445(a1445) => a1445 + 1
plot(f1445(1445))
f1446(a1446) => a1446 + 1
plot(f1446(1446))
f1447(a1447) => a1447 + 1
plot(f1447(1447))
f1448(a1448) => a1448 + 1
plot(f1448(1448))
f1449(a1449) => a1449 + 1
plot(f1449(1449))
f1450(a1450) => a1450 + 1
plot(f1450(1450))
f1451(a1451) => a1451 + 1
plot(f1451(1451))
f1452(a1452) => a1452 + 1
plot(f1452(1452))
f1453(a1453) => a1453 + 1
plot(f1453(1453))
f1454(a1454) => a1454 + 1
plot(f1454(1454))
f1455(a1455) => a1455 + 1
plot(f1455(1455))
f1456(a1456) => a1456 + 1
plot(f1456(1456))
f1457(a1457) => a1457 + 1
plot(f1457(1457))
f1458(a1458) => a1458 + 1
plot(f1458(1458))
f1459(a1459) => a1459 + 1
plot(f1459(1459))
f1460(a1460) => a1460 + 1
plot(f1460(1460))
f1461(a1461) => a1461 + 1
plot(f1461(1461))
f1462(a1462) => a1462 + 1
plot(f1462(1462))
f1463(a1463) => a1463 + 1
plot(f1463(1463))
f1464(a1464) => a1464 + 1
plot(f1464(1464))
f1465(a1465) => a1465 + 1
plot(f1465(1465))
f1466(a1466) => a1466 + 1
plot(f1466(1466))
f1467(a1467) => a1467 + 1
plot(f1467(1467))
f1468(a1468) => a1468 + 1
plot(f1468(1468))
f1469(a1469) => a1469 + 1
plot(f1469(1469))
f1470(a1470) => a1470 + 1
plot(f1470(1470))
f1471(a1471) => a1471 + 1
plot(f1471(1471))
f1472(a1472) => a1472 + 1
plot(f1472(1472))
f1473(a1473) => a1473 + 1
plot(f1473(1473))
f1474(a1474) => a1474 + 1
plot(f1474(1474))
f1475(a1475) => a1475 + 1
plot(f1475(1475))
f1476(a1476) => a1476 + 1
plot(f1476(1476))
f1477(a1477) => a1477 + 1
plot(f1477(1477))
f1478(a1478) => a1478 + 1
plot(f1478(1478))
f1479(a1479) => a1479 + 1
plot(f1479(1479))
f1480(a1480) => a1480 + 1
plot(f1480(1480))
f1481(a1481) => a1481 + 1
plot(f1481(1481))
f1482(a1482) => a1482 + 1
plot(f1482(1482))
f1483(a1483) => a1483 + 1
plot(f1483(1483))
f1484(a1484) => a1484 + 1
plot(f1484(1484))
f1485(a1485) => a1485 + 1
plot(f1485(1485))
f1486(a1486) => a1486 + 1
plot(f1486(1486))
f1487(a1487) => a1487 + 1
plot(f1487(1487))
f1488(a1488) => a1488 + 1
plot(f1488(1488))
f1489(a1489) => a1489 + 1
plot(f1489(1489))
f1490(a1490) => a1490 + 1
plot(f1490(1490))
f1491(a1491) => a1491 + 1
plot(f1491(1491))
f1492(a1492) => a1492 + 1
plot(f1492(1492))
f1493(a1493) => a1493 + 1
plot(f1493(1493))
f1494(a1494) => a1494 + 1
plot(f1494(1494))
f1495(a1495) => a1495 + 1
plot(f1495(1495))
f1496(a1496) => a1496 + 1
plot(f1496(1496))
f1497(a1497) => a1497 + 1
plot(f1497(1497))
f1498(a1498) => a1498 + 1
plot(f1498(1498))
f1499(a1499) => a1499 + 1
plot(f1499(1499))
f1500(a1500) => a1500 + 1
plot(f1500(1500))
f1501(a1501) => a1501 + 1
plot(f1501(1501))
f1502(a1502) => a1502 + 1
plot(f1502(1502))
f1503(a1503) => a1503 + 1
plot(f1503(1503))
f1504(a1504) => a1504 + 1
plot(f1504(1504))
f1505(a1505) => a1505 + 1
plot(f1505(1505))
f1506(a1506) => a1506 + 1
plot(f1506(1506))
f1507(a1507) => a1507 + 1
plot(f1507(1507))
f1508(a1508) => a1508 + 1
plot(f1508(1508))
f1509(a1509) => a1509 + 1
plot(f1509(1509))
f1510(a1510) => a1510 + 1
plot(f1510(1510))
f1511(a1511) => a1511 + 1
plot(f1511(1511))
f1512(a1512) => a1512 + 1
plot(f1512(1512))
f1513(a1513) => a1513 + 1
plot(f1513(1513))
f1514(a1514) => a1514 + 1
plot(f1514(1514))
f1515(a1515) => a1515 + 1
plot(f1515(1515))
f1516(a1516) => a1516 + 1
plot(f1516(1516))
f1517(a1517) => a1517 + 1
plot(f1517(1517))
f1518(a1518) => a1518 + 1
plot(f1518(1518))
f1519(a1519) => a1519 + 1
plot(f1519(1519))
f1520(a1520) => a1520 + 1
plot(f1520(1520))
f1521(a1521) => a1521 + 1
plot(f1521(1521))
f1522(a1522) => a1522 + 1
plot(f1522(1522))
f1523(a1523) => a1523 + 1
plot(f1523(1523))
f1524(a1524) => a1524 + 1
plot(f1524(1524))
f1525(a1525) => a1525 + 1
plot(f1525(1525))
f1526(a1526) => a1526 + 1
plot(f1526(1526))
f1527(a1527) => a1527 + 1
plot(f1527(1527))
f1528(a1528) => a1528 + 1
plot(f1528(1528))
f1529(a1529) => a1529 + 1
plot(f1529(1529))
f1530(a1530) => a1530 + 1
plot(f1530(1530))
f1531(a1531) => a1531 + 1
plot(f1531(1531))
f1532(a1532) => a1532 + 1
plot(f1532(1532))
f1533(a1533) => a1533 + 1
plot(f1533(1533))
f1534(a1534) => a1534 + 1
plot(f1534(1534))
f1535(a1535) => a1535 + 1
plot(f1535(1535))
f1536(a1536) => a1536 + 1
plot(f1536(1536))
f1537(a1537) => a1537 + 1
plot(f1537(1537))
f1538(a1538) => a1538 + 1
plot(f1538(1538))
f1539(a1539) => a1539 + 1
plot(f1539(1539))
f1540(a1540) => a1540 + 1
plot(f1540(1540))
f1541(a1541) => a1541 + 1
plot(f1541(1541))
f1542(a1542) => a1542 + 1
plot(f1542(1542))
f1543(a1543) => a1543 + 1
plot(f1543(1543))
f1544(a1544) => a1544 + 1
plot(f1544(1544))
f1545(a1545) => a1545 + 1
plot(f1545(1545))
f1546(a1546) => a1546 + 1
plot(f1546(1546))
f1547(a1547) => a1547 + 1
plot(f1547(1547))
f1548(a1548) => a1548 + 1
plot(f1548(1548))
f1549(a1549) => a1549 + 1
plot(f1549(1549))
f1550(a1550) => a1550 + 1
plot(f1550(1550))
f1551(a1551) => a1551 + 1
plot(f1551(1551))
f1552(a1552) => a1552 + 1
plot(f1552(1552))
f1553(a1553) => a1553 + 1
plot(f1553(1553))
f1554(a1554) => a1554 + 1
plot(f1554(1554))
f1555(a1555) => a1555 + 1
plot(f1555(1555))
f1556(a1556) => a1556 + 1
plot(f1556(1556))
f1557(a1557) => a1557 + 1
plot(f1557(1557))
f1558(a1558) => a1558 + 1
plot(f1558(1558))
f1559(a1559) => a1559 + 1
plot(f1559(1559))
f1560(a1560) => a1560 + 1
plot(f1560(1560))
f1561(a1561) => a1561 + 1
plot(f1561(1561))
f1562(a1562) => a1562 + 1
plot(f1562(1562))
f1563(a1563) => a1563 + 1
plot(f1563(1563))
f1564(a1564) => a1564 + 1
plot(f1564(1564))
f1565(a1565) => a1565 + 1
plot(f1565(1565))
f1566(a1566) => a1566 + 1
plot(f1566(1566))
f1567(a1567) => a1567 + 1
plot(f1567(1567))
f1568(a1568) => a1568 + 1
plot(f1568(1568))
f1569(a1569) => a1569 + 1
plot(f1569(1569))
f1570(a1570) => a1570 + 1
plot(f1570(1570))
f1571(a1571) => a1571 + 1
plot(f1571(1571))
f1572(a1572) => a1572 + 1
plot(f1572(1572))
f1573(a1573) => a1573 + 1
plot(f1573(1573))
f1574(a1574) => a1574 + 1
plot(f1574(1574))
f1575(a1575) => a1575 + 1
plot(f1575(1575))
f1576(a1576) => a1576 + 1
plot(f1576(1576))
f1577(a1577) => a1577 + 1
plot(f1577(1577))
f1578(a1578) => a1578 + 1
plot(f1578(1578))
f1579(a1579) => a1579 + 1
plot(f1579(1579))
f1580(a1580) => a1580 + 1
plot(f1580(1580))
f1581(a1581) => a1581 + 1
plot(f1581(1581))
f1582(a1582) => a1582 + 1
plot(f1582(1582))
f1583(a1583) => a1583 + 1
plot(f1583(1583))
f1584(a1584) => a1584 + 1
plot(f1584(1584))
f1585(a1585) => a1585 + 1
plot(f1585(1585))
f1586(a1586) => a1586 + 1
plot(f1586(1586))
f1587(a1587) => a1587 + 1
plot(f1587(1587))
f1588(a1588) => a1588 + 1
plot(f1588(1588))
f1589(a1589) => a1589 + 1
plot(f1589(1589))
f1590(a1590) => a1590 + 1
plot(f1590(1590))
f1591(a1591) => a1591 + 1
plot(f1591(1591))
f1592(a1592) => a1592 + 1
plot(f1592(1592))
f1593(a1593) => a1593 + 1
plot(f1593(1593))
f1594(a1594) => a1594 + 1
plot(f1594(1594))
f1595(a1595) => a1595 + 1
plot(f1595(1595))
f1596(a1596) => a1596 + 1
plot(f1596(1596))
f1597(a1597) => a1597 + 1
plot(f1597(1597))
f1598(a1598) => a1598 + 1
plot(f1598(1598))
f1599(a1599) => a1599 + 1
plot(f1599(1599))
f1600(a1600) => a1600 + 1
plot(f1600(1600))
f1601(a1601) => a1601 + 1
plot(f1601(1601))
f1602(a1602) => a1602 + 1
plot(f1602(1602))
f1603(a1603) => a1603 + 1
plot(f1603(1603))
f1604(a1604) => a1604 + 1
plot(f1604(1604))
f1605(a1605) => a1605 + 1
plot(f1605(1605))
f1606(a1606) => a1606 + 1
plot(f1606(1606))
f1607(a1607) => a1607 + 1
plot(f1607(1607))
f1608(a1608) => a1608 + 1
plot(f1608(1608))
f1609(a1609) => a1609 + 1
plot(f1609(1609))
f1610(a1610) => a1610 + 1
plot(f1610(1610))
f1611(a1611) => a1611 + 1
plot(f1611(1611))
f1612(a1612) => a1612 + 1
plot(f1612(1612))
f1613(a1613) => a1613 + 1
plot(f1613(1613))
f1614(a1614) => a1614 + 1
plot(f1614(1614))
f1615(a1615) => a1615 + 1
plot(f1615(1615))
f1616(a1616) => a1616 + 1
plot(f1616(1616))
f1617(a1617) => a1617 + 1
plot(f1617(1617))
f1618(a1618) => a1618 + 1
plot(f1618(1618))
f1619(a1619) => a1619 + 1
plot(f1619(1619))
f1620(a1620) => a1620 + 1
plot(f1620(1620))
f1621(a1621) => a1621 + 1
plot(f1621(1621))
f1622(a1622) => a1622 + 1
plot(f1622(1622))
f1623(a1623) => a1623 + 1
plot(f1623(1623))
f1624(a1624) => a1624 + 1
plot(f1624(1624))
f1625(a1625) => a1625 + 1
plot(f1625(1625))
f1626(a1626) => a1626 + 1
plot(f1626(1626))
f1627(a1627) => a1627 + 1
plot(f1627(1627))
f1628(a1628) => a1628 + 1
plot(f1628(1628))
f1629(a1629) => a1629 + 1
plot(f1629(1629))
f1630(a1630) => a1630 + 1
plot(f1630(1630))
f1631(a1631) => a1631 + 1
plot(f1631(1631))
f1632(a1632) => a1632 + 1
plot(f1632(1632))
f1633(a1633) => a1633 + 1
plot(f1633(1633))
f1634(a1634) => a1634 + 1
plot(f1634(1634))
f1635(a1635) => a1635 + 1
plot(f1635(1635))
f1636(a1636) => a1636 + 1
plot(f1636(1636))
f1637(a1637) => a1637 + 1
plot(f1637(1637))
f1638(a1638) => a1638 + 1
plot(f1638(1638))
f1639(a1639) => a1639 + 1
plot(f1639(1639))
f1640(a1640) => a1640 + 1
plot(f1640(1640))
f1641(a1641) => a1641 + 1
plot(f1641(1641))
f1642(a1642) => a1642 + 1
plot(f1642(1642))
f1643(a1643) => a1643 + 1
plot(f1643(1643))
f1644(a1644) => a1644 + 1
plot(f1644(1644))
f1645(a1645) => a1645 + 1
plot(f1645(1645))
f1646(a1646) => a1646 + 1
plot(f1646(1646))
f1647(a1647) => a1647 + 1
plot(f1647(1647))
f1648(a1648) => a1648 + 1
plot(f1648(1648))
f1649(a1649) => a1649 + 1
plot(f1649(1649))
f1650(a1650) => a1650 + 1
plot(f1650(1650))
f1651(a1651) => a1651 + 1
plot(f1651(1651))
f1652(a1652) => a1652 + 1
plot(f1652(1652))
f1653(a1653) => a1653 + 1
plot(f1653(1653))
f1654(a1654) => a1654 + 1
plot(f1654(1654))
f1655(a1655) => a1655 + 1
plot(f1655(1655))
f1656(a1656) => a1656 + 1
plot(f1656(1656))
f1657(a1657) => a1657 + 1
plot(f1657(1657))
f1658(a1658) => a1658 + 1
plot(f1658(1658))
f1659(a1659) => a1659 + 1
plot(f1659(1659))
f1660(a1660) => a1660 + 1
plot(f1660(1660))
f1661(a1661) => a1661 + 1
plot(f1661(1661))
f1662(a1662) => a1662 + 1
plot(f1662(1662))
f1663(a1663) => a1663 + 1
plot(f1663(1663))
f1664(a1664) => a1664 + 1
plot(f1664(1664))
f1665(a1665) => a1665 + 1
plot(f1665(1665))
f1666(a1666) => a1666 + 1
plot(f1666(1666))
f1667(a1667) => a1667 + 1
plot(f1667(1667))
f1668(a1668) => a1668 + 1
plot(f1668(1668))
f1669(a1669) => a1669 + 1
plot(f1669(1669))
f1670(a1670) => a1670 + 1
plot(f1670(1670))
f1671(a1671) => a1671 + 1
plot(f1671(1671))
f1672(a1672) => a1672 + 1
plot(f1672(1672))
f1673(a1673) => a1673 + 1
plot(f1673(1673))
f1674(a1674) => a1674 + 1
plot(f1674(1674))
f1675(a1675) => a1675 + 1
plot(f1675(1675))
f1676(a1676) => a1676 + 1
plot(f1676(1676))
f1677(a1677) => a1677 + 1
plot(f1677(1677))
f1678(a1678) => a1678 + 1
plot(f1678(1678))
f1679(a1679) => a1679 + 1
plot(f1679(1679))
f1680(a1680) => a1680 + 1
plot(f1680(1680))
f1681(a1681) => a1681 + 1
plot(f1681(1681))
f1682(a1682) => a1682 + 1
plot(f1682(1682))
f1683(a1683) => a1683 + 1
plot(f1683(1683))
f1684(a1684) => a1684 + 1
plot(f1684(1684))
f1685(a1685) => a1685 + 1
plot(f1685(1685))
f1686(a1686) => a1686 + 1
plot(f1686(1686))
f1687(a1687) => a1687 + 1
plot(f1687(1687))
f1688(a1688) => a1688 + 1
plot(f1688(1688))
f1689(a1689) => a1689 + 1
plot(f1689(1689))
f1690(a1690) => a1690 + 1
plot(f1690(1690))
f1691(a1691) => a1691 + 1
plot(f1691(1691))
f1692(a1692) => a1692 + 1
plot(f1692(1692))
f1693(a1693) => a1693 + 1
plot(f1693(1693))
f1694(a1694) => a1694 + 1
plot(f1694(1694))
f1695(a1695) => a1695 + 1
plot(f1695(1695))
f1696(a1696) => a1696 + 1
plot(f1696(1696))
f1697(a1697) => a1697 + 1
plot(f1697(1697))
f1698(a1698) => a1698 + 1
plot(f1698(1698))
f1699(a1699) => a1699 + 1
plot(f1699(1699))
f1700(a1700) => a1700 + 1
plot(f1700(1700))
f1701(a1701) => a1701 + 1
plot(f1701(1701))
f1702(a1702) => a1702 + 1
plot(f1702(1702))
f1703(a1703) => a1703 + 1
plot(f1703(1703))
f1704(a1704) => a1704 + 1
plot(f1704(1704))
f1705(a1705) => a1705 + 1
plot(f1705(1705))
f1706(a1706) => a1706 + 1
plot(f1706(1706))
f1707(a1707) => a1707 + 1
plot(f1707(1707))
f1708(a1708) => a1708 + 1
plot(f1708(1708))
f1709(a1709) => a1709 + 1
plot(f1709(1709))
f1710(a1710) => a1710 + 1
plot(f1710(1710))
f1711(a1711) => a1711 + 1
plot(f1711(1711))
f1712(a1712) => a1712 + 1
plot(f1712(1712))
f1713(a1713) => a1713 + 1
plot(f1713(1713))
f1714(a1714) => a1714 + 1
plot(f1714(1714))
f1715(a1715) => a1715 + 1
plot(f1715(1715))
f1716(a1716) => a1716 + 1
plot(f1716(1716))
f1717(a1717) => a1717 + 1
plot(f1717(1717))
f1718(a1718) => a1718 + 1
plot(f1718(1718))
f1719(a1719) => a1719 + 1
plot(f1719(1719))
f1720(a1720) => a1720 + 1
plot(f1720(1720))
f1721(a1721) => a1721 + 1
plot(f1721(1721))
f1722(a1722) => a1722 + 1
plot(f1722(1722))
f1723(a1723) => a1723 + 1
plot(f1723(1723))
f1724(a1724) => a1724 + 1
plot(f1724(1724))
f1725(a1725) => a1725 + 1
plot(f1725(1725))
f1726(a1726) => a1726 + 1
plot(f1726(1726))
f1727(a1727) => a1727 + 1
plot(f1727(1727))
f1728(a1728) => a1728 + 1
plot(f1728(1728))
f1729(a1729) => a1729 + 1
plot(f1729(1729))
f1730(a1730) => a1730 + 1
plot(f1730(1730))
f1731(a1731) => a1731 + 1
plot(f1731(1731))
f1732(a1732) => a1732 + 1
plot(f1732(1732))
f1733(a1733) => a1733 + 1
plot(f1733(1733))
f1734(a1734) => a1734 + 1
plot(f1734(1734))
f1735(a1735) => a1735 + 1
plot(f1735(1735))
f1736(a1736) => a1736 + 1
plot(f1736(1736))
f1737(a1737) => a1737 + 1
plot(f1737(1737))
f1738(a1738) => a1738 + 1
plot(f1738(1738))
f1739(a1739) => a1739 + 1
plot(f1739(1739))
f1740(a1740) => a1740 + 1
plot(f1740(1740))
f1741(a1741) => a1741 + 1
plot(f1741(1741))
f1742(a1742) => a1742 + 1
plot(f1742(1742))
f1743(a1743) => a1743 + 1
plot(f1743(1743))
f1744(a1744) => a1744 + 1
plot(f1744(1744))
f1745(a1745) => a1745 + 1
plot(f1745(1745))
f1746(a1746) => a1746 + 1
plot(f1746(1746))
f1747(a1747) => a1747 + 1
plot(f1747(1747))
f1748(a1748) => a1748 + 1
plot(f1748(1748))
f1749(a1749) => a1749 + 1
plot(f1749(1749))
f1750(a1750) => a1750 + 1
plot(f1750(1750))
f1751(a1751) => a1751 + 1
plot(f1751(1751))
f1752(a1752) => a1752 + 1
plot(f1752(1752))
f1753(a1753) => a1753 + 1
plot(f1753(1753))
f1754(a1754) => a1754 + 1
plot(f1754(1754))
f1755(a1755) => a1755 + 1
plot(f1755(1755))
f1756(a1756) => a1756 + 1
plot(f1756(1756))
f1757(a1757) => a1757 + 1
plot(f1757(1757))
f1758(a1758) => a1758 + 1
plot(f1758(1758))
f1759(a1759) => a1759 + 1
plot(f1759(1759))
f1760(a1760) => a1760 + 1
plot(f1760(1760))
f1761(a1761) => a1761 + 1
plot(f1761(1761))
f1762(a1762) => a1762 + 1
plot(f1762(1762))
f1763(a1763) => a1763 + 1
plot(f1763(1763))
f1764(a1764) => a1764 + 1
plot(f1764(1764))
f1765(a1765) => a1765 + 1
plot(f1765(1765))
f1766(a1766) => a1766 + 1
plot(f1766(1766))
f1767(a1767) => a1767 + 1
plot(f1767(1767))
f1768(a1768) => a1768 + 1
plot(f1768(1768))
f1769(a1769) => a1769 + 1
plot(f1769(1769))
f1770(a1770) => a1770 + 1
plot(f1770(1770))
f1771(a1771) => a1771 + 1
plot(f1771(1771))
f1772(a1772) => a1772 + 1
plot(f1772(1772))
f1773(a1773) => a1773 + 1
plot(f1773(1773))
f1774(a1774) => a1774 + 1
plot(f1774(1774))
f1775(a1775) => a1775 + 1
plot(f1775(1775))
f1776(a1776) => a1776 + 1
plot(f1776(1776))
f1777(a1777) => a1777 + 1
plot(f1777(1777))
f1778(a1778) => a1778 + 1
plot(f1778(1778))
f1779(a1779) => a1779 + 1
plot(f1779(1779))
f1780(a1780) => a1780 + 1
plot(f1780(1780))
f1781(a1781) => a1781 + 1
plot(f1781(1781))
f1782(a1782) => a1782 + 1
plot(f1782(1782))
f1783(a1783) => a1783 + 1
plot(f1783(1783))
f1784(a1784) => a1784 + 1
plot(f1784(1784))
f1785(a1785) => a1785 + 1
plot(f1785(1785))
f1786(a1786) => a1786 + 1
plot(f1786(1786))
f1787(a1787) => a1787 + 1
plot(f1787(1787))
f1788(a1788) => a1788 + 1
plot(f1788(1788))
f1789(a1789) => a1789 + 1
plot(f1789(1789))
f1790(a1790) => a1790 + 1
plot(f1790(1790))
f1791(a1791) => a1791 + 1
plot(f1791(1791))
f1792(a1792) => a1792 + 1
plot(f1792(1792))
f1793(a1793) => a1793 + 1
plot(f1793(1793))
f1794(a1794) => a1794 + 1
plot(f1794(1794))
f1795(a1795) => a1795 + 1
plot(f1795(1795))
f1796(a1796) => a1796 + 1
plot(f1796(1796))
f1797(a1797) => a1797 + 1
plot(f1797(1797))
f1798(a1798) => a1798 + 1
plot(f1798(1798))
f1799(a1799) => a1799 + 1
plot(f1799(1799))
f1800(a1800) => a1800 + 1
plot(f1800(1800))
f1801(a1801) => a1801 + 1
plot(f1801(1801))
f1802(a1802) => a1802 + 1
plot(f1802(1802))
f1803(a1803) => a1803 + 1
plot(f1803(1803))
f1804(a1804) => a1804 + 1
plot(f1804(1804))
f1805(a1805) => a1805 + 1
plot(f1805(1805))
f1806(a1806) => a1806 + 1
plot(f1806(1806))
f1807(a1807) => a1807 + 1
plot(f1807(1807))
f1808(a1808) => a1808 + 1
plot(f1808(1808))
f1809(a1809) => a1809 + 1
plot(f1809(1809))
f1810(a1810) => a1810 + 1
plot(f1810(1810))
f1811(a1811) => a1811 + 1
plot(f1811(1811))
f1812(a1812) => a1812 + 1
plot(f1812(1812))
f1813(a1813) => a1813 + 1
plot(f1813(1813))
f1814(a1814) => a1814 + 1
plot(f1814(1814))
f1815(a1815) => a1815 + 1
plot(f1815(1815))
f1816(a1816) => a1816 + 1
plot(f1816(1816))
f1817(a1817) => a1817 + 1
plot(f1817(1817))
f1818(a1818) => a1818 + 1
plot(f1818(1818))
f1819(a1819) => a1819 + 1
plot(f1819(1819))
f1820(a1820) => a1820 + 1
plot(f1820(1820))
f1821(a1821) => a1821 + 1
plot(f1821(1821))
f1822(a1822) => a1822 + 1
plot(f1822(1822))
f1823(a1823) => a1823 + 1
plot(f1823(1823))
f1824(a1824) => a1824 + 1
plot(f1824(1824))
f1825(a1825) => a1825 + 1
plot(f1825(1825))
f1826(a1826) => a1826 + 1
plot(f1826(1826))
f1827(a1827) => a1827 + 1
plot(f1827(1827))
f1828(a1828) => a1828 + 1
plot(f1828(1828))
f1829(a1829) => a1829 + 1
plot(f1829(1829))
f1830(a1830) => a1830 + 1
plot(f1830(1830))
f1831(a1831) => a1831 + 1
plot(f1831(1831))
f1832(a1832) => a1832 + 1
plot(f1832(1832))
f1833(a1833) => a1833 + 1
plot(f1833(1833))
f1834(a1834) => a1834 + 1
plot(f1834(1834))
f1835(a1835) => a1835 + 1
plot(f1835(1835))
f1836(a1836) => a1836 + 1
plot(f1836(1836))
f1837(a1837) => a1837 + 1
plot(f1837(1837))
f1838(a1838) => a1838 + 1
plot(f1838(1838))
f1839(a1839) => a1839 + 1
plot(f1839(1839))
f1840(a1840) => a1840 + 1
plot(f1840(1840))
f1841(a1841) => a1841 + 1
plot(f1841(1841))
f1842(a1842) => a1842 + 1
plot(f1842(1842))
f1843(a1843) => a1843 + 1
plot(f1843(1843))
f1844(a1844) => a1844 + 1
plot(f1844(1844))
f1845(a1845) => a1845 + 1
plot(f1845(1845))
f1846(a1846) => a1846 + 1
plot(f1846(1846))
f1847(a1847) => a1847 + 1
plot(f1847(1847))
f1848(a1848) => a1848 + 1
plot(f1848(1848))
f1849(a1849) => a1849 + 1
plot(f1849(1849))
f1850(a1850) => a1850 + 1
plot(f1850(1850))
f1851(a1851) => a1851 + 1
plot(f1851(1851))
f1852(a1852) => a1852 + 1
plot(f1852(1852))
f1853(a1853) => a1853 + 1
plot(f1853(1853))
f1854(a1854) => a1854 + 1
plot(f1854(1854))
f1855(a1855) => a1855 + 1
plot(f1855(1855))
f1856(a1856) => a1856 + 1
plot(f1856(1856))
f1857(a1857) => a1857 + 1
plot(f1857(1857))
f1858(a1858) => a1858 + 1
plot(f1858(1858))
f1859(a1859) => a1859 + 1
plot(f1859(1859))
f1860(a1860) => a1860 + 1
plot(f1860(1860))
f1861(a1861) => a1861 + 1
plot(f1861(1861))
f1862(a1862) => a1862 + 1
plot(f1862(1862))
f1863(a1863) => a1863 + 1
plot(f1863(1863))
f1864(a1864) => a1864 + 1
plot(f1864(1864))
f1865(a1865) => a1865 + 1
plot(f1865(1865))
f1866(a1866) => a1866 + 1
plot(f1866(1866))
f1867(a1867) => a1867 + 1
plot(f1867(1867))
f1868(a1868) => a1868 + 1
plot(f1868(1868))
f1869(a1869) => a1869 + 1
plot(f1869(1869))
f1870(a1870) => a1870 + 1
plot(f1870(1870))
f1871(a1871) => a1871 + 1
plot(f1871(1871))
f1872(a1872) => a1872 + 1
plot(f1872(1872))
f1873(a1873) => a1873 + 1
plot(f1873(1873))
f1874(a1874) => a1874 + 1
plot(f1874(1874))
f1875(a1875) => a1875 + 1
plot(f1875(1875))
f1876(a1876) => a1876 + 1
plot(f1876(1876))
f1877(a1877) => a1877 + 1
plot(f1877(1877))
f1878(a1878) => a1878 + 1
plot(f1878(1878))
f1879(a1879) => a1879 + 1
plot(f1879(1879))
f1880(a1880) => a1880 + 1
plot(f1880(1880))
f1881(a1881) => a1881 + 1
plot(f1881(1881))
f1882(a1882) => a1882 + 1
plot(f1882(1882))
f1883(a1883) => a1883 + 1
plot(f1883(1883))
f1884(a1884) => a1884 + 1
plot(f1884(1884))
f1885(a1885) => a1885 + 1
plot(f1885(1885))
f1886(a1886) => a1886 + 1
plot(f1886(1886))
f1887(a1887) => a1887 + 1
plot(f1887(1887))
f1888(a1888) => a1888 + 1
plot(f1888(1888))
f1889(a1889) => a1889 + 1
plot(f1889(1889))
f1890(a1890) => a1890 + 1
plot(f1890(1890))
f1891(a1891) => a1891 + 1
plot(f1891(1891))
f1892(a1892) => a1892 + 1
plot(f1892(1892))
f1893(a1893) => a1893 + 1
plot(f1893(1893))
f1894(a1894) => a1894 + 1
plot(f1894(1894))
f1895(a1895) => a1895 + 1
plot(f1895(1895))
f1896(a1896) => a1896 + 1
plot(f1896(1896))
f1897(a1897) => a1897 + 1
plot(f1897(1897))
f1898(a1898) => a1898 + 1
plot(f1898(1898))
f1899(a1899) => a1899 + 1
plot(f1899(1899))
f1900(a1900) => a1900 + 1
plot(f1900(1900))
f1901(a1901) => a1901 + 1
plot(f1901(1901))
f1902(a1902) => a1902 + 1
plot(f1902(1902))
f1903(a1903) => a1903 + 1
plot(f1903(1903))
f1904(a1904) => a1904 + 1
plot(f1904(1904))
f1905(a1905) => a1905 + 1
plot(f1905(1905))
f1906(a1906) => a1906 + 1
plot(f1906(1906))
f1907(a1907) => a1907 + 1
plot(f1907(1907))
f1908(a1908) => a1908 + 1
plot(f1908(1908))
f1909(a1909) => a1909 + 1
plot(f1909(1909))
f1910(a1910) => a1910 + 1
plot(f1910(1910))
f1911(a1911) => a1911 + 1
plot(f1911(1911))
f1912(a1912) => a1912 + 1
plot(f1912(1912))
f1913(a1913) => a1913 + 1
plot(f1913(1913))
f1914(a1914) => a1914 + 1
plot(f1914(1914))
f1915(a1915) => a1915 + 1
plot(f1915(1915))
f1916(a1916) => a1916 + 1
plot(f1916(1916))
f1917(a1917) => a1917 + 1
plot(f1917(1917))
f1918(a1918) => a1918 + 1
plot(f1918(1918))
f1919(a1919) => a1919 + 1
plot(f1919(1919))
f1920(a1920) => a1920 + 1
plot(f1920(1920))
f1921(a1921) => a1921 + 1
plot(f1921(1921))
f1922(a1922) => a1922 + 1
plot(f1922(1922))
f1923(a1923) => a1923 + 1
plot(f1923(1923))
f1924(a1924) => a1924 + 1
plot(f1924(1924))
f1925(a1925) => a1925 + 1
plot(f1925(1925))
f1926(a1926) => a1926 + 1
plot(f1926(1926))
f1927(a1927) => a1927 + 1
plot(f1927(1927))
f1928(a1928) => a1928 + 1
plot(f1928(1928))
f1929(a1929) => a1929 + 1
plot(f1929(1929))
f1930(a1930) => a1930 + 1
plot(f1930(1930))
f1931(a1931) => a1931 + 1
plot(f1931(1931))
f1932(a1932) => a1932 + 1
plot(f1932(1932))
f1933(a1933) => a1933 + 1
plot(f1933(1933))
f1934(a1934) => a1934 + 1
plot(f1934(1934))
f1935(a1935) => a1935 + 1
plot(f1935(1935))
f1936(a1936) => a1936 + 1
plot(f1936(1936))
f1937(a1937) => a1937 + 1
plot(f1937(1937))
f1938(a1938) => a1938 + 1
plot(f1938(1938))
f1939(a1939) => a1939 + 1
plot(f1939(1939))
f1940(a1940) => a1940 + 1
plot(f1940(1940))
f1941(a1941) => a1941 + 1
plot(f1941(1941))
f1942(a1942) => a1942 + 1
plot(f1942(1942))
f1943(a1943) => a1943 + 1
plot(f1943(1943))
f1944(a1944) => a1944 + 1
plot(f1944(1944))
f1945(a1945) => a1945 + 1
plot(f1945(1945))
f1946(a1946) => a1946 + 1
plot(f1946(1946))
f1947(a1947) => a1947 + 1
plot(f1947(1947))
f1948(a1948) => a1948 + 1
plot(f1948(1948))
f1949(a1949) => a1949 + 1
plot(f1949(1949))
f1950(a1950) => a1950 + 1
plot(f1950(1950))
f1951(a1951) => a1951 + 1
plot(f1951(1951))
f1952(a1952) => a1952 + 1
plot(f1952(1952))
f1953(a1953) => a1953 + 1
plot(f1953(1953))
f1954(a1954) => a1954 + 1
plot(f1954(1954))
f1955(a1955) => a1955 + 1
plot(f1955(1955))
f1956(a1956) => a1956 + 1
plot(f1956(1956))
f1957(a1957) => a1957 + 1
plot(f1957(1957))
f1958(a1958) => a1958 + 1
plot(f1958(1958))
f1959(a1959) => a1959 + 1
plot(f1959(1959))
f1960(a1960) => a1960 + 1
plot(f1960(1960))
f1961(a1961) => a1961 + 1
plot(f1961(1961))
f1962(a1962) => a1962 + 1
plot(f1962(1962))
f1963(a1963) => a1963 + 1
plot(f1963(1963))
f1964(a1964) => a1964 + 1
plot(f1964(1964))
f1965(a1965) => a1965 + 1
plot(f1965(1965))
f1966(a1966) => a1966 + 1
plot(f1966(1966))
f1967(a1967) => a1967 + 1
plot(f1967(1967))
f1968(a1968) => a1968 + 1
plot(f1968(1968))
f1969(a1969) => a1969 + 1
plot(f1969(1969))
f1970(a1970) => a1970 + 1
plot(f1970(1970))
f1971(a1971) => a1971 + 1
plot(f1971(1971))
f1972(a1972) => a1972 + 1
plot(f1972(1972))
f1973(a1973) => a1973 + 1
plot(f1973(1973))
f1974(a1974) => a1974 + 1
plot(f1974(1974))
f1975(a1975) => a1975 + 1
plot(f1975(1975))
f1976(a1976) => a1976 + 1
plot(f1976(1976))
f1977(a1977) => a1977 + 1
plot(f1977(1977))
f1978(a1978) => a1978 + 1
plot(f1978(1978))
f1979(a1979) => a1979 + 1
plot(f1979(1979))
f1980(a1980) => a1980 + 1
plot(f1980(1980))
f1981(a1981) => a1981 + 1
plot(f1981(1981))
f1982(a1982) => a1982 + 1
plot(f1982(1982))
f1983(a1983) => a1983 + 1
plot(f1983(1983))
f1984(a1984) => a1984 + 1
plot(f1984(1984))
f1985(a1985) => a1985 + 1
plot(f1985(1985))
f1986(a1986) => a1986 + 1
plot(f1986(1986))
f1987(a1987) => a1987 + 1
plot(f1987(1987))
f1988(a1988) => a1988 + 1
plot(f1988(1988))
f1989(a1989) => a1989 + 1
plot(f1989(1989))
f1990(a1990) => a1990 + 1
plot(f1990(1990))
f1991(a1991) => a1991 + 1
plot(f1991(1991))
f1992(a1992) => a1992 + 1
plot(f1992(1992))
f1993(a1993) => a1993 + 1
plot(f1993(1993))
f1994(a1994) => a1994 + 1
plot(f1994(1994))
f1995(a1995) => a1995 + 1
plot(f1995(1995))
f1996(a1996) => a1996 + 1
plot(f1996(1996))
f1997(a1997) => a1997 + 1
plot(f1997(1997))
f1998(a1998) => a1998 + 1
plot(f1998(1998))
f1999(a1999) => a1999 + 1
plot(f1999(1999))
f2000(a2000) => a2000 + 1
plot(f2000(2000))
f2001(a2001) => a2001 + 1
plot(f2001(2001))
f2002(a2002) => a2002 + 1
plot(f2002(2002))
f2003(a2003) => a2003 + 1
plot(f2003(2003))
f2004(a2004) => a2004 + 1
plot(f2004(2004))
f2005(a2005) => a2005 + 1
plot(f2005(2005))
f2006(a2006) => a2006 + 1
plot(f2006(2006))
f2007(a2007) => a2007 + 1
plot(f2007(2007))
f2008(a2008) => a2008 + 1
plot(f2008(2008))
f2009(a2009) => a2009 + 1
plot(f2009(2009))
f2010(a2010) => a2010 + 1
plot(f2010(2010))
f2011(a2011) => a2011 + 1
plot(f2011(2011))
f2012(a2012) => a2012 + 1
plot(f2012(2012))
f2013(a2013) => a2013 + 1
plot(f2013(2013))
f2014(a2014) => a2014 + 1
plot(f2014(2014))
f2015(a2015) => a2015 + 1
plot(f2015(2015))
f2016(a2016) => a2016 + 1
plot(f2016(2016))
f2017(a2017) => a2017 + 1
plot(f2017(2017))
f2018(a2018) => a2018 + 1
plot(f2018(2018))
f2019(a2019) => a2019 + 1
plot(f2019(2019))
f2020(a2020) => a2020 + 1
plot(f2020(2020))
f2021(a2021) => a2021 + 1
plot(f2021(2021))
f2022(a2022) => a2022 + 1
plot(f2022(2022))
f2023(a2023) => a2023 + 1
plot(f2023(2023))
f2024(a2024) => a2024 + 1
plot(f2024(2024))
f2025(a2025) => a2025 + 1
plot(f2025(2025))
f2026(a2026) => a2026 + 1
plot(f2026(2026))
f2027(a2027) => a2027 + 1
plot(f2027(2027))
f2028(a2028) => a2028 + 1
plot(f2028(2028))
f2029(a2029) => a2029 + 1
plot(f2029(2029))
f2030(a2030) => a2030 + 1
plot(f2030(2030))
f2031(a2031) => a2031 + 1
plot(f2031(2031))
f2032(a2032) => a2032 + 1
plot(f2032(2032))
f2033(a2033) => a2033 + 1
plot(f2033(2033))
f2034(a2034) => a2034 + 1
plot(f2034(2034))
f2035(a2035) => a2035 + 1
plot(f2035(2035))
f2036(a2036) => a2036 + 1
plot(f2036(2036))
f2037(a2037) => a2037 + 1
plot(f2037(2037))
f2038(a2038) => a2038 + 1
plot(f2038(2038))
f2039(a2039) => a2039 + 1
plot(f2039(2039))
f2040(a2040) => a2040 + 1
plot(f2040(2040))
f2041(a2041) => a2041 + 1
plot(f2041(2041))
f2042(a2042) => a2042 + 1
plot(f2042(2042))
f2043(a2043) => a2043 + 1
plot(f2043(2043))
f2044(a2044) => a2044 + 1
plot(f2044(2044))
f2045(a2045) => a2045 + 1
plot(f2045(2045))
f2046(a2046) => a2046 + 1
plot(f2046(2046))
f2047(a2047) => a2047 + 1
plot(f2047(2047))
f2048(a2048) => a2048 + 1
plot(f2048(2048))
f2049(a2049) => a2049 + 1
plot(f2049(2049))
f2050(a2050) => a2050 + 1
plot(f2050(2050))
f2051(a2051) => a2051 + 1
plot(f2051(2051))
f2052(a2052) => a2052 + 1
plot(f2052(2052))
f2053(a2053) => a2053 + 1
plot(f2053(2053))
f2054(a2054) => a2054 + 1
plot(f2054(2054))
f2055(a2055) => a2055 + 1
plot(f2055(2055))
f2056(a2056) => a2056 + 1
plot(f2056(2056))
f2057(a2057) => a2057 + 1
plot(f2057(2057))
f2058(a2058) => a2058 + 1
plot(f2058(2058))
f2059(a2059) => a2059 + 1
plot(f2059(2059))
f2060(a2060) => a2060 + 1
plot(f2060(2060))
f2061(a2061) => a2061 + 1
plot(f2061(2061))
f2062(a2062) => a2062 + 1
plot(f2062(2062))
f2063(a2063) => a2063 + 1
plot(f2063(2063))
f2064(a2064) => a2064 + 1
plot(f2064(2064))
f2065(a2065) => a2065 + 1
plot(f2065(2065))
f2066(a2066) => a2066 + 1
plot(f2066(2066))
f2067(a2067) => a2067 + 1
plot(f2067(2067))
f2068(a2068) => a2068 + 1
plot(f2068(2068))
f2069(a2069) => a2069 + 1
plot(f2069(2069))
f2070(a2070) => a2070 + 1
plot(f2070(2070))
f2071(a2071) => a2071 + 1
plot(f2071(2071))
f2072(a2072) => a2072 + 1
plot(f2072(2072))
f2073(a2073) => a2073 + 1
plot(f2073(2073))
f2074(a2074) => a2074 + 1
plot(f2074(2074))
f2075(a2075) => a2075 + 1
plot(f2075(2075))
f2076(a2076) => a2076 + 1
plot(f2076(2076))
f2077(a2077) => a2077 + 1
plot(f2077(2077))
f2078(a2078) => a2078 + 1
plot(f2078(2078))
f2079(a2079) => a2079 + 1
plot(f2079(2079))
f2080(a2080) => a2080 + 1
plot(f2080(2080))
f2081(a2081) => a2081 + 1
plot(f2081(2081))
f2082(a2082) => a2082 + 1
plot(f2082(2082))
f2083(a2083) => a2083 + 1
plot(f2083(2083))
f2084(a2084) => a2084 + 1
plot(f2084(2084))
f2085(a2085) => a2085 + 1
plot(f2085(2085))
f2086(a2086) => a2086 + 1
plot(f2086(2086))
f2087(a2087) => a2087 + 1
plot(f2087(2087))
f2088(a2088) => a2088 + 1
plot(f2088(2088))
f2089(a2089) => a2089 + 1
plot(f2089(2089))
f2090(a2090) => a2090 + 1
plot(f2090(2090))
f2091(a2091) => a2091 + 1
plot(f2091(2091))
f2092(a2092) => a2092 + 1
plot(f2092(2092))
f2093(a2093) => a2093 + 1
plot(f2093(2093))
f2094(a2094) => a2094 + 1
plot(f2094(2094))
f2095(a2095) => a2095 + 1
plot(f2095(2095))
f2096(a2096) => a2096 + 1
plot(f2096(2096))
f2097(a2097) => a2097 + 1
plot(f2097(2097))
f2098(a2098) => a2098 + 1
plot(f2098(2098))
f2099(a2099) => a2099 + 1
plot(f2099(2099))
f2100(a2100) => a2100 + 1
plot(f2100(2100))
f2101(a2101) => a2101 + 1
plot(f2101(2101))
f2102(a2102) => a2102 + 1
plot(f2102(2102))
f2103(a2103) => a2103 + 1
plot(f2103(2103))
f2104(a2104) => a2104 + 1
plot(f2104(2104))
f2105(a2105) => a2105 + 1
plot(f2105(2105))
f2106(a2106) => a2106 + 1
plot(f2106(2106))
f2107(a2107) => a2107 + 1
plot(f2107(2107))
f2108(a2108) => a2108 + 1
plot(f2108(2108))
f2109(a2109) => a2109 + 1
plot(f2109(2109))
f2110(a2110) => a2110 + 1
plot(f2110(2110))
f2111(a2111) => a2111 + 1
plot(f2111(2111))
f2112(a2112) => a2112 + 1
plot(f2112(2112))
f2113(a2113) => a2113 + 1
plot(f2113(2113))
f2114(a2114) => a2114 + 1
plot(f2114(2114))
f2115(a2115) => a2115 + 1
plot(f2115(2115))
f2116(a2116) => a2116 + 1
plot(f2116(2116))
f2117(a2117) => a2117 + 1
plot(f2117(2117))
f2118(a2118) => a2118 + 1
plot(f2118(2118))
f2119(a2119) => a2119 + 1
plot(f2119(2119))
f2120(a2120) => a2120 + 1
plot(f2120(2120))
f2121(a2121) => a2121 + 1
plot(f2121(2121))
f2122(a2122) => a2122 + 1
plot(f2122(2122))
f2123(a2123) => a2123 + 1
plot(f2123(2123))
f2124(a2124) => a2124 + 1
plot(f2124(2124))
f2125(a2125) => a2125 + 1
plot(f2125(2125))
f2126(a2126) => a2126 + 1
plot(f2126(2126))
f2127(a2127) => a2127 + 1
plot(f2127(2127))
f2128(a2128) => a2128 + 1
plot(f2128(2128))
f2129(a2129) => a2129 + 1
plot(f2129(2129))
f2130(a2130) => a2130 + 1
plot(f2130(2130))
f2131(a2131) => a2131 + 1
plot(f2131(2131))
f2132(a2132) => a2132 + 1
plot(f2132(2132))
f2133(a2133) => a2133 + 1
plot(f2133(2133))
f2134(a2134) => a2134 + 1
plot(f2134(2134))
f2135(a2135) => a2135 + 1
plot(f2135(2135))
f2136(a2136) => a2136 + 1
plot(f2136(2136))
f2137(a2137) => a2137 + 1
plot(f2137(2137))
f2138(a2138) => a2138 + 1
plot(f2138(2138))
f2139(a2139) => a2139 + 1
plot(f2139(2139))
f2140(a2140) => a2140 + 1
plot(f2140(2140))
f2141(a2141) => a2141 + 1
plot(f2141(2141))
f2142(a2142) => a2142 + 1
plot(f2142(2142))
f2143(a2143) => a2143 + 1
plot(f2143(2143))
f2144(a2144) => a2144 + 1
plot(f2144(2144))
f2145(a2145) => a2145 + 1
plot(f2145(2145))
f2146(a2146) => a2146 + 1
plot(f2146(2146))
f2147(a2147) => a2147 + 1
plot(f2147(2147))
f2148(a2148) => a2148 + 1
plot(f2148(2148))
f2149(a2149) => a2149 + 1
plot(f2149(2149))
f2150(a2150) => a2150 + 1
plot(f2150(2150))
f2151(a2151) => a2151 + 1
plot(f2151(2151))
f2152(a2152) => a2152 + 1
plot(f2152(2152))
f2153(a2153) => a2153 + 1
plot(f2153(2153))
f2154(a2154) => a2154 + 1
plot(f2154(2154))
f2155(a2155) => a2155 + 1
plot(f2155(2155))
f2156(a2156) => a2156 + 1
plot(f2156(2156))
f2157(a2157) => a2157 + 1
plot(f2157(2157))
f2158(a2158) => a2158 + 1
plot(f2158(2158))
f2159(a2159) => a2159 + 1
plot(f2159(2159))
f2160(a2160) => a2160 + 1
plot(f2160(2160))
f2161(a2161) => a2161 + 1
plot(f2161(2161))
f2162(a2162) => a2162 + 1
plot(f2162(2162))
f2163(a2163) => a2163 + 1
plot(f2163(2163))
f2164(a2164) => a2164 + 1
plot(f2164(2164))
f2165(a2165) => a2165 + 1
plot(f2165(2165))
f2166(a2166) => a2166 + 1
plot(f2166(2166))
f2167(a2167) => a2167 + 1
plot(f2167(2167))
f2168(a2168) => a2168 + 1
plot(f2168(2168))
f2169(a2169) => a2169 + 1
plot(f2169(2169))
f2170(a2170) => a2170 + 1
plot(f2170(2170))
f2171(a2171) => a2171 + 1
plot(f2171(2171))
f2172(a2172) => a2172 + 1
plot(f2172(2172))
f2173(a2173) => a2173 + 1
plot(f2173(2173))
f2174(a2174) => a2174 + 1
plot(f2174(2174))
f2175(a2175) => a2175 + 1
plot(f2175(2175))
f2176(a2176) => a2176 + 1
plot(f2176(2176))
f2177(a2177) => a2177 + 1
plot(f2177(2177))
f2178(a2178) => a2178 + 1
plot(f2178(2178))
f2179(a2179) => a2179 + 1
plot(f2179(2179))
f2180(a2180) => a2180 + 1
plot(f2180(2180))
f2181(a2181) => a2181 + 1
plot(f2181(2181))
f2182(a2182) => a2182 + 1
plot(f2182(2182))
f2183(a2183) => a2183 + 1
plot(f2183(2183))
f2184(a2184) => a2184 + 1
plot(f2184(2184))
f2185(a2185) => a2185 + 1
plot(f2185(2185))
f2186(a2186) => a2186 + 1
plot(f2186(2186))
f2187(a2187) => a2187 + 1
plot(f2187(2187))
f2188(a2188) => a2188 + 1
plot(f2188(2188))
f2189(a2189) => a2189 + 1
plot(f2189(2189))
f2190(a2190) => a2190 + 1
plot(f2190(2190))
f2191(a2191) => a2191 + 1
plot(f2191(2191))
f2192(a2192) => a2192 + 1
plot(f2192(2192))
f2193(a2193) => a2193 + 1
plot(f2193(2193))
f2194(a2194) => a2194 + 1
plot(f2194(2194))
f2195(a2195) => a2195 + 1
plot(f2195(2195))
f2196(a2196) => a2196 + 1
plot(f2196(2196))
f2197(a2197) => a2197 + 1
plot(f2197(2197))
f2198(a2198) => a2198 + 1
plot(f2198(2198))
f2199(a2199) => a2199 + 1
plot(f2199(2199))
f2200(a2200) => a2200 + 1
plot(f2200(2200))
f2201(a2201) => a2201 + 1
plot(f2201(2201))
f2202(a2202) => a2202 + 1
plot(f2202(2202))
f2203(a2203) => a2203 + 1
plot(f2203(2203))
f2204(a2204) => a2204 + 1
plot(f2204(2204))
f2205(a2205) => a2205 + 1
plot(f2205(2205))
f2206(a2206) => a2206 + 1
plot(f2206(2206))
f2207(a2207) => a2207 + 1
plot(f2207(2207))
f2208(a2208) => a2208 + 1
plot(f2208(2208))
f2209(a2209) => a2209 + 1
plot(f2209(2209))
f2210(a2210) => a2210 + 1
plot(f2210(2210))
f2211(a2211) => a2211 + 1
plot(f2211(2211))
f2212(a2212) => a2212 + 1
plot(f2212(2212))
f2213(a2213) => a2213 + 1
plot(f2213(2213))
f2214(a2214) => a2214 + 1
plot(f2214(2214))
f2215(a2215) => a2215 + 1
plot(f2215(2215))
f2216(a2216) => a2216 + 1
plot(f2216(2216))
f2217(a2217) => a2217 + 1
plot(f2217(2217))
f2218(a2218) => a2218 + 1
plot(f2218(2218))
f2219(a2219) => a2219 + 1
plot(f2219(2219))
f2220(a2220) => a2220 + 1
plot(f2220(2220))
f2221(a2221) => a2221 + 1
plot(f2221(2221))
f2222(a2222) => a2222 + 1
plot(f2222(2222))
f2223(a2223) => a2223 + 1
plot(f2223(2223))
f2224(a2224) => a2224 + 1
plot(f2224(2224))
f2225(a2225) => a2225 + 1
plot(f2225(2225))
f2226(a2226) => a2226 + 1
plot(f2226(2226))
f2227(a2227) => a2227 + 1
plot(f2227(2227))
f2228(a2228) => a2228 + 1
plot(f2228(2228))
f2229(a2229) => a2229 + 1
plot(f2229(2229))
f2230(a2230) => a2230 + 1
plot(f2230(2230))
f2231(a2231) => a2231 + 1
plot(f2231(2231))
f2232(a2232) => a2232 + 1
plot(f2232(2232))
f2233(a2233) => a2233 + 1
plot(f2233(2233))
f2234(a2234) => a2234 + 1
plot(f2234(2234))
f2235(a2235) => a2235 + 1
plot(f2235(2235))
f2236(a2236) => a2236 + 1
plot(f2236(2236))
f2237(a2237) => a2237 + 1
plot(f2237(2237))
f2238(a2238) => a2238 + 1
plot(f2238(2238))
f2239(a2239) => a2239 + 1
plot(f2239(2239))
f2240(a2240) => a2240 + 1
plot(f2240(2240))
f2241(a2241) => a2241 + 1
plot(f2241(2241))
f2242(a2242) => a2242 + 1
plot(f2242(2242))
f2243(a2243) => a2243 + 1
plot(f2243(2243))
f2244(a2244) => a2244 + 1
plot(f2244(2244))
f2245(a2245) => a2245 + 1
plot(f2245(2245))
f2246(a2246) => a2246 + 1
plot(f2246(2246))
f2247(a2247) => a2247 + 1
plot(f2247(2247))
f2248(a2248) => a2248 + 1
plot(f2248(2248))
f2249(a2249) => a2249 + 1
plot(f2249(2249))
f2250(a2250) => a2250 + 1
plot(f2250(2250))
f2251(a2251) => a2251 + 1
plot(f2251(2251))
f2252(a2252) => a2252 + 1
plot(f2252(2252))
f2253(a2253) => a2253 + 1
plot(f2253(2253))
f2254(a2254) => a2254 + 1
plot(f2254(2254))
f2255(a2255) => a2255 + 1
plot(f2255(2255))
f2256(a2256) => a2256 + 1
plot(f2256(2256))
f2257(a2257) => a2257 + 1
plot(f2257(2257))
f2258(a2258) => a2258 + 1
plot(f2258(2258))
f2259(a2259) => a2259 + 1
plot(f2259(2259))
f2260(a2260) => a2260 + 1
plot(f2260(2260))
f2261(a2261) => a2261 + 1
plot(f2261(2261))
f2262(a2262) => a2262 + 1
plot(f2262(2262))
f2263(a2263) => a2263 + 1
plot(f2263(2263))
f2264(a2264) => a2264 + 1
plot(f2264(2264))
f2265(a2265) => a2265 + 1
plot(f2265(2265))
f2266(a2266) => a2266 + 1
plot(f2266(2266))
f2267(a2267) => a2267 + 1
plot(f2267(2267))
f2268(a2268) => a2268 + 1
plot(f2268(2268))
f2269(a2269) => a2269 + 1
plot(f2269(2269))
f2270(a2270) => a2270 + 1
plot(f2270(2270))
f2271(a2271) => a2271 + 1
plot(f2271(2271))
f2272(a2272) => a2272 + 1
plot(f2272(2272))
f2273(a2273) => a2273 + 1
plot(f2273(2273))
f2274(a2274) => a2274 + 1
plot(f2274(2274))
f2275(a2275) => a2275 + 1
plot(f2275(2275))
f2276(a2276) => a2276 + 1
plot(f2276(2276))
f2277(a2277) => a2277 + 1
plot(f2277(2277))
f2278(a2278) => a2278 + 1
plot(f2278(2278))
f2279(a2279) => a2279 + 1
plot(f2279(2279))
f2280(a2280) => a2280 + 1
plot(f2280(2280))
f2281(a2281) => a2281 + 1
plot(f2281(2281))
f2282(a2282) => a2282 + 1
plot(f2282(2282))
f2283(a2283) => a2283 + 1
plot(f2283(2283))
f2284(a2284) => a2284 + 1
plot(f2284(2284))
f2285(a2285) => a2285 + 1
plot(f2285(2285))
f2286(a2286) => a2286 + 1
plot(f2286(2286))
f2287(a2287) => a2287 + 1
plot(f2287(2287))
f2288(a2288) => a2288 + 1
plot(f2288(2288))
f2289(a2289) => a2289 + 1
plot(f2289(2289))
f2290(a2290) => a2290 + 1
plot(f2290(2290))
f2291(a2291) => a2291 + 1
plot(f2291(2291))
f2292(a2292) => a2292 + 1
plot(f2292(2292))
f2293(a2293) => a2293 + 1
plot(f2293(2293))
f2294(a2294) => a2294 + 1
plot(f2294(2294))
f2295(a2295) => a2295 + 1
plot(f2295(2295))
f2296(a2296) => a2296 + 1
plot(f2296(2296))
f2297(a2297) => a2297 + 1
plot(f2297(2297))
f2298(a2298) => a2298 + 1
plot(f2298(2298))
f2299(a2299) => a2299 + 1
plot(f2299(2299))
f2300(a2300) => a2300 + 1
plot(f2300(2300))
f2301(a2301) => a2301 + 1
plot(f2301(2301))
f2302(a2302) => a2302 + 1
plot(f2302(2302))
f2303(a2303) => a2303 + 1
plot(f2303(2303))
f2304(a2304) => a2304 + 1
plot(f2304(2304))
f2305(a2305) => a2305 + 1
plot(f2305(2305))
f2306(a2306) => a2306 + 1
plot(f2306(2306))
f2307(a2307) => a2307 + 1
plot(f2307(2307))
f2308(a2308) => a2308 + 1
plot(f2308(2308))
f2309(a2309) => a2309 + 1
plot(f2309(2309))
f2310(a2310) => a2310 + 1
plot(f2310(2310))
f2311(a2311) => a2311 + 1
plot(f2311(2311))
f2312(a2312) => a2312 + 1
plot(f2312(2312))
f2313(a2313) => a2313 + 1
plot(f2313(2313))
f2314(a2314) => a2314 + 1
plot(f2314(2314))
f2315(a2315) => a2315 + 1
plot(f2315(2315))
f2316(a2316) => a2316 + 1
plot(f2316(2316))
f2317(a2317) => a2317 + 1
plot(f2317(2317))
f2318(a2318) => a2318 + 1
plot(f2318(2318))
f2319(a2319) => a2319 + 1
plot(f2319(2319))
f2320(a2320) => a2320 + 1
plot(f2320(2320))
f2321(a2321) => a2321 + 1
plot(f2321(2321))
f2322(a2322) => a2322 + 1
plot(f2322(2322))
f2323(a2323) => a2323 + 1
plot(f2323(2323))
f2324(a2324) => a2324 + 1
plot(f2324(2324))
f2325(a2325) => a2325 + 1
plot(f2325(2325))
f2326(a2326) => a2326 + 1
plot(f2326(2326))
f2327(a2327) => a2327 + 1
plot(f2327(2327))
f2328(a2328) => a2328 + 1
plot(f2328(2328))
f2329(a2329) => a2329 + 1
plot(f2329(2329))
f2330(a2330) => a2330 + 1
plot(f2330(2330))
f2331(a2331) => a2331 + 1
plot(f2331(2331))
f2332(a2332) => a2332 + 1
plot(f2332(2332))
f2333(a2333) => a2333 + 1
plot(f2333(2333))
f2334(a2334) => a2334 + 1
plot(f2334(2334))
f2335(a2335) => a2335 + 1
plot(f2335(2335))
f2336(a2336) => a2336 + 1
plot(f2336(2336))
f2337(a2337) => a2337 + 1
plot(f2337(2337))
f2338(a2338) => a2338 + 1
plot(f2338(2338))
f2339(a2339) => a2339 + 1
plot(f2339(2339))
f2340(a2340) => a2340 + 1
plot(f2340(2340))
f2341(a2341) => a2341 + 1
plot(f2341(2341))
f2342(a2342) => a2342 + 1
plot(f2342(2342))
f2343(a2343) => a2343 + 1
plot(f2343(2343))
f2344(a2344) => a2344 + 1
plot(f2344(2344))
f2345(a2345) => a2345 + 1
plot(f2345(2345))
f2346(a2346) => a2346 + 1
plot(f2346(2346))
f2347(a2347) => a2347 + 1
plot(f2347(2347))
f2348(a2348) => a2348 + 1
plot(f2348(2348))
f2349(a2349) => a2349 + 1
plot(f2349(2349))
f2350(a2350) => a2350 + 1
plot(f2350(2350))
f2351(a2351) => a2351 + 1
plot(f2351(2351))
f2352(a2352) => a2352 + 1
plot(f2352(2352))
f2353(a2353) => a2353 + 1
plot(f2353(2353))
f2354(a2354) => a2354 + 1
plot(f2354(2354))
f2355(a2355) => a2355 + 1
plot(f2355(2355))
f2356(a2356) => a2356 + 1
plot(f2356(2356))
f2357(a2357) => a2357 + 1
plot(f2357(2357))
f2358(a2358) => a2358 + 1
plot(f2358(2358))
f2359(a2359) => a2359 + 1
plot(f2359(2359))
f2360(a2360) => a2360 + 1
plot(f2360(2360))
f2361(a2361) => a2361 + 1
plot(f2361(2361))
f2362(a2362) => a2362 + 1
plot(f2362(2362))
f2363(a2363) => a2363 + 1
plot(f2363(2363))
f2364(a2364) => a2364 + 1
plot(f2364(2364))
f2365(a2365) => a2365 + 1
plot(f2365(2365))
f2366(a2366) => a2366 + 1
plot(f2366(2366))
f2367(a2367) => a2367 + 1
plot(f2367(2367))
f2368(a2368) => a2368 + 1
plot(f2368(2368))
f2369(a2369) => a2369 + 1
plot(f2369(2369))
f2370(a2370) => a2370 + 1
plot(f2370(2370))
f2371(a2371) => a2371 + 1
plot(f2371(2371))
f2372(a2372) => a2372 + 1
plot(f2372(2372))
f2373(a2373) => a2373 + 1
plot(f2373(2373))
f2374(a2374) => a2374 + 1
plot(f2374(2374))
f2375(a2375) => a2375 + 1
plot(f2375(2375))
f2376(a2376) => a2376 + 1
plot(f2376(2376))
f2377(a2377) => a2377 + 1
plot(f2377(2377))
f2378(a2378) => a2378 + 1
plot(f2378(2378))
f2379(a2379) => a2379 + 1
plot(f2379(2379))
f2380(a2380) => a2380 + 1
plot(f2380(2380))
f2381(a2381) => a2381 + 1
plot(f2381(2381))
f2382(a2382) => a2382 + 1
plot(f2382(2382))
f2383(a2383) => a2383 + 1
plot(f2383(2383))
f2384(a2384) => a2384 + 1
plot(f2384(2384))
f2385(a2385) => a2385 + 1
plot(f2385(2385))
f2386(a2386) => a2386 + 1
plot(f2386(2386))
f2387(a2387) => a2387 + 1
plot(f2387(2387))
f2388(a2388) => a2388 + 1
plot(f2388(2388))
f2389(a2389) => a2389 + 1
plot(f2389(2389))
f2390(a2390) => a2390 + 1
plot(f2390(2390))
f2391(a2391) => a2391 + 1
plot(f2391(2391))
f2392(a2392) => a2392 + 1
plot(f2392(2392))
f2393(a2393) => a2393 + 1
plot(f2393(2393))
f2394(a2394) => a2394 + 1
plot(f2394(2394))
f2395(a2395) => a2395 + 1
plot(f2395(2395))
f2396(a2396) => a2396 + 1
plot(f2396(2396))
f2397(a2397) => a2397 + 1
plot(f2397(2397))
f2398(a2398) => a2398 + 1
plot(f2398(2398))
f2399(a2399) => a2399 + 1
plot(f2399(2399))
f2400(a2400) => a2400 + 1
plot(f2400(2400))
f2401(a2401) => a2401 + 1
plot(f2401(2401))
f2402(a2402) => a2402 + 1
plot(f2402(2402))
f2403(a2403) => a2403 + 1
plot(f2403(2403))
f2404(a2404) => a2404 + 1
plot(f2404(2404))
f2405(a2405) => a2405 + 1
plot(f2405(2405))
f2406(a2406) => a2406 + 1
plot(f2406(2406))
f2407(a2407) => a2407 + 1
plot(f2407(2407))
f2408(a2408) => a2408 + 1
plot(f2408(2408))
f2409(a2409) => a2409 + 1
plot(f2409(2409))
f2410(a2410) => a2410 + 1
plot(f2410(2410))
f2411(a2411) => a2411 + 1
plot(f2411(2411))
f2412(a2412) => a2412 + 1
plot(f2412(2412))
f2413(a2413) => a2413 + 1
plot(f2413(2413))
f2414(a2414) => a2414 + 1
plot(f2414(2414))
f2415(a2415) => a2415 + 1
plot(f2415(2415))
f2416(a2416) => a2416 + 1
plot(f2416(2416))
f2417(a2417) => a2417 + 1
plot(f2417(2417))
f2418(a2418) => a2418 + 1
plot(f2418(2418))
f2419(a2419) => a2419 + 1
plot(f2419(2419))
f2420(a2420) => a2420 + 1
plot(f2420(2420))
f2421(a2421) => a2421 + 1
plot(f2421(2421))
f2422(a2422) => a2422 + 1
plot(f2422(2422))
f2423(a2423) => a2423 + 1
plot(f2423(2423))
f2424(a2424) => a2424 + 1
plot(f2424(2424))
f2425(a2425) => a2425 + 1
plot(f2425(2425))
f2426(a2426) => a2426 + 1
plot(f2426(2426))
f2427(a2427) => a2427 + 1
plot(f2427(2427))
f2428(a2428) => a2428 + 1
plot(f2428(2428))
f2429(a2429) => a2429 + 1
plot(f2429(2429))
f2430(a2430) => a2430 + 1
plot(f2430(2430))
f2431(a2431) => a2431 + 1
plot(f2431(2431))
f2432(a2432) => a2432 + 1
plot(f2432(2432))
f2433(a2433) => a2433 + 1
plot(f2433(2433))
f2434(a2434) => a2434 + 1
plot(f2434(2434))
f2435(a2435) => a2435 + 1
plot(f2435(2435))
f2436(a2436) => a2436 + 1
plot(f2436(2436))
f2437(a2437) => a2437 + 1
plot(f2437(2437))
f2438(a2438) => a2438 + 1
plot(f2438(2438))
f2439(a2439) => a2439 + 1
plot(f2439(2439))
f2440(a2440) => a2440 + 1
plot(f2440(2440))
f2441(a2441) => a2441 + 1
plot(f2441(2441))
f2442(a2442) => a2442 + 1
plot(f2442(2442))
f2443(a2443) => a2443 + 1
plot(f2443(2443))
f2444(a2444) => a2444 + 1
plot(f2444(2444))
f2445(a2445) => a2445 + 1
plot(f2445(2445))
f2446(a2446) => a2446 + 1
plot(f2446(2446))
f2447(a2447) => a2447 + 1
plot(f2447(2447))
f2448(a2448) => a2448 + 1
plot(f2448(2448))
f2449(a2449) => a2449 + 1
plot(f2449(2449))
f2450(a2450) => a2450 + 1
plot(f2450(2450))
f2451(a2451) => a2451 + 1
plot(f2451(2451))
f2452(a2452) => a2452 + 1
plot(f2452(2452))
f2453(a2453) => a2453 + 1
plot(f2453(2453))
f2454(a2454) => a2454 + 1
plot(f2454(2454))
f2455(a2455) => a2455 + 1
plot(f2455(2455))
f2456(a2456) => a2456 + 1
plot(f2456(2456))
f2457(a2457) => a2457 + 1
plot(f2457(2457))
f2458(a2458) => a2458 + 1
plot(f2458(2458))
f2459(a2459) => a2459 + 1
plot(f2459(2459))
f2460(a2460) => a2460 + 1
plot(f2460(2460))
f2461(a2461) => a2461 + 1
plot(f2461(2461))
f2462(a2462) => a2462 + 1
plot(f2462(2462))
f2463(a2463) => a2463 + 1
plot(f2463(2463))
f2464(a2464) => a2464 + 1
plot(f2464(2464))
f2465(a2465) => a2465 + 1
plot(f2465(2465))
f2466(a2466) => a2466 + 1
plot(f2466(2466))
f2467(a2467) => a2467 + 1
plot(f2467(2467))
f2468(a2468) => a2468 + 1
plot(f2468(2468))
f2469(a2469) => a2469 + 1
plot(f2469(2469))
f2470(a2470) => a2470 + 1
plot(f2470(2470))
f2471(a2471) => a2471 + 1
plot(f2471(2471))
f2472(a2472) => a2472 + 1
plot(f2472(2472))
f2473(a2473) => a2473 + 1
plot(f2473(2473))
f2474(a2474) => a2474 + 1
plot(f2474(2474))
f2475(a2475) => a2475 + 1
plot(f2475(2475))
f2476(a2476) => a2476 + 1
plot(f2476(2476))
f2477(a2477) => a2477 + 1
plot(f2477(2477))
f2478(a2478) => a2478 + 1
plot(f2478(2478))
f2479(a2479) => a2479 + 1
plot(f2479(2479))
f2480(a2480) => a2480 + 1
plot(f2480(2480))
f2481(a2481) => a2481 + 1
plot(f2481(2481))
f2482(a2482) => a2482 + 1
plot(f2482(2482))
f2483(a2483) => a2483 + 1
plot(f2483(2483))
f2484(a2484) => a2484 + 1
plot(f2484(2484))
f2485(a2485) => a2485 + 1
plot(f2485(2485))
f2486(a2486) => a2486 + 1
plot(f2486(2486))
f2487(a2487) => a2487 + 1
plot(f2487(2487))
f2488(a2488) => a2488 + 1
plot(f2488(2488))
f2489(a2489) => a2489 + 1
plot(f2489(2489))
f2490(a2490) => a2490 + 1
plot(f2490(2490))
f2491(a2491) => a2491 + 1
plot(f2491(2491))
f2492(a2492) => a2492 + 1
plot(f2492(2492))
f2493(a2493) => a2493 + 1
plot(f2493(2493))
f2494(a2494) => a2494 + 1
plot(f2494(2494))
f2495(a2495) => a2495 + 1
plot(f2495(2495))
f2496(a2496) => a2496 + 1
plot(f2496(2496))
f2497(a2497) => a2497 + 1
plot(f2497(2497))
f2498(a2498) => a2498 + 1
plot(f2498(2498))
f2499(a2499) => a2499 + 1
plot(f2499(2499))
f2500(a2500) => a2500 + 1
plot(f2500(2500))
f2501(a2501) => a2501 + 1
plot(f2501(2501))
f2502(a2502) => a2502 + 1
plot(f2502(2502))
f2503(a2503) => a2503 + 1
plot(f2503(2503))
f2504(a2504) => a2504 + 1
plot(f2504(2504))
f2505(a2505) => a2505 + 1
plot(f2505(2505))
f2506(a2506) => a2506 + 1
plot(f2506(2506))
f2507(a2507) => a2507 + 1
plot(f2507(2507))
f2508(a2508) => a2508 + 1
plot(f2508(2508))
f2509(a2509) => a2509 + 1
plot(f2509(2509))
f2510(a2510) => a2510 + 1
plot(f2510(2510))
f2511(a2511) => a2511 + 1
plot(f2511(2511))
f2512(a2512) => a2512 + 1
plot(f2512(2512))
f2513(a2513) => a2513 + 1
plot(f2513(2513))
f2514(a2514) => a2514 + 1
plot(f2514(2514))
f2515(a2515) => a2515 + 1
plot(f2515(2515))
f2516(a2516) => a2516 + 1
plot(f2516(2516))
f2517(a2517) => a2517 + 1
plot(f2517(2517))
f2518(a2518) => a2518 + 1
plot(f2518(2518))
f2519(a2519) => a2519 + 1
plot(f2519(2519))
f2520(a2520) => a2520 + 1
plot(f2520(2520))
f2521(a2521) => a2521 + 1
plot(f2521(2521))
f2522(a2522) => a2522 + 1
plot(f2522(2522))
f2523(a2523) => a2523 + 1
plot(f2523(2523))
f2524(a2524) => a2524 + 1
plot(f2524(2524))
f2525(a2525) => a2525 + 1
plot(f2525(2525))
f2526(a2526) => a2526 + 1
plot(f2526(2526))
f2527(a2527) => a2527 + 1
plot(f2527(2527))
f2528(a2528) => a2528 + 1
plot(f2528(2528))
f2529(a2529) => a2529 + 1
plot(f2529(2529))
f2530(a2530) => a2530 + 1
plot(f2530(2530))
f2531(a2531) => a2531 + 1
plot(f2531(2531))
f2532(a2532) => a2532 + 1
plot(f2532(2532))
f2533(a2533) => a2533 + 1
plot(f2533(2533))
f2534(a2534) => a2534 + 1
plot(f2534(2534))
f2535(a2535) => a2535 + 1
plot(f2535(2535))
f2536(a2536) => a2536 + 1
plot(f2536(2536))
f2537(a2537) => a2537 + 1
plot(f2537(2537))
f2538(a2538) => a2538 + 1
plot(f2538(2538))
f2539(a2539) => a2539 + 1
plot(f2539(2539))
f2540(a2540) => a2540 + 1
plot(f2540(2540))
f2541(a2541) => a2541 + 1
plot(f2541(2541))
f2542(a2542) => a2542 + 1
plot(f2542(2542))
f2543(a2543) => a2543 + 1
plot(f2543(2543))
f2544(a2544) => a2544 + 1
plot(f2544(2544))
f2545(a2545) => a2545 + 1
plot(f2545(2545))
f2546(a2546) => a2546 + 1
plot(f2546(2546))
f2547(a2547) => a2547 + 1
plot(f2547(2547))
f2548(a2548) => a2548 + 1
plot(f2548(2548))
f2549(a2549) => a2549 + 1
plot(f2549(2549))
f2550(a2550) => a2550 + 1
plot(f2550(2550))
f2551(a2551) => a2551 + 1
plot(f2551(2551))
f2552(a2552) => a2552 + 1
plot(f2552(2552))
f2553(a2553) => a2553 + 1
plot(f2553(2553))
f2554(a2554) => a2554 + 1
plot(f2554(2554))
f2555(a2555) => a2555 + 1
plot(f2555(2555))
f2556(a2556) => a2556 + 1
plot(f2556(2556))
f2557(a2557) => a2557 + 1
plot(f2557(2557))
f2558(a2558) => a2558 + 1
plot(f2558(2558))
f2559(a2559) => a2559 + 1
plot(f2559(2559))
f2560(a2560) => a2560 + 1
plot(f2560(2560))
f2561(a2561) => a2561 + 1
plot(f2561(2561))
f2562(a2562) => a2562 + 1
plot(f2562(2562))
f2563(a2563) => a2563 + 1
plot(f2563(2563))
f2564(a2564) => a2564 + 1
plot(f2564(2564))
f2565(a2565) => a2565 + 1
plot(f2565(2565))
f2566(a2566) => a2566 + 1
plot(f2566(2566))
f2567(a2567) => a2567 + 1
plot(f2567(2567))
f2568(a2568) => a2568 + 1
plot(f2568(2568))
f2569(a2569) => a2569 + 1
plot(f2569(2569))
f2570(a2570) => a2570 + 1
plot(f2570(2570))
f2571(a2571) => a2571 + 1
plot(f2571(2571))
f2572(a2572) => a2572 + 1
plot(f2572(2572))
f2573(a2573) => a2573 + 1
plot(f2573(2573))
f2574(a2574) => a2574 + 1
plot(f2574(2574))
f2575(a2575) => a2575 + 1
plot(f2575(2575))
f2576(a2576) => a2576 + 1
plot(f2576(2576))
f2577(a2577) => a2577 + 1
plot(f2577(2577))
f2578(a2578) => a2578 + 1
plot(f2578(2578))
f2579(a2579) => a2579 + 1
plot(f2579(2579))
f2580(a2580) => a2580 + 1
plot(f2580(2580))
f2581(a2581) => a2581 + 1
plot(f2581(2581))
f2582(a2582) => a2582 + 1
plot(f2582(2582))
f2583(a2583) => a2583 + 1
plot(f2583(2583))
f2584(a2584) => a2584 + 1
plot(f2584(2584))
f2585(a2585) => a2585 + 1
plot(f2585(2585))
f2586(a2586) => a2586 + 1
plot(f2586(2586))
f2587(a2587) => a2587 + 1
plot(f2587(2587))
f2588(a2588) => a2588 + 1
plot(f2588(2588))
f2589(a2589) => a2589 + 1
plot(f2589(2589))
f2590(a2590) => a2590 + 1
plot(f2590(2590))
f2591(a2591) => a2591 + 1
plot(f2591(2591))
f2592(a2592) => a2592 + 1
plot(f2592(2592))
f2593(a2593) => a2593 + 1
plot(f2593(2593))
f2594(a2594) => a2594 + 1
plot(f2594(2594))
f2595(a2595) => a2595 + 1
plot(f2595(2595))
f2596(a2596) => a2596 + 1
plot(f2596(2596))
f2597(a2597) => a2597 + 1
plot(f2597(2597))
f2598(a2598) => a2598 + 1
plot(f2598(2598))
f2599(a2599) => a2599 + 1
plot(f2599(2599))
f2600(a2600) => a2600 + 1
plot(f2600(2600))
f2601(a2601) => a2601 + 1
plot(f2601(2601))
f2602(a2602) => a2602 + 1
plot(f2602(2602))
f2603(a2603) => a2603 + 1
plot(f2603(2603))
f2604(a2604) => a2604 + 1
plot(f2604(2604))
f2605(a2605) => a2605 + 1
plot(f2605(2605))
f2606(a2606) => a2606 + 1
plot(f2606(2606))
f2607(a2607) => a2607 + 1
plot(f2607(2607))
f2608(a2608) => a2608 + 1
plot(f2608(2608))
f2609(a2609) => a2609 + 1
plot(f2609(2609))
f2610(a2610) => a2610 + 1
plot(f2610(2610))
f2611(a2611) => a2611 + 1
plot(f2611(2611))
f2612(a2612) => a2612 + 1
plot(f2612(2612))
f2613(a2613) => a2613 + 1
plot(f2613(2613))
f2614(a2614) => a2614 + 1
plot(f2614(2614))
f2615(a2615) => a2615 + 1
plot(f2615(2615))
f2616(a2616) => a2616 + 1
plot(f2616(2616))
f2617(a2617) => a2617 + 1
plot(f2617(2617))
f2618(a2618) => a2618 + 1
plot(f2618(2618))
f2619(a2619) => a2619 + 1
plot(f2619(2619))
f2620(a2620) => a2620 + 1
plot(f2620(2620))
f2621(a2621) => a2621 + 1
plot(f2621(2621))
f2622(a2622) => a2622 + 1
plot(f2622(2622))
f2623(a2623) => a2623 + 1
plot(f2623(2623))
f2624(a2624) => a2624 + 1
plot(f2624(2624))
f2625(a2625) => a2625 + 1
plot(f2625(2625))
f2626(a2626) => a2626 + 1
plot(f2626(2626))
f2627(a2627) => a2627 + 1
plot(f2627(2627))
f2628(a2628) => a2628 + 1
plot(f2628(2628))
f2629(a2629) => a2629 + 1
plot(f2629(2629))
f2630(a2630) => a2630 + 1
plot(f2630(2630))
f2631(a2631) => a2631 + 1
plot(f2631(2631))
f2632(a2632) => a2632 + 1
plot(f2632(2632))
f2633(a2633) => a2633 + 1
plot(f2633(2633))
f2634(a2634) => a2634 + 1
plot(f2634(2634))
f2635(a2635) => a2635 + 1
plot(f2635(2635))
f2636(a2636) => a2636 + 1
plot(f2636(2636))
f2637(a2637) => a2637 + 1
plot(f2637(2637))
f2638(a2638) => a2638 + 1
plot(f2638(2638))
f2639(a2639) => a2639 + 1
plot(f2639(2639))
f2640(a2640) => a2640 + 1
plot(f2640(2640))
f2641(a2641) => a2641 + 1
plot(f2641(2641))
f2642(a2642) => a2642 + 1
plot(f2642(2642))
f2643(a2643) => a2643 + 1
plot(f2643(2643))
f2644(a2644) => a2644 + 1
plot(f2644(2644))
f2645(a2645) => a2645 + 1
plot(f2645(2645))
f2646(a2646) => a2646 + 1
plot(f2646(2646))
f2647(a2647) => a2647 + 1
plot(f2647(2647))
f2648(a2648) => a2648 + 1
plot(f2648(2648))
f2649(a2649) => a2649 + 1
plot(f2649(2649))
f2650(a2650) => a2650 + 1
plot(f2650(2650))
f2651(a2651) => a2651 + 1
plot(f2651(2651))
f2652(a2652) => a2652 + 1
plot(f2652(2652))
f2653(a2653) => a2653 + 1
plot(f2653(2653))
f2654(a2654) => a2654 + 1
plot(f2654(2654))
f2655(a2655) => a2655 + 1
plot(f2655(2655))
f2656(a2656) => a2656 + 1
plot(f2656(2656))
f2657(a2657) => a2657 + 1
plot(f2657(2657))
f2658(a2658) => a2658 + 1
plot(f2658(2658))
f2659(a2659) => a2659 + 1
plot(f2659(2659))
f2660(a2660) => a2660 + 1
plot(f2660(2660))
f2661(a2661) => a2661 + 1
plot(f2661(2661))
f2662(a2662) => a2662 + 1
plot(f2662(2662))
f2663(a2663) => a2663 + 1
plot(f2663(2663))
f2664(a2664) => a2664 + 1
plot(f2664(2664))
f2665(a2665) => a2665 + 1
plot(f2665(2665))
f2666(a2666) => a2666 + 1
plot(f2666(2666))
f2667(a2667) => a2667 + 1
plot(f2667(2667))
f2668(a2668) => a2668 + 1
plot(f2668(2668))
f2669(a2669) => a2669 + 1
plot(f2669(2669))
f2670(a2670) => a2670 + 1
plot(f2670(2670))
f2671(a2671) => a2671 + 1
plot(f2671(2671))
f2672(a2672) => a2672 + 1
plot(f2672(2672))
f2673(a2673) => a2673 + 1
plot(f2673(2673))
f2674(a2674) => a2674 + 1
plot(f2674(2674))
f2675(a2675) => a2675 + 1
plot(f2675(2675))
f2676(a2676) => a2676 + 1
plot(f2676(2676))
f2677(a2677) => a2677 + 1
plot(f2677(2677))
f2678(a2678) => a2678 + 1
plot(f2678(2678))
f2679(a2679) => a2679 + 1
plot(f2679(2679))
f2680(a2680) => a2680 + 1
plot(f2680(2680))
f2681(a2681) => a2681 + 1
plot(f2681(2681))
f2682(a2682) => a2682 + 1
plot(f2682(2682))
f2683(a2683) => a2683 + 1
plot(f2683(2683))
f2684(a2684) => a2684 + 1
plot(f2684(2684))
f2685(a2685) => a2685 + 1
plot(f2685(2685))
f2686(a2686) => a2686 + 1
plot(f2686(2686))
f2687(a2687) => a2687 + 1
plot(f2687(2687))
f2688(a2688) => a2688 + 1
plot(f2688(2688))
f2689(a2689) => a2689 + 1
plot(f2689(2689))
f2690(a2690) => a2690 + 1
plot(f2690(2690))
f2691(a2691) => a2691 + 1
plot(f2691(2691))
f2692(a2692) => a2692 + 1
plot(f2692(2692))
f2693(a2693) => a2693 + 1
plot(f2693(2693))
f2694(a2694) => a2694 + 1
plot(f2694(2694))
f2695(a2695) => a2695 + 1
plot(f2695(2695))
f2696(a2696) => a2696 + 1
plot(f2696(2696))
f2697(a2697) => a2697 + 1
plot(f2697(2697))
f2698(a2698) => a2698 + 1
plot(f2698(2698))
f2699(a2699) => a2699 + 1
plot(f2699(2699))
f2700(a2700) => a2700 + 1
plot(f2700(2700))
f2701(a2701) => a2701 + 1
plot(f2701(2701))
f2702(a2702) => a2702 + 1
plot(f2702(2702))
f2703(a2703) => a2703 + 1
plot(f2703(2703))
f2704(a2704) => a2704 + 1
plot(f2704(2704))
f2705(a2705) => a2705 + 1
plot(f2705(2705))
f2706(a2706) => a2706 + 1
plot(f2706(2706))
f2707(a2707) => a2707 + 1
plot(f2707(2707))
f2708(a2708) => a2708 + 1
plot(f2708(2708))
f2709(a2709) => a2709 + 1
plot(f2709(2709))
f2710(a2710) => a2710 + 1
plot(f2710(2710))
f2711(a2711) => a2711 + 1
plot(f2711(2711))
f2712(a2712) => a2712 + 1
plot(f2712(2712))
f2713(a2713) => a2713 + 1
plot(f2713(2713))
f2714(a2714) => a2714 + 1
plot(f2714(2714))
f2715(a2715) => a2715 + 1
plot(f2715(2715))
f2716(a2716) => a2716 + 1
plot(f2716(2716))
f2717(a2717) => a2717 + 1
plot(f2717(2717))
f2718(a2718) => a2718 + 1
plot(f2718(2718))
f2719(a2719) => a2719 + 1
plot(f2719(2719))
f2720(a2720) => a2720 + 1
plot(f2720(2720))
f2721(a2721) => a2721 + 1
plot(f2721(2721))
f2722(a2722) => a2722 + 1
plot(f2722(2722))
f2723(a2723) => a2723 + 1
plot(f2723(2723))
f2724(a2724) => a2724 + 1
plot(f2724(2724))
f2725(a2725) => a2725 + 1
plot(f2725(2725))
f2726(a2726) => a2726 + 1
plot(f2726(2726))
f2727(a2727) => a2727 + 1
plot(f2727(2727))
f2728(a2728) => a2728 + 1
plot(f2728(2728))
f2729(a2729) => a2729 + 1
plot(f2729(2729))
f2730(a2730) => a2730 + 1
plot(f2730(2730))
f2731(a2731) => a2731 + 1
plot(f2731(2731))
f2732(a2732) => a2732 + 1
plot(f2732(2732))
f2733(a2733) => a2733 + 1
plot(f2733(2733))
f2734(a2734) => a2734 + 1
plot(f2734(2734))
f2735(a2735) => a2735 + 1
plot(f2735(2735))
f2736(a2736) => a2736 + 1
plot(f2736(2736))
f2737(a2737) => a2737 + 1
plot(f2737(2737))
f2738(a2738) => a2738 + 1
plot(f2738(2738))
f2739(a2739) => a2739 + 1
plot(f2739(2739))
f2740(a2740) => a2740 + 1
plot(f2740(2740))
f2741(a2741) => a2741 + 1
plot(f2741(2741))
f2742(a2742) => a2742 + 1
plot(f2742(2742))
f2743(a2743) => a2743 + 1
plot(f2743(2743))
f2744(a2744) => a2744 + 1
plot(f2744(2744))
f2745(a2745) => a2745 + 1
plot(f2745(2745))
f2746(a2746) => a2746 + 1
plot(f2746(2746))
f2747(a2747) => a2747 + 1
plot(f2747(2747))
f2748(a2748) => a2748 + 1
plot(f2748(2748))
f2749(a2749) => a2749 + 1
plot(f2749(2749))
f2750(a2750) => a2750 + 1
plot(f2750(2750))
f2751(a2751) => a2751 + 1
plot(f2751(2751))
f2752(a2752) => a2752 + 1
plot(f2752(2752))
f2753(a2753) => a2753 + 1
plot(f2753(2753))
f2754(a2754) => a2754 + 1
plot(f2754(2754))
f2755(a2755) => a2755 + 1
plot(f2755(2755))
f2756(a2756) => a2756 + 1
plot(f2756(2756))
f2757(a2757) => a2757 + 1
plot(f2757(2757))
f2758(a2758) => a2758 + 1
plot(f2758(2758))
f2759(a2759) => a2759 + 1
plot(f2759(2759))
f2760(a2760) => a2760 + 1
plot(f2760(2760))
f2761(a2761) => a2761 + 1
plot(f2761(2761))
f2762(a2762) => a2762 + 1
plot(f2762(2762))
f2763(a2763) => a2763 + 1
plot(f2763(2763))
f2764(a2764) => a2764 + 1
plot(f2764(2764))
f2765(a2765) => a2765 + 1
plot(f2765(2765))
f2766(a2766) => a2766 + 1
plot(f2766(2766))
f2767(a2767) => a2767 + 1
plot(f2767(2767))
f2768(a2768) => a2768 + 1
plot(f2768(2768))
f2769(a2769) => a2769 + 1
plot(f2769(2769))
f2770(a2770) => a2770 + 1
plot(f2770(2770))
f2771(a2771) => a2771 + 1
plot(f2771(2771))
f2772(a2772) => a2772 + 1
plot(f2772(2772))
f2773(a2773) => a2773 + 1
plot(f2773(2773))
f2774(a2774) => a2774 + 1
plot(f2774(2774))
f2775(a2775) => a2775 + 1
plot(f2775(2775))
f2776(a2776) => a2776 + 1
plot(f2776(2776))
f2777(a2777) => a2777 + 1
plot(f2777(2777))
f2778(a2778) => a2778 + 1
plot(f2778(2778))
f2779(a2779) => a2779 + 1
plot(f2779(2779))
f2780(a2780) => a2780 + 1
plot(f2780(2780))
f2781(a2781) => a2781 + 1
plot(f2781(2781))
f2782(a2782) => a2782 + 1
plot(f2782(2782))
f2783(a2783) => a2783 + 1
plot(f2783(2783))
f2784(a2784) => a2784 + 1
plot(f2784(2784))
f2785(a2785) => a2785 + 1
plot(f2785(2785))
f2786(a2786) => a2786 + 1
plot(f2786(2786))
f2787(a2787) => a2787 + 1
plot(f2787(2787))
f2788(a2788) => a2788 + 1
plot(f2788(2788))
f2789(a2789) => a2789 + 1
plot(f2789(2789))
f2790(a2790) => a2790 + 1
plot(f2790(2790))
f2791(a2791) => a2791 + 1
plot(f2791(2791))
f2792(a2792) => a2792 + 1
plot(f2792(2792))
f2793(a2793) => a2793 + 1
plot(f2793(2793))
f2794(a2794) => a2794 + 1
plot(f2794(2794))
f2795(a2795) => a2795 + 1
plot(f2795(2795))
f2796(a2796) => a2796 + 1
plot(f2796(2796))
f2797(a2797) => a2797 + 1
plot(f2797(2797))
f2798(a2798) => a2798 + 1
plot(f2798(2798))
f2799(a2799) => a2799 + 1
plot(f2799(2799))
f2800(a2800) => a2800 + 1
plot(f2800(2800))
f2801(a2801) => a2801 + 1
plot(f2801(2801))
f2802(a2802) => a2802 + 1
plot(f2802(2802))
f2803(a2803) => a2803 + 1
plot(f2803(2803))
f2804(a2804) => a2804 + 1
plot(f2804(2804))
f2805(a2805) => a2805 + 1
plot(f2805(2805))
f2806(a2806) => a2806 + 1
plot(f2806(2806))
f2807(a2807) => a2807 + 1
plot(f2807(2807))
f2808(a2808) => a2808 + 1
plot(f2808(2808))
f2809(a2809) => a2809 + 1
plot(f2809(2809))
f2810(a2810) => a2810 + 1
plot(f2810(2810))
f2811(a2811) => a2811 + 1
plot(f2811(2811))
f2812(a2812) => a2812 + 1
plot(f2812(2812))
f2813(a2813) => a2813 + 1
plot(f2813(2813))
f2814(a2814) => a2814 + 1
plot(f2814(2814))
f2815(a2815) => a2815 + 1
plot(f2815(2815))
f2816(a2816) => a2816 + 1
plot(f2816(2816))
f2817(a2817) => a2817 + 1
plot(f2817(2817))
f2818(a2818) => a2818 + 1
plot(f2818(2818))
f2819(a2819) => a2819 + 1
plot(f2819(2819))
f2820(a2820) => a2820 + 1
plot(f2820(2820))
f2821(a2821) => a2821 + 1
plot(f2821(2821))
f2822(a2822) => a2822 + 1
plot(f2822(2822))
f2823(a2823) => a2823 + 1
plot(f2823(2823))
f2824(a2824) => a2824 + 1
plot(f2824(2824))
f2825(a2825) => a2825 + 1
plot(f2825(2825))
f2826(a2826) => a2826 + 1
plot(f2826(2826))
f2827(a2827) => a2827 + 1
plot(f2827(2827))
f2828(a2828) => a2828 + 1
plot(f2828(2828))
f2829(a2829) => a2829 + 1
plot(f2829(2829))
f2830(a2830) => a2830 + 1
plot(f2830(2830))
f2831(a2831) => a2831 + 1
plot(f2831(2831))
f2832(a2832) => a2832 + 1
plot(f2832(2832))
f2833(a2833) => a2833 + 1
plot(f2833(2833))
f2834(a2834) => a2834 + 1
plot(f2834(2834))
f2835(a2835) => a2835 + 1
plot(f2835(2835))
f2836(a2836) => a2836 + 1
plot(f2836(2836))
f2837(a2837) => a2837 + 1
plot(f2837(2837))
f2838(a2838) => a2838 + 1
plot(f2838(2838))
f2839(a2839) => a2839 + 1
plot(f2839(2839))
f2840(a2840) => a2840 + 1
plot(f2840(2840))
f2841(a2841) => a2841 + 1
plot(f2841(2841))
f2842(a2842) => a2842 + 1
plot(f2842(2842))
f2843(a2843) => a2843 + 1
plot(f2843(2843))
f2844(a2844) => a2844 + 1
plot(f2844(2844))
f2845(a2845) => a2845 + 1
plot(f2845(2845))
f2846(a2846) => a2846 + 1
plot(f2846(2846))
f2847(a2847) => a2847 + 1
plot(f2847(2847))
f2848(a2848) => a2848 + 1
plot(f2848(2848))
f2849(a2849) => a2849 + 1
plot(f2849(2849))
f2850(a2850) => a2850 + 1
plot(f2850(2850))
f2851(a2851) => a2851 + 1
plot(f2851(2851))
f2852(a2852) => a2852 + 1
plot(f2852(2852))
f2853(a2853) => a2853 + 1
plot(f2853(2853))
f2854(a2854) => a2854 + 1
plot(f2854(2854))
f2855(a2855) => a2855 + 1
plot(f2855(2855))
f2856(a2856) => a2856 + 1
plot(f2856(2856))
f2857(a2857) => a2857 + 1
plot(f2857(2857))
f2858(a2858) => a2858 + 1
plot(f2858(2858))
f2859(a2859) => a2859 + 1
plot(f2859(2859))
f2860(a2860) => a2860 + 1
plot(f2860(2860))
f2861(a2861) => a2861 + 1
plot(f2861(2861))
f2862(a2862) => a2862 + 1
plot(f2862(2862))
f2863(a2863) => a2863 + 1
plot(f2863(2863))
f2864(a2864) => a2864 + 1
plot(f2864(2864))
f2865(a2865) => a2865 + 1
plot(f2865(2865))
f2866(a2866) => a2866 + 1
plot(f2866(2866))
f2867(a2867) => a2867 + 1
plot(f2867(2867))
f2868(a2868) => a2868 + 1
plot(f2868(2868))
f2869(a2869) => a2869 + 1
plot(f2869(2869))
f2870(a2870) => a2870 + 1
plot(f2870(2870))
f2871(a2871) => a2871 + 1
plot(f2871(2871))
f2872(a2872) => a2872 + 1
plot(f2872(2872))
f2873(a2873) => a2873 + 1
plot(f2873(2873))
f2874(a2874) => a2874 + 1
plot(f2874(2874))
f2875(a2875) => a2875 + 1
plot(f2875(2875))
f2876(a2876) => a2876 + 1
plot(f2876(2876))
f2877(a2877) => a2877 + 1
plot(f2877(2877))
f2878(a2878) => a2878 + 1
plot(f2878(2878))
f2879(a2879) => a2879 + 1
plot(f2879(2879))
f2880(a2880) => a2880 + 1
plot(f2880(2880))
f2881(a2881) => a2881 + 1
plot(f2881(2881))
f2882(a2882) => a2882 + 1
plot(f2882(2882))
f2883(a2883) => a2883 + 1
plot(f2883(2883))
f2884(a2884) => a2884 + 1
plot(f2884(2884))
f2885(a2885) => a2885 + 1
plot(f2885(2885))
f2886(a2886) => a2886 + 1
plot(f2886(2886))
f2887(a2887) => a2887 + 1
plot(f2887(2887))
f2888(a2888) => a2888 + 1
plot(f2888(2888))
f2889(a2889) => a2889 + 1
plot(f2889(2889))
f2890(a2890) => a2890 + 1
plot(f2890(2890))
f2891(a2891) => a2891 + 1
plot(f2891(2891))
f2892(a2892) => a2892 + 1
plot(f2892(2892))
f2893(a2893) => a2893 + 1
plot(f2893(2893))
f2894(a2894) => a2894 + 1
plot(f2894(2894))
f2895(a2895) => a2895 + 1
plot(f2895(2895))
f2896(a2896) => a2896 + 1
plot(f2896(2896))
f2897(a2897) => a2897 + 1
plot(f2897(2897))
f2898(a2898) => a2898 + 1
plot(f2898(2898))
f2899(a2899) => a2899 + 1
plot(f2899(2899))
f2900(a2900) => a2900 + 1
plot(f2900(2900))
f2901(a2901) => a2901 + 1
plot(f2901(2901))
f2902(a2902) => a2902 + 1
plot(f2902(2902))
f2903(a2903) => a2903 + 1
plot(f2903(2903))
f2904(a2904) => a2904 + 1
plot(f2904(2904))
f2905(a2905) => a2905 + 1
plot(f2905(2905))
f2906(a2906) => a2906 + 1
plot(f2906(2906))
f2907(a2907) => a2907 + 1
plot(f2907(2907))
f2908(a2908) => a2908 + 1
plot(f2908(2908))
f2909(a2909) => a2909 + 1
plot(f2909(2909))
f2910(a2910) => a2910 + 1
plot(f2910(2910))
f2911(a2911) => a2911 + 1
plot(f2911(2911))
f2912(a2912) => a2912 + 1
plot(f2912(2912))
f2913(a2913) => a2913 + 1
plot(f2913(2913))
f2914(a2914) => a2914 + 1
plot(f2914(2914))
f2915(a2915) => a2915 + 1
plot(f2915(2915))
f2916(a2916) => a2916 + 1
plot(f2916(2916))
f2917(a2917) => a2917 + 1
plot(f2917(2917))
f2918(a2918) => a2918 + 1
plot(f2918(2918))
f2919(a2919) => a2919 + 1
plot(f2919(2919))
f2920(a2920) => a2920 + 1
plot(f2920(2920))
f2921(a2921) => a2921 + 1
plot(f2921(2921))
f2922(a2922) => a2922 + 1
plot(f2922(2922))
f2923(a2923) => a2923 + 1
plot(f2923(2923))
f2924(a2924) => a2924 + 1
plot(f2924(2924))
f2925(a2925) => a2925 + 1
plot(f2925(2925))
f2926(a2926) => a2926 + 1
plot(f2926(2926))
f2927(a2927) => a2927 + 1
plot(f2927(2927))
f2928(a2928) => a2928 + 1
plot(f2928(2928))
f2929(a2929) => a2929 + 1
plot(f2929(2929))
f2930(a2930) => a2930 + 1
plot(f2930(2930))
f2931(a2931) => a2931 + 1
plot(f2931(2931))
f2932(a2932) => a2932 + 1
plot(f2932(2932))
f2933(a2933) => a2933 + 1
plot(f2933(2933))
f2934(a2934) => a2934 + 1
plot(f2934(2934))
f2935(a2935) => a2935 + 1
plot(f2935(2935))
f2936(a2936) => a2936 + 1
plot(f2936(2936))
f2937(a2937) => a2937 + 1
plot(f2937(2937))
f2938(a2938) => a2938 + 1
plot(f2938(2938))
f2939(a2939) => a2939 + 1
plot(f2939(2939))
f2940(a2940) => a2940 + 1
plot(f2940(2940))
f2941(a2941) => a2941 + 1
plot(f2941(2941))
f2942(a2942) => a2942 + 1
plot(f2942(2942))
f2943(a2943) => a2943 + 1
plot(f2943(2943))
f2944(a2944) => a2944 + 1
plot(f2944(2944))
f2945(a2945) => a2945 + 1
plot(f2945(2945))
f2946(a2946) => a2946 + 1
plot(f2946(2946))
f2947(a2947) => a2947 + 1
plot(f2947(2947))
f2948(a2948) => a2948 + 1
plot(f2948(2948))
f2949(a2949) => a2949 + 1
plot(f2949(2949))
f2950(a2950) => a2950 + 1
plot(f2950(2950))
f2951(a2951) => a2951 + 1
plot(f2951(2951))
f2952(a2952) => a2952 + 1
plot(f2952(2952))
f2953(a2953) => a2953 + 1
plot(f2953(2953))
f2954(a2954) => a2954 + 1
plot(f2954(2954))
f2955(a2955) => a2955 + 1
plot(f2955(2955))
f2956(a2956) => a2956 + 1
plot(f2956(2956))
f2957(a2957) => a2957 + 1
plot(f2957(2957))
f2958(a2958) => a2958 + 1
plot(f2958(2958))
f2959(a2959) => a2959 + 1
plot(f2959(2959))
f2960(a2960) => a2960 + 1
plot(f2960(2960))
f2961(a2961) => a2961 + 1
plot(f2961(2961))
f2962(a2962) => a2962 + 1
plot(f2962(2962))
f2963(a2963) => a2963 + 1
plot(f2963(2963))
f2964(a2964) => a2964 + 1
plot(f2964(2964))
f2965(a2965) => a2965 + 1
plot(f2965(2965))
f2966(a2966) => a2966 + 1
plot(f2966(2966))
f2967(a2967) => a2967 + 1
plot(f2967(2967))
f2968(a2968) => a2968 + 1
plot(f2968(2968))
f2969(a2969) => a2969 + 1
plot(f2969(2969))
f2970(a2970) => a2970 + 1
plot(f2970(2970))
f2971(a2971) => a2971 + 1
plot(f2971(2971))
f2972(a2972) => a2972 + 1
plot(f2972(2972))
f2973(a2973) => a2973 + 1
plot(f2973(2973))
f2974(a2974) => a2974 + 1
plot(f2974(2974))
f2975(a2975) => a2975 + 1
plot(f2975(2975))
f2976(a2976) => a2976 + 1
plot(f2976(2976))
f2977(a2977) => a2977 + 1
plot(f2977(2977))
f2978(a2978) => a2978 + 1
plot(f2978(2978))
f2979(a2979) => a2979 + 1
plot(f2979(2979))
f2980(a2980) => a2980 + 1
plot(f2980(2980))
f2981(a2981) => a2981 + 1
plot(f2981(2981))
f2982(a2982) => a2982 + 1
plot(f2982(2982))
f2983(a2983) => a2983 + 1
plot(f2983(2983))
f2984(a2984) => a2984 + 1
plot(f2984(2984))
f2985(a2985) => a2985 + 1
plot(f2985(2985))
f2986(a2986) => a2986 + 1
plot(f2986(2986))
f2987(a2987) => a2987 + 1
plot(f2987(2987))
f2988(a2988) => a2988 + 1
plot(f2988(2988))
f2989(a2989) => a2989 + 1
plot(f2989(2989))
f2990(a2990) => a2990 + 1
plot(f2990(2990))
f2991(a2991) => a2991 + 1
plot(f2991(2991))
f2992(a2992) => a2992 + 1
plot(f2992(2992))
f2993(a2993) => a2993 + 1
plot(f2993(2993))
f2994(a2994) => a2994 + 1
plot(f2994(2994))
f2995(a2995) => a2995 + 1
plot(f2995(2995))
f2996(a2996) => a2996 + 1
plot(f2996(2996))
f2997(a2997) => a2997 + 1
plot(f2997(2997))
f2998(a2998) => a2998 + 1
plot(f2998(2998))
f2999(a2999) => a2999 + 1
plot(f2999(2999))
f3000(a3000) => a3000 + 1
plot(f3000(3000))
f3001(a3001) => a3001 + 1
plot(f3001(3001))
f3002(a3002) => a3002 + 1
plot(f3002(3002))
f3003(a3003) => a3003 + 1
plot(f3003(3003))
f3004(a3004) => a3004 + 1
plot(f3004(3004))
f3005(a3005) => a3005 + 1
plot(f3005(3005))
f3006(a3006) => a3006 + 1
plot(f3006(3006))
f3007(a3007) => a3007 + 1
plot(f3007(3007))
f3008(a3008) => a3008 + 1
plot(f3008(3008))
f3009(a3009) => a3009 + 1
plot(f3009(3009))
f3010(a3010) => a3010 + 1
plot(f3010(3010))
f3011(a3011) => a3011 + 1
plot(f3011(3011))
f3012(a3012) => a3012 + 1
plot(f3012(3012))
f3013(a3013) => a3013 + 1
plot(f3013(3013))
f3014(a3014) => a3014 + 1
plot(f3014(3014))
f3015(a3015) => a3015 + 1
plot(f3015(3015))
f3016(a3016) => a3016 + 1
plot(f3016(3016))
f3017(a3017) => a3017 + 1
plot(f3017(3017))
f3018(a3018) => a3018 + 1
plot(f3018(3018))
f3019(a3019) => a3019 + 1
plot(f3019(3019))
f3020(a3020) => a3020 + 1
plot(f3020(3020))
f3021(a3021) => a3021 + 1
plot(f3021(3021))
f3022(a3022) => a3022 + 1
plot(f3022(3022))
f3023(a3023) => a3023 + 1
plot(f3023(3023))
f3024(a3024) => a3024 + 1
plot(f3024(3024))
f3025(a3025) => a3025 + 1
plot(f3025(3025))
f3026(a3026) => a3026 + 1
plot(f3026(3026))
f3027(a3027) => a3027 + 1
plot(f3027(3027))
f3028(a3028) => a3028 + 1
plot(f3028(3028))
f3029(a3029) => a3029 + 1
plot(f3029(3029))
f3030(a3030) => a3030 + 1
plot(f3030(3030))
f3031(a3031) => a3031 + 1
plot(f3031(3031))
f3032(a3032) => a3032 + 1
plot(f3032(3032))
f3033(a3033) => a3033 + 1
plot(f3033(3033))
f3034(a3034) => a3034 + 1
plot(f3034(3034))
f3035(a3035) => a3035 + 1
plot(f3035(3035))
f3036(a3036) => a3036 + 1
plot(f3036(3036))
f3037(a3037) => a3037 + 1
plot(f3037(3037))
f3038(a3038) => a3038 + 1
plot(f3038(3038))
f3039(a3039) => a3039 + 1
plot(f3039(3039))
f3040(a3040) => a3040 + 1
plot(f3040(3040))
f3041(a3041) => a3041 + 1
plot(f3041(3041))
f3042(a3042) => a3042 + 1
plot(f3042(3042))
f3043(a3043) => a3043 + 1
plot(f3043(3043))
f3044(a3044) => a3044 + 1
plot(f3044(3044))
f3045(a3045) => a3045 + 1
plot(f3045(3045))
f3046(a3046) => a3046 + 1
plot(f3046(3046))
f3047(a3047) => a3047 + 1
plot(f3047(3047))
f3048(a3048) => a3048 + 1
plot(f3048(3048))
f3049(a3049) => a3049 + 1
plot(f3049(3049))
f3050(a3050) => a3050 + 1
plot(f3050(3050))
f3051(a3051) => a3051 + 1
plot(f3051(3051))
f3052(a3052) => a3052 + 1
plot(f3052(3052))
f3053(a3053) => a3053 + 1
plot(f3053(3053))
f3054(a3054) => a3054 + 1
plot(f3054(3054))
f3055(a3055) => a3055 + 1
plot(f3055(3055))
f3056(a3056) => a3056 + 1
plot(f3056(3056))
f3057(a3057) => a3057 + 1
plot(f3057(3057))
f3058(a3058) => a3058 + 1
plot(f3058(3058))
f3059(a3059) => a3059 + 1
plot(f3059(3059))
f3060(a3060) => a3060 + 1
plot(f3060(3060))
f3061(a3061) => a3061 + 1
plot(f3061(3061))
f3062(a3062) => a3062 + 1
plot(f3062(3062))
f3063(a3063) => a3063 + 1
plot(f3063(3063))
f3064(a3064) => a3064 + 1
plot(f3064(3064))
f3065(a3065) => a3065 + 1
plot(f3065(3065))
f3066(a3066) => a3066 + 1
plot(f3066(3066))
f3067(a3067) => a3067 + 1
plot(f3067(3067))
f3068(a3068) => a3068 + 1
plot(f3068(3068))
f3069(a3069) => a3069 + 1
plot(f3069(3069))
f3070(a3070) => a3070 + 1
plot(f3070(3070))
f3071(a3071) => a3071 + 1
plot(f3071(3071))
f3072(a3072) => a3072 + 1
plot(f3072(3072))
f3073(a3073) => a3073 + 1
plot(f3073(3073))
f3074(a3074) => a3074 + 1
plot(f3074(3074))
f3075(a3075) => a3075 + 1
plot(f3075(3075))
f3076(a3076) => a3076 + 1
plot(f3076(3076))
f3077(a3077) => a3077 + 1
plot(f3077(3077))
f3078(a3078) => a3078 + 1
plot(f3078(3078))
f3079(a3079) => a3079 + 1
plot(f3079(3079))
f3080(a3080) => a3080 + 1
plot(f3080(3080))
f3081(a3081) => a3081 + 1
plot(f3081(3081))
f3082(a3082) => a3082 + 1
plot(f3082(3082))
f3083(a3083) => a3083 + 1
plot(f3083(3083))
f3084(a3084) => a3084 + 1
plot(f3084(3084))
f3085(a3085) => a3085 + 1
plot(f3085(3085))
f3086(a3086) => a3086 + 1
plot(f3086(3086))
f3087(a3087) => a3087 + 1
plot(f3087(3087))
f3088(a3088) => a3088 + 1
plot(f3088(3088))
f3089(a3089) => a3089 + 1
plot(f3089(3089))
f3090(a3090) => a3090 + 1
plot(f3090(3090))
f3091(a3091) => a3091 + 1
plot(f3091(3091))
f3092(a3092) => a3092 + 1
plot(f3092(3092))
f3093(a3093) => a3093 + 1
plot(f3093(3093))
f3094(a3094) => a3094 + 1
plot(f3094(3094))
f3095(a3095) => a3095 + 1
plot(f3095(3095))
f3096(a3096) => a3096 + 1
plot(f3096(3096))
f3097(a3097) => a3097 + 1
plot(f3097(3097))
f3098(a3098) => a3098 + 1
plot(f3098(3098))
f3099(a3099) => a3099 + 1
plot(f3099(3099))
f3100(a3100) => a3100 + 1
plot(f3100(3100))
f3101(a3101) => a3101 + 1
plot(f3101(3101))
f3102(a3102) => a3102 + 1
plot(f3102(3102))
f3103(a3103) => a3103 + 1
plot(f3103(3103))
f3104(a3104) => a3104 + 1
plot(f3104(3104))
f3105(a3105) => a3105 + 1
plot(f3105(3105))
f3106(a3106) => a3106 + 1
plot(f3106(3106))
f3107(a3107) => a3107 + 1
plot(f3107(3107))
f3108(a3108) => a3108 + 1
plot(f3108(3108))
f3109(a3109) => a3109 + 1
plot(f3109(3109))
f3110(a3110) => a3110 + 1
plot(f3110(3110))
f3111(a3111) => a3111 + 1
plot(f3111(3111))
f3112(a3112) => a3112 + 1
plot(f3112(3112))
f3113(a3113) => a3113 + 1
plot(f3113(3113))
f3114(a3114) => a3114 + 1
plot(f3114(3114))
f3115(a3115) => a3115 + 1
plot(f3115(3115))
f3116(a3116) => a3116 + 1
plot(f3116(3116))
f3117(a3117) => a3117 + 1
plot(f3117(3117))
f3118(a3118) => a3118 + 1
plot(f3118(3118))
f3119(a3119) => a3119 + 1
plot(f3119(3119))
f3120(a3120) => a3120 + 1
plot(f3120(3120))
f3121(a3121) => a3121 + 1
plot(f3121(3121))
f3122(a3122) => a3122 + 1
plot(f3122(3122))
f3123(a3123) => a3123 + 1
plot(f3123(3123))
f3124(a3124) => a3124 + 1
plot(f3124(3124))
f3125(a3125) => a3125 + 1
plot(f3125(3125))
f3126(a3126) => a3126 + 1
plot(f3126(3126))
f3127(a3127) => a3127 + 1
plot(f3127(3127))
f3128(a3128) => a3128 + 1
plot(f3128(3128))
f3129(a3129) => a3129 + 1
plot(f3129(3129))
f3130(a3130) => a3130 + 1
plot(f3130(3130))
f3131(a3131) => a3131 + 1
plot(f3131(3131))
f3132(a3132) => a3132 + 1
plot(f3132(3132))
f3133(a3133) => a3133 + 1
plot(f3133(3133))
f3134(a3134) => a3134 + 1
plot(f3134(3134))
f3135(a3135) => a3135 + 1
plot(f3135(3135))
f3136(a3136) => a3136 + 1
plot(f3136(3136))
f3137(a3137) => a3137 + 1
plot(f3137(3137))
f3138(a3138) => a3138 + 1
plot(f3138(3138))
f3139(a3139) => a3139 + 1
plot(f3139(3139))
f3140(a3140) => a3140 + 1
plot(f3140(3140))
f3141(a3141) => a3141 + 1
plot(f3141(3141))
f3142(a3142) => a3142 + 1
plot(f3142(3142))
f3143(a3143) => a3143 + 1
plot(f3143(3143))
f3144(a3144) => a3144 + 1
plot(f3144(3144))
f3145(a3145) => a3145 + 1
plot(f3145(3145))
f3146(a3146) => a3146 + 1
plot(f3146(3146))
f3147(a3147) => a3147 + 1
plot(f3147(3147))
f3148(a3148) => a3148 + 1
plot(f3148(3148))
f3149(a3149) => a3149 + 1
plot(f3149(3149))
f3150(a3150) => a3150 + 1
plot(f3150(3150))
f3151(a3151) => a3151 + 1
plot(f3151(3151))
f3152(a3152) => a3152 + 1
plot(f3152(3152))
f3153(a3153) => a3153 + 1
plot(f3153(3153))
f3154(a3154) => a3154 + 1
plot(f3154(3154))
f3155(a3155) => a3155 + 1
plot(f3155(3155))
f3156(a3156) => a3156 + 1
plot(f3156(3156))
f3157(a3157) => a3157 + 1
plot(f3157(3157))
f3158(a3158) => a3158 + 1
plot(f3158(3158))
f3159(a3159) => a3159 + 1
plot(f3159(3159))
f3160(a3160) => a3160 + 1
plot(f3160(3160))
f3161(a3161) => a3161 + 1
plot(f3161(3161))
f3162(a3162) => a3162 + 1
plot(f3162(3162))
f3163(a3163) => a3163 + 1
plot(f3163(3163))
f3164(a3164) => a3164 + 1
plot(f3164(3164))
f3165(a3165) => a3165 + 1
plot(f3165(3165))
f3166(a3166) => a3166 + 1
plot(f3166(3166))
f3167(a3167) => a3167 + 1
plot(f3167(3167))
f3168(a3168) => a3168 + 1
plot(f3168(3168))
f3169(a3169) => a3169 + 1
plot(f3169(3169))
f3170(a3170) => a3170 + 1
plot(f3170(3170))
f3171(a3171) => a3171 + 1
plot(f3171(3171))
f3172(a3172) => a3172 + 1
plot(f3172(3172))
f3173(a3173) => a3173 + 1
plot(f3173(3173))
f3174(a3174) => a3174 + 1
plot(f3174(3174))
f3175(a3175) => a3175 + 1
plot(f3175(3175))
f3176(a3176) => a3176 + 1
plot(f3176(3176))
f3177(a3177) => a3177 + 1
plot(f3177(3177))
f3178(a3178) => a3178 + 1
plot(f3178(3178))
f3179(a3179) => a3179 + 1
plot(f3179(3179))
f3180(a3180) => a3180 + 1
plot(f3180(3180))
f3181(a3181) => a3181 + 1
plot(f3181(3181))
f3182(a3182) => a3182 + 1
plot(f3182(3182))
f3183(a3183) => a3183 + 1
plot(f3183(3183))
f3184(a3184) => a3184 + 1
plot(f3184(3184))
f3185(a3185) => a3185 + 1
plot(f3185(3185))
f3186(a3186) => a3186 + 1
plot(f3186(3186))
f3187(a3187) => a3187 + 1
plot(f3187(3187))
f3188(a3188) => a3188 + 1
plot(f3188(3188))
f3189(a3189) => a3189 + 1
plot(f3189(3189))
f3190(a3190) => a3190 + 1
plot(f3190(3190))
f3191(a3191) => a3191 + 1
plot(f3191(3191))
f3192(a3192) => a3192 + 1
plot(f3192(3192))
f3193(a3193) => a3193 + 1
plot(f3193(3193))
f3194(a3194) => a3194 + 1
plot(f3194(3194))
f3195(a3195) => a3195 + 1
plot(f3195(3195))
f3196(a3196) => a3196 + 1
plot(f3196(3196))
f3197(a3197) => a3197 + 1
plot(f3197(3197))
f3198(a3198) => a3198 + 1
plot(f3198(3198))
f3199(a3199) => a3199 + 1
plot(f3199(3199))
f3200(a3200) => a3200 + 1
plot(f3200(3200))
f3201(a3201) => a3201 + 1
plot(f3201(3201))
f3202(a3202) => a3202 + 1
plot(f3202(3202))
f3203(a3203) => a3203 + 1
plot(f3203(3203))
f3204(a3204) => a3204 + 1
plot(f3204(3204))
f3205(a3205) => a3205 + 1
plot(f3205(3205))
f3206(a3206) => a3206 + 1
plot(f3206(3206))
f3207(a3207) => a3207 + 1
plot(f3207(3207))
f3208(a3208) => a3208 + 1
plot(f3208(3208))
f3209(a3209) => a3209 + 1
plot(f3209(3209))
f3210(a3210) => a3210 + 1
plot(f3210(3210))
f3211(a3211) => a3211 + 1
plot(f3211(3211))
f3212(a3212) => a3212 + 1
plot(f3212(3212))
f3213(a3213) => a3213 + 1
plot(f3213(3213))
f3214(a3214) => a3214 + 1
plot(f3214(3214))
f3215(a3215) => a3215 + 1
plot(f3215(3215))
f3216(a3216) => a3216 + 1
plot(f3216(3216))
f3217(a3217) => a3217 + 1
plot(f3217(3217))
f3218(a3218) => a3218 + 1
plot(f3218(3218))
f3219(a3219) => a3219 + 1
plot(f3219(3219))
f3220(a3220) => a3220 + 1
plot(f3220(3220))
f3221(a3221) => a3221 + 1
plot(f3221(3221))
f3222(a3222) => a3222 + 1
plot(f3222(3222))
f3223(a3223) => a3223 + 1
plot(f3223(3223))
f3224(a3224) => a3224 + 1
plot(f3224(3224))
f3225(a3225) => a3225 + 1
plot(f3225(3225))
f3226(a3226) => a3226 + 1
plot(f3226(3226))
f3227(a3227) => a3227 + 1
plot(f3227(3227))
f3228(a3228) => a3228 + 1
plot(f3228(3228))
f3229(a3229) => a3229 + 1
plot(f3229(3229))
f3230(a3230) => a3230 + 1
plot(f3230(3230))
f3231(a3231) => a3231 + 1
plot(f3231(3231))
f3232(a3232) => a3232 + 1
plot(f3232(3232))
f3233(a3233) => a3233 + 1
plot(f3233(3233))
f3234(a3234) => a3234 + 1
plot(f3234(3234))
f3235(a3235) => a3235 + 1
plot(f3235(3235))
f3236(a3236) => a3236 + 1
plot(f3236(3236))
f3237(a3237) => a3237 + 1
plot(f3237(3237))
f3238(a3238) => a3238 + 1
plot(f3238(3238))
f3239(a3239) => a3239 + 1
plot(f3239(3239))
f3240(a3240) => a3240 + 1
plot(f3240(3240))
f3241(a3241) => a3241 + 1
plot(f3241(3241))
f3242(a3242) => a3242 + 1
plot(f3242(3242))
f3243(a3243) => a3243 + 1
plot(f3243(3243))
f3244(a3244) => a3244 + 1
plot(f3244(3244))
f3245(a3245) => a3245 + 1
plot(f3245(3245))
f3246(a3246) => a3246 + 1
plot(f3246(3246))
f3247(a3247) => a3247 + 1
plot(f3247(3247))
f3248(a3248) => a3248 + 1
plot(f3248(3248))
f3249(a3249) => a3249 + 1
plot(f3249(3249))
f3250(a3250) => a3250 + 1
plot(f3250(3250))
f3251(a3251) => a3251 + 1
plot(f3251(3251))
f3252(a3252) => a3252 + 1
plot(f3252(3252))
f3253(a3253) => a3253 + 1
plot(f3253(3253))
f3254(a3254) => a3254 + 1
plot(f3254(3254))
f3255(a3255) => a3255 + 1
plot(f3255(3255))
f3256(a3256) => a3256 + 1
plot(f3256(3256))
f3257(a3257) => a3257 + 1
plot(f3257(3257))
f3258(a3258) => a3258 + 1
plot(f3258(3258))
f3259(a3259) => a3259 + 1
plot(f3259(3259))
f3260(a3260) => a3260 + 1
plot(f3260(3260))
f3261(a3261) => a3261 + 1
plot(f3261(3261))
f3262(a3262) => a3262 + 1
plot(f3262(3262))
f3263(a3263) => a3263 + 1
plot(f3263(3263))
f3264(a3264) => a3264 + 1
plot(f3264(3264))
f3265(a3265) => a3265 + 1
plot(f3265(3265))
f3266(a3266) => a3266 + 1
plot(f3266(3266))
f3267(a3267) => a3267 + 1
plot(f3267(3267))
f3268(a3268) => a3268 + 1
plot(f3268(3268))
f3269(a3269) => a3269 + 1
plot(f3269(3269))
f3270(a3270) => a3270 + 1
plot(f3270(3270))
f3271(a3271) => a3271 + 1
plot(f3271(3271))
f3272(a3272) => a3272 + 1
plot(f3272(3272))
f3273(a3273) => a3273 + 1
plot(f3273(3273))
f3274(a3274) => a3274 + 1
plot(f3274(3274))
f3275(a3275) => a3275 + 1
plot(f3275(3275))
f3276(a3276) => a3276 + 1
plot(f3276(3276))
f3277(a3277) => a3277 + 1
plot(f3277(3277))
f3278(a3278) => a3278 + 1
plot(f3278(3278))
f3279(a3279) => a3279 + 1
plot(f3279(3279))
f3280(a3280) => a3280 + 1
plot(f3280(3280))
f3281(a3281) => a3281 + 1
plot(f3281(3281))
f3282(a3282) => a3282 + 1
plot(f3282(3282))
f3283(a3283) => a3283 + 1
plot(f3283(3283))
f3284(a3284) => a3284 + 1
plot(f3284(3284))
f3285(a3285) => a3285 + 1
plot(f3285(3285))
f3286(a3286) => a3286 + 1
plot(f3286(3286))
f3287(a3287) => a3287 + 1
plot(f3287(3287))
f3288(a3288) => a3288 + 1
plot(f3288(3288))
f3289(a3289) => a3289 + 1
plot(f3289(3289))
f3290(a3290) => a3290 + 1
plot(f3290(3290))
f3291(a3291) => a3291 + 1
plot(f3291(3291))
f3292(a3292) => a3292 + 1
plot(f3292(3292))
f3293(a3293) => a3293 + 1
plot(f3293(3293))
f3294(a3294) => a3294 + 1
plot(f3294(3294))
f3295(a3295) => a3295 + 1
plot(f3295(3295))
f3296(a3296) => a3296 + 1
plot(f3296(3296))
f3297(a3297) => a3297 + 1
plot(f3297(3297))
f3298(a3298) => a3298 + 1
plot(f3298(3298))
f3299(a3299) => a3299 + 1
plot(f3299(3299))
f3300(a3300) => a3300 + 1
plot(f3300(3300))
f3301(a3301) => a3301 + 1
plot(f3301(3301))
f3302(a3302) => a3302 + 1
plot(f3302(3302))
f3303(a3303) => a3303 + 1
plot(f3303(3303))
f3304(a3304) => a3304 + 1
plot(f3304(3304))
f3305(a3305) => a3305 + 1
plot(f3305(3305))
f3306(a3306) => a3306 + 1
plot(f3306(3306))
f3307(a3307) => a3307 + 1
plot(f3307(3307))
f3308(a3308) => a3308 + 1
plot(f3308(3308))
f3309(a3309) => a3309 + 1
plot(f3309(3309))
f3310(a3310) => a3310 + 1
plot(f3310(3310))
f3311(a3311) => a3311 + 1
plot(f3311(3311))
f3312(a3312) => a3312 + 1
plot(f3312(3312))
f3313(a3313) => a3313 + 1
plot(f3313(3313))
f3314(a3314) => a3314 + 1
plot(f3314(3314))
f3315(a3315) => a3315 + 1
plot(f3315(3315))
f3316(a3316) => a3316 + 1
plot(f3316(3316))
f3317(a3317) => a3317 + 1
plot(f3317(3317))
f3318(a3318) => a3318 + 1
plot(f3318(3318))
f3319(a3319) => a3319 + 1
plot(f3319(3319))
f3320(a3320) => a3320 + 1
plot(f3320(3320))
f3321(a3321) => a3321 + 1
plot(f3321(3321))
f3322(a3322) => a3322 + 1
plot(f3322(3322))
f3323(a3323) => a3323 + 1
plot(f3323(3323))
f3324(a3324) => a3324 + 1
plot(f3324(3324))
f3325(a3325) => a3325 + 1
plot(f3325(3325))
f3326(a3326) => a3326 + 1
plot(f3326(3326))
f3327(a3327) => a3327 + 1
plot(f3327(3327))
f3328(a3328) => a3328 + 1
plot(f3328(3328))
f3329(a3329) => a3329 + 1
plot(f3329(3329))
f3330(a3330) => a3330 + 1
plot(f3330(3330))
f3331(a3331) => a3331 + 1
plot(f3331(3331))
f3332(a3332) => a3332 + 1
plot(f3332(3332))
f3333(a3333) => a3333 + 1
plot(f3333(3333))
f3334(a3334) => a3334 + 1
plot(f3334(3334))
f3335(a3335) => a3335 + 1
plot(f3335(3335))
f3336(a3336) => a3336 + 1
plot(f3336(3336))
f3337(a3337) => a3337 + 1
plot(f3337(3337))
f3338(a3338) => a3338 + 1
plot(f3338(3338))
f3339(a3339) => a3339 + 1
plot(f3339(3339))
f3340(a3340) => a3340 + 1
plot(f3340(3340))
f3341(a3341) => a3341 + 1
plot(f3341(3341))
f3342(a3342) => a3342 + 1
plot(f3342(3342))
f3343(a3343) => a3343 + 1
plot(f3343(3343))
f3344(a3344) => a3344 + 1
plot(f3344(3344))
f3345(a3345) => a3345 + 1
plot(f3345(3345))
f3346(a3346) => a3346 + 1
plot(f3346(3346))
f3347(a3347) => a3347 + 1
plot(f3347(3347))
f3348(a3348) => a3348 + 1
plot(f3348(3348))
f3349(a3349) => a3349 + 1
plot(f3349(3349))
f3350(a3350) => a3350 + 1
plot(f3350(3350))
f3351(a3351) => a3351 + 1
plot(f3351(3351))
f3352(a3352) => a3352 + 1
plot(f3352(3352))
f3353(a3353) => a3353 + 1
plot(f3353(3353))
f3354(a3354) => a3354 + 1
plot(f3354(3354))
f3355(a3355) => a3355 + 1
plot(f3355(3355))
f3356(a3356) => a3356 + 1
plot(f3356(3356))
f3357(a3357) => a3357 + 1
plot(f3357(3357))
f3358(a3358) => a3358 + 1
plot(f3358(3358))
f3359(a3359) => a3359 + 1
plot(f3359(3359))
f3360(a3360) => a3360 + 1
plot(f3360(3360))
f3361(a3361) => a3361 + 1
plot(f3361(3361))
f3362(a3362) => a3362 + 1
plot(f3362(3362))
f3363(a3363) => a3363 + 1
plot(f3363(3363))
f3364(a3364) => a3364 + 1
plot(f3364(3364))
f3365(a3365) => a3365 + 1
plot(f3365(3365))
f3366(a3366) => a3366 + 1
plot(f3366(3366))
f3367(a3367) => a3367 + 1
plot(f3367(3367))
f3368(a3368) => a3368 + 1
plot(f3368(3368))
f3369(a3369) => a3369 + 1
plot(f3369(3369))
f3370(a3370) => a3370 + 1
plot(f3370(3370))
f3371(a3371) => a3371 + 1
plot(f3371(3371))
f3372(a3372) => a3372 + 1
plot(f3372(3372))
f3373(a3373) => a3373 + 1
plot(f3373(3373))
f3374(a3374) => a3374 + 1
plot(f3374(3374))
f3375(a3375) => a3375 + 1
plot(f3375(3375))
f3376(a3376) => a3376 + 1
plot(f3376(3376))
f3377(a3377) => a3377 + 1
plot(f3377(3377))
f3378(a3378) => a3378 + 1
plot(f3378(3378))
f3379(a3379) => a3379 + 1
plot(f3379(3379))
f3380(a3380) => a3380 + 1
plot(f3380(3380))
f3381(a3381) => a3381 + 1
plot(f3381(3381))
f3382(a3382) => a3382 + 1
plot(f3382(3382))
f3383(a3383) => a3383 + 1
plot(f3383(3383))
f3384(a3384) => a3384 + 1
plot(f3384(3384))
f3385(a3385) => a3385 + 1
plot(f3385(3385))
f3386(a3386) => a3386 + 1
plot(f3386(3386))
f3387(a3387) => a3387 + 1
plot(f3387(3387))
f3388(a3388) => a3388 + 1
plot(f3388(3388))
f3389(a3389) => a3389 + 1
plot(f3389(3389))
f3390(a3390) => a3390 + 1
plot(f3390(3390))
f3391(a3391) => a3391 + 1
plot(f3391(3391))
f3392(a3392) => a3392 + 1
plot(f3392(3392))
f3393(a3393) => a3393 + 1
plot(f3393(3393))
f3394(a3394) => a3394 + 1
plot(f3394(3394))
f3395(a3395) => a3395 + 1
plot(f3395(3395))
f3396(a3396) => a3396 + 1
plot(f3396(3396))
f3397(a3397) => a3397 + 1
plot(f3397(3397))
f3398(a3398) => a3398 + 1
plot(f3398(3398))
f3399(a3399) => a3399 + 1
plot(f3399(3399))
f3400(a3400) => a3400 + 1
plot(f3400(3400))
f3401(a3401) => a3401 + 1
plot(f3401(3401))
f3402(a3402) => a3402 + 1
plot(f3402(3402))
f3403(a3403) => a3403 + 1
plot(f3403(3403))
f3404(a3404) => a3404 + 1
plot(f3404(3404))
f3405(a3405) => a3405 + 1
plot(f3405(3405))
f3406(a3406) => a3406 + 1
plot(f3406(3406))
f3407(a3407) => a3407 + 1
plot(f3407(3407))
f3408(a3408) => a3408 + 1
plot(f3408(3408))
f3409(a3409) => a3409 + 1
plot(f3409(3409))
f3410(a3410) => a3410 + 1
plot(f3410(3410))
f3411(a3411) => a3411 + 1
plot(f3411(3411))
f3412(a3412) => a3412 + 1
plot(f3412(3412))
f3413(a3413) => a3413 + 1
plot(f3413(3413))
f3414(a3414) => a3414 + 1
plot(f3414(3414))
f3415(a3415) => a3415 + 1
plot(f3415(3415))
f3416(a3416) => a3416 + 1
plot(f3416(3416))
f3417(a3417) => a3417 + 1
plot(f3417(3417))
f3418(a3418) => a3418 + 1
plot(f3418(3418))
f3419(a3419) => a3419 + 1
plot(f3419(3419))
f3420(a3420) => a3420 + 1
plot(f3420(3420))
f3421(a3421) => a3421 + 1
plot(f3421(3421))
f3422(a3422) => a3422 + 1
plot(f3422(3422))
f3423(a3423) => a3423 + 1
plot(f3423(3423))
f3424(a3424) => a3424 + 1
plot(f3424(3424))
f3425(a3425) => a3425 + 1
plot(f3425(3425))
f3426(a3426) => a3426 + 1
plot(f3426(3426))
f3427(a3427) => a3427 + 1
plot(f3427(3427))
f3428(a3428) => a3428 + 1
plot(f3428(3428))
f3429(a3429) => a3429 + 1
plot(f3429(3429))
f3430(a3430) => a3430 + 1
plot(f3430(3430))
f3431(a3431) => a3431 + 1
plot(f3431(3431))
f3432(a3432) => a3432 + 1
plot(f3432(3432))
f3433(a3433) => a3433 + 1
plot(f3433(3433))
f3434(a3434) => a3434 + 1
plot(f3434(3434))
f3435(a3435) => a3435 + 1
plot(f3435(3435))
f3436(a3436) => a3436 + 1
plot(f3436(3436))
f3437(a3437) => a3437 + 1
plot(f3437(3437))
f3438(a3438) => a3438 + 1
plot(f3438(3438))
f3439(a3439) => a3439 + 1
plot(f3439(3439))
f3440(a3440) => a3440 + 1
plot(f3440(3440))
f3441(a3441) => a3441 + 1
plot(f3441(3441))
f3442(a3442) => a3442 + 1
plot(f3442(3442))
f3443(a3443) => a3443 + 1
plot(f3443(3443))
f3444(a3444) => a3444 + 1
plot(f3444(3444))
f3445(a3445) => a3445 + 1
plot(f3445(3445))
f3446(a3446) => a3446 + 1
plot(f3446(3446))
f3447(a3447) => a3447 + 1
plot(f3447(3447))
f3448(a3448) => a3448 + 1
plot(f3448(3448))
f3449(a3449) => a3449 + 1
plot(f3449(3449))
f3450(a3450) => a3450 + 1
plot(f3450(3450))
f3451(a3451) => a3451 + 1
plot(f3451(3451))
f3452(a3452) => a3452 + 1
plot(f3452(3452))
f3453(a3453) => a3453 + 1
plot(f3453(3453))
f3454(a3454) => a3454 + 1
plot(f3454(3454))
f3455(a3455) => a3455 + 1
plot(f3455(3455))
f3456(a3456) => a3456 + 1
plot(f3456(3456))
f3457(a3457) => a3457 + 1
plot(f3457(3457))
f3458(a3458) => a3458 + 1
plot(f3458(3458))
f3459(a3459) => a3459 + 1
plot(f3459(3459))
f3460(a3460) => a3460 + 1
plot(f3460(3460))
f3461(a3461) => a3461 + 1
plot(f3461(3461))
f3462(a3462) => a3462 + 1
plot(f3462(3462))
f3463(a3463) => a3463 + 1
plot(f3463(3463))
f3464(a3464) => a3464 + 1
plot(f3464(3464))
f3465(a3465) => a3465 + 1
plot(f3465(3465))
f3466(a3466) => a3466 + 1
plot(f3466(3466))
f3467(a3467) => a3467 + 1
plot(f3467(3467))
f3468(a3468) => a3468 + 1
plot(f3468(3468))
f3469(a3469) => a3469 + 1
plot(f3469(3469))
f3470(a3470) => a3470 + 1
plot(f3470(3470))
f3471(a3471) => a3471 + 1
plot(f3471(3471))
f3472(a3472) => a3472 + 1
plot(f3472(3472))
f3473(a3473) => a3473 + 1
plot(f3473(3473))
f3474(a3474) => a3474 + 1
plot(f3474(3474))
f3475(a3475) => a3475 + 1
plot(f3475(3475))
f3476(a3476) => a3476 + 1
plot(f3476(3476))
f3477(a3477) => a3477 + 1
plot(f3477(3477))
f3478(a3478) => a3478 + 1
plot(f3478(3478))
f3479(a3479) => a3479 + 1
plot(f3479(3479))
f3480(a3480) => a3480 + 1
plot(f3480(3480))
f3481(a3481) => a3481 + 1
plot(f3481(3481))
f3482(a3482) => a3482 + 1
plot(f3482(3482))
f3483(a3483) => a3483 + 1
plot(f3483(3483))
f3484(a3484) => a3484 + 1
plot(f3484(3484))
f3485(a3485) => a3485 + 1
plot(f3485(3485))
f3486(a3486) => a3486 + 1
plot(f3486(3486))
f3487(a3487) => a3487 + 1
plot(f3487(3487))
f3488(a3488) => a3488 + 1
plot(f3488(3488))
f3489(a3489) => a3489 + 1
plot(f3489(3489))
f3490(a3490) => a3490 + 1
plot(f3490(3490))
f3491(a3491) => a3491 + 1
plot(f3491(3491))
f3492(a3492) => a3492 + 1
plot(f3492(3492))
f3493(a3493) => a3493 + 1
plot(f3493(3493))
f3494(a3494) => a3494 + 1
plot(f3494(3494))
f3495(a3495) => a3495 + 1
plot(f3495(3495))
f3496(a3496) => a3496 + 1
plot(f3496(3496))
f3497(a3497) => a3497 + 1
plot(f3497(3497))
f3498(a3498) => a3498 + 1
plot(f3498(3498))
f3499(a3499) => a3499 + 1
plot(f3499(3499))
f3500(a3500) => a3500 + 1
plot(f3500(3500))
f3501(a3501) => a3501 + 1
plot(f3501(3501))
f3502(a3502) => a3502 + 1
plot(f3502(3502))
f3503(a3503) => a3503 + 1
plot(f3503(3503))
f3504(a3504) => a3504 + 1
plot(f3504(3504))
f3505(a3505) => a3505 + 1
plot(f3505(3505))
f3506(a3506) => a3506 + 1
plot(f3506(3506))
f3507(a3507) => a3507 + 1
plot(f3507(3507))
f3508(a3508) => a3508 + 1
plot(f3508(3508))
f3509(a3509) => a3509 + 1
plot(f3509(3509))
f3510(a3510) => a3510 + 1
plot(f3510(3510))
f3511(a3511) => a3511 + 1
plot(f3511(3511))
f3512(a3512) => a3512 + 1
plot(f3512(3512))
f3513(a3513) => a3513 + 1
plot(f3513(3513))
f3514(a3514) => a3514 + 1
plot(f3514(3514))
f3515(a3515) => a3515 + 1
plot(f3515(3515))
f3516(a3516) => a3516 + 1
plot(f3516(3516))
f3517(a3517) => a3517 + 1
plot(f3517(3517))
f3518(a3518) => a3518 + 1
plot(f3518(3518))
f3519(a3519) => a3519 + 1
plot(f3519(3519))
f3520(a3520) => a3520 + 1
plot(f3520(3520))
f3521(a3521) => a3521 + 1
plot(f3521(3521))
f3522(a3522) => a3522 + 1
plot(f3522(3522))
f3523(a3523) => a3523 + 1
plot(f3523(3523))
f3524(a3524) => a3524 + 1
plot(f3524(3524))
f3525(a3525) => a3525 + 1
plot(f3525(3525))
f3526(a3526) => a3526 + 1
plot(f3526(3526))
f3527(a3527) => a3527 + 1
plot(f3527(3527))
f3528(a3528) => a3528 + 1
plot(f3528(3528))
f3529(a3529) => a3529 + 1
plot(f3529(3529))
f3530(a3530) => a3530 + 1
plot(f3530(3530))
f3531(a3531) => a3531 + 1
plot(f3531(3531))
f3532(a3532) => a3532 + 1
plot(f3532(3532))
f3533(a3533) => a3533 + 1
plot(f3533(3533))
f3534(a3534) => a3534 + 1
plot(f3534(3534))
f3535(a3535) => a3535 + 1
plot(f3535(3535))
f3536(a3536) => a3536 + 1
plot(f3536(3536))
f3537(a3537) => a3537 + 1
plot(f3537(3537))
f3538(a3538) => a3538 + 1
plot(f3538(3538))
f3539(a3539) => a3539 + 1
plot(f3539(3539))
f3540(a3540) => a3540 + 1
plot(f3540(3540))
f3541(a3541) => a3541 + 1
plot(f3541(3541))
f3542(a3542) => a3542 + 1
plot(f3542(3542))
f3543(a3543) => a3543 + 1
plot(f3543(3543))
f3544(a3544) => a3544 + 1
plot(f3544(3544))
f3545(a3545) => a3545 + 1
plot(f3545(3545))
f3546(a3546) => a3546 + 1
plot(f3546(3546))
f3547(a3547) => a3547 + 1
plot(f3547(3547))
f3548(a3548) => a3548 + 1
plot(f3548(3548))
f3549(a3549) => a3549 + 1
plot(f3549(3549))
f3550(a3550) => a3550 + 1
plot(f3550(3550))
f3551(a3551) => a3551 + 1
plot(f3551(3551))
f3552(a3552) => a3552 + 1
plot(f3552(3552))
f3553(a3553) => a3553 + 1
plot(f3553(3553))
f3554(a3554) => a3554 + 1
plot(f3554(3554))
f3555(a3555) => a3555 + 1
plot(f3555(3555))
f3556(a3556) => a3556 + 1
plot(f3556(3556))
f3557(a3557) => a3557 + 1
plot(f3557(3557))
f3558(a3558) => a3558 + 1
plot(f3558(3558))
f3559(a3559) => a3559 + 1
plot(f3559(3559))
f3560(a3560) => a3560 + 1
plot(f3560(3560))
f3561(a3561) => a3561 + 1
plot(f3561(3561))
f3562(a3562) => a3562 + 1
plot(f3562(3562))
f3563(a3563) => a3563 + 1
plot(f3563(3563))
f3564(a3564) => a3564 + 1
plot(f3564(3564))
f3565(a3565) => a3565 + 1
plot(f3565(3565))
f3566(a3566) => a3566 + 1
plot(f3566(3566))
f3567(a3567) => a3567 + 1
plot(f3567(3567))
f3568(a3568) => a3568 + 1
plot(f3568(3568))
f3569(a3569) => a3569 + 1
plot(f3569(3569))
f3570(a3570) => a3570 + 1
plot(f3570(3570))
f3571(a3571) => a3571 + 1
plot(f3571(3571))
f3572(a3572) => a3572 + 1
plot(f3572(3572))
f3573(a3573) => a3573 + 1
plot(f3573(3573))
f3574(a3574) => a3574 + 1
plot(f3574(3574))
f3575(a3575) => a3575 + 1
plot(f3575(3575))
f3576(a3576) => a3576 + 1
plot(f3576(3576))
f3577(a3577) => a3577 + 1
plot(f3577(3577))
f3578(a3578) => a3578 + 1
plot(f3578(3578))
f3579(a3579) => a3579 + 1
plot(f3579(3579))
f3580(a3580) => a3580 + 1
plot(f3580(3580))
f3581(a3581) => a3581 + 1
plot(f3581(3581))
f3582(a3582) => a3582 + 1
plot(f3582(3582))
f3583(a3583) => a3583 + 1
plot(f3583(3583))
f3584(a3584) => a3584 + 1
plot(f3584(3584))
f3585(a3585) => a3585 + 1
plot(f3585(3585))
f3586(a3586) => a3586 + 1
plot(f3586(3586))
f3587(a3587) => a3587 + 1
plot(f3587(3587))
f3588(a3588) => a3588 + 1
plot(f3588(3588))
f3589(a3589) => a3589 + 1
plot(f3589(3589))
f3590(a3590) => a3590 + 1
plot(f3590(3590))
f3591(a3591) => a3591 + 1
plot(f3591(3591))
f3592(a3592) => a3592 + 1
plot(f3592(3592))
f3593(a3593) => a3593 + 1
plot(f3593(3593))
f3594(a3594) => a3594 + 1
plot(f3594(3594))
f3595(a3595) => a3595 + 1
plot(f3595(3595))
f3596(a3596) => a3596 + 1
plot(f3596(3596))
f3597(a3597) => a3597 + 1
plot(f3597(3597))
f3598(a3598) => a3598 + 1
plot(f3598(3598))
f3599(a3599) => a3599 + 1
plot(f3599(3599))
f3600(a3600) => a3600 + 1
plot(f3600(3600))
f3601(a3601) => a3601 + 1
plot(f3601(3601))
f3602(a3602) => a3602 + 1
plot(f3602(3602))
f3603(a3603) => a3603 + 1
plot(f3603(3603))
f3604(a3604) => a3604 + 1
plot(f3604(3604))
f3605(a3605) => a3605 + 1
plot(f3605(3605))
f3606(a3606) => a3606 + 1
plot(f3606(3606))
f3607(a3607) => a3607 + 1
plot(f3607(3607))
f3608(a3608) => a3608 + 1
plot(f3608(3608))
f3609(a3609) => a3609 + 1
plot(f3609(3609))
f3610(a3610) => a3610 + 1
plot(f3610(3610))
f3611(a3611) => a3611 + 1
plot(f3611(3611))
f3612(a3612) => a3612 + 1
plot(f3612(3612))
f3613(a3613) => a3613 + 1
plot(f3613(3613))
f3614(a3614) => a3614 + 1
plot(f3614(3614))
f3615(a3615) => a3615 + 1
plot(f3615(3615))
f3616(a3616) => a3616 + 1
plot(f3616(3616))
f3617(a3617) => a3617 + 1
plot(f3617(3617))
f3618(a3618) => a3618 + 1
plot(f3618(3618))
f3619(a3619) => a3619 + 1
plot(f3619(3619))
f3620(a3620) => a3620 + 1
plot(f3620(3620))
f3621(a3621) => a3621 + 1
plot(f3621(3621))
f3622(a3622) => a3622 + 1
plot(f3622(3622))
f3623(a3623) => a3623 + 1
plot(f3623(3623))
f3624(a3624) => a3624 + 1
plot(f3624(3624))
f3625(a3625) => a3625 + 1
plot(f3625(3625))
f3626(a3626) => a3626 + 1
plot(f3626(3626))
f3627(a3627) => a3627 + 1
plot(f3627(3627))
f3628(a3628) => a3628 + 1
plot(f3628(3628))
f3629(a3629) => a3629 + 1
plot(f3629(3629))
f3630(a3630) => a3630 + 1
plot(f3630(3630))
f3631(a3631) => a3631 + 1
plot(f3631(3631))
f3632(a3632) => a3632 + 1
plot(f3632(3632))
f3633(a3633) => a3633 + 1
plot(f3633(3633))
f3634(a3634) => a3634 + 1
plot(f3634(3634))
f3635(a3635) => a3635 + 1
plot(f3635(3635))
f3636(a3636) => a3636 + 1
plot(f3636(3636))
f3637(a3637) => a3637 + 1
plot(f3637(3637))
f3638(a3638) => a3638 + 1
plot(f3638(3638))
f3639(a3639) => a3639 + 1
plot(f3639(3639))
f3640(a3640) => a3640 + 1
plot(f3640(3640))
f3641(a3641) => a3641 + 1
plot(f3641(3641))
f3642(a3642) => a3642 + 1
plot(f3642(3642))
f3643(a3643) => a3643 + 1
plot(f3643(3643))
f3644(a3644) => a3644 + 1
plot(f3644(3644))
f3645(a3645) => a3645 + 1
plot(f3645(3645))
f3646(a3646) => a3646 + 1
plot(f3646(3646))
f3647(a3647) => a3647 + 1
plot(f3647(3647))
f3648(a3648) => a3648 + 1
plot(f3648(3648))
f3649(a3649) => a3649 + 1
plot(f3649(3649))
f3650(a3650) => a3650 + 1
plot(f3650(3650))
f3651(a3651) => a3651 + 1
plot(f3651(3651))
f3652(a3652) => a3652 + 1
plot(f3652(3652))
f3653(a3653) => a3653 + 1
plot(f3653(3653))
f3654(a3654) => a3654 + 1
plot(f3654(3654))
f3655(a3655) => a3655 + 1
plot(f3655(3655))
f3656(a3656) => a3656 + 1
plot(f3656(3656))
f3657(a3657) => a3657 + 1
plot(f3657(3657))
f3658(a3658) => a3658 + 1
plot(f3658(3658))
f3659(a3659) => a3659 + 1
plot(f3659(3659))
f3660(a3660) => a3660 + 1
plot(f3660(3660))
f3661(a3661) => a3661 + 1
plot(f3661(3661))
f3662(a3662) => a3662 + 1
plot(f3662(3662))
f3663(a3663) => a3663 + 1
plot(f3663(3663))
f3664(a3664) => a3664 + 1
plot(f3664(3664))
f3665(a3665) => a3665 + 1
plot(f3665(3665))
f3666(a3666) => a3666 + 1
plot(f3666(3666))
f3667(a3667) => a3667 + 1
plot(f3667(3667))
f3668(a3668) => a3668 + 1
plot(f3668(3668))
f3669(a3669) => a3669 + 1
plot(f3669(3669))
f3670(a3670) => a3670 + 1
plot(f3670(3670))
f3671(a3671) => a3671 + 1
plot(f3671(3671))
f3672(a3672) => a3672 + 1
plot(f3672(3672))
f3673(a3673) => a3673 + 1
plot(f3673(3673))
f3674(a3674) => a3674 + 1
plot(f3674(3674))
f3675(a3675) => a3675 + 1
plot(f3675(3675))
f3676(a3676) => a3676 + 1
plot(f3676(3676))
f3677(a3677) => a3677 + 1
plot(f3677(3677))
f3678(a3678) => a3678 + 1
plot(f3678(3678))
f3679(a3679) => a3679 + 1
plot(f3679(3679))
f3680(a3680) => a3680 + 1
plot(f3680(3680))
f3681(a3681) => a3681 + 1
plot(f3681(3681))
f3682(a3682) => a3682 + 1
plot(f3682(3682))
f3683(a3683) => a3683 + 1
plot(f3683(3683))
f3684(a3684) => a3684 + 1
plot(f3684(3684))
f3685(a3685) => a3685 + 1
plot(f3685(3685))
f3686(a3686) => a3686 + 1
plot(f3686(3686))
f3687(a3687) => a3687 + 1
plot(f3687(3687))
f3688(a3688) => a3688 + 1
plot(f3688(3688))
f3689(a3689) => a3689 + 1
plot(f3689(3689))
f3690(a3690) => a3690 + 1
plot(f3690(3690))
f3691(a3691) => a3691 + 1
plot(f3691(3691))
f3692(a3692) => a3692 + 1
plot(f3692(3692))
f3693(a3693) => a3693 + 1
plot(f3693(3693))
f3694(a3694) => a3694 + 1
plot(f3694(3694))
f3695(a3695) => a3695 + 1
plot(f3695(3695))
f3696(a3696) => a3696 + 1
plot(f3696(3696))
f3697(a3697) => a3697 + 1
plot(f3697(3697))
f3698(a3698) => a3698 + 1
plot(f3698(3698))
f3699(a3699) => a3699 + 1
plot(f3699(3699))
f3700(a3700) => a3700 + 1
plot(f3700(3700))
f3701(a3701) => a3701 + 1
plot(f3701(3701))
f3702(a3702) => a3702 + 1
plot(f3702(3702))
f3703(a3703) => a3703 + 1
plot(f3703(3703))
f3704(a3704) => a3704 + 1
plot(f3704(3704))
f3705(a3705) => a3705 + 1
plot(f3705(3705))
f3706(a3706) => a3706 + 1
plot(f3706(3706))
f3707(a3707) => a3707 + 1
plot(f3707(3707))
f3708(a3708) => a3708 + 1
plot(f3708(3708))
f3709(a3709) => a3709 + 1
plot(f3709(3709))
f3710(a3710) => a3710 + 1
plot(f3710(3710))
f3711(a3711) => a3711 + 1
plot(f3711(3711))
f3712(a3712) => a3712 + 1
plot(f3712(3712))
f3713(a3713) => a3713 + 1
plot(f3713(3713))
f3714(a3714) => a3714 + 1
plot(f3714(3714))
f3715(a3715) => a3715 + 1
plot(f3715(3715))
f3716(a3716) => a3716 + 1
plot(f3716(3716))
f3717(a3717) => a3717 + 1
plot(f3717(3717))
f3718(a3718) => a3718 + 1
plot(f3718(3718))
f3719(a3719) => a3719 + 1
plot(f3719(3719))
f3720(a3720) => a3720 + 1
plot(f3720(3720))
f3721(a3721) => a3721 + 1
plot(f3721(3721))
f3722(a3722) => a3722 + 1
plot(f3722(3722))
f3723(a3723) => a3723 + 1
plot(f3723(3723))
f3724(a3724) => a3724 + 1
plot(f3724(3724))
f3725(a3725) => a3725 + 1
plot(f3725(3725))
f3726(a3726) => a3726 + 1
plot(f3726(3726))
f3727(a3727) => a3727 + 1
plot(f3727(3727))
f3728(a3728) => a3728 + 1
plot(f3728(3728))
f3729(a3729) => a3729 + 1
plot(f3729(3729))
f3730(a3730) => a3730 + 1
plot(f3730(3730))
f3731(a3731) => a3731 + 1
plot(f3731(3731))
f3732(a3732) => a3732 + 1
plot(f3732(3732))
f3733(a3733) => a3733 + 1
plot(f3733(3733))
f3734(a3734) => a3734 + 1
plot(f3734(3734))
f3735(a3735) => a3735 + 1
plot(f3735(3735))
f3736(a3736) => a3736 + 1
plot(f3736(3736))
f3737(a3737) => a3737 + 1
plot(f3737(3737))
f3738(a3738) => a3738 + 1
plot(f3738(3738))
f3739(a3739) => a3739 + 1
plot(f3739(3739))
f3740(a3740) => a3740 + 1
plot(f3740(3740))
f3741(a3741) => a3741 + 1
plot(f3741(3741))
f3742(a3742) => a3742 + 1
plot(f3742(3742))
f3743(a3743) => a3743 + 1
plot(f3743(3743))
f3744(a3744) => a3744 + 1
plot(f3744(3744))
f3745(a3745) => a3745 + 1
plot(f3745(3745))
f3746(a3746) => a3746 + 1
plot(f3746(3746))
f3747(a3747) => a3747 + 1
plot(f3747(3747))
f3748(a3748) => a3748 + 1
plot(f3748(3748))
f3749(a3749) => a3749 + 1
plot(f3749(3749))
f3750(a3750) => a3750 + 1
plot(f3750(3750))
f3751(a3751) => a3751 + 1
plot(f3751(3751))
f3752(a3752) => a3752 + 1
plot(f3752(3752))
f3753(a3753) => a3753 + 1
plot(f3753(3753))
f3754(a3754) => a3754 + 1
plot(f3754(3754))
f3755(a3755) => a3755 + 1
plot(f3755(3755))
f3756(a3756) => a3756 + 1
plot(f3756(3756))
f3757(a3757) => a3757 + 1
plot(f3757(3757))
f3758(a3758) => a3758 + 1
plot(f3758(3758))
f3759(a3759) => a3759 + 1
plot(f3759(3759))
f3760(a3760) => a3760 + 1
plot(f3760(3760))
f3761(a3761) => a3761 + 1
plot(f3761(3761))
f3762(a3762) => a3762 + 1
plot(f3762(3762))
f3763(a3763) => a3763 + 1
plot(f3763(3763))
f3764(a3764) => a3764 + 1
plot(f3764(3764))
f3765(a3765) => a3765 + 1
plot(f3765(3765))
f3766(a3766) => a3766 + 1
plot(f3766(3766))
f3767(a3767) => a3767 + 1
plot(f3767(3767))
f3768(a3768) => a3768 + 1
plot(f3768(3768))
f3769(a3769) => a3769 + 1
plot(f3769(3769))
f3770(a3770) => a3770 + 1
plot(f3770(3770))
f3771(a3771) => a3771 + 1
plot(f3771(3771))
f3772(a3772) => a3772 + 1
plot(f3772(3772))
f3773(a3773) => a3773 + 1
plot(f3773(3773))
f3774(a3774) => a3774 + 1
plot(f3774(3774))
f3775(a3775) => a3775 + 1
plot(f3775(3775))
f3776(a3776) => a3776 + 1
plot(f3776(3776))
f3777(a3777) => a3777 + 1
plot(f3777(3777))
f3778(a3778) => a3778 + 1
plot(f3778(3778))
f3779(a3779) => a3779 + 1
plot(f3779(3779))
f3780(a3780) => a3780 + 1
plot(f3780(3780))
f3781(a3781) => a3781 + 1
plot(f3781(3781))
f3782(a3782) => a3782 + 1
plot(f3782(3782))
f3783(a3783) => a3783 + 1
plot(f3783(3783))
f3784(a3784) => a3784 + 1
plot(f3784(3784))
f3785(a3785) => a3785 + 1
plot(f3785(3785))
f3786(a3786) => a3786 + 1
plot(f3786(3786))
f3787(a3787) => a3787 + 1
plot(f3787(3787))
f3788(a3788) => a3788 + 1
plot(f3788(3788))
f3789(a3789) => a3789 + 1
plot(f3789(3789))
f3790(a3790) => a3790 + 1
plot(f3790(3790))
f3791(a3791) => a3791 + 1
plot(f3791(3791))
f3792(a3792) => a3792 + 1
plot(f3792(3792))
f3793(a3793) => a3793 + 1
plot(f3793(3793))
f3794(a3794) => a3794 + 1
plot(f3794(3794))
f3795(a3795) => a3795 + 1
plot(f3795(3795))
f3796(a3796) => a3796 + 1
plot(f3796(3796))
f3797(a3797) => a3797 + 1
plot(f3797(3797))
f3798(a3798) => a3798 + 1
plot(f3798(3798))
f3799(a3799) => a3799 + 1
plot(f3799(3799))
f3800(a3800) => a3800 + 1
plot(f3800(3800))
f3801(a3801) => a3801 + 1
plot(f3801(3801))
f3802(a3802) => a3802 + 1
plot(f3802(3802))
f3803(a3803) => a3803 + 1
plot(f3803(3803))
f3804(a3804) => a3804 + 1
plot(f3804(3804))
f3805(a3805) => a3805 + 1
plot(f3805(3805))
f3806(a3806) => a3806 + 1
plot(f3806(3806))
f3807(a3807) => a3807 + 1
plot(f3807(3807))
f3808(a3808) => a3808 + 1
plot(f3808(3808))
f3809(a3809) => a3809 + 1
plot(f3809(3809))
f3810(a3810) => a3810 + 1
plot(f3810(3810))
f3811(a3811) => a3811 + 1
plot(f3811(3811))
f3812(a3812) => a3812 + 1
plot(f3812(3812))
f3813(a3813) => a3813 + 1
plot(f3813(3813))
f3814(a3814) => a3814 + 1
plot(f3814(3814))
f3815(a3815) => a3815 + 1
plot(f3815(3815))
f3816(a3816) => a3816 + 1
plot(f3816(3816))
f3817(a3817) => a3817 + 1
plot(f3817(3817))
f3818(a3818) => a3818 + 1
plot(f3818(3818))
f3819(a3819) => a3819 + 1
plot(f3819(3819))
f3820(a3820) => a3820 + 1
plot(f3820(3820))
f3821(a3821) => a3821 + 1
plot(f3821(3821))
f3822(a3822) => a3822 + 1
plot(f3822(3822))
f3823(a3823) => a3823 + 1
plot(f3823(3823))
f3824(a3824) => a3824 + 1
plot(f3824(3824))
f3825(a3825) => a3825 + 1
plot(f3825(3825))
f3826(a3826) => a3826 + 1
plot(f3826(3826))
f3827(a3827) => a3827 + 1
plot(f3827(3827))
f3828(a3828) => a3828 + 1
plot(f3828(3828))
f3829(a3829) => a3829 + 1
plot(f3829(3829))
f3830(a3830) => a3830 + 1
plot(f3830(3830))
f3831(a3831) => a3831 + 1
plot(f3831(3831))
f3832(a3832) => a3832 + 1
plot(f3832(3832))
f3833(a3833) => a3833 + 1
plot(f3833(3833))
f3834(a3834) => a3834 + 1
plot(f3834(3834))
f3835(a3835) => a3835 + 1
plot(f3835(3835))
f3836(a3836) => a3836 + 1
plot(f3836(3836))
f3837(a3837) => a3837 + 1
plot(f3837(3837))
f3838(a3838) => a3838 + 1
plot(f3838(3838))
f3839(a3839) => a3839 + 1
plot(f3839(3839))
f3840(a3840) => a3840 + 1
plot(f3840(3840))
f3841(a3841) => a3841 + 1
plot(f3841(3841))
f3842(a3842) => a3842 + 1
plot(f3842(3842))
f3843(a3843) => a3843 + 1
plot(f3843(3843))
f3844(a3844) => a3844 + 1
plot(f3844(3844))
f3845(a3845) => a3845 + 1
plot(f3845(3845))
f3846(a3846) => a3846 + 1
plot(f3846(3846))
f3847(a3847) => a3847 + 1
plot(f3847(3847))
f3848(a3848) => a3848 + 1
plot(f3848(3848))
f3849(a3849) => a3849 + 1
plot(f3849(3849))
f3850(a3850) => a3850 + 1
plot(f3850(3850))
f3851(a3851) => a3851 + 1
plot(f3851(3851))
f3852(a3852) => a3852 + 1
plot(f3852(3852))
f3853(a3853) => a3853 + 1
plot(f3853(3853))
f3854(a3854) => a3854 + 1
plot(f3854(3854))
f3855(a3855) => a3855 + 1
plot(f3855(3855))
f3856(a3856) => a3856 + 1
plot(f3856(3856))
f3857(a3857) => a3857 + 1
plot(f3857(3857))
f3858(a3858) => a3858 + 1
plot(f3858(3858))
f3859(a3859) => a3859 + 1
plot(f3859(3859))
f3860(a3860) => a3860 + 1
plot(f3860(3860))
f3861(a3861) => a3861 + 1
plot(f3861(3861))
f3862(a3862) => a3862 + 1
plot(f3862(3862))
f3863(a3863) => a3863 + 1
plot(f3863(3863))
f3864(a3864) => a3864 + 1
plot(f3864(3864))
f3865(a3865) => a3865 + 1
plot(f3865(3865))
f3866(a3866) => a3866 + 1
plot(f3866(3866))
f3867(a3867) => a3867 + 1
plot(f3867(3867))
f3868(a3868) => a3868 + 1
plot(f3868(3868))
f3869(a3869) => a3869 + 1
plot(f3869(3869))
f3870(a3870) => a3870 + 1
plot(f3870(3870))
f3871(a3871) => a3871 + 1
plot(f3871(3871))
f3872(a3872) => a3872 + 1
plot(f3872(3872))
f3873(a3873) => a3873 + 1
plot(f3873(3873))
f3874(a3874) => a3874 + 1
plot(f3874(3874))
f3875(a3875) => a3875 + 1
plot(f3875(3875))
f3876(a3876) => a3876 + 1
plot(f3876(3876))
f3877(a3877) => a3877 + 1
plot(f3877(3877))
f3878(a3878) => a3878 + 1
plot(f3878(3878))
f3879(a3879) => a3879 + 1
plot(f3879(3879))
f3880(a3880) => a3880 + 1
plot(f3880(3880))
f3881(a3881) => a3881 + 1
plot(f3881(3881))
f3882(a3882) => a3882 + 1
plot(f3882(3882))
f3883(a3883) => a3883 + 1
plot(f3883(3883))
f3884(a3884) => a3884 + 1
plot(f3884(3884))
f3885(a3885) => a3885 + 1
plot(f3885(3885))
f3886(a3886) => a3886 + 1
plot(f3886(3886))
f3887(a3887) => a3887 + 1
plot(f3887(3887))
f3888(a3888) => a3888 + 1
plot(f3888(3888))
f3889(a3889) => a3889 + 1
plot(f3889(3889))
f3890(a3890) => a3890 + 1
plot(f3890(3890))
f3891(a3891) => a3891 + 1
plot(f3891(3891))
f3892(a3892) => a3892 + 1
plot(f3892(3892))
f3893(a3893) => a3893 + 1
plot(f3893(3893))
f3894(a3894) => a3894 + 1
plot(f3894(3894))
f3895(a3895) => a3895 + 1
plot(f3895(3895))
f3896(a3896) => a3896 + 1
plot(f3896(3896))
f3897(a3897) => a3897 + 1
plot(f3897(3897))
f3898(a3898) => a3898 + 1
plot(f3898(3898))
f3899(a3899) => a3899 + 1
plot(f3899(3899))
f3900(a3900) => a3900 + 1
plot(f3900(3900))
f3901(a3901) => a3901 + 1
plot(f3901(3901))
f3902(a3902) => a3902 + 1
plot(f3902(3902))
f3903(a3903) => a3903 + 1
plot(f3903(3903))
f3904(a3904) => a3904 + 1
plot(f3904(3904))
f3905(a3905) => a3905 + 1
plot(f3905(3905))
f3906(a3906) => a3906 + 1
plot(f3906(3906))
f3907(a3907) => a3907 + 1
plot(f3907(3907))
f3908(a3908) => a3908 + 1
plot(f3908(3908))
f3909(a3909) => a3909 + 1
plot(f3909(3909))
f3910(a3910) => a3910 + 1
plot(f3910(3910))
f3911(a3911) => a3911 + 1
plot(f3911(3911))
f3912(a3912) => a3912 + 1
plot(f3912(3912))
f3913(a3913) => a3913 + 1
plot(f3913(3913))
f3914(a3914) => a3914 + 1
plot(f3914(3914))
f3915(a3915) => a3915 + 1
plot(f3915(3915))
f3916(a3916) => a3916 + 1
plot(f3916(3916))
f3917(a3917) => a3917 + 1
plot(f3917(3917))
f3918(a3918) => a3918 + 1
plot(f3918(3918))
f3919(a3919) => a3919 + 1
plot(f3919(3919))
f3920(a3920) => a3920 + 1
plot(f3920(3920))
f3921(a3921) => a3921 + 1
plot(f3921(3921))
f3922(a3922) => a3922 + 1
plot(f3922(3922))
f3923(a3923) => a3923 + 1
plot(f3923(3923))
f3924(a3924) => a3924 + 1
plot(f3924(3924))
f3925(a3925) => a3925 + 1
plot(f3925(3925))
f3926(a3926) => a3926 + 1
plot(f3926(3926))
f3927(a3927) => a3927 + 1
plot(f3927(3927))
f3928(a3928) => a3928 + 1
plot(f3928(3928))
f3929(a3929) => a3929 + 1
plot(f3929(3929))
f3930(a3930) => a3930 + 1
plot(f3930(3930))
f3931(a3931) => a3931 + 1
plot(f3931(3931))
f3932(a3932) => a3932 + 1
plot(f3932(3932))
f3933(a3933) => a3933 + 1
plot(f3933(3933))
f3934(a3934) => a3934 + 1
plot(f3934(3934))
f3935(a3935) => a3935 + 1
plot(f3935(3935))
f3936(a3936) => a3936 + 1
plot(f3936(3936))
f3937(a3937) => a3937 + 1
plot(f3937(3937))
f3938(a3938) => a3938 + 1
plot(f3938(3938))
f3939(a3939) => a3939 + 1
plot(f3939(3939))
f3940(a3940) => a3940 + 1
plot(f3940(3940))
f3941(a3941) => a3941 + 1
plot(f3941(3941))
f3942(a3942) => a3942 + 1
plot(f3942(3942))
f3943(a3943) => a3943 + 1
plot(f3943(3943))
f3944(a3944) => a3944 + 1
plot(f3944(3944))
f3945(a3945) => a3945 + 1
plot(f3945(3945))
f3946(a3946) => a3946 + 1
plot(f3946(3946))
f3947(a3947) => a3947 + 1
plot(f3947(3947))
f3948(a3948) => a3948 + 1
plot(f3948(3948))
f3949(a3949) => a3949 + 1
plot(f3949(3949))
f3950(a3950) => a3950 + 1
plot(f3950(3950))
f3951(a3951) => a3951 + 1
plot(f3951(3951))
f3952(a3952) => a3952 + 1
plot(f3952(3952))
f3953(a3953) => a3953 + 1
plot(f3953(3953))
f3954(a3954) => a3954 + 1
plot(f3954(3954))
f3955(a3955) => a3955 + 1
plot(f3955(3955))
f3956(a3956) => a3956 + 1
plot(f3956(3956))
f3957(a3957) => a3957 + 1
plot(f3957(3957))
f3958(a3958) => a3958 + 1
plot(f3958(3958))
f3959(a3959) => a3959 + 1
plot(f3959(3959))
f3960(a3960) => a3960 + 1
plot(f3960(3960))
f3961(a3961) => a3961 + 1
plot(f3961(3961))
f3962(a3962) => a3962 + 1
plot(f3962(3962))
f3963(a3963) => a3963 + 1
plot(f3963(3963))
f3964(a3964) => a3964 + 1
plot(f3964(3964))
f3965(a3965) => a3965 + 1
plot(f3965(3965))
f3966(a3966) => a3966 + 1
plot(f3966(3966))
f3967(a3967) => a3967 + 1
plot(f3967(3967))
f3968(a3968) => a3968 + 1
plot(f3968(3968))
f3969(a3969) => a3969 + 1
plot(f3969(3969))
f3970(a3970) => a3970 + 1
plot(f3970(3970))
f3971(a3971) => a3971 + 1
plot(f3971(3971))
f3972(a3972) => a3972 + 1
plot(f3972(3972))
f3973(a3973) => a3973 + 1
plot(f3973(3973))
f3974(a3974) => a3974 + 1
plot(f3974(3974))
f3975(a3975) => a3975 + 1
plot(f3975(3975))
f3976(a3976) => a3976 + 1
plot(f3976(3976))
f3977(a3977) => a3977 + 1
plot(f3977(3977))
f3978(a3978) => a3978 + 1
plot(f3978(3978))
f3979(a3979) => a3979 + 1
plot(f3979(3979))
f3980(a3980) => a3980 + 1
plot(f3980(3980))
f3981(a3981) => a3981 + 1
plot(f3981(3981))
f3982(a3982) => a3982 + 1
plot(f3982(3982))
f3983(a3983) => a3983 + 1
plot(f3983(3983))
f3984(a3984) => a3984 + 1
plot(f3984(3984))
f3985(a3985) => a3985 + 1
plot(f3985(3985))
f3986(a3986) => a3986 + 1
plot(f3986(3986))
f3987(a3987) => a3987 + 1
plot(f3987(3987))
f3988(a3988) => a3988 + 1
plot(f3988(3988))
f3989(a3989) => a3989 + 1
plot(f3989(3989))
f3990(a3990) => a3990 + 1
plot(f3990(3990))
f3991(a3991) => a3991 + 1
plot(f3991(3991))
f3992(a3992) => a3992 + 1
plot(f3992(3992))
f3993(a3993) => a3993 + 1
plot(f3993(3993))
f3994(a3994) => a3994 + 1
plot(f3994(3994))
f3995(a3995) => a3995 + 1
plot(f3995(3995))
f3996(a3996) => a3996 + 1
plot(f3996(3996))
f3997(a3997) => a3997 + 1
plot(f3997(3997))
f3998(a3998) => a3998 + 1
plot(f3998(3998))
f3999(a3999) => a3999 + 1
plot(f3999(3999))
f4000(a4000) => a4000 + 1
plot(f4000(4000))
f4001(a4001) => a4001 + 1
plot(f4001(4001))
f4002(a4002) => a4002 + 1
plot(f4002(4002))
f4003(a4003) => a4003 + 1
plot(f4003(4003))
f4004(a4004) => a4004 + 1
plot(f4004(4004))
f4005(a4005) => a4005 + 1
plot(f4005(4005))
f4006(a4006) => a4006 + 1
plot(f4006(4006))
f4007(a4007) => a4007 + 1
plot(f4007(4007))
f4008(a4008) => a4008 + 1
plot(f4008(4008))
f4009(a4009) => a4009 + 1
plot(f4009(4009))
f4010(a4010) => a4010 + 1
plot(f4010(4010))
f4011(a4011) => a4011 + 1
plot(f4011(4011))
f4012(a4012) => a4012 + 1
plot(f4012(4012))
f4013(a4013) => a4013 + 1
plot(f4013(4013))
f4014(a4014) => a4014 + 1
plot(f4014(4014))
f4015(a4015) => a4015 + 1
plot(f4015(4015))
f4016(a4016) => a4016 + 1
plot(f4016(4016))
f4017(a4017) => a4017 + 1
plot(f4017(4017))
f4018(a4018) => a4018 + 1
plot(f4018(4018))
f4019(a4019) => a4019 + 1
plot(f4019(4019))
f4020(a4020) => a4020 + 1
plot(f4020(4020))
f4021(a4021) => a4021 + 1
plot(f4021(4021))
f4022(a4022) => a4022 + 1
plot(f4022(4022))
f4023(a4023) => a4023 + 1
plot(f4023(4023))
f4024(a4024) => a4024 + 1
plot(f4024(4024))
f4025(a4025) => a4025 + 1
plot(f4025(4025))
f4026(a4026) => a4026 + 1
plot(f4026(4026))
f4027(a4027) => a4027 + 1
plot(f4027(4027))
f4028(a4028) => a4028 + 1
plot(f4028(4028))
f4029(a4029) => a4029 + 1
plot(f4029(4029))
f4030(a4030) => a4030 + 1
plot(f4030(4030))
f4031(a4031) => a4031 + 1
plot(f4031(4031))
f4032(a4032) => a4032 + 1
plot(f4032(4032))
f4033(a4033) => a4033 + 1
plot(f4033(4033))
f4034(a4034) => a4034 + 1
plot(f4034(4034))
f4035(a4035) => a4035 + 1
plot(f4035(4035))
f4036(a4036) => a4036 + 1
plot(f4036(4036))
f4037(a4037) => a4037 + 1
plot(f4037(4037))
f4038(a4038) => a4038 + 1
plot(f4038(4038))
f4039(a4039) => a4039 + 1
plot(f4039(4039))
f4040(a4040) => a4040 + 1
plot(f4040(4040))
f4041(a4041) => a4041 + 1
plot(f4041(4041))
f4042(a4042) => a4042 + 1
plot(f4042(4042))
f4043(a4043) => a4043 + 1
plot(f4043(4043))
f4044(a4044) => a4044 + 1
plot(f4044(4044))
f4045(a4045) => a4045 + 1
plot(f4045(4045))
f4046(a4046) => a4046 + 1
plot(f4046(4046))
f4047(a4047) => a4047 + 1
plot(f4047(4047))
f4048(a4048) => a4048 + 1
plot(f4048(4048))
f4049(a4049) => a4049 + 1
plot(f4049(4049))
f4050(a4050) => a4050 + 1
plot(f4050(4050))
f4051(a4051) => a4051 + 1
plot(f4051(4051))
f4052(a4052) => a4052 + 1
plot(f4052(4052))
f4053(a4053) => a4053 + 1
plot(f4053(4053))
f4054(a4054) => a4054 + 1
plot(f4054(4054))
f4055(a4055) => a4055 + 1
plot(f4055(4055))
f4056(a4056) => a4056 + 1
plot(f4056(4056))
f4057(a4057) => a4057 + 1
plot(f4057(4057))
f4058(a4058) => a4058 + 1
plot(f4058(4058))
f4059(a4059) => a4059 + 1
plot(f4059(4059))
f4060(a4060) => a4060 + 1
plot(f4060(4060))
f4061(a4061) => a4061 + 1
plot(f4061(4061))
f4062(a4062) => a4062 + 1
plot(f4062(4062))
f4063(a4063) => a4063 + 1
plot(f4063(4063))
f4064(a4064) => a4064 + 1
plot(f4064(4064))
f4065(a4065) => a4065 + 1
plot(f4065(4065))
f4066(a4066) => a4066 + 1
plot(f4066(4066))
f4067(a4067) => a4067 + 1
plot(f4067(4067))
f4068(a4068) => a4068 + 1
plot(f4068(4068))
f4069(a4069) => a4069 + 1
plot(f4069(4069))
f4070(a4070) => a4070 + 1
plot(f4070(4070))
f4071(a4071) => a4071 + 1
plot(f4071(4071))
f4072(a4072) => a4072 + 1
plot(f4072(4072))
f4073(a4073) => a4073 + 1
plot(f4073(4073))
f4074(a4074) => a4074 + 1
plot(f4074(4074))
f4075(a4075) => a4075 + 1
plot(f4075(4075))
f4076(a4076) => a4076 + 1
plot(f4076(4076))
f4077(a4077) => a4077 + 1
plot(f4077(4077))
f4078(a4078) => a4078 + 1
plot(f4078(4078))
f4079(a4079) => a4079 + 1
plot(f4079(4079))
f4080(a4080) => a4080 + 1
plot(f4080(4080))
f4081(a4081) => a4081 + 1
plot(f4081(4081))
f4082(a4082) => a4082 + 1
plot(f4082(4082))
f4083(a4083) => a4083 + 1
plot(f4083(4083))
f4084(a4084) => a4084 + 1
plot(f4084(4084))
f4085(a4085) => a4085 + 1
plot(f4085(4085))
f4086(a4086) => a4086 + 1
plot(f4086(4086))
f4087(a4087) => a4087 + 1
plot(f4087(4087))
f4088(a4088) => a4088 + 1
plot(f4088(4088))
f4089(a4089) => a4089 + 1
plot(f4089(4089))
f4090(a4090) => a4090 + 1
plot(f4090(4090))
f4091(a4091) => a4091 + 1
plot(f4091(4091))
f4092(a4092) => a4092 + 1
plot(f4092(4092))
f4093(a4093) => a4093 + 1
plot(f4093(4093))
f4094(a4094) => a4094 + 1
plot(f4094(4094))
f4095(a4095) => a4095 + 1
plot(f4095(4095))
f4096(a4096) => a4096 + 1
plot(f4096(4096))
f4097(a4097) => a4097 + 1
plot(f4097(4097))
f4098(a4098) => a4098 + 1
plot(f4098(4098))
f4099(a4099) => a4099 + 1
plot(f4099(4099))
f4100(a4100) => a4100 + 1
plot(f4100(4100))
f4101(a4101) => a4101 + 1
plot(f4101(4101))
f4102(a4102) => a4102 + 1
plot(f4102(4102))
f4103(a4103) => a4103 + 1
plot(f4103(4103))
f4104(a4104) => a4104 + 1
plot(f4104(4104))
f4105(a4105) => a4105 + 1
plot(f4105(4105))
f4106(a4106) => a4106 + 1
plot(f4106(4106))
f4107(a4107) => a4107 + 1
plot(f4107(4107))
f4108(a4108) => a4108 + 1
plot(f4108(4108))
f4109(a4109) => a4109 + 1
plot(f4109(4109))
f4110(a4110) => a4110 + 1
plot(f4110(4110))
f4111(a4111) => a4111 + 1
plot(f4111(4111))
f4112(a4112) => a4112 + 1
plot(f4112(4112))
f4113(a4113) => a4113 + 1
plot(f4113(4113))
f4114(a4114) => a4114 + 1
plot(f4114(4114))
f4115(a4115) => a4115 + 1
plot(f4115(4115))
f4116(a4116) => a4116 + 1
plot(f4116(4116))
f4117(a4117) => a4117 + 1
plot(f4117(4117))
f4118(a4118) => a4118 + 1
plot(f4118(4118))
f4119(a4119) => a4119 + 1
plot(f4119(4119))
f4120(a4120) => a4120 + 1
plot(f4120(4120))
f4121(a4121) => a4121 + 1
plot(f4121(4121))
f4122(a4122) => a4122 + 1
plot(f4122(4122))
f4123(a4123) => a4123 + 1
plot(f4123(4123))
f4124(a4124) => a4124 + 1
plot(f4124(4124))
f4125(a4125) => a4125 + 1
plot(f4125(4125))
f4126(a4126) => a4126 + 1
plot(f4126(4126))
f4127(a4127) => a4127 + 1
plot(f4127(4127))
f4128(a4128) => a4128 + 1
plot(f4128(4128))
f4129(a4129) => a4129 + 1
plot(f4129(4129))
f4130(a4130) => a4130 + 1
plot(f4130(4130))
f4131(a4131) => a4131 + 1
plot(f4131(4131))
f4132(a4132) => a4132 + 1
plot(f4132(4132))
f4133(a4133) => a4133 + 1
plot(f4133(4133))
f4134(a4134) => a4134 + 1
plot(f4134(4134))
f4135(a4135) => a4135 + 1
plot(f4135(4135))
f4136(a4136) => a4136 + 1
plot(f4136(4136))
f4137(a4137) => a4137 + 1
plot(f4137(4137))
f4138(a4138) => a4138 + 1
plot(f4138(4138))
f4139(a4139) => a4139 + 1
plot(f4139(4139))
f4140(a4140) => a4140 + 1
plot(f4140(4140))
f4141(a4141) => a4141 + 1
plot(f4141(4141))
f4142(a4142) => a4142 + 1
plot(f4142(4142))
f4143(a4143) => a4143 + 1
plot(f4143(4143))
f4144(a4144) => a4144 + 1
plot(f4144(4144))
f4145(a4145) => a4145 + 1
plot(f4145(4145))
f4146(a4146) => a4146 + 1
plot(f4146(4146))
f4147(a4147) => a4147 + 1
plot(f4147(4147))
f4148(a4148) => a4148 + 1
plot(f4148(4148))
f4149(a4149) => a4149 + 1
plot(f4149(4149))
f4150(a4150) => a4150 + 1
plot(f4150(4150))
f4151(a4151) => a4151 + 1
plot(f4151(4151))
f4152(a4152) => a4152 + 1
plot(f4152(4152))
f4153(a4153) => a4153 + 1
plot(f4153(4153))
f4154(a4154) => a4154 + 1
plot(f4154(4154))
f4155(a4155) => a4155 + 1
plot(f4155(4155))
f4156(a4156) => a4156 + 1
plot(f4156(4156))
f4157(a4157) => a4157 + 1
plot(f4157(4157))
f4158(a4158) => a4158 + 1
plot(f4158(4158))
f4159(a4159) => a4159 + 1
plot(f4159(4159))
f4160(a4160) => a4160 + 1
plot(f4160(4160))
f4161(a4161) => a4161 + 1
plot(f4161(4161))
f4162(a4162) => a4162 + 1
plot(f4162(4162))
f4163(a4163) => a4163 + 1
plot(f4163(4163))
f4164(a4164) => a4164 + 1
plot(f4164(4164))
f4165(a4165) => a4165 + 1
plot(f4165(4165))
f4166(a4166) => a4166 + 1
plot(f4166(4166))
f4167(a4167) => a4167 + 1
plot(f4167(4167))
f4168(a4168) => a4168 + 1
plot(f4168(4168))
f4169(a4169) => a4169 + 1
plot(f4169(4169))
f4170(a4170) => a4170 + 1
plot(f4170(4170))
f4171(a4171) => a4171 + 1
plot(f4171(4171))
f4172(a4172) => a4172 + 1
plot(f4172(4172))
f4173(a4173) => a4173 + 1
plot(f4173(4173))
f4174(a4174) => a4174 + 1
plot(f4174(4174))
f4175(a4175) => a4175 + 1
plot(f4175(4175))
f4176(a4176) => a4176 + 1
plot(f4176(4176))
f4177(a4177) => a4177 + 1
plot(f4177(4177))
f4178(a4178) => a4178 + 1
plot(f4178(4178))
f4179(a4179) => a4179 + 1
plot(f4179(4179))
f4180(a4180) => a4180 + 1
plot(f4180(4180))
f4181(a4181) => a4181 + 1
plot(f4181(4181))
f4182(a4182) => a4182 + 1
plot(f4182(4182))
f4183(a4183) => a4183 + 1
plot(f4183(4183))
f4184(a4184) => a4184 + 1
plot(f4184(4184))
f4185(a4185) => a4185 + 1
plot(f4185(4185))
f4186(a4186) => a4186 + 1
plot(f4186(4186))
f4187(a4187) => a4187 + 1
plot(f4187(4187))
f4188(a4188) => a4188 + 1
plot(f4188(4188))
f4189(a4189) => a4189 + 1
plot(f4189(4189))
f4190(a4190) => a4190 + 1
plot(f4190(4190))
f4191(a4191) => a4191 + 1
plot(f4191(4191))
f4192(a4192) => a4192 + 1
plot(f4192(4192))
f4193(a4193) => a4193 + 1
plot(f4193(4193))
f4194(a4194) => a4194 + 1
plot(f4194(4194))
f4195(a4195) => a4195 + 1
plot(f4195(4195))
f4196(a4196) => a4196 + 1
plot(f4196(4196))
f4197(a4197) => a4197 + 1
plot(f4197(4197))
f4198(a4198) => a4198 + 1
plot(f4198(4198))
f4199(a4199) => a4199 + 1
plot(f4199(4199))
f4200(a4200) => a4200 + 1
plot(f4200(4200))
f4201(a4201) => a4201 + 1
plot(f4201(4201))
f4202(a4202) => a4202 + 1
plot(f4202(4202))
f4203(a4203) => a4203 + 1
plot(f4203(4203))
f4204(a4204) => a4204 + 1
plot(f4204(4204))
f4205(a4205) => a4205 + 1
plot(f4205(4205))
f4206(a4206) => a4206 + 1
plot(f4206(4206))
f4207(a4207) => a4207 + 1
plot(f4207(4207))
f4208(a4208) => a4208 + 1
plot(f4208(4208))
f4209(a4209) => a4209 + 1
plot(f4209(4209))
f4210(a4210) => a4210 + 1
plot(f4210(4210))
f4211(a4211) => a4211 + 1
plot(f4211(4211))
f4212(a4212) => a4212 + 1
plot(f4212(4212))
f4213(a4213) => a4213 + 1
plot(f4213(4213))
f4214(a4214) => a4214 + 1
plot(f4214(4214))
f4215(a4215) => a4215 + 1
plot(f4215(4215))
f4216(a4216) => a4216 + 1
plot(f4216(4216))
f4217(a4217) => a4217 + 1
plot(f4217(4217))
f4218(a4218) => a4218 + 1
plot(f4218(4218))
f4219(a4219) => a4219 + 1
plot(f4219(4219))
f4220(a4220) => a4220 + 1
plot(f4220(4220))
f4221(a4221) => a4221 + 1
plot(f4221(4221))
f4222(a4222) => a4222 + 1
plot(f4222(4222))
f4223(a4223) => a4223 + 1
plot(f4223(4223))
f4224(a4224) => a4224 + 1
plot(f4224(4224))
f4225(a4225) => a4225 + 1
plot(f4225(4225))
f4226(a4226) => a4226 + 1
plot(f4226(4226))
f4227(a4227) => a4227 + 1
plot(f4227(4227))
f4228(a4228) => a4228 + 1
plot(f4228(4228))
f4229(a4229) => a4229 + 1
plot(f4229(4229))
f4230(a4230) => a4230 + 1
plot(f4230(4230))
f4231(a4231) => a4231 + 1
plot(f4231(4231))
f4232(a4232) => a4232 + 1
plot(f4232(4232))
f4233(a4233) => a4233 + 1
plot(f4233(4233))
f4234(a4234) => a4234 + 1
plot(f4234(4234))
f4235(a4235) => a4235 + 1
plot(f4235(4235))
f4236(a4236) => a4236 + 1
plot(f4236(4236))
f4237(a4237) => a4237 + 1
plot(f4237(4237))
f4238(a4238) => a4238 + 1
plot(f4238(4238))
f4239(a4239) => a4239 + 1
plot(f4239(4239))
f4240(a4240) => a4240 + 1
plot(f4240(4240))
f4241(a4241) => a4241 + 1
plot(f4241(4241))
f4242(a4242) => a4242 + 1
plot(f4242(4242))
f4243(a4243) => a4243 + 1
plot(f4243(4243))
f4244(a4244) => a4244 + 1
plot(f4244(4244))
f4245(a4245) => a4245 + 1
plot(f4245(4245))
f4246(a4246) => a4246 + 1
plot(f4246(4246))
f4247(a4247) => a4247 + 1
plot(f4247(4247))
f4248(a4248) => a4248 + 1
plot(f4248(4248))
f4249(a4249) => a4249 + 1
plot(f4249(4249))
f4250(a4250) => a4250 + 1
plot(f4250(4250))
f4251(a4251) => a4251 + 1
plot(f4251(4251))
f4252(a4252) => a4252 + 1
plot(f4252(4252))
f4253(a4253) => a4253 + 1
plot(f4253(4253))
f4254(a4254) => a4254 + 1
plot(f4254(4254))
f4255(a4255) => a4255 + 1
plot(f4255(4255))
f4256(a4256) => a4256 + 1
plot(f4256(4256))
f4257(a4257) => a4257 + 1
plot(f4257(4257))
f4258(a4258) => a4258 + 1
plot(f4258(4258))
f4259(a4259) => a4259 + 1
plot(f4259(4259))
f4260(a4260) => a4260 + 1
plot(f4260(4260))
f4261(a4261) => a4261 + 1
plot(f4261(4261))
f4262(a4262) => a4262 + 1
plot(f4262(4262))
f4263(a4263) => a4263 + 1
plot(f4263(4263))
f4264(a4264) => a4264 + 1
plot(f4264(4264))
f4265(a4265) => a4265 + 1
plot(f4265(4265))
f4266(a4266) => a4266 + 1
plot(f4266(4266))
f4267(a4267) => a4267 + 1
plot(f4267(4267))
f4268(a4268) => a4268 + 1
plot(f4268(4268))
f4269(a4269) => a4269 + 1
plot(f4269(4269))
f4270(a4270) => a4270 + 1
plot(f4270(4270))
f4271(a4271) => a4271 + 1
plot(f4271(4271))
f4272(a4272) => a4272 + 1
plot(f4272(4272))
f4273(a4273) => a4273 + 1
plot(f4273(4273))
f4274(a4274) => a4274 + 1
plot(f4274(4274))
f4275(a4275) => a4275 + 1
plot(f4275(4275))
f4276(a4276) => a4276 + 1
plot(f4276(4276))
f4277(a4277) => a4277 + 1
plot(f4277(4277))
f4278(a4278) => a4278 + 1
plot(f4278(4278))
f4279(a4279) => a4279 + 1
plot(f4279(4279))
f4280(a4280) => a4280 + 1
plot(f4280(4280))
f4281(a4281) => a4281 + 1
plot(f4281(4281))
f4282(a4282) => a4282 + 1
plot(f4282(4282))
f4283(a4283) => a4283 + 1
plot(f4283(4283))
f4284(a4284) => a4284 + 1
plot(f4284(4284))
f4285(a4285) => a4285 + 1
plot(f4285(4285))
f4286(a4286) => a4286 + 1
plot(f4286(4286))
f4287(a4287) => a4287 + 1
plot(f4287(4287))
f4288(a4288) => a4288 + 1
plot(f4288(4288))
f4289(a4289) => a4289 + 1
plot(f4289(4289))
f4290(a4290) => a4290 + 1
plot(f4290(4290))
f4291(a4291) => a4291 + 1
plot(f4291(4291))
f4292(a4292) => a4292 + 1
plot(f4292(4292))
f4293(a4293) => a4293 + 1
plot(f4293(4293))
f4294(a4294) => a4294 + 1
plot(f4294(4294))
f4295(a4295) => a4295 + 1
plot(f4295(4295))
f4296(a4296) => a4296 + 1
plot(f4296(4296))
f4297(a4297) => a4297 + 1
plot(f4297(4297))
f4298(a4298) => a4298 + 1
plot(f4298(4298))
f4299(a4299) => a4299 + 1
plot(f4299(4299))
f4300(a4300) => a4300 + 1
plot(f4300(4300))
f4301(a4301) => a4301 + 1
plot(f4301(4301))
f4302(a4302) => a4302 + 1
plot(f4302(4302))
f4303(a4303) => a4303 + 1
plot(f4303(4303))
f4304(a4304) => a4304 + 1
plot(f4304(4304))
f4305(a4305) => a4305 + 1
plot(f4305(4305))
f4306(a4306) => a4306 + 1
plot(f4306(4306))
f4307(a4307) => a4307 + 1
plot(f4307(4307))
f4308(a4308) => a4308 + 1
plot(f4308(4308))
f4309(a4309) => a4309 + 1
plot(f4309(4309))
f4310(a4310) => a4310 + 1
plot(f4310(4310))
f4311(a4311) => a4311 + 1
plot(f4311(4311))
f4312(a4312) => a4312 + 1
plot(f4312(4312))
f4313(a4313) => a4313 + 1
plot(f4313(4313))
f4314(a4314) => a4314 + 1
plot(f4314(4314))
f4315(a4315) => a4315 + 1
plot(f4315(4315))
f4316(a4316) => a4316 + 1
plot(f4316(4316))
f4317(a4317) => a4317 + 1
plot(f4317(4317))
f4318(a4318) => a4318 + 1
plot(f4318(4318))
f4319(a4319) => a4319 + 1
plot(f4319(4319))
f4320(a4320) => a4320 + 1
plot(f4320(4320))
f4321(a4321) => a4321 + 1
plot(f4321(4321))
f4322(a4322) => a4322 + 1
plot(f4322(4322))
f4323(a4323) => a4323 + 1
plot(f4323(4323))
f4324(a4324) => a4324 + 1
plot(f4324(4324))
f4325(a4325) => a4325 + 1
plot(f4325(4325))
f4326(a4326) => a4326 + 1
plot(f4326(4326))
f4327(a4327) => a4327 + 1
plot(f4327(4327))
f4328(a4328) => a4328 + 1
plot(f4328(4328))
f4329(a4329) => a4329 + 1
plot(f4329(4329))
f4330(a4330) => a4330 + 1
plot(f4330(4330))
f4331(a4331) => a4331 + 1
plot(f4331(4331))
f4332(a4332) => a4332 + 1
plot(f4332(4332))
f4333(a4333) => a4333 + 1
plot(f4333(4333))
f4334(a4334) => a4334 + 1
plot(f4334(4334))
f4335(a4335) => a4335 + 1
plot(f4335(4335))
f4336(a4336) => a4336 + 1
plot(f4336(4336))
f4337(a4337) => a4337 + 1
plot(f4337(4337))
f4338(a4338) => a4338 + 1
plot(f4338(4338))
f4339(a4339) => a4339 + 1
plot(f4339(4339))
f4340(a4340) => a4340 + 1
plot(f4340(4340))
f4341(a4341) => a4341 + 1
plot(f4341(4341))
f4342(a4342) => a4342 + 1
plot(f4342(4342))
f4343(a4343) => a4343 + 1
plot(f4343(4343))
f4344(a4344) => a4344 + 1
plot(f4344(4344))
f4345(a4345) => a4345 + 1
plot(f4345(4345))
f4346(a4346) => a4346 + 1
plot(f4346(4346))
f4347(a4347) => a4347 + 1
plot(f4347(4347))
f4348(a4348) => a4348 + 1
plot(f4348(4348))
f4349(a4349) => a4349 + 1
plot(f4349(4349))
f4350(a4350) => a4350 + 1
plot(f4350(4350))
f4351(a4351) => a4351 + 1
plot(f4351(4351))
f4352(a4352) => a4352 + 1
plot(f4352(4352))
f4353(a4353) => a4353 + 1
plot(f4353(4353))
f4354(a4354) => a4354 + 1
plot(f4354(4354))
f4355(a4355) => a4355 + 1
plot(f4355(4355))
f4356(a4356) => a4356 + 1
plot(f4356(4356))
f4357(a4357) => a4357 + 1
plot(f4357(4357))
f4358(a4358) => a4358 + 1
plot(f4358(4358))
f4359(a4359) => a4359 + 1
plot(f4359(4359))
f4360(a4360) => a4360 + 1
plot(f4360(4360))
f4361(a4361) => a4361 + 1
plot(f4361(4361))
f4362(a4362) => a4362 + 1
plot(f4362(4362))
f4363(a4363) => a4363 + 1
plot(f4363(4363))
f4364(a4364) => a4364 + 1
plot(f4364(4364))
f4365(a4365) => a4365 + 1
plot(f4365(4365))
f4366(a4366) => a4366 + 1
plot(f4366(4366))
f4367(a4367) => a4367 + 1
plot(f4367(4367))
f4368(a4368) => a4368 + 1
plot(f4368(4368))
f4369(a4369) => a4369 + 1
plot(f4369(4369))
f4370(a4370) => a4370 + 1
plot(f4370(4370))
f4371(a4371) => a4371 + 1
plot(f4371(4371))
f4372(a4372) => a4372 + 1
plot(f4372(4372))
f4373(a4373) => a4373 + 1
plot(f4373(4373))
f4374(a4374) => a4374 + 1
plot(f4374(4374))
f4375(a4375) => a4375 + 1
plot(f4375(4375))
f4376(a4376) => a4376 + 1
plot(f4376(4376))
f4377(a4377) => a4377 + 1
plot(f4377(4377))
f4378(a4378) => a4378 + 1
plot(f4378(4378))
f4379(a4379) => a4379 + 1
plot(f4379(4379))
f4380(a4380) => a4380 + 1
plot(f4380(4380))
f4381(a4381) => a4381 + 1
plot(f4381(4381))
f4382(a4382) => a4382 + 1
plot(f4382(4382))
f4383(a4383) => a4383 + 1
plot(f4383(4383))
f4384(a4384) => a4384 + 1
plot(f4384(4384))
f4385(a4385) => a4385 + 1
plot(f4385(4385))
f4386(a4386) => a4386 + 1
plot(f4386(4386))
f4387(a4387) => a4387 + 1
plot(f4387(4387))
f4388(a4388) => a4388 + 1
plot(f4388(4388))
f4389(a4389) => a4389 + 1
plot(f4389(4389))
f4390(a4390) => a4390 + 1
plot(f4390(4390))
f4391(a4391) => a4391 + 1
plot(f4391(4391))
f4392(a4392) => a4392 + 1
plot(f4392(4392))
f4393(a4393) => a4393 + 1
plot(f4393(4393))
f4394(a4394) => a4394 + 1
plot(f4394(4394))
f4395(a4395) => a4395 + 1
plot(f4395(4395))
f4396(a4396) => a4396 + 1
plot(f4396(4396))
f4397(a4397) => a4397 + 1
plot(f4397(4397))
f4398(a4398) => a4398 + 1
plot(f4398(4398))
f4399(a4399) => a4399 + 1
plot(f4399(4399))
f4400(a4400) => a4400 + 1
plot(f4400(4400))
f4401(a4401) => a4401 + 1
plot(f4401(4401))
f4402(a4402) => a4402 + 1
plot(f4402(4402))
f4403(a4403) => a4403 + 1
plot(f4403(4403))
f4404(a4404) => a4404 + 1
plot(f4404(4404))
f4405(a4405) => a4405 + 1
plot(f4405(4405))
f4406(a4406) => a4406 + 1
plot(f4406(4406))
f4407(a4407) => a4407 + 1
plot(f4407(4407))
f4408(a4408) => a4408 + 1
plot(f4408(4408))
f4409(a4409) => a4409 + 1
plot(f4409(4409))
f4410(a4410) => a4410 + 1
plot(f4410(4410))
f4411(a4411) => a4411 + 1
plot(f4411(4411))
f4412(a4412) => a4412 + 1
plot(f4412(4412))
f4413(a4413) => a4413 + 1
plot(f4413(4413))
f4414(a4414) => a4414 + 1
plot(f4414(4414))
f4415(a4415) => a4415 + 1
plot(f4415(4415))
f4416(a4416) => a4416 + 1
plot(f4416(4416))
f4417(a4417) => a4417 + 1
plot(f4417(4417))
f4418(a4418) => a4418 + 1
plot(f4418(4418))
f4419(a4419) => a4419 + 1
plot(f4419(4419))
f4420(a4420) => a4420 + 1
plot(f4420(4420))
f4421(a4421) => a4421 + 1
plot(f4421(4421))
f4422(a4422) => a4422 + 1
plot(f4422(4422))
f4423(a4423) => a4423 + 1
plot(f4423(4423))
f4424(a4424) => a4424 + 1
plot(f4424(4424))
f4425(a4425) => a4425 + 1
plot(f4425(4425))
f4426(a4426) => a4426 + 1
plot(f4426(4426))
f4427(a4427) => a4427 + 1
plot(f4427(4427))
f4428(a4428) => a4428 + 1
plot(f4428(4428))
f4429(a4429) => a4429 + 1
plot(f4429(4429))
f4430(a4430) => a4430 + 1
plot(f4430(4430))
f4431(a4431) => a4431 + 1
plot(f4431(4431))
f4432(a4432) => a4432 + 1
plot(f4432(4432))
f4433(a4433) => a4433 + 1
plot(f4433(4433))
f4434(a4434) => a4434 + 1
plot(f4434(4434))
f4435(a4435) => a4435 + 1
plot(f4435(4435))
f4436(a4436) => a4436 + 1
plot(f4436(4436))
f4437(a4437) => a4437 + 1
plot(f4437(4437))
f4438(a4438) => a4438 + 1
plot(f4438(4438))
f4439(a4439) => a4439 + 1
plot(f4439(4439))
f4440(a4440) => a4440 + 1
plot(f4440(4440))
f4441(a4441) => a4441 + 1
plot(f4441(4441))
f4442(a4442) => a4442 + 1
plot(f4442(4442))
f4443(a4443) => a4443 + 1
plot(f4443(4443))
f4444(a4444) => a4444 + 1
plot(f4444(4444))
f4445(a4445) => a4445 + 1
plot(f4445(4445))
f4446(a4446) => a4446 + 1
plot(f4446(4446))
f4447(a4447) => a4447 + 1
plot(f4447(4447))
f4448(a4448) => a4448 + 1
plot(f4448(4448))
f4449(a4449) => a4449 + 1
plot(f4449(4449))
f4450(a4450) => a4450 + 1
plot(f4450(4450))
f4451(a4451) => a4451 + 1
plot(f4451(4451))
f4452(a4452) => a4452 + 1
plot(f4452(4452))
f4453(a4453) => a4453 + 1
plot(f4453(4453))
f4454(a4454) => a4454 + 1
plot(f4454(4454))
f4455(a4455) => a4455 + 1
plot(f4455(4455))
f4456(a4456) => a4456 + 1
plot(f4456(4456))
f4457(a4457) => a4457 + 1
plot(f4457(4457))
f4458(a4458) => a4458 + 1
plot(f4458(4458))
f4459(a4459) => a4459 + 1
plot(f4459(4459))
f4460(a4460) => a4460 + 1
plot(f4460(4460))
f4461(a4461) => a4461 + 1
plot(f4461(4461))
f4462(a4462) => a4462 + 1
plot(f4462(4462))
f4463(a4463) => a4463 + 1
plot(f4463(4463))
f4464(a4464) => a4464 + 1
plot(f4464(4464))
f4465(a4465) => a4465 + 1
plot(f4465(4465))
f4466(a4466) => a4466 + 1
plot(f4466(4466))
f4467(a4467) => a4467 + 1
plot(f4467(4467))
f4468(a4468) => a4468 + 1
plot(f4468(4468))
f4469(a4469) => a4469 + 1
plot(f4469(4469))
f4470(a4470) => a4470 + 1
plot(f4470(4470))
f4471(a4471) => a4471 + 1
plot(f4471(4471))
f4472(a4472) => a4472 + 1
plot(f4472(4472))
f4473(a4473) => a4473 + 1
plot(f4473(4473))
f4474(a4474) => a4474 + 1
plot(f4474(4474))
f4475(a4475) => a4475 + 1
plot(f4475(4475))
f4476(a4476) => a4476 + 1
plot(f4476(4476))
f4477(a4477) => a4477 + 1
plot(f4477(4477))
f4478(a4478) => a4478 + 1
plot(f4478(4478))
f4479(a4479) => a4479 + 1
plot(f4479(4479))
f4480(a4480) => a4480 + 1
plot(f4480(4480))
f4481(a4481) => a4481 + 1
plot(f4481(4481))
f4482(a4482) => a4482 + 1
plot(f4482(4482))
f4483(a4483) => a4483 + 1
plot(f4483(4483))
f4484(a4484) => a4484 + 1
plot(f4484(4484))
f4485(a4485) => a4485 + 1
plot(f4485(4485))
f4486(a4486) => a4486 + 1
plot(f4486(4486))
f4487(a4487) => a4487 + 1
plot(f4487(4487))
f4488(a4488) => a4488 + 1
plot(f4488(4488))
f4489(a4489) => a4489 + 1
plot(f4489(4489))
f4490(a4490) => a4490 + 1
plot(f4490(4490))
f4491(a4491) => a4491 + 1
plot(f4491(4491))
f4492(a4492) => a4492 + 1
plot(f4492(4492))
f4493(a4493) => a4493 + 1
plot(f4493(4493))
f4494(a4494) => a4494 + 1
plot(f4494(4494))
f4495(a4495) => a4495 + 1
plot(f4495(4495))
f4496(a4496) => a4496 + 1
plot(f4496(4496))
f4497(a4497) => a4497 + 1
plot(f4497(4497))
f4498(a4498) => a4498 + 1
plot(f4498(4498))
f4499(a4499) => a4499 + 1
plot(f4499(4499))
f4500(a4500) => a4500 + 1
plot(f4500(4500))
f4501(a4501) => a4501 + 1
plot(f4501(4501))
f4502(a4502) => a4502 + 1
plot(f4502(4502))
f4503(a4503) => a4503 + 1
plot(f4503(4503))
f4504(a4504) => a4504 + 1
plot(f4504(4504))
f4505(a4505) => a4505 + 1
plot(f4505(4505))
f4506(a4506) => a4506 + 1
plot(f4506(4506))
f4507(a4507) => a4507 + 1
plot(f4507(4507))
f4508(a4508) => a4508 + 1
plot(f4508(4508))
f4509(a4509) => a4509 + 1
plot(f4509(4509))
f4510(a4510) => a4510 + 1
plot(f4510(4510))
f4511(a4511) => a4511 + 1
plot(f4511(4511))
f4512(a4512) => a4512 + 1
plot(f4512(4512))
f4513(a4513) => a4513 + 1
plot(f4513(4513))
f4514(a4514) => a4514 + 1
plot(f4514(4514))
f4515(a4515) => a4515 + 1
plot(f4515(4515))
f4516(a4516) => a4516 + 1
plot(f4516(4516))
f4517(a4517) => a4517 + 1
plot(f4517(4517))
f4518(a4518) => a4518 + 1
plot(f4518(4518))
f4519(a4519) => a4519 + 1
plot(f4519(4519))
f4520(a4520) => a4520 + 1
plot(f4520(4520))
f4521(a4521) => a4521 + 1
plot(f4521(4521))
f4522(a4522) => a4522 + 1
plot(f4522(4522))
f4523(a4523) => a4523 + 1
plot(f4523(4523))
f4524(a4524) => a4524 + 1
plot(f4524(4524))
f4525(a4525) => a4525 + 1
plot(f4525(4525))
f4526(a4526) => a4526 + 1
plot(f4526(4526))
f4527(a4527) => a4527 + 1
plot(f4527(4527))
f4528(a4528) => a4528 + 1
plot(f4528(4528))
f4529(a4529) => a4529 + 1
plot(f4529(4529))
f4530(a4530) => a4530 + 1
plot(f4530(4530))
f4531(a4531) => a4531 + 1
plot(f4531(4531))
f4532(a4532) => a4532 + 1
plot(f4532(4532))
f4533(a4533) => a4533 + 1
plot(f4533(4533))
f4534(a4534) => a4534 + 1
plot(f4534(4534))
f4535(a4535) => a4535 + 1
plot(f4535(4535))
f4536(a4536) => a4536 + 1
plot(f4536(4536))
f4537(a4537) => a4537 + 1
plot(f4537(4537))
f4538(a4538) => a4538 + 1
plot(f4538(4538))
f4539(a4539) => a4539 + 1
plot(f4539(4539))
f4540(a4540) => a4540 + 1
plot(f4540(4540))
f4541(a4541) => a4541 + 1
plot(f4541(4541))
f4542(a4542) => a4542 + 1
plot(f4542(4542))
f4543(a4543) => a4543 + 1
plot(f4543(4543))
f4544(a4544) => a4544 + 1
plot(f4544(4544))
f4545(a4545) => a4545 + 1
plot(f4545(4545))
f4546(a4546) => a4546 + 1
plot(f4546(4546))
f4547(a4547) => a4547 + 1
plot(f4547(4547))
f4548(a4548) => a4548 + 1
plot(f4548(4548))
f4549(a4549) => a4549 + 1
plot(f4549(4549))
f4550(a4550) => a4550 + 1
plot(f4550(4550))
f4551(a4551) => a4551 + 1
plot(f4551(4551))
f4552(a4552) => a4552 + 1
plot(f4552(4552))
f4553(a4553) => a4553 + 1
plot(f4553(4553))
f4554(a4554) => a4554 + 1
plot(f4554(4554))
f4555(a4555) => a4555 + 1
plot(f4555(4555))
f4556(a4556) => a4556 + 1
plot(f4556(4556))
f4557(a4557) => a4557 + 1
plot(f4557(4557))
f4558(a4558) => a4558 + 1
plot(f4558(4558))
f4559(a4559) => a4559 + 1
plot(f4559(4559))
f4560(a4560) => a4560 + 1
plot(f4560(4560))
f4561(a4561) => a4561 + 1
plot(f4561(4561))
f4562(a4562) => a4562 + 1
plot(f4562(4562))
f4563(a4563) => a4563 + 1
plot(f4563(4563))
f4564(a4564) => a4564 + 1
plot(f4564(4564))
f4565(a4565) => a4565 + 1
plot(f4565(4565))
f4566(a4566) => a4566 + 1
plot(f4566(4566))
f4567(a4567) => a4567 + 1
plot(f4567(4567))
f4568(a4568) => a4568 + 1
plot(f4568(4568))
f4569(a4569) => a4569 + 1
plot(f4569(4569))
f4570(a4570) => a4570 + 1
plot(f4570(4570))
f4571(a4571) => a4571 + 1
plot(f4571(4571))
f4572(a4572) => a4572 + 1
plot(f4572(4572))
f4573(a4573) => a4573 + 1
plot(f4573(4573))
f4574(a4574) => a4574 + 1
plot(f4574(4574))
f4575(a4575) => a4575 + 1
plot(f4575(4575))
f4576(a4576) => a4576 + 1
plot(f4576(4576))
f4577(a4577) => a4577 + 1
plot(f4577(4577))
f4578(a4578) => a4578 + 1
plot(f4578(4578))
f4579(a4579) => a4579 + 1
plot(f4579(4579))
f4580(a4580) => a4580 + 1
plot(f4580(4580))
f4581(a4581) => a4581 + 1
plot(f4581(4581))
f4582(a4582) => a4582 + 1
plot(f4582(4582))
f4583(a4583) => a4583 + 1
plot(f4583(4583))
f4584(a4584) => a4584 + 1
plot(f4584(4584))
f4585(a4585) => a4585 + 1
plot(f4585(4585))
f4586(a4586) => a4586 + 1
plot(f4586(4586))
f4587(a4587) => a4587 + 1
plot(f4587(4587))
f4588(a4588) => a4588 + 1
plot(f4588(4588))
f4589(a4589) => a4589 + 1
plot(f4589(4589))
f4590(a4590) => a4590 + 1
plot(f4590(4590))
f4591(a4591) => a4591 + 1
plot(f4591(4591))
f4592(a4592) => a4592 + 1
plot(f4592(4592))
f4593(a4593) => a4593 + 1
plot(f4593(4593))
f4594(a4594) => a4594 + 1
plot(f4594(4594))
f4595(a4595) => a4595 + 1
plot(f4595(4595))
f4596(a4596) => a4596 + 1
plot(f4596(4596))
f4597(a4597) => a4597 + 1
plot(f4597(4597))
f4598(a4598) => a4598 + 1
plot(f4598(4598))
f4599(a4599) => a4599 + 1
plot(f4599(4599))
f4600(a4600) => a4600 + 1
plot(f4600(4600))
f4601(a4601) => a4601 + 1
plot(f4601(4601))
f4602(a4602) => a4602 + 1
plot(f4602(4602))
f4603(a4603) => a4603 + 1
plot(f4603(4603))
f4604(a4604) => a4604 + 1
plot(f4604(4604))
f4605(a4605) => a4605 + 1
plot(f4605(4605))
f4606(a4606) => a4606 + 1
plot(f4606(4606))
f4607(a4607) => a4607 + 1
plot(f4607(4607))
f4608(a4608) => a4608 + 1
plot(f4608(4608))
f4609(a4609) => a4609 + 1
plot(f4609(4609))
f4610(a4610) => a4610 + 1
plot(f4610(4610))
f4611(a4611) => a4611 + 1
plot(f4611(4611))
f4612(a4612) => a4612 + 1
plot(f4612(4612))
f4613(a4613) => a4613 + 1
plot(f4613(4613))
f4614(a4614) => a4614 + 1
plot(f4614(4614))
f4615(a4615) => a4615 + 1
plot(f4615(4615))
f4616(a4616) => a4616 + 1
plot(f4616(4616))
f4617(a4617) => a4617 + 1
plot(f4617(4617))
f4618(a4618) => a4618 + 1
plot(f4618(4618))
f4619(a4619) => a4619 + 1
plot(f4619(4619))
f4620(a4620) => a4620 + 1
plot(f4620(4620))
f4621(a4621) => a4621 + 1
plot(f4621(4621))
f4622(a4622) => a4622 + 1
plot(f4622(4622))
f4623(a4623) => a4623 + 1
plot(f4623(4623))
f4624(a4624) => a4624 + 1
plot(f4624(4624))
f4625(a4625) => a4625 + 1
plot(f4625(4625))
f4626(a4626) => a4626 + 1
plot(f4626(4626))
f4627(a4627) => a4627 + 1
plot(f4627(4627))
f4628(a4628) => a4628 + 1
plot(f4628(4628))
f4629(a4629) => a4629 + 1
plot(f4629(4629))
f4630(a4630) => a4630 + 1
plot(f4630(4630))
f4631(a4631) => a4631 + 1
plot(f4631(4631))
f4632(a4632) => a4632 + 1
plot(f4632(4632))
f4633(a4633) => a4633 + 1
plot(f4633(4633))
f4634(a4634) => a4634 + 1
plot(f4634(4634))
f4635(a4635) => a4635 + 1
plot(f4635(4635))
f4636(a4636) => a4636 + 1
plot(f4636(4636))
f4637(a4637) => a4637 + 1
plot(f4637(4637))
f4638(a4638) => a4638 + 1
plot(f4638(4638))
f4639(a4639) => a4639 + 1
plot(f4639(4639))
f4640(a4640) => a4640 + 1
plot(f4640(4640))
f4641(a4641) => a4641 + 1
plot(f4641(4641))
f4642(a4642) => a4642 + 1
plot(f4642(4642))
f4643(a4643) => a4643 + 1
plot(f4643(4643))
f4644(a4644) => a4644 + 1
plot(f4644(4644))
f4645(a4645) => a4645 + 1
plot(f4645(4645))
f4646(a4646) => a4646 + 1
plot(f4646(4646))
f4647(a4647) => a4647 + 1
plot(f4647(4647))
f4648(a4648) => a4648 + 1
plot(f4648(4648))
f4649(a4649) => a4649 + 1
plot(f4649(4649))
f4650(a4650) => a4650 + 1
plot(f4650(4650))
f4651(a4651) => a4651 + 1
plot(f4651(4651))
f4652(a4652) => a4652 + 1
plot(f4652(4652))
f4653(a4653) => a4653 + 1
plot(f4653(4653))
f4654(a4654) => a4654 + 1
plot(f4654(4654))
f4655(a4655) => a4655 + 1
plot(f4655(4655))
f4656(a4656) => a4656 + 1
plot(f4656(4656))
f4657(a4657) => a4657 + 1
plot(f4657(4657))
f4658(a4658) => a4658 + 1
plot(f4658(4658))
f4659(a4659) => a4659 + 1
plot(f4659(4659))
f4660(a4660) => a4660 + 1
plot(f4660(4660))
f4661(a4661) => a4661 + 1
plot(f4661(4661))
f4662(a4662) => a4662 + 1
plot(f4662(4662))
f4663(a4663) => a4663 + 1
plot(f4663(4663))
f4664(a4664) => a4664 + 1
plot(f4664(4664))
f4665(a4665) => a4665 + 1
plot(f4665(4665))
f4666(a4666) => a4666 + 1
plot(f4666(4666))
f4667(a4667) => a4667 + 1
plot(f4667(4667))
f4668(a4668) => a4668 + 1
plot(f4668(4668))
f4669(a4669) => a4669 + 1
plot(f4669(4669))
f4670(a4670) => a4670 + 1
plot(f4670(4670))
f4671(a4671) => a4671 + 1
plot(f4671(4671))
f4672(a4672) => a4672 + 1
plot(f4672(4672))
f4673(a4673) => a4673 + 1
plot(f4673(4673))
f4674(a4674) => a4674 + 1
plot(f4674(4674))
f4675(a4675) => a4675 + 1
plot(f4675(4675))
f4676(a4676) => a4676 + 1
plot(f4676(4676))
f4677(a4677) => a4677 + 1
plot(f4677(4677))
f4678(a4678) => a4678 + 1
plot(f4678(4678))
f4679(a4679) => a4679 + 1
plot(f4679(4679))
f4680(a4680) => a4680 + 1
plot(f4680(4680))
f4681(a4681) => a4681 + 1
plot(f4681(4681))
f4682(a4682) => a4682 + 1
plot(f4682(4682))
f4683(a4683) => a4683 + 1
plot(f4683(4683))
f4684(a4684) => a4684 + 1
plot(f4684(4684))
f4685(a4685) => a4685 + 1
plot(f4685(4685))
f4686(a4686) => a4686 + 1
plot(f4686(4686))
f4687(a4687) => a4687 + 1
plot(f4687(4687))
f4688(a4688) => a4688 + 1
plot(f4688(4688))
f4689(a4689) => a4689 + 1
plot(f4689(4689))
f4690(a4690) => a4690 + 1
plot(f4690(4690))
f4691(a4691) => a4691 + 1
plot(f4691(4691))
f4692(a4692) => a4692 + 1
plot(f4692(4692))
f4693(a4693) => a4693 + 1
plot(f4693(4693))
f4694(a4694) => a4694 + 1
plot(f4694(4694))
f4695(a4695) => a4695 + 1
plot(f4695(4695))
f4696(a4696) => a4696 + 1
plot(f4696(4696))
f4697(a4697) => a4697 + 1
plot(f4697(4697))
f4698(a4698) => a4698 + 1
plot(f4698(4698))
f4699(a4699) => a4699 + 1
plot(f4699(4699))
f4700(a4700) => a4700 + 1
plot(f4700(4700))
f4701(a4701) => a4701 + 1
plot(f4701(4701))
f4702(a4702) => a4702 + 1
plot(f4702(4702))
f4703(a4703) => a4703 + 1
plot(f4703(4703))
f4704(a4704) => a4704 + 1
plot(f4704(4704))
f4705(a4705) => a4705 + 1
plot(f4705(4705))
f4706(a4706) => a4706 + 1
plot(f4706(4706))
f4707(a4707) => a4707 + 1
plot(f4707(4707))
f4708(a4708) => a4708 + 1
plot(f4708(4708))
f4709(a4709) => a4709 + 1
plot(f4709(4709))
f4710(a4710) => a4710 + 1
plot(f4710(4710))
f4711(a4711) => a4711 + 1
plot(f4711(4711))
f4712(a4712) => a4712 + 1
plot(f4712(4712))
f4713(a4713) => a4713 + 1
plot(f4713(4713))
f4714(a4714) => a4714 + 1
plot(f4714(4714))
f4715(a4715) => a4715 + 1
plot(f4715(4715))
f4716(a4716) => a4716 + 1
plot(f4716(4716))
f4717(a4717) => a4717 + 1
plot(f4717(4717))
f4718(a4718) => a4718 + 1
plot(f4718(4718))
f4719(a4719) => a4719 + 1
plot(f4719(4719))
f4720(a4720) => a4720 + 1
plot(f4720(4720))
f4721(a4721) => a4721 + 1
plot(f4721(4721))
f4722(a4722) => a4722 + 1
plot(f4722(4722))
f4723(a4723) => a4723 + 1
plot(f4723(4723))
f4724(a4724) => a4724 + 1
plot(f4724(4724))
f4725(a4725) => a4725 + 1
plot(f4725(4725))
f4726(a4726) => a4726 + 1
plot(f4726(4726))
f4727(a4727) => a4727 + 1
plot(f4727(4727))
f4728(a4728) => a4728 + 1
plot(f4728(4728))
f4729(a4729) => a4729 + 1
plot(f4729(4729))
f4730(a4730) => a4730 + 1
plot(f4730(4730))
f4731(a4731) => a4731 + 1
plot(f4731(4731))
f4732(a4732) => a4732 + 1
plot(f4732(4732))
f4733(a4733) => a4733 + 1
plot(f4733(4733))
f4734(a4734) => a4734 + 1
plot(f4734(4734))
f4735(a4735) => a4735 + 1
plot(f4735(4735))
f4736(a4736) => a4736 + 1
plot(f4736(4736))
f4737(a4737) => a4737 + 1
plot(f4737(4737))
f4738(a4738) => a4738 + 1
plot(f4738(4738))
f4739(a4739) => a4739 + 1
plot(f4739(4739))
f4740(a4740) => a4740 + 1
plot(f4740(4740))
f4741(a4741) => a4741 + 1
plot(f4741(4741))
f4742(a4742) => a4742 + 1
plot(f4742(4742))
f4743(a4743) => a4743 + 1
plot(f4743(4743))
f4744(a4744) => a4744 + 1
plot(f4744(4744))
f4745(a4745) => a4745 + 1
plot(f4745(4745))
f4746(a4746) => a4746 + 1
plot(f4746(4746))
f4747(a4747) => a4747 + 1
plot(f4747(4747))
f4748(a4748) => a4748 + 1
plot(f4748(4748))
f4749(a4749) => a4749 + 1
plot(f4749(4749))
f4750(a4750) => a4750 + 1
plot(f4750(4750))
f4751(a4751) => a4751 + 1
plot(f4751(4751))
f4752(a4752) => a4752 + 1
plot(f4752(4752))
f4753(a4753) => a4753 + 1
plot(f4753(4753))
f4754(a4754) => a4754 + 1
plot(f4754(4754))
f4755(a4755) => a4755 + 1
plot(f4755(4755))
f4756(a4756) => a4756 + 1
plot(f4756(4756))
f4757(a4757) => a4757 + 1
plot(f4757(4757))
f4758(a4758) => a4758 + 1
plot(f4758(4758))
f4759(a4759) => a4759 + 1
plot(f4759(4759))
f4760(a4760) => a4760 + 1
plot(f4760(4760))
f4761(a4761) => a4761 + 1
plot(f4761(4761))
f4762(a4762) => a4762 + 1
plot(f4762(4762))
f4763(a4763) => a4763 + 1
plot(f4763(4763))
f4764(a4764) => a4764 + 1
plot(f4764(4764))
f4765(a4765) => a4765 + 1
plot(f4765(4765))
f4766(a4766) => a4766 + 1
plot(f4766(4766))
f4767(a4767) => a4767 + 1
plot(f4767(4767))
f4768(a4768) => a4768 + 1
plot(f4768(4768))
f4769(a4769) => a4769 + 1
plot(f4769(4769))
f4770(a4770) => a4770 + 1
plot(f4770(4770))
f4771(a4771) => a4771 + 1
plot(f4771(4771))
f4772(a4772) => a4772 + 1
plot(f4772(4772))
f4773(a4773) => a4773 + 1
plot(f4773(4773))
f4774(a4774) => a4774 + 1
plot(f4774(4774))
f4775(a4775) => a4775 + 1
plot(f4775(4775))
f4776(a4776) => a4776 + 1
plot(f4776(4776))
f4777(a4777) => a4777 + 1
plot(f4777(4777))
f4778(a4778) => a4778 + 1
plot(f4778(4778))
f4779(a4779) => a4779 + 1
plot(f4779(4779))
f4780(a4780) => a4780 + 1
plot(f4780(4780))
f4781(a4781) => a4781 + 1
plot(f4781(4781))
f4782(a4782) => a4782 + 1
plot(f4782(4782))
f4783(a4783) => a4783 + 1
plot(f4783(4783))
f4784(a4784) => a4784 + 1
plot(f4784(4784))
f4785(a4785) => a4785 + 1
plot(f4785(4785))
f4786(a4786) => a4786 + 1
plot(f4786(4786))
f4787(a4787) => a4787 + 1
plot(f4787(4787))
f4788(a4788) => a4788 + 1
plot(f4788(4788))
f4789(a4789) => a4789 + 1
plot(f4789(4789))
f4790(a4790) => a4790 + 1
plot(f4790(4790))
f4791(a4791) => a4791 + 1
plot(f4791(4791))
f4792(a4792) => a4792 + 1
plot(f4792(4792))
f4793(a4793) => a4793 + 1
plot(f4793(4793))
f4794(a4794) => a4794 + 1
plot(f4794(4794))
f4795(a4795) => a4795 + 1
plot(f4795(4795))
f4796(a4796) => a4796 + 1
plot(f4796(4796))
f4797(a4797) => a4797 + 1
plot(f4797(4797))
f4798(a4798) => a4798 + 1
plot(f4798(4798))
f4799(a4799) => a4799 + 1
plot(f4799(4799))
f4800(a4800) => a4800 + 1
plot(f4800(4800))
f4801(a4801) => a4801 + 1
plot(f4801(4801))
f4802(a4802) => a4802 + 1
plot(f4802(4802))
f4803(a4803) => a4803 + 1
plot(f4803(4803))
f4804(a4804) => a4804 + 1
plot(f4804(4804))
f4805(a4805) => a4805 + 1
plot(f4805(4805))
f4806(a4806) => a4806 + 1
plot(f4806(4806))
f4807(a4807) => a4807 + 1
plot(f4807(4807))
f4808(a4808) => a4808 + 1
plot(f4808(4808))
f4809(a4809) => a4809 + 1
plot(f4809(4809))
f4810(a4810) => a4810 + 1
plot(f4810(4810))
f4811(a4811) => a4811 + 1
plot(f4811(4811))
f4812(a4812) => a4812 + 1
plot(f4812(4812))
f4813(a4813) => a4813 + 1
plot(f4813(4813))
f4814(a4814) => a4814 + 1
plot(f4814(4814))
f4815(a4815) => a4815 + 1
plot(f4815(4815))
f4816(a4816) => a4816 + 1
plot(f4816(4816))
f4817(a4817) => a4817 + 1
plot(f4817(4817))
f4818(a4818) => a4818 + 1
plot(f4818(4818))
f4819(a4819) => a4819 + 1
plot(f4819(4819))
f4820(a4820) => a4820 + 1
plot(f4820(4820))
f4821(a4821) => a4821 + 1
plot(f4821(4821))
f4822(a4822) => a4822 + 1
plot(f4822(4822))
f4823(a4823) => a4823 + 1
plot(f4823(4823))
f4824(a4824) => a4824 + 1
plot(f4824(4824))
f4825(a4825) => a4825 + 1
plot(f4825(4825))
f4826(a4826) => a4826 + 1
plot(f4826(4826))
f4827(a4827) => a4827 + 1
plot(f4827(4827))
f4828(a4828) => a4828 + 1
plot(f4828(4828))
f4829(a4829) => a4829 + 1
plot(f4829(4829))
f4830(a4830) => a4830 + 1
plot(f4830(4830))
f4831(a4831) => a4831 + 1
plot(f4831(4831))
f4832(a4832) => a4832 + 1
plot(f4832(4832))
f4833(a4833) => a4833 + 1
plot(f4833(4833))
f4834(a4834) => a4834 + 1
plot(f4834(4834))
f4835(a4835) => a4835 + 1
plot(f4835(4835))
f4836(a4836) => a4836 + 1
plot(f4836(4836))
f4837(a4837) => a4837 + 1
plot(f4837(4837))
f4838(a4838) => a4838 + 1
plot(f4838(4838))
f4839(a4839) => a4839 + 1
plot(f4839(4839))
f4840(a4840) => a4840 + 1
plot(f4840(4840))
f4841(a4841) => a4841 + 1
plot(f4841(4841))
f4842(a4842) => a4842 + 1
plot(f4842(4842))
f4843(a4843) => a4843 + 1
plot(f4843(4843))
f4844(a4844) => a4844 + 1
plot(f4844(4844))
f4845(a4845) => a4845 + 1
plot(f4845(4845))
f4846(a4846) => a4846 + 1
plot(f4846(4846))
f4847(a4847) => a4847 + 1
plot(f4847(4847))
f4848(a4848) => a4848 + 1
plot(f4848(4848))
f4849(a4849) => a4849 + 1
plot(f4849(4849))
f4850(a4850) => a4850 + 1
plot(f4850(4850))
f4851(a4851) => a4851 + 1
plot(f4851(4851))
f4852(a4852) => a4852 + 1
plot(f4852(4852))
f4853(a4853) => a4853 + 1
plot(f4853(4853))
f4854(a4854) => a4854 + 1
plot(f4854(4854))
f4855(a4855) => a4855 + 1
plot(f4855(4855))
f4856(a4856) => a4856 + 1
plot(f4856(4856))
f4857(a4857) => a4857 + 1
plot(f4857(4857))
f4858(a4858) => a4858 + 1
plot(f4858(4858))
f4859(a4859) => a4859 + 1
plot(f4859(4859))
f4860(a4860) => a4860 + 1
plot(f4860(4860))
f4861(a4861) => a4861 + 1
plot(f4861(4861))
f4862(a4862) => a4862 + 1
plot(f4862(4862))
f4863(a4863) => a4863 + 1
plot(f4863(4863))
f4864(a4864) => a4864 + 1
plot(f4864(4864))
f4865(a4865) => a4865 + 1
plot(f4865(4865))
f4866(a4866) => a4866 + 1
plot(f4866(4866))
f4867(a4867) => a4867 + 1
plot(f4867(4867))
f4868(a4868) => a4868 + 1
plot(f4868(4868))
f4869(a4869) => a4869 + 1
plot(f4869(4869))
f4870(a4870) => a4870 + 1
plot(f4870(4870))
f4871(a4871) => a4871 + 1
plot(f4871(4871))
f4872(a4872) => a4872 + 1
plot(f4872(4872))
f4873(a4873) => a4873 + 1
plot(f4873(4873))
f4874(a4874) => a4874 + 1
plot(f4874(4874))
f4875(a4875) => a4875 + 1
plot(f4875(4875))
f4876(a4876) => a4876 + 1
plot(f4876(4876))
f4877(a4877) => a4877 + 1
plot(f4877(4877))
f4878(a4878) => a4878 + 1
plot(f4878(4878))
f4879(a4879) => a4879 + 1
plot(f4879(4879))
f4880(a4880) => a4880 + 1
plot(f4880(4880))
f4881(a4881) => a4881 + 1
plot(f4881(4881))
f4882(a4882) => a4882 + 1
plot(f4882(4882))
f4883(a4883) => a4883 + 1
plot(f4883(4883))
f4884(a4884) => a4884 + 1
plot(f4884(4884))
f4885(a4885) => a4885 + 1
plot(f4885(4885))
f4886(a4886) => a4886 + 1
plot(f4886(4886))
f4887(a4887) => a4887 + 1
plot(f4887(4887))
f4888(a4888) => a4888 + 1
plot(f4888(4888))
f4889(a4889) => a4889 + 1
plot(f4889(4889))
f4890(a4890) => a4890 + 1
plot(f4890(4890))
f4891(a4891) => a4891 + 1
plot(f4891(4891))
f4892(a4892) => a4892 + 1
plot(f4892(4892))
f4893(a4893) => a4893 + 1
plot(f4893(4893))
f4894(a4894) => a4894 + 1
plot(f4894(4894))
f4895(a4895) => a4895 + 1
plot(f4895(4895))
f4896(a4896) => a4896 + 1
plot(f4896(4896))
f4897(a4897) => a4897 + 1
plot(f4897(4897))
f4898(a4898) => a4898 + 1
plot(f4898(4898))
f4899(a4899) => a4899 + 1
plot(f4899(4899))
f4900(a4900) => a4900 + 1
plot(f4900(4900))
f4901(a4901) => a4901 + 1
plot(f4901(4901))
f4902(a4902) => a4902 + 1
plot(f4902(4902))
f4903(a4903) => a4903 + 1
plot(f4903(4903))
f4904(a4904) => a4904 + 1
plot(f4904(4904))
f4905(a4905) => a4905 + 1
plot(f4905(4905))
f4906(a4906) => a4906 + 1
plot(f4906(4906))
f4907(a4907) => a4907 + 1
plot(f4907(4907))
f4908(a4908) => a4908 + 1
plot(f4908(4908))
f4909(a4909) => a4909 + 1
plot(f4909(4909))
f4910(a4910) => a4910 + 1
plot(f4910(4910))
f4911(a4911) => a4911 + 1
plot(f4911(4911))
f4912(a4912) => a4912 + 1
plot(f4912(4912))
f4913(a4913) => a4913 + 1
plot(f4913(4913))
f4914(a4914) => a4914 + 1
plot(f4914(4914))
f4915(a4915) => a4915 + 1
plot(f4915(4915))
f4916(a4916) => a4916 + 1
plot(f4916(4916))
f4917(a4917) => a4917 + 1
plot(f4917(4917))
f4918(a4918) => a4918 + 1
plot(f4918(4918))
f4919(a4919) => a4919 + 1
plot(f4919(4919))
f4920(a4920) => a4920 + 1
plot(f4920(4920))
f4921(a4921) => a4921 + 1
plot(f4921(4921))
f4922(a4922) => a4922 + 1
plot(f4922(4922))
f4923(a4923) => a4923 + 1
plot(f4923(4923))
f4924(a4924) => a4924 + 1
plot(f4924(4924))
f4925(a4925) => a4925 + 1
plot(f4925(4925))
f4926(a4926) => a4926 + 1
plot(f4926(4926))
f4927(a4927) => a4927 + 1
plot(f4927(4927))
f4928(a4928) => a4928 + 1
plot(f4928(4928))
f4929(a4929) => a4929 + 1
plot(f4929(4929))
f4930(a4930) => a4930 + 1
plot(f4930(4930))
f4931(a4931) => a4931 + 1
plot(f4931(4931))
f4932(a4932) => a4932 + 1
plot(f4932(4932))
f4933(a4933) => a4933 + 1
plot(f4933(4933))
f4934(a4934) => a4934 + 1
plot(f4934(4934))
f4935(a4935) => a4935 + 1
plot(f4935(4935))
f4936(a4936) => a4936 + 1
plot(f4936(4936))
f4937(a4937) => a4937 + 1
plot(f4937(4937))
f4938(a4938) => a4938 + 1
plot(f4938(4938))
f4939(a4939) => a4939 + 1
plot(f4939(4939))
f4940(a4940) => a4940 + 1
plot(f4940(4940))
f4941(a4941) => a4941 + 1
plot(f4941(4941))
f4942(a4942) => a4942 + 1
plot(f4942(4942))
f4943(a4943) => a4943 + 1
plot(f4943(4943))
f4944(a4944) => a4944 + 1
plot(f4944(4944))
f4945(a4945) => a4945 + 1
plot(f4945(4945))
f4946(a4946) => a4946 + 1
plot(f4946(4946))
f4947(a4947) => a4947 + 1
plot(f4947(4947))
f4948(a4948) => a4948 + 1
plot(f4948(4948))
f4949(a4949) => a4949 + 1
plot(f4949(4949))
f4950(a4950) => a4950 + 1
plot(f4950(4950))
f4951(a4951) => a4951 + 1
plot(f4951(4951))
f4952(a4952) => a4952 + 1
plot(f4952(4952))
f4953(a4953) => a4953 + 1
plot(f4953(4953))
f4954(a4954) => a4954 + 1
plot(f4954(4954))
f4955(a4955) => a4955 + 1
plot(f4955(4955))
f4956(a4956) => a4956 + 1
plot(f4956(4956))
f4957(a4957) => a4957 + 1
plot(f4957(4957))
f4958(a4958) => a4958 + 1
plot(f4958(4958))
f4959(a4959) => a4959 + 1
plot(f4959(4959))
f4960(a4960) => a4960 + 1
plot(f4960(4960))
f4961(a4961) => a4961 + 1
plot(f4961(4961))
f4962(a4962) => a4962 + 1
plot(f4962(4962))
f4963(a4963) => a4963 + 1
plot(f4963(4963))
f4964(a4964) => a4964 + 1
plot(f4964(4964))
f4965(a4965) => a4965 + 1
plot(f4965(4965))
f4966(a4966) => a4966 + 1
plot(f4966(4966))
f4967(a4967) => a4967 + 1
plot(f4967(4967))
f4968(a4968) => a4968 + 1
plot(f4968(4968))
f4969(a4969) => a4969 + 1
plot(f4969(4969))
f4970(a4970) => a4970 + 1
plot(f4970(4970))
f4971(a4971) => a4971 + 1
plot(f4971(4971))
f4972(a4972) => a4972 + 1
plot(f4972(4972))
f4973(a4973) => a4973 + 1
plot(f4973(4973))
f4974(a4974) => a4974 + 1
plot(f4974(4974))
f4975(a4975) => a4975 + 1
plot(f4975(4975))
f4976(a4976) => a4976 + 1
plot(f4976(4976))
f4977(a4977) => a4977 + 1
plot(f4977(4977))
f4978(a4978) => a4978 + 1
plot(f4978(4978))
f4979(a4979) => a4979 + 1
plot(f4979(4979))
f4980(a4980) => a4980 + 1
plot(f4980(4980))
f4981(a4981) => a4981 + 1
plot(f4981(4981))
f4982(a4982) => a4982 + 1
plot(f4982(4982))
f4983(a4983) => a4983 + 1
plot(f4983(4983))
f4984(a4984) => a4984 + 1
plot(f4984(4984))
f4985(a4985) => a4985 + 1
plot(f4985(4985))
f4986(a4986) => a4986 + 1
plot(f4986(4986))
f4987(a4987) => a4987 + 1
plot(f4987(4987))
f4988(a4988) => a4988 + 1
plot(f4988(4988))
f4989(a4989) => a4989 + 1
plot(f4989(4989))
f4990(a4990) => a4990 + 1
plot(f4990(4990))
f4991(a4991) => a4991 + 1
plot(f4991(4991))
f4992(a4992) => a4992 + 1
plot(f4992(4992))
f4993(a4993) => a4993 + 1
plot(f4993(4993))
f4994(a4994) => a4994 + 1
plot(f4994(4994))
f4995(a4995) => a4995 + 1
plot(f4995(4995))
f4996(a4996) => a4996 + 1
plot(f4996(4996))
f4997(a4997) => a4997 + 1
plot(f4997(4997))
f4998(a4998) => a4998 + 1
plot(f4998(4998))
f4999(a4999) => a4999 + 1
plot(f4999(4999))
f5000(a5000) => a5000 + 1
plot(f5000(5000))
f5001(a5001) => a5001 + 1
plot(f5001(5001))
f5002(a5002) => a5002 + 1
plot(f5002(5002))
f5003(a5003) => a5003 + 1
plot(f5003(5003))
f5004(a5004) => a5004 + 1
plot(f5004(5004))
f5005(a5005) => a5005 + 1
plot(f5005(5005))
f5006(a5006) => a5006 + 1
plot(f5006(5006))
f5007(a5007) => a5007 + 1
plot(f5007(5007))
f5008(a5008) => a5008 + 1
plot(f5008(5008))
f5009(a5009) => a5009 + 1
plot(f5009(5009))
f5010(a5010) => a5010 + 1
plot(f5010(5010))
f5011(a5011) => a5011 + 1
plot(f5011(5011))
f5012(a5012) => a5012 + 1
plot(f5012(5012))
f5013(a5013) => a5013 + 1
plot(f5013(5013))
f5014(a5014) => a5014 + 1
plot(f5014(5014))
f5015(a5015) => a5015 + 1
plot(f5015(5015))
f5016(a5016) => a5016 + 1
plot(f5016(5016))
f5017(a5017) => a5017 + 1
plot(f5017(5017))
f5018(a5018) => a5018 + 1
plot(f5018(5018))
f5019(a5019) => a5019 + 1
plot(f5019(5019))
f5020(a5020) => a5020 + 1
plot(f5020(5020))
f5021(a5021) => a5021 + 1
plot(f5021(5021))
f5022(a5022) => a5022 + 1
plot(f5022(5022))
f5023(a5023) => a5023 + 1
plot(f5023(5023))
f5024(a5024) => a5024 + 1
plot(f5024(5024))
f5025(a5025) => a5025 + 1
plot(f5025(5025))
f5026(a5026) => a5026 + 1
plot(f5026(5026))
f5027(a5027) => a5027 + 1
plot(f5027(5027))
f5028(a5028) => a5028 + 1
plot(f5028(5028))
f5029(a5029) => a5029 + 1
plot(f5029(5029))
f5030(a5030) => a5030 + 1
plot(f5030(5030))
f5031(a5031) => a5031 + 1
plot(f5031(5031))
f5032(a5032) => a5032 + 1
plot(f5032(5032))
f5033(a5033) => a5033 + 1
plot(f5033(5033))
f5034(a5034) => a5034 + 1
plot(f5034(5034))
f5035(a5035) => a5035 + 1
plot(f5035(5035))
f5036(a5036) => a5036 + 1
plot(f5036(5036))
f5037(a5037) => a5037 + 1
plot(f5037(5037))
f5038(a5038) => a5038 + 1
plot(f5038(5038))
f5039(a5039) => a5039 + 1
plot(f5039(5039))
f5040(a5040) => a5040 + 1
plot(f5040(5040))
f5041(a5041) => a5041 + 1
plot(f5041(5041))
f5042(a5042) => a5042 + 1
plot(f5042(5042))
f5043(a5043) => a5043 + 1
plot(f5043(5043))
f5044(a5044) => a5044 + 1
plot(f5044(5044))
f5045(a5045) => a5045 + 1
plot(f5045(5045))
f5046(a5046) => a5046 + 1
plot(f5046(5046))
f5047(a5047) => a5047 + 1
plot(f5047(5047))
f5048(a5048) => a5048 + 1
plot(f5048(5048))
f5049(a5049) => a5049 + 1
plot(f5049(5049))
f5050(a5050) => a5050 + 1
plot(f5050(5050))
f5051(a5051) => a5051 + 1
plot(f5051(5051))
f5052(a5052) => a5052 + 1
plot(f5052(5052))
f5053(a5053) => a5053 + 1
plot(f5053(5053))
f5054(a5054) => a5054 + 1
plot(f5054(5054))
f5055(a5055) => a5055 + 1
plot(f5055(5055))
f5056(a5056) => a5056 + 1
plot(f5056(5056))
f5057(a5057) => a5057 + 1
plot(f5057(5057))
f5058(a5058) => a5058 + 1
plot(f5058(5058))
f5059(a5059) => a5059 + 1
plot(f5059(5059))
f5060(a5060) => a5060 + 1
plot(f5060(5060))
f5061(a5061) => a5061 + 1
plot(f5061(5061))
f5062(a5062) => a5062 + 1
plot(f5062(5062))
f5063(a5063) => a5063 + 1
plot(f5063(5063))
f5064(a5064) => a5064 + 1
plot(f5064(5064))
f5065(a5065) => a5065 + 1
plot(f5065(5065))
f5066(a5066) => a5066 + 1
plot(f5066(5066))
f5067(a5067) => a5067 + 1
plot(f5067(5067))
f5068(a5068) => a5068 + 1
plot(f5068(5068))
f5069(a5069) => a5069 + 1
plot(f5069(5069))
f5070(a5070) => a5070 + 1
plot(f5070(5070))
f5071(a5071) => a5071 + 1
plot(f5071(5071))
f5072(a5072) => a5072 + 1
plot(f5072(5072))
f5073(a5073) => a5073 + 1
plot(f5073(5073))
f5074(a5074) => a5074 + 1
plot(f5074(5074))
f5075(a5075) => a5075 + 1
plot(f5075(5075))
f5076(a5076) => a5076 + 1
plot(f5076(5076))
f5077(a5077) => a5077 + 1
plot(f5077(5077))
f5078(a5078) => a5078 + 1
plot(f5078(5078))
f5079(a5079) => a5079 + 1
plot(f5079(5079))
f5080(a5080) => a5080 + 1
plot(f5080(5080))
f5081(a5081) => a5081 + 1
plot(f5081(5081))
f5082(a5082) => a5082 + 1
plot(f5082(5082))
f5083(a5083) => a5083 + 1
plot(f5083(5083))
f5084(a5084) => a5084 + 1
plot(f5084(5084))
f5085(a5085) => a5085 + 1
plot(f5085(5085))
f5086(a5086) => a5086 + 1
plot(f5086(5086))
f5087(a5087) => a5087 + 1
plot(f5087(5087))
f5088(a5088) => a5088 + 1
plot(f5088(5088))
f5089(a5089) => a5089 + 1
plot(f5089(5089))
f5090(a5090) => a5090 + 1
plot(f5090(5090))
f5091(a5091) => a5091 + 1
plot(f5091(5091))
f5092(a5092) => a5092 + 1
plot(f5092(5092))
f5093(a5093) => a5093 + 1
plot(f5093(5093))
f5094(a5094) => a5094 + 1
plot(f5094(5094))
f5095(a5095) => a5095 + 1
plot(f5095(5095))
f5096(a5096) => a5096 + 1
plot(f5096(5096))
f5097(a5097) => a5097 + 1
plot(f5097(5097))
f5098(a5098) => a5098 + 1
plot(f5098(5098))
f5099(a5099) => a5099 + 1
plot(f5099(5099))
f5100(a5100) => a5100 + 1
plot(f5100(5100))
f5101(a5101) => a5101 + 1
plot(f5101(5101))
f5102(a5102) => a5102 + 1
plot(f5102(5102))
f5103(a5103) => a5103 + 1
plot(f5103(5103))
f5104(a5104) => a5104 + 1
plot(f5104(5104))
f5105(a5105) => a5105 + 1
plot(f5105(5105))
f5106(a5106) => a5106 + 1
plot(f5106(5106))
f5107(a5107) => a5107 + 1
plot(f5107(5107))
f5108(a5108) => a5108 + 1
plot(f5108(5108))
f5109(a5109) => a5109 + 1
plot(f5109(5109))
f5110(a5110) => a5110 + 1
plot(f5110(5110))
f5111(a5111) => a5111 + 1
plot(f5111(5111))
f5112(a5112) => a5112 + 1
plot(f5112(5112))
f5113(a5113) => a5113 + 1
plot(f5113(5113))
f5114(a5114) => a5114 + 1
plot(f5114(5114))
f5115(a5115) => a5115 + 1
plot(f5115(5115))
f5116(a5116) => a5116 + 1
plot(f5116(5116))
f5117(a5117) => a5117 + 1
plot(f5117(5117))
f5118(a5118) => a5118 + 1
plot(f5118(5118))
f5119(a5119) => a5119 + 1
plot(f5119(5119))
f5120(a5120) => a5120 + 1
plot(f5120(5120))
f5121(a5121) => a5121 + 1
plot(f5121(5121))
f5122(a5122) => a5122 + 1
plot(f5122(5122))
f5123(a5123) => a5123 + 1
plot(f5123(5123))
f5124(a5124) => a5124 + 1
plot(f5124(5124))
f5125(a5125) => a5125 + 1
plot(f5125(5125))
f5126(a5126) => a5126 + 1
plot(f5126(5126))
f5127(a5127) => a5127 + 1
plot(f5127(5127))
f5128(a5128) => a5128 + 1
plot(f5128(5128))
f5129(a5129) => a5129 + 1
plot(f5129(5129))
f5130(a5130) => a5130 + 1
plot(f5130(5130))
f5131(a5131) => a5131 + 1
plot(f5131(5131))
f5132(a5132) => a5132 + 1
plot(f5132(5132))
f5133(a5133) => a5133 + 1
plot(f5133(5133))
f5134(a5134) => a5134 + 1
plot(f5134(5134))
f5135(a5135) => a5135 + 1
plot(f5135(5135))
f5136(a5136) => a5136 + 1
plot(f5136(5136))
f5137(a5137) => a5137 + 1
plot(f5137(5137))
f5138(a5138) => a5138 + 1
plot(f5138(5138))
f5139(a5139) => a5139 + 1
plot(f5139(5139))
f5140(a5140) => a5140 + 1
plot(f5140(5140))
f5141(a5141) => a5141 + 1
plot(f5141(5141))
f5142(a5142) => a5142 + 1
plot(f5142(5142))
f5143(a5143) => a5143 + 1
plot(f5143(5143))
f5144(a5144) => a5144 + 1
plot(f5144(5144))
f5145(a5145) => a5145 + 1
plot(f5145(5145))
f5146(a5146) => a5146 + 1
plot(f5146(5146))
f5147(a5147) => a5147 + 1
plot(f5147(5147))
f5148(a5148) => a5148 + 1
plot(f5148(5148))
f5149(a5149) => a5149 + 1
plot(f5149(5149))
f5150(a5150) => a5150 + 1
plot(f5150(5150))
f5151(a5151) => a5151 + 1
plot(f5151(5151))
f5152(a5152) => a5152 + 1
plot(f5152(5152))
f5153(a5153) => a5153 + 1
plot(f5153(5153))
f5154(a5154) => a5154 + 1
plot(f5154(5154))
f5155(a5155) => a5155 + 1
plot(f5155(5155))
f5156(a5156) => a5156 + 1
plot(f5156(5156))
f5157(a5157) => a5157 + 1
plot(f5157(5157))
f5158(a5158) => a5158 + 1
plot(f5158(5158))
f5159(a5159) => a5159 + 1
plot(f5159(5159))
f5160(a5160) => a5160 + 1
plot(f5160(5160))
f5161(a5161) => a5161 + 1
plot(f5161(5161))
f5162(a5162) => a5162 + 1
plot(f5162(5162))
f5163(a5163) => a5163 + 1
plot(f5163(5163))
f5164(a5164) => a5164 + 1
plot(f5164(5164))
f5165(a5165) => a5165 + 1
plot(f5165(5165))
f5166(a5166) => a5166 + 1
plot(f5166(5166))
f5167(a5167) => a5167 + 1
plot(f5167(5167))
f5168(a5168) => a5168 + 1
plot(f5168(5168))
f5169(a5169) => a5169 + 1
plot(f5169(5169))
f5170(a5170) => a5170 + 1
plot(f5170(5170))
f5171(a5171) => a5171 + 1
plot(f5171(5171))
f5172(a5172) => a5172 + 1
plot(f5172(5172))
f5173(a5173) => a5173 + 1
plot(f5173(5173))
f5174(a5174) => a5174 + 1
plot(f5174(5174))
f5175(a5175) => a5175 + 1
plot(f5175(5175))
f5176(a5176) => a5176 + 1
plot(f5176(5176))
f5177(a5177) => a5177 + 1
plot(f5177(5177))
f5178(a5178) => a5178 + 1
plot(f5178(5178))
f5179(a5179) => a5179 + 1
plot(f5179(5179))
f5180(a5180) => a5180 + 1
plot(f5180(5180))
f5181(a5181) => a5181 + 1
plot(f5181(5181))
f5182(a5182) => a5182 + 1
plot(f5182(5182))
f5183(a5183) => a5183 + 1
plot(f5183(5183))
f5184(a5184) => a5184 + 1
plot(f5184(5184))
f5185(a5185) => a5185 + 1
plot(f5185(5185))
f5186(a5186) => a5186 + 1
plot(f5186(5186))
f5187(a5187) => a5187 + 1
plot(f5187(5187))
f5188(a5188) => a5188 + 1
plot(f5188(5188))
f5189(a5189) => a5189 + 1
plot(f5189(5189))
f5190(a5190) => a5190 + 1
plot(f5190(5190))
f5191(a5191) => a5191 + 1
plot(f5191(5191))
f5192(a5192) => a5192 + 1
plot(f5192(5192))
f5193(a5193) => a5193 + 1
plot(f5193(5193))
f5194(a5194) => a5194 + 1
plot(f5194(5194))
f5195(a5195) => a5195 + 1
plot(f5195(5195))
f5196(a5196) => a5196 + 1
plot(f5196(5196))
f5197(a5197) => a5197 + 1
plot(f5197(5197))
f5198(a5198) => a5198 + 1
plot(f5198(5198))
f5199(a5199) => a5199 + 1
plot(f5199(5199))
f5200(a5200) => a5200 + 1
plot(f5200(5200))
f5201(a5201) => a5201 + 1
plot(f5201(5201))
f5202(a5202) => a5202 + 1
plot(f5202(5202))
f5203(a5203) => a5203 + 1
plot(f5203(5203))
f5204(a5204) => a5204 + 1
plot(f5204(5204))
f5205(a5205) => a5205 + 1
plot(f5205(5205))
f5206(a5206) => a5206 + 1
plot(f5206(5206))
f5207(a5207) => a5207 + 1
plot(f5207(5207))
f5208(a5208) => a5208 + 1
plot(f5208(5208))
f5209(a5209) => a5209 + 1
plot(f5209(5209))
f5210(a5210) => a5210 + 1
plot(f5210(5210))
f5211(a5211) => a5211 + 1
plot(f5211(5211))
f5212(a5212) => a5212 + 1
plot(f5212(5212))
f5213(a5213) => a5213 + 1
plot(f5213(5213))
f5214(a5214) => a5214 + 1
plot(f5214(5214))
f5215(a5215) => a5215 + 1
plot(f5215(5215))
f5216(a5216) => a5216 + 1
plot(f5216(5216))
f5217(a5217) => a5217 + 1
plot(f5217(5217))
f5218(a5218) => a5218 + 1
plot(f5218(5218))
f5219(a5219) => a5219 + 1
plot(f5219(5219))
f5220(a5220) => a5220 + 1
plot(f5220(5220))
f5221(a5221) => a5221 + 1
plot(f5221(5221))
f5222(a5222) => a5222 + 1
plot(f5222(5222))
f5223(a5223) => a5223 + 1
plot(f5223(5223))
f5224(a5224) => a5224 + 1
plot(f5224(5224))
f5225(a5225) => a5225 + 1
plot(f5225(5225))
f5226(a5226) => a5226 + 1
plot(f5226(5226))
f5227(a5227) => a5227 + 1
plot(f5227(5227))
f5228(a5228) => a5228 + 1
plot(f5228(5228))
f5229(a5229) => a5229 + 1
plot(f5229(5229))
f5230(a5230) => a5230 + 1
plot(f5230(5230))
f5231(a5231) => a5231 + 1
plot(f5231(5231))
f5232(a5232) => a5232 + 1
plot(f5232(5232))
f5233(a5233) => a5233 + 1
plot(f5233(5233))
f5234(a5234) => a5234 + 1
plot(f5234(5234))
f5235(a5235) => a5235 + 1
plot(f5235(5235))
f5236(a5236) => a5236 + 1
plot(f5236(5236))
f5237(a5237) => a5237 + 1
plot(f5237(5237))
f5238(a5238) => a5238 + 1
plot(f5238(5238))
f5239(a5239) => a5239 + 1
plot(f5239(5239))
f5240(a5240) => a5240 + 1
plot(f5240(5240))
f5241(a5241) => a5241 + 1
plot(f5241(5241))
f5242(a5242) => a5242 + 1
plot(f5242(5242))
f5243(a5243) => a5243 + 1
plot(f5243(5243))
f5244(a5244) => a5244 + 1
plot(f5244(5244))
f5245(a5245) => a5245 + 1
plot(f5245(5245))
f5246(a5246) => a5246 + 1
plot(f5246(5246))
f5247(a5247) => a5247 + 1
plot(f5247(5247))
f5248(a5248) => a5248 + 1
plot(f5248(5248))
f5249(a5249) => a5249 + 1
plot(f5249(5249))
f5250(a5250) => a5250 + 1
plot(f5250(5250))
f5251(a5251) => a5251 + 1
plot(f5251(5251))
f5252(a5252) => a5252 + 1
plot(f5252(5252))
f5253(a5253) => a5253 + 1
plot(f5253(5253))
f5254(a5254) => a5254 + 1
plot(f5254(5254))
f5255(a5255) => a5255 + 1
plot(f5255(5255))
f5256(a5256) => a5256 + 1
plot(f5256(5256))
f5257(a5257) => a5257 + 1
plot(f5257(5257))
f5258(a5258) => a5258 + 1
plot(f5258(5258))
f5259(a5259) => a5259 + 1
plot(f5259(5259))
f5260(a5260) => a5260 + 1
plot(f5260(5260))
f5261(a5261) => a5261 + 1
plot(f5261(5261))
f5262(a5262) => a5262 + 1
plot(f5262(5262))
f5263(a5263) => a5263 + 1
plot(f5263(5263))
f5264(a5264) => a5264 + 1
plot(f5264(5264))
f5265(a5265) => a5265 + 1
plot(f5265(5265))
f5266(a5266) => a5266 + 1
plot(f5266(5266))
f5267(a5267) => a5267 + 1
plot(f5267(5267))
f5268(a5268) => a5268 + 1
plot(f5268(5268))
f5269(a5269) => a5269 + 1
plot(f5269(5269))
f5270(a5270) => a5270 + 1
plot(f5270(5270))
f5271(a5271) => a5271 + 1
plot(f5271(5271))
f5272(a5272) => a5272 + 1
plot(f5272(5272))
f5273(a5273) => a5273 + 1
plot(f5273(5273))
f5274(a5274) => a5274 + 1
plot(f5274(5274))
f5275(a5275) => a5275 + 1
plot(f5275(5275))
f5276(a5276) => a5276 + 1
plot(f5276(5276))
f5277(a5277) => a5277 + 1
plot(f5277(5277))
f5278(a5278) => a5278 + 1
plot(f5278(5278))
f5279(a5279) => a5279 + 1
plot(f5279(5279))
f5280(a5280) => a5280 + 1
plot(f5280(5280))
f5281(a5281) => a5281 + 1
plot(f5281(5281))
f5282(a5282) => a5282 + 1
plot(f5282(5282))
f5283(a5283) => a5283 + 1
plot(f5283(5283))
f5284(a5284) => a5284 + 1
plot(f5284(5284))
f5285(a5285) => a5285 + 1
plot(f5285(5285))
f5286(a5286) => a5286 + 1
plot(f5286(5286))
f5287(a5287) => a5287 + 1
plot(f5287(5287))
f5288(a5288) => a5288 + 1
plot(f5288(5288))
f5289(a5289) => a5289 + 1
plot(f5289(5289))
f5290(a5290) => a5290 + 1
plot(f5290(5290))
f5291(a5291) => a5291 + 1
plot(f5291(5291))
f5292(a5292) => a5292 + 1
plot(f5292(5292))
f5293(a5293) => a5293 + 1
plot(f5293(5293))
f5294(a5294) => a5294 + 1
plot(f5294(5294))
f5295(a5295) => a5295 + 1
plot(f5295(5295))
f5296(a5296) => a5296 + 1
plot(f5296(5296))
f5297(a5297) => a5297 + 1
plot(f5297(5297))
f5298(a5298) => a5298 + 1
plot(f5298(5298))
f5299(a5299) => a5299 + 1
plot(f5299(5299))
f5300(a5300) => a5300 + 1
plot(f5300(5300))
f5301(a5301) => a5301 + 1
plot(f5301(5301))
f5302(a5302) => a5302 + 1
plot(f5302(5302))
f5303(a5303) => a5303 + 1
plot(f5303(5303))
f5304(a5304) => a5304 + 1
plot(f5304(5304))
f5305(a5305) => a5305 + 1
plot(f5305(5305))
f5306(a5306) => a5306 + 1
plot(f5306(5306))
f5307(a5307) => a5307 + 1
plot(f5307(5307))
f5308(a5308) => a5308 + 1
plot(f5308(5308))
f5309(a5309) => a5309 + 1
plot(f5309(5309))
f5310(a5310) => a5310 + 1
plot(f5310(5310))
f5311(a5311) => a5311 + 1
plot(f5311(5311))
f5312(a5312) => a5312 + 1
plot(f5312(5312))
f5313(a5313) => a5313 + 1
plot(f5313(5313))
f5314(a5314) => a5314 + 1
plot(f5314(5314))
f5315(a5315) => a5315 + 1
plot(f5315(5315))
f5316(a5316) => a5316 + 1
plot(f5316(5316))
f5317(a5317) => a5317 + 1
plot(f5317(5317))
f5318(a5318) => a5318 + 1
plot(f5318(5318))
f5319(a5319) => a5319 + 1
plot(f5319(5319))
f5320(a5320) => a5320 + 1
plot(f5320(5320))
f5321(a5321) => a5321 + 1
plot(f5321(5321))
f5322(a5322) => a5322 + 1
plot(f5322(5322))
f5323(a5323) => a5323 + 1
plot(f5323(5323))
f5324(a5324) => a5324 + 1
plot(f5324(5324))
f5325(a5325) => a5325 + 1
plot(f5325(5325))
f5326(a5326) => a5326 + 1
plot(f5326(5326))
f5327(a5327) => a5327 + 1
plot(f5327(5327))
f5328(a5328) => a5328 + 1
plot(f5328(5328))
f5329(a5329) => a5329 + 1
plot(f5329(5329))
f5330(a5330) => a5330 + 1
plot(f5330(5330))
f5331(a5331) => a5331 + 1
plot(f5331(5331))
f5332(a5332) => a5332 + 1
plot(f5332(5332))
f5333(a5333) => a5333 + 1
plot(f5333(5333))
f5334(a5334) => a5334 + 1
plot(f5334(5334))
f5335(a5335) => a5335 + 1
plot(f5335(5335))
f5336(a5336) => a5336 + 1
plot(f5336(5336))
f5337(a5337) => a5337 + 1
plot(f5337(5337))
f5338(a5338) => a5338 + 1
plot(f5338(5338))
f5339(a5339) => a5339 + 1
plot(f5339(5339))
f5340(a5340) => a5340 + 1
plot(f5340(5340))
f5341(a5341) => a5341 + 1
plot(f5341(5341))
f5342(a5342) => a5342 + 1
plot(f5342(5342))
f5343(a5343) => a5343 + 1
plot(f5343(5343))
f5344(a5344) => a5344 + 1
plot(f5344(5344))
f5345(a5345) => a5345 + 1
plot(f5345(5345))
f5346(a5346) => a5346 + 1
plot(f5346(5346))
f5347(a5347) => a5347 + 1
plot(f5347(5347))
f5348(a5348) => a5348 + 1
plot(f5348(5348))
f5349(a5349) => a5349 + 1
plot(f5349(5349))
f5350(a5350) => a5350 + 1
plot(f5350(5350))
f5351(a5351) => a5351 + 1
plot(f5351(5351))
f5352(a5352) => a5352 + 1
plot(f5352(5352))
f5353(a5353) => a5353 + 1
plot(f5353(5353))
f5354(a5354) => a5354 + 1
plot(f5354(5354))
f5355(a5355) => a5355 + 1
plot(f5355(5355))
f5356(a5356) => a5356 + 1
plot(f5356(5356))
f5357(a5357) => a5357 + 1
plot(f5357(5357))
f5358(a5358) => a5358 + 1
plot(f5358(5358))
f5359(a5359) => a5359 + 1
plot(f5359(5359))
f5360(a5360) => a5360 + 1
plot(f5360(5360))
f5361(a5361) => a5361 + 1
plot(f5361(5361))
f5362(a5362) => a5362 + 1
plot(f5362(5362))
f5363(a5363) => a5363 + 1
plot(f5363(5363))
f5364(a5364) => a5364 + 1
plot(f5364(5364))
f5365(a5365) => a5365 + 1
plot(f5365(5365))
f5366(a5366) => a5366 + 1
plot(f5366(5366))
f5367(a5367) => a5367 + 1
plot(f5367(5367))
f5368(a5368) => a5368 + 1
plot(f5368(5368))
f5369(a5369) => a5369 + 1
plot(f5369(5369))
f5370(a5370) => a5370 + 1
plot(f5370(5370))
f5371(a5371) => a5371 + 1
plot(f5371(5371))
f5372(a5372) => a5372 + 1
plot(f5372(5372))
f5373(a5373) => a5373 + 1
plot(f5373(5373))
f5374(a5374) => a5374 + 1
plot(f5374(5374))
f5375(a5375) => a5375 + 1
plot(f5375(5375))
f5376(a5376) => a5376 + 1
plot(f5376(5376))
f5377(a5377) => a5377 + 1
plot(f5377(5377))
f5378(a5378) => a5378 + 1
plot(f5378(5378))
f5379(a5379) => a5379 + 1
plot(f5379(5379))
f5380(a5380) => a5380 + 1
plot(f5380(5380))
f5381(a5381) => a5381 + 1
plot(f5381(5381))
f5382(a5382) => a5382 + 1
plot(f5382(5382))
f5383(a5383) => a5383 + 1
plot(f5383(5383))
f5384(a5384) => a5384 + 1
plot(f5384(5384))
f5385(a5385) => a5385 + 1
plot(f5385(5385))
f5386(a5386) => a5386 + 1
plot(f5386(5386))
f5387(a5387) => a5387 + 1
plot(f5387(5387))
f5388(a5388) => a5388 + 1
plot(f5388(5388))
f5389(a5389) => a5389 + 1
plot(f5389(5389))
f5390(a5390) => a5390 + 1
plot(f5390(5390))
f5391(a5391) => a5391 + 1
plot(f5391(5391))
f5392(a5392) => a5392 + 1
plot(f5392(5392))
f5393(a5393) => a5393 + 1
plot(f5393(5393))
f5394(a5394) => a5394 + 1
plot(f5394(5394))
f5395(a5395) => a5395 + 1
plot(f5395(5395))
f5396(a5396) => a5396 + 1
plot(f5396(5396))
f5397(a5397) => a5397 + 1
plot(f5397(5397))
f5398(a5398) => a5398 + 1
plot(f5398(5398))
f5399(a5399) => a5399 + 1
plot(f5399(5399))
f5400(a5400) => a5400 + 1
plot(f5400(5400))
f5401(a5401) => a5401 + 1
plot(f5401(5401))
f5402(a5402) => a5402 + 1
plot(f5402(5402))
f5403(a5403) => a5403 + 1
plot(f5403(5403))
f5404(a5404) => a5404 + 1
plot(f5404(5404))
f5405(a5405) => a5405 + 1
plot(f5405(5405))
f5406(a5406) => a5406 + 1
plot(f5406(5406))
f5407(a5407) => a5407 + 1
plot(f5407(5407))
f5408(a5408) => a5408 + 1
plot(f5408(5408))
f5409(a5409) => a5409 + 1
plot(f5409(5409))
f5410(a5410) => a5410 + 1
plot(f5410(5410))
f5411(a5411) => a5411 + 1
plot(f5411(5411))
f5412(a5412) => a5412 + 1
plot(f5412(5412))
f5413(a5413) => a5413 + 1
plot(f5413(5413))
f5414(a5414) => a5414 + 1
plot(f5414(5414))
f5415(a5415) => a5415 + 1
plot(f5415(5415))
f5416(a5416) => a5416 + 1
plot(f5416(5416))
f5417(a5417) => a5417 + 1
plot(f5417(5417))
f5418(a5418) => a5418 + 1
plot(f5418(5418))
f5419(a5419) => a5419 + 1
plot(f5419(5419))
f5420(a5420) => a5420 + 1
plot(f5420(5420))
f5421(a5421) => a5421 + 1
plot(f5421(5421))
f5422(a5422) => a5422 + 1
plot(f5422(5422))
f5423(a5423) => a5423 + 1
plot(f5423(5423))
f5424(a5424) => a5424 + 1
plot(f5424(5424))
f5425(a5425) => a5425 + 1
plot(f5425(5425))
f5426(a5426) => a5426 + 1
plot(f5426(5426))
f5427(a5427) => a5427 + 1
plot(f5427(5427))
f5428(a5428) => a5428 + 1
plot(f5428(5428))
f5429(a5429) => a5429 + 1
plot(f5429(5429))
f5430(a5430) => a5430 + 1
plot(f5430(5430))
f5431(a5431) => a5431 + 1
plot(f5431(5431))
f5432(a5432) => a5432 + 1
plot(f5432(5432))
f5433(a5433) => a5433 + 1
plot(f5433(5433))
f5434(a5434) => a5434 + 1
plot(f5434(5434))
f5435(a5435) => a5435 + 1
plot(f5435(5435))
f5436(a5436) => a5436 + 1
plot(f5436(5436))
f5437(a5437) => a5437 + 1
plot(f5437(5437))
f5438(a5438) => a5438 + 1
plot(f5438(5438))
f5439(a5439) => a5439 + 1
plot(f5439(5439))
f5440(a5440) => a5440 + 1
plot(f5440(5440))
f5441(a5441) => a5441 + 1
plot(f5441(5441))
f5442(a5442) => a5442 + 1
plot(f5442(5442))
f5443(a5443) => a5443 + 1
plot(f5443(5443))
f5444(a5444) => a5444 + 1
plot(f5444(5444))
f5445(a5445) => a5445 + 1
plot(f5445(5445))
f5446(a5446) => a5446 + 1
plot(f5446(5446))
f5447(a5447) => a5447 + 1
plot(f5447(5447))
f5448(a5448) => a5448 + 1
plot(f5448(5448))
f5449(a5449) => a5449 + 1
plot(f5449(5449))
f5450(a5450) => a5450 + 1
plot(f5450(5450))
f5451(a5451) => a5451 + 1
plot(f5451(5451))
f5452(a5452) => a5452 + 1
plot(f5452(5452))
f5453(a5453) => a5453 + 1
plot(f5453(5453))
f5454(a5454) => a5454 + 1
plot(f5454(5454))
f5455(a5455) => a5455 + 1
plot(f5455(5455))
f5456(a5456) => a5456 + 1
plot(f5456(5456))
f5457(a5457) => a5457 + 1
plot(f5457(5457))
f5458(a5458) => a5458 + 1
plot(f5458(5458))
f5459(a5459) => a5459 + 1
plot(f5459(5459))
f5460(a5460) => a5460 + 1
plot(f5460(5460))
f5461(a5461) => a5461 + 1
plot(f5461(5461))
f5462(a5462) => a5462 + 1
plot(f5462(5462))
f5463(a5463) => a5463 + 1
plot(f5463(5463))
f5464(a5464) => a5464 + 1
plot(f5464(5464))
f5465(a5465) => a5465 + 1
plot(f5465(5465))
f5466(a5466) => a5466 + 1
plot(f5466(5466))
f5467(a5467) => a5467 + 1
plot(f5467(5467))
f5468(a5468) => a5468 + 1
plot(f5468(5468))
f5469(a5469) => a5469 + 1
plot(f5469(5469))
f5470(a5470) => a5470 + 1
plot(f5470(5470))
f5471(a5471) => a5471 + 1
plot(f5471(5471))
f5472(a5472) => a5472 + 1
plot(f5472(5472))
f5473(a5473) => a5473 + 1
plot(f5473(5473))
f5474(a5474) => a5474 + 1
plot(f5474(5474))
f5475(a5475) => a5475 + 1
plot(f5475(5475))
f5476(a5476) => a5476 + 1
plot(f5476(5476))
f5477(a5477) => a5477 + 1
plot(f5477(5477))
f5478(a5478) => a5478 + 1
plot(f5478(5478))
f5479(a5479) => a5479 + 1
plot(f5479(5479))
f5480(a5480) => a5480 + 1
plot(f5480(5480))
f5481(a5481) => a5481 + 1
plot(f5481(5481))
f5482(a5482) => a5482 + 1
plot(f5482(5482))
f5483(a5483) => a5483 + 1
plot(f5483(5483))
f5484(a5484) => a5484 + 1
plot(f5484(5484))
f5485(a5485) => a5485 + 1
plot(f5485(5485))
f5486(a5486) => a5486 + 1
plot(f5486(5486))
f5487(a5487) => a5487 + 1
plot(f5487(5487))
f5488(a5488) => a5488 + 1
plot(f5488(5488))
f5489(a5489) => a5489 + 1
plot(f5489(5489))
f5490(a5490) => a5490 + 1
plot(f5490(5490))
f5491(a5491) => a5491 + 1
plot(f5491(5491))
f5492(a5492) => a5492 + 1
plot(f5492(5492))
f5493(a5493) => a5493 + 1
plot(f5493(5493))
f5494(a5494) => a5494 + 1
plot(f5494(5494))
f5495(a5495) => a5495 + 1
plot(f5495(5495))
f5496(a5496) => a5496 + 1
plot(f5496(5496))
f5497(a5497) => a5497 + 1
plot(f5497(5497))
f5498(a5498) => a5498 + 1
plot(f5498(5498))
f5499(a5499) => a5499 + 1
plot(f5499(5499))
f5500(a5500) => a5500 + 1
plot(f5500(5500))
f5501(a5501) => a5501 + 1
plot(f5501(5501))
f5502(a5502) => a5502 + 1
plot(f5502(5502))
f5503(a5503) => a5503 + 1
plot(f5503(5503))
f5504(a5504) => a5504 + 1
plot(f5504(5504))
f5505(a5505) => a5505 + 1
plot(f5505(5505))
f5506(a5506) => a5506 + 1
plot(f5506(5506))
f5507(a5507) => a5507 + 1
plot(f5507(5507))
f5508(a5508) => a5508 + 1
plot(f5508(5508))
f5509(a5509) => a5509 + 1
plot(f5509(5509))
f5510(a5510) => a5510 + 1
plot(f5510(5510))
f5511(a5511) => a5511 + 1
plot(f5511(5511))
f5512(a5512) => a5512 + 1
plot(f5512(5512))
f5513(a5513) => a5513 + 1
plot(f5513(5513))
f5514(a5514) => a5514 + 1
plot(f5514(5514))
f5515(a5515) => a5515 + 1
plot(f5515(5515))
f5516(a5516) => a5516 + 1
plot(f5516(5516))
f5517(a5517) => a5517 + 1
plot(f5517(5517))
f5518(a5518) => a5518 + 1
plot(f5518(5518))
f5519(a5519) => a5519 + 1
plot(f5519(5519))
f5520(a5520) => a5520 + 1
plot(f5520(5520))
f5521(a5521) => a5521 + 1
plot(f5521(5521))
f5522(a5522) => a5522 + 1
plot(f5522(5522))
f5523(a5523) => a5523 + 1
plot(f5523(5523))
f5524(a5524) => a5524 + 1
plot(f5524(5524))
f5525(a5525) => a5525 + 1
plot(f5525(5525))
f5526(a5526) => a5526 + 1
plot(f5526(5526))
f5527(a5527) => a5527 + 1
plot(f5527(5527))
f5528(a5528) => a5528 + 1
plot(f5528(5528))
f5529(a5529) => a5529 + 1
plot(f5529(5529))
f5530(a5530) => a5530 + 1
plot(f5530(5530))
f5531(a5531) => a5531 + 1
plot(f5531(5531))
f5532(a5532) => a5532 + 1
plot(f5532(5532))
f5533(a5533) => a5533 + 1
plot(f5533(5533))
f5534(a5534) => a5534 + 1
plot(f5534(5534))
f5535(a5535) => a5535 + 1
plot(f5535(5535))
f5536(a5536) => a5536 + 1
plot(f5536(5536))
f5537(a5537) => a5537 + 1
plot(f5537(5537))
f5538(a5538) => a5538 + 1
plot(f5538(5538))
f5539(a5539) => a5539 + 1
plot(f5539(5539))
f5540(a5540) => a5540 + 1
plot(f5540(5540))
f5541(a5541) => a5541 + 1
plot(f5541(5541))
f5542(a5542) => a5542 + 1
plot(f5542(5542))
f5543(a5543) => a5543 + 1
plot(f5543(5543))
f5544(a5544) => a5544 + 1
plot(f5544(5544))
f5545(a5545) => a5545 + 1
plot(f5545(5545))
f5546(a5546) => a5546 + 1
plot(f5546(5546))
f5547(a5547) => a5547 + 1
plot(f5547(5547))
f5548(a5548) => a5548 + 1
plot(f5548(5548))
f5549(a5549) => a5549 + 1
plot(f5549(5549))
f5550(a5550) => a5550 + 1
plot(f5550(5550))
f5551(a5551) => a5551 + 1
plot(f5551(5551))
f5552(a5552) => a5552 + 1
plot(f5552(5552))
f5553(a5553) => a5553 + 1
plot(f5553(5553))
f5554(a5554) => a5554 + 1
plot(f5554(5554))
f5555(a5555) => a5555 + 1
plot(f5555(5555))
f5556(a5556) => a5556 + 1
plot(f5556(5556))
f5557(a5557) => a5557 + 1
plot(f5557(5557))
f5558(a5558) => a5558 + 1
plot(f5558(5558))
f5559(a5559) => a5559 + 1
plot(f5559(5559))
f5560(a5560) => a5560 + 1
plot(f5560(5560))
f5561(a5561) => a5561 + 1
plot(f5561(5561))
f5562(a5562) => a5562 + 1
plot(f5562(5562))
f5563(a5563) => a5563 + 1
plot(f5563(5563))
f5564(a5564) => a5564 + 1
plot(f5564(5564))
f5565(a5565) => a5565 + 1
plot(f5565(5565))
f5566(a5566) => a5566 + 1
plot(f5566(5566))
f5567(a5567) => a5567 + 1
plot(f5567(5567))
f5568(a5568) => a5568 + 1
plot(f5568(5568))
f5569(a5569) => a5569 + 1
plot(f5569(5569))
f5570(a5570) => a5570 + 1
plot(f5570(5570))
f5571(a5571) => a5571 + 1
plot(f5571(5571))
f5572(a5572) => a5572 + 1
plot(f5572(5572))
f5573(a5573) => a5573 + 1
plot(f5573(5573))
f5574(a5574) => a5574 + 1
plot(f5574(5574))
f5575(a5575) => a5575 + 1
plot(f5575(5575))
f5576(a5576) => a5576 + 1
plot(f5576(5576))
f5577(a5577) => a5577 + 1
plot(f5577(5577))
f5578(a5578) => a5578 + 1
plot(f5578(5578))
f5579(a5579) => a5579 + 1
plot(f5579(5579))
f5580(a5580) => a5580 + 1
plot(f5580(5580))
f5581(a5581) => a5581 + 1
plot(f5581(5581))
f5582(a5582) => a5582 + 1
plot(f5582(5582))
f5583(a5583) => a5583 + 1
plot(f5583(5583))
f5584(a5584) => a5584 + 1
plot(f5584(5584))
f5585(a5585) => a5585 + 1
plot(f5585(5585))
f5586(a5586) => a5586 + 1
plot(f5586(5586))
f5587(a5587) => a5587 + 1
plot(f5587(5587))
f5588(a5588) => a5588 + 1
plot(f5588(5588))
f5589(a5589) => a5589 + 1
plot(f5589(5589))
f5590(a5590) => a5590 + 1
plot(f5590(5590))
f5591(a5591) => a5591 + 1
plot(f5591(5591))
f5592(a5592) => a5592 + 1
plot(f5592(5592))
f5593(a5593) => a5593 + 1
plot(f5593(5593))
f5594(a5594) => a5594 + 1
plot(f5594(5594))
f5595(a5595) => a5595 + 1
plot(f5595(5595))
f5596(a5596) => a5596 + 1
plot(f5596(5596))
f5597(a5597) => a5597 + 1
plot(f5597(5597))
f5598(a5598) => a5598 + 1
plot(f5598(5598))
f5599(a5599) => a5599 + 1
plot(f5599(5599))
f5600(a5600) => a5600 + 1
plot(f5600(5600))
f5601(a5601) => a5601 + 1
plot(f5601(5601))
f5602(a5602) => a5602 + 1
plot(f5602(5602))
f5603(a5603) => a5603 + 1
plot(f5603(5603))
f5604(a5604) => a5604 + 1
plot(f5604(5604))
f5605(a5605) => a5605 + 1
plot(f5605(5605))
f5606(a5606) => a5606 + 1
plot(f5606(5606))
f5607(a5607) => a5607 + 1
plot(f5607(5607))
f5608(a5608) => a5608 + 1
plot(f5608(5608))
f5609(a5609) => a5609 + 1
plot(f5609(5609))
f5610(a5610) => a5610 + 1
plot(f5610(5610))
f5611(a5611) => a5611 + 1
plot(f5611(5611))
f5612(a5612) => a5612 + 1
plot(f5612(5612))
f5613(a5613) => a5613 + 1
plot(f5613(5613))
f5614(a5614) => a5614 + 1
plot(f5614(5614))
f5615(a5615) => a5615 + 1
plot(f5615(5615))
f5616(a5616) => a5616 + 1
plot(f5616(5616))
f5617(a5617) => a5617 + 1
plot(f5617(5617))
f5618(a5618) => a5618 + 1
plot(f5618(5618))
f5619(a5619) => a5619 + 1
plot(f5619(5619))
f5620(a5620) => a5620 + 1
plot(f5620(5620))
f5621(a5621) => a5621 + 1
plot(f5621(5621))
f5622(a5622) => a5622 + 1
plot(f5622(5622))
f5623(a5623) => a5623 + 1
plot(f5623(5623))
f5624(a5624) => a5624 + 1
plot(f5624(5624))
f5625(a5625) => a5625 + 1
plot(f5625(5625))
f5626(a5626) => a5626 + 1
plot(f5626(5626))
f5627(a5627) => a5627 + 1
plot(f5627(5627))
f5628(a5628) => a5628 + 1
plot(f5628(5628))
f5629(a5629) => a5629 + 1
plot(f5629(5629))
f5630(a5630) => a5630 + 1
plot(f5630(5630))
f5631(a5631) => a5631 + 1
plot(f5631(5631))
f5632(a5632) => a5632 + 1
plot(f5632(5632))
f5633(a5633) => a5633 + 1
plot(f5633(5633))
f5634(a5634) => a5634 + 1
plot(f5634(5634))
f5635(a5635) => a5635 + 1
plot(f5635(5635))
f5636(a5636) => a5636 + 1
plot(f5636(5636))
f5637(a5637) => a5637 + 1
plot(f5637(5637))
f5638(a5638) => a5638 + 1
plot(f5638(5638))
f5639(a5639) => a5639 + 1
plot(f5639(5639))
f5640(a5640) => a5640 + 1
plot(f5640(5640))
f5641(a5641) => a5641 + 1
plot(f5641(5641))
f5642(a5642) => a5642 + 1
plot(f5642(5642))
f5643(a5643) => a5643 + 1
plot(f5643(5643))
f5644(a5644) => a5644 + 1
plot(f5644(5644))
f5645(a5645) => a5645 + 1
plot(f5645(5645))
f5646(a5646) => a5646 + 1
plot(f5646(5646))
f5647(a5647) => a5647 + 1
plot(f5647(5647))
f5648(a5648) => a5648 + 1
plot(f5648(5648))
f5649(a5649) => a5649 + 1
plot(f5649(5649))
f5650(a5650) => a5650 + 1
plot(f5650(5650))
f5651(a5651) => a5651 + 1
plot(f5651(5651))
f5652(a5652) => a5652 + 1
plot(f5652(5652))
f5653(a5653) => a5653 + 1
plot(f5653(5653))
f5654(a5654) => a5654 + 1
plot(f5654(5654))
f5655(a5655) => a5655 + 1
plot(f5655(5655))
f5656(a5656) => a5656 + 1
plot(f5656(5656))
f5657(a5657) => a5657 + 1
plot(f5657(5657))
f5658(a5658) => a5658 + 1
plot(f5658(5658))
f5659(a5659) => a5659 + 1
plot(f5659(5659))
f5660(a5660) => a5660 + 1
plot(f5660(5660))
f5661(a5661) => a5661 + 1
plot(f5661(5661))
f5662(a5662) => a5662 + 1
plot(f5662(5662))
f5663(a5663) => a5663 + 1
plot(f5663(5663))
f5664(a5664) => a5664 + 1
plot(f5664(5664))
f5665(a5665) => a5665 + 1
plot(f5665(5665))
f5666(a5666) => a5666 + 1
plot(f5666(5666))
f5667(a5667) => a5667 + 1
plot(f5667(5667))
f5668(a5668) => a5668 + 1
plot(f5668(5668))
f5669(a5669) => a5669 + 1
plot(f5669(5669))
f5670(a5670) => a5670 + 1
plot(f5670(5670))
f5671(a5671) => a5671 + 1
plot(f5671(5671))
f5672(a5672) => a5672 + 1
plot(f5672(5672))
f5673(a5673) => a5673 + 1
plot(f5673(5673))
f5674(a5674) => a5674 + 1
plot(f5674(5674))
f5675(a5675) => a5675 + 1
plot(f5675(5675))
f5676(a5676) => a5676 + 1
plot(f5676(5676))
f5677(a5677) => a5677 + 1
plot(f5677(5677))
f5678(a5678) => a5678 + 1
plot(f5678(5678))
f5679(a5679) => a5679 + 1
plot(f5679(5679))
f5680(a5680) => a5680 + 1
plot(f5680(5680))
f5681(a5681) => a5681 + 1
plot(f5681(5681))
f5682(a5682) => a5682 + 1
plot(f5682(5682))
f5683(a5683) => a5683 + 1
plot(f5683(5683))
f5684(a5684) => a5684 + 1
plot(f5684(5684))
f5685(a5685) => a5685 + 1
plot(f5685(5685))
f5686(a5686) => a5686 + 1
plot(f5686(5686))
f5687(a5687) => a5687 + 1
plot(f5687(5687))
f5688(a5688) => a5688 + 1
plot(f5688(5688))
f5689(a5689) => a5689 + 1
plot(f5689(5689))
f5690(a5690) => a5690 + 1
plot(f5690(5690))
f5691(a5691) => a5691 + 1
plot(f5691(5691))
f5692(a5692) => a5692 + 1
plot(f5692(5692))
f5693(a5693) => a5693 + 1
plot(f5693(5693))
f5694(a5694) => a5694 + 1
plot(f5694(5694))
f5695(a5695) => a5695 + 1
plot(f5695(5695))
f5696(a5696) => a5696 + 1
plot(f5696(5696))
f5697(a5697) => a5697 + 1
plot(f5697(5697))
f5698(a5698) => a5698 + 1
plot(f5698(5698))
f5699(a5699) => a5699 + 1
plot(f5699(5699))
f5700(a5700) => a5700 + 1
plot(f5700(5700))
f5701(a5701) => a5701 + 1
plot(f5701(5701))
f5702(a5702) => a5702 + 1
plot(f5702(5702))
f5703(a5703) => a5703 + 1
plot(f5703(5703))
f5704(a5704) => a5704 + 1
plot(f5704(5704))
f5705(a5705) => a5705 + 1
plot(f5705(5705))
f5706(a5706) => a5706 + 1
plot(f5706(5706))
f5707(a5707) => a5707 + 1
plot(f5707(5707))
f5708(a5708) => a5708 + 1
plot(f5708(5708))
f5709(a5709) => a5709 + 1
plot(f5709(5709))
f5710(a5710) => a5710 + 1
plot(f5710(5710))
f5711(a5711) => a5711 + 1
plot(f5711(5711))
f5712(a5712) => a5712 + 1
plot(f5712(5712))
f5713(a5713) => a5713 + 1
plot(f5713(5713))
f5714(a5714) => a5714 + 1
plot(f5714(5714))
f5715(a5715) => a5715 + 1
plot(f5715(5715))
f5716(a5716) => a5716 + 1
plot(f5716(5716))
f5717(a5717) => a5717 + 1
plot(f5717(5717))
f5718(a5718) => a5718 + 1
plot(f5718(5718))
f5719(a5719) => a5719 + 1
plot(f5719(5719))
f5720(a5720) => a5720 + 1
plot(f5720(5720))
f5721(a5721) => a5721 + 1
plot(f5721(5721))
f5722(a5722) => a5722 + 1
plot(f5722(5722))
f5723(a5723) => a5723 + 1
plot(f5723(5723))
f5724(a5724) => a5724 + 1
plot(f5724(5724))
f5725(a5725) => a5725 + 1
plot(f5725(5725))
f5726(a5726) => a5726 + 1
plot(f5726(5726))
f5727(a5727) => a5727 + 1
plot(f5727(5727))
f5728(a5728) => a5728 + 1
plot(f5728(5728))
f5729(a5729) => a5729 + 1
plot(f5729(5729))
f5730(a5730) => a5730 + 1
plot(f5730(5730))
f5731(a5731) => a5731 + 1
plot(f5731(5731))
f5732(a5732) => a5732 + 1
plot(f5732(5732))
f5733(a5733) => a5733 + 1
plot(f5733(5733))
f5734(a5734) => a5734 + 1
plot(f5734(5734))
f5735(a5735) => a5735 + 1
plot(f5735(5735))
f5736(a5736) => a5736 + 1
plot(f5736(5736))
f5737(a5737) => a5737 + 1
plot(f5737(5737))
f5738(a5738) => a5738 + 1
plot(f5738(5738))
f5739(a5739) => a5739 + 1
plot(f5739(5739))
f5740(a5740) => a5740 + 1
plot(f5740(5740))
f5741(a5741) => a5741 + 1
plot(f5741(5741))
f5742(a5742) => a5742 + 1
plot(f5742(5742))
f5743(a5743) => a5743 + 1
plot(f5743(5743))
f5744(a5744) => a5744 + 1
plot(f5744(5744))
f5745(a5745) => a5745 + 1
plot(f5745(5745))
f5746(a5746) => a5746 + 1
plot(f5746(5746))
f5747(a5747) => a5747 + 1
plot(f5747(5747))
f5748(a5748) => a5748 + 1
plot(f5748(5748))
f5749(a5749) => a5749 + 1
plot(f5749(5749))
f5750(a5750) => a5750 + 1
plot(f5750(5750))
f5751(a5751) => a5751 + 1
plot(f5751(5751))
f5752(a5752) => a5752 + 1
plot(f5752(5752))
f5753(a5753) => a5753 + 1
plot(f5753(5753))
f5754(a5754) => a5754 + 1
plot(f5754(5754))
f5755(a5755) => a5755 + 1
plot(f5755(5755))
f5756(a5756) => a5756 + 1
plot(f5756(5756))
f5757(a5757) => a5757 + 1
plot(f5757(5757))
f5758(a5758) => a5758 + 1
plot(f5758(5758))
f5759(a5759) => a5759 + 1
plot(f5759(5759))
f5760(a5760) => a5760 + 1
plot(f5760(5760))
f5761(a5761) => a5761 + 1
plot(f5761(5761))
f5762(a5762) => a5762 + 1
plot(f5762(5762))
f5763(a5763) => a5763 + 1
plot(f5763(5763))
f5764(a5764) => a5764 + 1
plot(f5764(5764))
f5765(a5765) => a5765 + 1
plot(f5765(5765))
f5766(a5766) => a5766 + 1
plot(f5766(5766))
f5767(a5767) => a5767 + 1
plot(f5767(5767))
f5768(a5768) => a5768 + 1
plot(f5768(5768))
f5769(a5769) => a5769 + 1
plot(f5769(5769))
f5770(a5770) => a5770 + 1
plot(f5770(5770))
f5771(a5771) => a5771 + 1
plot(f5771(5771))
f5772(a5772) => a5772 + 1
plot(f5772(5772))
f5773(a5773) => a5773 + 1
plot(f5773(5773))
f5774(a5774) => a5774 + 1
plot(f5774(5774))
f5775(a5775) => a5775 + 1
plot(f5775(5775))
f5776(a5776) => a5776 + 1
plot(f5776(5776))
f5777(a5777) => a5777 + 1
plot(f5777(5777))
f5778(a5778) => a5778 + 1
plot(f5778(5778))
f5779(a5779) => a5779 + 1
plot(f5779(5779))
f5780(a5780) => a5780 + 1
plot(f5780(5780))
f5781(a5781) => a5781 + 1
plot(f5781(5781))
f5782(a5782) => a5782 + 1
plot(f5782(5782))
f5783(a5783) => a5783 + 1
plot(f5783(5783))
f5784(a5784) => a5784 + 1
plot(f5784(5784))
f5785(a5785) => a5785 + 1
plot(f5785(5785))
f5786(a5786) => a5786 + 1
plot(f5786(5786))
f5787(a5787) => a5787 + 1
plot(f5787(5787))
f5788(a5788) => a5788 + 1
plot(f5788(5788))
f5789(a5789) => a5789 + 1
plot(f5789(5789))
f5790(a5790) => a5790 + 1
plot(f5790(5790))
f5791(a5791) => a5791 + 1
plot(f5791(5791))
f5792(a5792) => a5792 + 1
plot(f5792(5792))
f5793(a5793) => a5793 + 1
plot(f5793(5793))
f5794(a5794) => a5794 + 1
plot(f5794(5794))
f5795(a5795) => a5795 + 1
plot(f5795(5795))
f5796(a5796) => a5796 + 1
plot(f5796(5796))
f5797(a5797) => a5797 + 1
plot(f5797(5797))
f5798(a5798) => a5798 + 1
plot(f5798(5798))
f5799(a5799) => a5799 + 1
plot(f5799(5799))
f5800(a5800) => a5800 + 1
plot(f5800(5800))
f5801(a5801) => a5801 + 1
plot(f5801(5801))
f5802(a5802) => a5802 + 1
plot(f5802(5802))
f5803(a5803) => a5803 + 1
plot(f5803(5803))
f5804(a5804) => a5804 + 1
plot(f5804(5804))
f5805(a5805) => a5805 + 1
plot(f5805(5805))
f5806(a5806) => a5806 + 1
plot(f5806(5806))
f5807(a5807) => a5807 + 1
plot(f5807(5807))
f5808(a5808) => a5808 + 1
plot(f5808(5808))
f5809(a5809) => a5809 + 1
plot(f5809(5809))
f5810(a5810) => a5810 + 1
plot(f5810(5810))
f5811(a5811) => a5811 + 1
plot(f5811(5811))
f5812(a5812) => a5812 + 1
plot(f5812(5812))
f5813(a5813) => a5813 + 1
plot(f5813(5813))
f5814(a5814) => a5814 + 1
plot(f5814(5814))
f5815(a5815) => a5815 + 1
plot(f5815(5815))
f5816(a5816) => a5816 + 1
plot(f5816(5816))
f5817(a5817) => a5817 + 1
plot(f5817(5817))
f5818(a5818) => a5818 + 1
plot(f5818(5818))
f5819(a5819) => a5819 + 1
plot(f5819(5819))
f5820(a5820) => a5820 + 1
plot(f5820(5820))
f5821(a5821) => a5821 + 1
plot(f5821(5821))
f5822(a5822) => a5822 + 1
plot(f5822(5822))
f5823(a5823) => a5823 + 1
plot(f5823(5823))
f5824(a5824) => a5824 + 1
plot(f5824(5824))
f5825(a5825) => a5825 + 1
plot(f5825(5825))
f5826(a5826) => a5826 + 1
plot(f5826(5826))
f5827(a5827) => a5827 + 1
plot(f5827(5827))
f5828(a5828) => a5828 + 1
plot(f5828(5828))
f5829(a5829) => a5829 + 1
plot(f5829(5829))
f5830(a5830) => a5830 + 1
plot(f5830(5830))
f5831(a5831) => a5831 + 1
plot(f5831(5831))
f5832(a5832) => a5832 + 1
plot(f5832(5832))
f5833(a5833) => a5833 + 1
plot(f5833(5833))
f5834(a5834) => a5834 + 1
plot(f5834(5834))
f5835(a5835) => a5835 + 1
plot(f5835(5835))
f5836(a5836) => a5836 + 1
plot(f5836(5836))
f5837(a5837) => a5837 + 1
plot(f5837(5837))
f5838(a5838) => a5838 + 1
plot(f5838(5838))
f5839(a5839) => a5839 + 1
plot(f5839(5839))
f5840(a5840) => a5840 + 1
plot(f5840(5840))
f5841(a5841) => a5841 + 1
plot(f5841(5841))
f5842(a5842) => a5842 + 1
plot(f5842(5842))
f5843(a5843) => a5843 + 1
plot(f5843(5843))
f5844(a5844) => a5844 + 1
plot(f5844(5844))
f5845(a5845) => a5845 + 1
plot(f5845(5845))
f5846(a5846) => a5846 + 1
plot(f5846(5846))
f5847(a5847) => a5847 + 1
plot(f5847(5847))
f5848(a5848) => a5848 + 1
plot(f5848(5848))
f5849(a5849) => a5849 + 1
plot(f5849(5849))
f5850(a5850) => a5850 + 1
plot(f5850(5850))
f5851(a5851) => a5851 + 1
plot(f5851(5851))
f5852(a5852) => a5852 + 1
plot(f5852(5852))
f5853(a5853) => a5853 + 1
plot(f5853(5853))
f5854(a5854) => a5854 + 1
plot(f5854(5854))
f5855(a5855) => a5855 + 1
plot(f5855(5855))
f5856(a5856) => a5856 + 1
plot(f5856(5856))
f5857(a5857) => a5857 + 1
plot(f5857(5857))
f5858(a5858) => a5858 + 1
plot(f5858(5858))
f5859(a5859) => a5859 + 1
plot(f5859(5859))
f5860(a5860) => a5860 + 1
plot(f5860(5860))
f5861(a5861) => a5861 + 1
plot(f5861(5861))
f5862(a5862) => a5862 + 1
plot(f5862(5862))
f5863(a5863) => a5863 + 1
plot(f5863(5863))
f5864(a5864) => a5864 + 1
plot(f5864(5864))
f5865(a5865) => a5865 + 1
plot(f5865(5865))
f5866(a5866) => a5866 + 1
plot(f5866(5866))
f5867(a5867) => a5867 + 1
plot(f5867(5867))
f5868(a5868) => a5868 + 1
plot(f5868(5868))
f5869(a5869) => a5869 + 1
plot(f5869(5869))
f5870(a5870) => a5870 + 1
plot(f5870(5870))
f5871(a5871) => a5871 + 1
plot(f5871(5871))
f5872(a5872) => a5872 + 1
plot(f5872(5872))
f5873(a5873) => a5873 + 1
plot(f5873(5873))
f5874(a5874) => a5874 + 1
plot(f5874(5874))
f5875(a5875) => a5875 + 1
plot(f5875(5875))
f5876(a5876) => a5876 + 1
plot(f5876(5876))
f5877(a5877) => a5877 + 1
plot(f5877(5877))
f5878(a5878) => a5878 + 1
plot(f5878(5878))
f5879(a5879) => a5879 + 1
plot(f5879(5879))
f5880(a5880) => a5880 + 1
plot(f5880(5880))
f5881(a5881) => a5881 + 1
plot(f5881(5881))
f5882(a5882) => a5882 + 1
plot(f5882(5882))
f5883(a5883) => a5883 + 1
plot(f5883(5883))
f5884(a5884) => a5884 + 1
plot(f5884(5884))
f5885(a5885) => a5885 + 1
plot(f5885(5885))
f5886(a5886) => a5886 + 1
plot(f5886(5886))
f5887(a5887) => a5887 + 1
plot(f5887(5887))
f5888(a5888) => a5888 + 1
plot(f5888(5888))
f5889(a5889) => a5889 + 1
plot(f5889(5889))
f5890(a5890) => a5890 + 1
plot(f5890(5890))
f5891(a5891) => a5891 + 1
plot(f5891(5891))
f5892(a5892) => a5892 + 1
plot(f5892(5892))
f5893(a5893) => a5893 + 1
plot(f5893(5893))
f5894(a5894) => a5894 + 1
plot(f5894(5894))
f5895(a5895) => a5895 + 1
plot(f5895(5895))
f5896(a5896) => a5896 + 1
plot(f5896(5896))
f5897(a5897) => a5897 + 1
plot(f5897(5897))
f5898(a5898) => a5898 + 1
plot(f5898(5898))
f5899(a5899) => a5899 + 1
plot(f5899(5899))
f5900(a5900) => a5900 + 1
plot(f5900(5900))
f5901(a5901) => a5901 + 1
plot(f5901(5901))
f5902(a5902) => a5902 + 1
plot(f5902(5902))
f5903(a5903) => a5903 + 1
plot(f5903(5903))
f5904(a5904) => a5904 + 1
plot(f5904(5904))
f5905(a5905) => a5905 + 1
plot(f5905(5905))
f5906(a5906) => a5906 + 1
plot(f5906(5906))
f5907(a5907) => a5907 + 1
plot(f5907(5907))
f5908(a5908) => a5908 + 1
plot(f5908(5908))
f5909(a5909) => a5909 + 1
plot(f5909(5909))
f5910(a5910) => a5910 + 1
plot(f5910(5910))
f5911(a5911) => a5911 + 1
plot(f5911(5911))
f5912(a5912) => a5912 + 1
plot(f5912(5912))
f5913(a5913) => a5913 + 1
plot(f5913(5913))
f5914(a5914) => a5914 + 1
plot(f5914(5914))
f5915(a5915) => a5915 + 1
plot(f5915(5915))
f5916(a5916) => a5916 + 1
plot(f5916(5916))
f5917(a5917) => a5917 + 1
plot(f5917(5917))
f5918(a5918) => a5918 + 1
plot(f5918(5918))
f5919(a5919) => a5919 + 1
plot(f5919(5919))
f5920(a5920) => a5920 + 1
plot(f5920(5920))
f5921(a5921) => a5921 + 1
plot(f5921(5921))
f5922(a5922) => a5922 + 1
plot(f5922(5922))
f5923(a5923) => a5923 + 1
plot(f5923(5923))
f5924(a5924) => a5924 + 1
plot(f5924(5924))
f5925(a5925) => a5925 + 1
plot(f5925(5925))
f5926(a5926) => a5926 + 1
plot(f5926(5926))
f5927(a5927) => a5927 + 1
plot(f5927(5927))
f5928(a5928) => a5928 + 1
plot(f5928(5928))
f5929(a5929) => a5929 + 1
plot(f5929(5929))
f5930(a5930) => a5930 + 1
plot(f5930(5930))
f5931(a5931) => a5931 + 1
plot(f5931(5931))
f5932(a5932) => a5932 + 1
plot(f5932(5932))
f5933(a5933) => a5933 + 1
plot(f5933(5933))
f5934(a5934) => a5934 + 1
plot(f5934(5934))
f5935(a5935) => a5935 + 1
plot(f5935(5935))
f5936(a5936) => a5936 + 1
plot(f5936(5936))
f5937(a5937) => a5937 + 1
plot(f5937(5937))
f5938(a5938) => a5938 + 1
plot(f5938(5938))
f5939(a5939) => a5939 + 1
plot(f5939(5939))
f5940(a5940) => a5940 + 1
plot(f5940(5940))
f5941(a5941) => a5941 + 1
plot(f5941(5941))
f5942(a5942) => a5942 + 1
plot(f5942(5942))
f5943(a5943) => a5943 + 1
plot(f5943(5943))
f5944(a5944) => a5944 + 1
plot(f5944(5944))
f5945(a5945) => a5945 + 1
plot(f5945(5945))
f5946(a5946) => a5946 + 1
plot(f5946(5946))
f5947(a5947) => a5947 + 1
plot(f5947(5947))
f5948(a5948) => a5948 + 1
plot(f5948(5948))
f5949(a5949) => a5949 + 1
plot(f5949(5949))
f5950(a5950) => a5950 + 1
plot(f5950(5950))
f5951(a5951) => a5951 + 1
plot(f5951(5951))
f5952(a5952) => a5952 + 1
plot(f5952(5952))
f5953(a5953) => a5953 + 1
plot(f5953(5953))
f5954(a5954) => a5954 + 1
plot(f5954(5954))
f5955(a5955) => a5955 + 1
plot(f5955(5955))
f5956(a5956) => a5956 + 1
plot(f5956(5956))
f5957(a5957) => a5957 + 1
plot(f5957(5957))
f5958(a5958) => a5958 + 1
plot(f5958(5958))
f5959(a5959) => a5959 + 1
plot(f5959(5959))
f5960(a5960) => a5960 + 1
plot(f5960(5960))
f5961(a5961) => a5961 + 1
plot(f5961(5961))
f5962(a5962) => a5962 + 1
plot(f5962(5962))
f5963(a5963) => a5963 + 1
plot(f5963(5963))
f5964(a5964) => a5964 + 1
plot(f5964(5964))
f5965(a5965) => a5965 + 1
plot(f5965(5965))
f5966(a5966) => a5966 + 1
plot(f5966(5966))
f5967(a5967) => a5967 + 1
plot(f5967(5967))
f5968(a5968) => a5968 + 1
plot(f5968(5968))
f5969(a5969) => a5969 + 1
plot(f5969(5969))
f5970(a5970) => a5970 + 1
plot(f5970(5970))
f5971(a5971) => a5971 + 1
plot(f5971(5971))
f5972(a5972) => a5972 + 1
plot(f5972(5972))
f5973(a5973) => a5973 + 1
plot(f5973(5973))
f5974(a5974) => a5974 + 1
plot(f5974(5974))
f5975(a5975) => a5975 + 1
plot(f5975(5975))
f5976(a5976) => a5976 + 1
plot(f5976(5976))
f5977(a5977) => a5977 + 1
plot(f5977(5977))
f5978(a5978) => a5978 + 1
plot(f5978(5978))
f5979(a5979) => a5979 + 1
plot(f5979(5979))
f5980(a5980) => a5980 + 1
plot(f5980(5980))
f5981(a5981) => a5981 + 1
plot(f5981(5981))
f5982(a5982) => a5982 + 1
plot(f5982(5982))
f5983(a5983) => a5983 + 1
plot(f5983(5983))
f5984(a5984) => a5984 + 1
plot(f5984(5984))
f5985(a5985) => a5985 + 1
plot(f5985(5985))
f5986(a5986) => a5986 + 1
plot(f5986(5986))
f5987(a5987) => a5987 + 1
plot(f5987(5987))
f5988(a5988) => a5988 + 1
plot(f5988(5988))
f5989(a5989) => a5989 + 1
plot(f5989(5989))
f5990(a5990) => a5990 + 1
plot(f5990(5990))
f5991(a5991) => a5991 + 1
plot(f5991(5991))
f5992(a5992) => a5992 + 1
plot(f5992(5992))
f5993(a5993) => a5993 + 1
plot(f5993(5993))
f5994(a5994) => a5994 + 1
plot(f5994(5994))
f5995(a5995) => a5995 + 1
plot(f5995(5995))
f5996(a5996) => a5996 + 1
plot(f5996(5996))
f5997(a5997) => a5997 + 1
plot(f5997(5997))
f5998(a5998) => a5998 + 1
plot(f5998(5998))
f5999(a5999) => a5999 + 1
plot(f5999(5999))
f6000(a6000) => a6000 + 1
plot(f6000(6000))
f6001(a6001) => a6001 + 1
plot(f6001(6001))
f6002(a6002) => a6002 + 1
plot(f6002(6002))
f6003(a6003) => a6003 + 1
plot(f6003(6003))
f6004(a6004) => a6004 + 1
plot(f6004(6004))
f6005(a6005) => a6005 + 1
plot(f6005(6005))
f6006(a6006) => a6006 + 1
plot(f6006(6006))
f6007(a6007) => a6007 + 1
plot(f6007(6007))
f6008(a6008) => a6008 + 1
plot(f6008(6008))
f6009(a6009) => a6009 + 1
plot(f6009(6009))
f6010(a6010) => a6010 + 1
plot(f6010(6010))
f6011(a6011) => a6011 + 1
plot(f6011(6011))
f6012(a6012) => a6012 + 1
plot(f6012(6012))
f6013(a6013) => a6013 + 1
plot(f6013(6013))
f6014(a6014) => a6014 + 1
plot(f6014(6014))
f6015(a6015) => a6015 + 1
plot(f6015(6015))
f6016(a6016) => a6016 + 1
plot(f6016(6016))
f6017(a6017) => a6017 + 1
plot(f6017(6017))
f6018(a6018) => a6018 + 1
plot(f6018(6018))
f6019(a6019) => a6019 + 1
plot(f6019(6019))
f6020(a6020) => a6020 + 1
plot(f6020(6020))
f6021(a6021) => a6021 + 1
plot(f6021(6021))
f6022(a6022) => a6022 + 1
plot(f6022(6022))
f6023(a6023) => a6023 + 1
plot(f6023(6023))
f6024(a6024) => a6024 + 1
plot(f6024(6024))
f6025(a6025) => a6025 + 1
plot(f6025(6025))
f6026(a6026) => a6026 + 1
plot(f6026(6026))
f6027(a6027) => a6027 + 1
plot(f6027(6027))
f6028(a6028) => a6028 + 1
plot(f6028(6028))
f6029(a6029) => a6029 + 1
plot(f6029(6029))
f6030(a6030) => a6030 + 1
plot(f6030(6030))
f6031(a6031) => a6031 + 1
plot(f6031(6031))
f6032(a6032) => a6032 + 1
plot(f6032(6032))
f6033(a6033) => a6033 + 1
plot(f6033(6033))
f6034(a6034) => a6034 + 1
plot(f6034(6034))
f6035(a6035) => a6035 + 1
plot(f6035(6035))
f6036(a6036) => a6036 + 1
plot(f6036(6036))
f6037(a6037) => a6037 + 1
plot(f6037(6037))
f6038(a6038) => a6038 + 1
plot(f6038(6038))
f6039(a6039) => a6039 + 1
plot(f6039(6039))
f6040(a6040) => a6040 + 1
plot(f6040(6040))
f6041(a6041) => a6041 + 1
plot(f6041(6041))
f6042(a6042) => a6042 + 1
plot(f6042(6042))
f6043(a6043) => a6043 + 1
plot(f6043(6043))
f6044(a6044) => a6044 + 1
plot(f6044(6044))
f6045(a6045) => a6045 + 1
plot(f6045(6045))
f6046(a6046) => a6046 + 1
plot(f6046(6046))
f6047(a6047) => a6047 + 1
plot(f6047(6047))
f6048(a6048) => a6048 + 1
plot(f6048(6048))
f6049(a6049) => a6049 + 1
plot(f6049(6049))
f6050(a6050) => a6050 + 1
plot(f6050(6050))
f6051(a6051) => a6051 + 1
plot(f6051(6051))
f6052(a6052) => a6052 + 1
plot(f6052(6052))
f6053(a6053) => a6053 + 1
plot(f6053(6053))
f6054(a6054) => a6054 + 1
plot(f6054(6054))
f6055(a6055) => a6055 + 1
plot(f6055(6055))
f6056(a6056) => a6056 + 1
plot(f6056(6056))
f6057(a6057) => a6057 + 1
plot(f6057(6057))
f6058(a6058) => a6058 + 1
plot(f6058(6058))
f6059(a6059) => a6059 + 1
plot(f6059(6059))
f6060(a6060) => a6060 + 1
plot(f6060(6060))
f6061(a6061) => a6061 + 1
plot(f6061(6061))
f6062(a6062) => a6062 + 1
plot(f6062(6062))
f6063(a6063) => a6063 + 1
plot(f6063(6063))
f6064(a6064) => a6064 + 1
plot(f6064(6064))
f6065(a6065) => a6065 + 1
plot(f6065(6065))
f6066(a6066) => a6066 + 1
plot(f6066(6066))
f6067(a6067) => a6067 + 1
plot(f6067(6067))
f6068(a6068) => a6068 + 1
plot(f6068(6068))
f6069(a6069) => a6069 + 1
plot(f6069(6069))
f6070(a6070) => a6070 + 1
plot(f6070(6070))
f6071(a6071) => a6071 + 1
plot(f6071(6071))
f6072(a6072) => a6072 + 1
plot(f6072(6072))
f6073(a6073) => a6073 + 1
plot(f6073(6073))
f6074(a6074) => a6074 + 1
plot(f6074(6074))
f6075(a6075) => a6075 + 1
plot(f6075(6075))
f6076(a6076) => a6076 + 1
plot(f6076(6076))
f6077(a6077) => a6077 + 1
plot(f6077(6077))
f6078(a6078) => a6078 + 1
plot(f6078(6078))
f6079(a6079) => a6079 + 1
plot(f6079(6079))
f6080(a6080) => a6080 + 1
plot(f6080(6080))
f6081(a6081) => a6081 + 1
plot(f6081(6081))
f6082(a6082) => a6082 + 1
plot(f6082(6082))
f6083(a6083) => a6083 + 1
plot(f6083(6083))
f6084(a6084) => a6084 + 1
plot(f6084(6084))
f6085(a6085) => a6085 + 1
plot(f6085(6085))
f6086(a6086) => a6086 + 1
plot(f6086(6086))
f6087(a6087) => a6087 + 1
plot(f6087(6087))
f6088(a6088) => a6088 + 1
plot(f6088(6088))
f6089(a6089) => a6089 + 1
plot(f6089(6089))
f6090(a6090) => a6090 + 1
plot(f6090(6090))
f6091(a6091) => a6091 + 1
plot(f6091(6091))
f6092(a6092) => a6092 + 1
plot(f6092(6092))
f6093(a6093) => a6093 + 1
plot(f6093(6093))
f6094(a6094) => a6094 + 1
plot(f6094(6094))
f6095(a6095) => a6095 + 1
plot(f6095(6095))
f6096(a6096) => a6096 + 1
plot(f6096(6096))
f6097(a6097) => a6097 + 1
plot(f6097(6097))
f6098(a6098) => a6098 + 1
plot(f6098(6098))
f6099(a6099) => a6099 + 1
plot(f6099(6099))
f6100(a6100) => a6100 + 1
plot(f6100(6100))
f6101(a6101) => a6101 + 1
plot(f6101(6101))
f6102(a6102) => a6102 + 1
plot(f6102(6102))
f6103(a6103) => a6103 + 1
plot(f6103(6103))
f6104(a6104) => a6104 + 1
plot(f6104(6104))
f6105(a6105) => a6105 + 1
plot(f6105(6105))
f6106(a6106) => a6106 + 1
plot(f6106(6106))
f6107(a6107) => a6107 + 1
plot(f6107(6107))
f6108(a6108) => a6108 + 1
plot(f6108(6108))
f6109(a6109) => a6109 + 1
plot(f6109(6109))
f6110(a6110) => a6110 + 1
plot(f6110(6110))
f6111(a6111) => a6111 + 1
plot(f6111(6111))
f6112(a6112) => a6112 + 1
plot(f6112(6112))
f6113(a6113) => a6113 + 1
plot(f6113(6113))
f6114(a6114) => a6114 + 1
plot(f6114(6114))
f6115(a6115) => a6115 + 1
plot(f6115(6115))
f6116(a6116) => a6116 + 1
plot(f6116(6116))
f6117(a6117) => a6117 + 1
plot(f6117(6117))
f6118(a6118) => a6118 + 1
plot(f6118(6118))
f6119(a6119) => a6119 + 1
plot(f6119(6119))
f6120(a6120) => a6120 + 1
plot(f6120(6120))
f6121(a6121) => a6121 + 1
plot(f6121(6121))
f6122(a6122) => a6122 + 1
plot(f6122(6122))
f6123(a6123) => a6123 + 1
plot(f6123(6123))
f6124(a6124) => a6124 + 1
plot(f6124(6124))
f6125(a6125) => a6125 + 1
plot(f6125(6125))
f6126(a6126) => a6126 + 1
plot(f6126(6126))
f6127(a6127) => a6127 + 1
plot(f6127(6127))
f6128(a6128) => a6128 + 1
plot(f6128(6128))
f6129(a6129) => a6129 + 1
plot(f6129(6129))
f6130(a6130) => a6130 + 1
plot(f6130(6130))
f6131(a6131) => a6131 + 1
plot(f6131(6131))
f6132(a6132) => a6132 + 1
plot(f6132(6132))
f6133(a6133) => a6133 + 1
plot(f6133(6133))
f6134(a6134) => a6134 + 1
plot(f6134(6134))
f6135(a6135) => a6135 + 1
plot(f6135(6135))
f6136(a6136) => a6136 + 1
plot(f6136(6136))
f6137(a6137) => a6137 + 1
plot(f6137(6137))
f6138(a6138) => a6138 + 1
plot(f6138(6138))
f6139(a6139) => a6139 + 1
plot(f6139(6139))
f6140(a6140) => a6140 + 1
plot(f6140(6140))
f6141(a6141) => a6141 + 1
plot(f6141(6141))
f6142(a6142) => a6142 + 1
plot(f6142(6142))
f6143(a6143) => a6143 + 1
plot(f6143(6143))
f6144(a6144) => a6144 + 1
plot(f6144(6144))
f6145(a6145) => a6145 + 1
plot(f6145(6145))
f6146(a6146) => a6146 + 1
plot(f6146(6146))
f6147(a6147) => a6147 + 1
plot(f6147(6147))
f6148(a6148) => a6148 + 1
plot(f6148(6148))
f6149(a6149) => a6149 + 1
plot(f6149(6149))
f6150(a6150) => a6150 + 1
plot(f6150(6150))
f6151(a6151) => a6151 + 1
plot(f6151(6151))
f6152(a6152) => a6152 + 1
plot(f6152(6152))
f6153(a6153) => a6153 + 1
plot(f6153(6153))
f6154(a6154) => a6154 + 1
plot(f6154(6154))
f6155(a6155) => a6155 + 1
plot(f6155(6155))
f6156(a6156) => a6156 + 1
plot(f6156(6156))
f6157(a6157) => a6157 + 1
plot(f6157(6157))
f6158(a6158) => a6158 + 1
plot(f6158(6158))
f6159(a6159) => a6159 + 1
plot(f6159(6159))
f6160(a6160) => a6160 + 1
plot(f6160(6160))
f6161(a6161) => a6161 + 1
plot(f6161(6161))
f6162(a6162) => a6162 + 1
plot(f6162(6162))
f6163(a6163) => a6163 + 1
plot(f6163(6163))
f6164(a6164) => a6164 + 1
plot(f6164(6164))
f6165(a6165) => a6165 + 1
plot(f6165(6165))
f6166(a6166) => a6166 + 1
plot(f6166(6166))
f6167(a6167) => a6167 + 1
plot(f6167(6167))
f6168(a6168) => a6168 + 1
plot(f6168(6168))
f6169(a6169) => a6169 + 1
plot(f6169(6169))
f6170(a6170) => a6170 + 1
plot(f6170(6170))
f6171(a6171) => a6171 + 1
plot(f6171(6171))
f6172(a6172) => a6172 + 1
plot(f6172(6172))
f6173(a6173) => a6173 + 1
plot(f6173(6173))
f6174(a6174) => a6174 + 1
plot(f6174(6174))
f6175(a6175) => a6175 + 1
plot(f6175(6175))
f6176(a6176) => a6176 + 1
plot(f6176(6176))
f6177(a6177) => a6177 + 1
plot(f6177(6177))
f6178(a6178) => a6178 + 1
plot(f6178(6178))
f6179(a6179) => a6179 + 1
plot(f6179(6179))
f6180(a6180) => a6180 + 1
plot(f6180(6180))
f6181(a6181) => a6181 + 1
plot(f6181(6181))
f6182(a6182) => a6182 + 1
plot(f6182(6182))
f6183(a6183) => a6183 + 1
plot(f6183(6183))
f6184(a6184) => a6184 + 1
plot(f6184(6184))
f6185(a6185) => a6185 + 1
plot(f6185(6185))
f6186(a6186) => a6186 + 1
plot(f6186(6186))
f6187(a6187) => a6187 + 1
plot(f6187(6187))
f6188(a6188) => a6188 + 1
plot(f6188(6188))
f6189(a6189) => a6189 + 1
plot(f6189(6189))
f6190(a6190) => a6190 + 1
plot(f6190(6190))
f6191(a6191) => a6191 + 1
plot(f6191(6191))
f6192(a6192) => a6192 + 1
plot(f6192(6192))
f6193(a6193) => a6193 + 1
plot(f6193(6193))
f6194(a6194) => a6194 + 1
plot(f6194(6194))
f6195(a6195) => a6195 + 1
plot(f6195(6195))
f6196(a6196) => a6196 + 1
plot(f6196(6196))
f6197(a6197) => a6197 + 1
plot(f6197(6197))
f6198(a6198) => a6198 + 1
plot(f6198(6198))
f6199(a6199) => a6199 + 1
plot(f6199(6199))
f6200(a6200) => a6200 + 1
plot(f6200(6200))
f6201(a6201) => a6201 + 1
plot(f6201(6201))
f6202(a6202) => a6202 + 1
plot(f6202(6202))
f6203(a6203) => a6203 + 1
plot(f6203(6203))
f6204(a6204) => a6204 + 1
plot(f6204(6204))
f6205(a6205) => a6205 + 1
plot(f6205(6205))
f6206(a6206) => a6206 + 1
plot(f6206(6206))
f6207(a6207) => a6207 + 1
plot(f6207(6207))
f6208(a6208) => a6208 + 1
plot(f6208(6208))
f6209(a6209) => a6209 + 1
plot(f6209(6209))
f6210(a6210) => a6210 + 1
plot(f6210(6210))
f6211(a6211) => a6211 + 1
plot(f6211(6211))
f6212(a6212) => a6212 + 1
plot(f6212(6212))
f6213(a6213) => a6213 + 1
plot(f6213(6213))
f6214(a6214) => a6214 + 1
plot(f6214(6214))
f6215(a6215) => a6215 + 1
plot(f6215(6215))
f6216(a6216) => a6216 + 1
plot(f6216(6216))
f6217(a6217) => a6217 + 1
plot(f6217(6217))
f6218(a6218) => a6218 + 1
plot(f6218(6218))
f6219(a6219) => a6219 + 1
plot(f6219(6219))
f6220(a6220) => a6220 + 1
plot(f6220(6220))
f6221(a6221) => a6221 + 1
plot(f6221(6221))
f6222(a6222) => a6222 + 1
plot(f6222(6222))
f6223(a6223) => a6223 + 1
plot(f6223(6223))
f6224(a6224) => a6224 + 1
plot(f6224(6224))
f6225(a6225) => a6225 + 1
plot(f6225(6225))
f6226(a6226) => a6226 + 1
plot(f6226(6226))
f6227(a6227) => a6227 + 1
plot(f6227(6227))
f6228(a6228) => a6228 + 1
plot(f6228(6228))
f6229(a6229) => a6229 + 1
plot(f6229(6229))
f6230(a6230) => a6230 + 1
plot(f6230(6230))
f6231(a6231) => a6231 + 1
plot(f6231(6231))
f6232(a6232) => a6232 + 1
plot(f6232(6232))
f6233(a6233) => a6233 + 1
plot(f6233(6233))
f6234(a6234) => a6234 + 1
plot(f6234(6234))
f6235(a6235) => a6235 + 1
plot(f6235(6235))
f6236(a6236) => a6236 + 1
plot(f6236(6236))
f6237(a6237) => a6237 + 1
plot(f6237(6237))
f6238(a6238) => a6238 + 1
plot(f6238(6238))
f6239(a6239) => a6239 + 1
plot(f6239(6239))
f6240(a6240) => a6240 + 1
plot(f6240(6240))
f6241(a6241) => a6241 + 1
plot(f6241(6241))
f6242(a6242) => a6242 + 1
plot(f6242(6242))
f6243(a6243) => a6243 + 1
plot(f6243(6243))
f6244(a6244) => a6244 + 1
plot(f6244(6244))
f6245(a6245) => a6245 + 1
plot(f6245(6245))
f6246(a6246) => a6246 + 1
plot(f6246(6246))
f6247(a6247) => a6247 + 1
plot(f6247(6247))
f6248(a6248) => a6248 + 1
plot(f6248(6248))
f6249(a6249) => a6249 + 1
plot(f6249(6249))
f6250(a6250) => a6250 + 1
plot(f6250(6250))
f6251(a6251) => a6251 + 1
plot(f6251(6251))
f6252(a6252) => a6252 + 1
plot(f6252(6252))
f6253(a6253) => a6253 + 1
plot(f6253(6253))
f6254(a6254) => a6254 + 1
plot(f6254(6254))
f6255(a6255) => a6255 + 1
plot(f6255(6255))
f6256(a6256) => a6256 + 1
plot(f6256(6256))
f6257(a6257) => a6257 + 1
plot(f6257(6257))
f6258(a6258) => a6258 + 1
plot(f6258(6258))
f6259(a6259) => a6259 + 1
plot(f6259(6259))
f6260(a6260) => a6260 + 1
plot(f6260(6260))
f6261(a6261) => a6261 + 1
plot(f6261(6261))
f6262(a6262) => a6262 + 1
plot(f6262(6262))
f6263(a6263) => a6263 + 1
plot(f6263(6263))
f6264(a6264) => a6264 + 1
plot(f6264(6264))
f6265(a6265) => a6265 + 1
plot(f6265(6265))
f6266(a6266) => a6266 + 1
plot(f6266(6266))
f6267(a6267) => a6267 + 1
plot(f6267(6267))
f6268(a6268) => a6268 + 1
plot(f6268(6268))
f6269(a6269) => a6269 + 1
plot(f6269(6269))
f6270(a6270) => a6270 + 1
plot(f6270(6270))
f6271(a6271) => a6271 + 1
plot(f6271(6271))
f6272(a6272) => a6272 + 1
plot(f6272(6272))
f6273(a6273) => a6273 + 1
plot(f6273(6273))
f6274(a6274) => a6274 + 1
plot(f6274(6274))
f6275(a6275) => a6275 + 1
plot(f6275(6275))
f6276(a6276) => a6276 + 1
plot(f6276(6276))
f6277(a6277) => a6277 + 1
plot(f6277(6277))
f6278(a6278) => a6278 + 1
plot(f6278(6278))
f6279(a6279) => a6279 + 1
plot(f6279(6279))
f6280(a6280) => a6280 + 1
plot(f6280(6280))
f6281(a6281) => a6281 + 1
plot(f6281(6281))
f6282(a6282) => a6282 + 1
plot(f6282(6282))
f6283(a6283) => a6283 + 1
plot(f6283(6283))
f6284(a6284) => a6284 + 1
plot(f6284(6284))
f6285(a6285) => a6285 + 1
plot(f6285(6285))
f6286(a6286) => a6286 + 1
plot(f6286(6286))
f6287(a6287) => a6287 + 1
plot(f6287(6287))
f6288(a6288) => a6288 + 1
plot(f6288(6288))
f6289(a6289) => a6289 + 1
plot(f6289(6289))
f6290(a6290) => a6290 + 1
plot(f6290(6290))
f6291(a6291) => a6291 + 1
plot(f6291(6291))
f6292(a6292) => a6292 + 1
plot(f6292(6292))
f6293(a6293) => a6293 + 1
plot(f6293(6293))
f6294(a6294) => a6294 + 1
plot(f6294(6294))
f6295(a6295) => a6295 + 1
plot(f6295(6295))
f6296(a6296) => a6296 + 1
plot(f6296(6296))
f6297(a6297) => a6297 + 1
plot(f6297(6297))
f6298(a6298) => a6298 + 1
plot(f6298(6298))
f6299(a6299) => a6299 + 1
plot(f6299(6299))
f6300(a6300) => a6300 + 1
plot(f6300(6300))
f6301(a6301) => a6301 + 1
plot(f6301(6301))
f6302(a6302) => a6302 + 1
plot(f6302(6302))
f6303(a6303) => a6303 + 1
plot(f6303(6303))
f6304(a6304) => a6304 + 1
plot(f6304(6304))
f6305(a6305) => a6305 + 1
plot(f6305(6305))
f6306(a6306) => a6306 + 1
plot(f6306(6306))
f6307(a6307) => a6307 + 1
plot(f6307(6307))
f6308(a6308) => a6308 + 1
plot(f6308(6308))
f6309(a6309) => a6309 + 1
plot(f6309(6309))
f6310(a6310) => a6310 + 1
plot(f6310(6310))
f6311(a6311) => a6311 + 1
plot(f6311(6311))
f6312(a6312) => a6312 + 1
plot(f6312(6312))
f6313(a6313) => a6313 + 1
plot(f6313(6313))
f6314(a6314) => a6314 + 1
plot(f6314(6314))
f6315(a6315) => a6315 + 1
plot(f6315(6315))
f6316(a6316) => a6316 + 1
plot(f6316(6316))
f6317(a6317) => a6317 + 1
plot(f6317(6317))
f6318(a6318) => a6318 + 1
plot(f6318(6318))
f6319(a6319) => a6319 + 1
plot(f6319(6319))
f6320(a6320) => a6320 + 1
plot(f6320(6320))
f6321(a6321) => a6321 + 1
plot(f6321(6321))
f6322(a6322) => a6322 + 1
plot(f6322(6322))
f6323(a6323) => a6323 + 1
plot(f6323(6323))
f6324(a6324) => a6324 + 1
plot(f6324(6324))
f6325(a6325) => a6325 + 1
plot(f6325(6325))
f6326(a6326) => a6326 + 1
plot(f6326(6326))
f6327(a6327) => a6327 + 1
plot(f6327(6327))
f6328(a6328) => a6328 + 1
plot(f6328(6328))
f6329(a6329) => a6329 + 1
plot(f6329(6329))
f6330(a6330) => a6330 + 1
plot(f6330(6330))
f6331(a6331) => a6331 + 1
plot(f6331(6331))
f6332(a6332) => a6332 + 1
plot(f6332(6332))
f6333(a6333) => a6333 + 1
plot(f6333(6333))
f6334(a6334) => a6334 + 1
plot(f6334(6334))
f6335(a6335) => a6335 + 1
plot(f6335(6335))
f6336(a6336) => a6336 + 1
plot(f6336(6336))
f6337(a6337) => a6337 + 1
plot(f6337(6337))
f6338(a6338) => a6338 + 1
plot(f6338(6338))
f6339(a6339) => a6339 + 1
plot(f6339(6339))
f6340(a6340) => a6340 + 1
plot(f6340(6340))
f6341(a6341) => a6341 + 1
plot(f6341(6341))
f6342(a6342) => a6342 + 1
plot(f6342(6342))
f6343(a6343) => a6343 + 1
plot(f6343(6343))
f6344(a6344) => a6344 + 1
plot(f6344(6344))
f6345(a6345) => a6345 + 1
plot(f6345(6345))
f6346(a6346) => a6346 + 1
plot(f6346(6346))
f6347(a6347) => a6347 + 1
plot(f6347(6347))
f6348(a6348) => a6348 + 1
plot(f6348(6348))
f6349(a6349) => a6349 + 1
plot(f6349(6349))
f6350(a6350) => a6350 + 1
plot(f6350(6350))
f6351(a6351) => a6351 + 1
plot(f6351(6351))
f6352(a6352) => a6352 + 1
plot(f6352(6352))
f6353(a6353) => a6353 + 1
plot(f6353(6353))
f6354(a6354) => a6354 + 1
plot(f6354(6354))
f6355(a6355) => a6355 + 1
plot(f6355(6355))
f6356(a6356) => a6356 + 1
plot(f6356(6356))
f6357(a6357) => a6357 + 1
plot(f6357(6357))
f6358(a6358) => a6358 + 1
plot(f6358(6358))
f6359(a6359) => a6359 + 1
plot(f6359(6359))
f6360(a6360) => a6360 + 1
plot(f6360(6360))
f6361(a6361) => a6361 + 1
plot(f6361(6361))
f6362(a6362) => a6362 + 1
plot(f6362(6362))
f6363(a6363) => a6363 + 1
plot(f6363(6363))
f6364(a6364) => a6364 + 1
plot(f6364(6364))
f6365(a6365) => a6365 + 1
plot(f6365(6365))
f6366(a6366) => a6366 + 1
plot(f6366(6366))
f6367(a6367) => a6367 + 1
plot(f6367(6367))
f6368(a6368) => a6368 + 1
plot(f6368(6368))
f6369(a6369) => a6369 + 1
plot(f6369(6369))
f6370(a6370) => a6370 + 1
plot(f6370(6370))
f6371(a6371) => a6371 + 1
plot(f6371(6371))
f6372(a6372) => a6372 + 1
plot(f6372(6372))
f6373(a6373) => a6373 + 1
plot(f6373(6373))
f6374(a6374) => a6374 + 1
plot(f6374(6374))
f6375(a6375) => a6375 + 1
plot(f6375(6375))
f6376(a6376) => a6376 + 1
plot(f6376(6376))
f6377(a6377) => a6377 + 1
plot(f6377(6377))
f6378(a6378) => a6378 + 1
plot(f6378(6378))
f6379(a6379) => a6379 + 1
plot(f6379(6379))
f6380(a6380) => a6380 + 1
plot(f6380(6380))
f6381(a6381) => a6381 + 1
plot(f6381(6381))
f6382(a6382) => a6382 + 1
plot(f6382(6382))
f6383(a6383) => a6383 + 1
plot(f6383(6383))
f6384(a6384) => a6384 + 1
plot(f6384(6384))
f6385(a6385) => a6385 + 1
plot(f6385(6385))
f6386(a6386) => a6386 + 1
plot(f6386(6386))
f6387(a6387) => a6387 + 1
plot(f6387(6387))
f6388(a6388) => a6388 + 1
plot(f6388(6388))
f6389(a6389) => a6389 + 1
plot(f6389(6389))
f6390(a6390) => a6390 + 1
plot(f6390(6390))
f6391(a6391) => a6391 + 1
plot(f6391(6391))
f6392(a6392) => a6392 + 1
plot(f6392(6392))
f6393(a6393) => a6393 + 1
plot(f6393(6393))
f6394(a6394) => a6394 + 1
plot(f6394(6394))
f6395(a6395) => a6395 + 1
plot(f6395(6395))
f6396(a6396) => a6396 + 1
plot(f6396(6396))
f6397(a6397) => a6397 + 1
plot(f6397(6397))
f6398(a6398) => a6398 + 1
plot(f6398(6398))
f6399(a6399) => a6399 + 1
plot(f6399(6399))
f6400(a6400) => a6400 + 1
plot(f6400(6400))
f6401(a6401) => a6401 + 1
plot(f6401(6401))
f6402(a6402) => a6402 + 1
plot(f6402(6402))
f6403(a6403) => a6403 + 1
plot(f6403(6403))
f6404(a6404) => a6404 + 1
plot(f6404(6404))
f6405(a6405) => a6405 + 1
plot(f6405(6405))
f6406(a6406) => a6406 + 1
plot(f6406(6406))
f6407(a6407) => a6407 + 1
plot(f6407(6407))
f6408(a6408) => a6408 + 1
plot(f6408(6408))
f6409(a6409) => a6409 + 1
plot(f6409(6409))
f6410(a6410) => a6410 + 1
plot(f6410(6410))
f6411(a6411) => a6411 + 1
plot(f6411(6411))
f6412(a6412) => a6412 + 1
plot(f6412(6412))
f6413(a6413) => a6413 + 1
plot(f6413(6413))
f6414(a6414) => a6414 + 1
plot(f6414(6414))
f6415(a6415) => a6415 + 1
plot(f6415(6415))
f6416(a6416) => a6416 + 1
plot(f6416(6416))
f6417(a6417) => a6417 + 1
plot(f6417(6417))
f6418(a6418) => a6418 + 1
plot(f6418(6418))
f6419(a6419) => a6419 + 1
plot(f6419(6419))
f6420(a6420) => a6420 + 1
plot(f6420(6420))
f6421(a6421) => a6421 + 1
plot(f6421(6421))
f6422(a6422) => a6422 + 1
plot(f6422(6422))
f6423(a6423) => a6423 + 1
plot(f6423(6423))
f6424(a6424) => a6424 + 1
plot(f6424(6424))
f6425(a6425) => a6425 + 1
plot(f6425(6425))
f6426(a6426) => a6426 + 1
plot(f6426(6426))
f6427(a6427) => a6427 + 1
plot(f6427(6427))
f6428(a6428) => a6428 + 1
plot(f6428(6428))
f6429(a6429) => a6429 + 1
plot(f6429(6429))
f6430(a6430) => a6430 + 1
plot(f6430(6430))
f6431(a6431) => a6431 + 1
plot(f6431(6431))
f6432(a6432) => a6432 + 1
plot(f6432(6432))
f6433(a6433) => a6433 + 1
plot(f6433(6433))
f6434(a6434) => a6434 + 1
plot(f6434(6434))
f6435(a6435) => a6435 + 1
plot(f6435(6435))
f6436(a6436) => a6436 + 1
plot(f6436(6436))
f6437(a6437) => a6437 + 1
plot(f6437(6437))
f6438(a6438) => a6438 + 1
plot(f6438(6438))
f6439(a6439) => a6439 + 1
plot(f6439(6439))
f6440(a6440) => a6440 + 1
plot(f6440(6440))
f6441(a6441) => a6441 + 1
plot(f6441(6441))
f6442(a6442) => a6442 + 1
plot(f6442(6442))
f6443(a6443) => a6443 + 1
plot(f6443(6443))
f6444(a6444) => a6444 + 1
plot(f6444(6444))
f6445(a6445) => a6445 + 1
plot(f6445(6445))
f6446(a6446) => a6446 + 1
plot(f6446(6446))
f6447(a6447) => a6447 + 1
plot(f6447(6447))
f6448(a6448) => a6448 + 1
plot(f6448(6448))
f6449(a6449) => a6449 + 1
plot(f6449(6449))
f6450(a6450) => a6450 + 1
plot(f6450(6450))
f6451(a6451) => a6451 + 1
plot(f6451(6451))
f6452(a6452) => a6452 + 1
plot(f6452(6452))
f6453(a6453) => a6453 + 1
plot(f6453(6453))
f6454(a6454) => a6454 + 1
plot(f6454(6454))
f6455(a6455) => a6455 + 1
plot(f6455(6455))
f6456(a6456) => a6456 + 1
plot(f6456(6456))
f6457(a6457) => a6457 + 1
plot(f6457(6457))
f6458(a6458) => a6458 + 1
plot(f6458(6458))
f6459(a6459) => a6459 + 1
plot(f6459(6459))
f6460(a6460) => a6460 + 1
plot(f6460(6460))
f6461(a6461) => a6461 + 1
plot(f6461(6461))
f6462(a6462) => a6462 + 1
plot(f6462(6462))
f6463(a6463) => a6463 + 1
plot(f6463(6463))
f6464(a6464) => a6464 + 1
plot(f6464(6464))
f6465(a6465) => a6465 + 1
plot(f6465(6465))
f6466(a6466) => a6466 + 1
plot(f6466(6466))
f6467(a6467) => a6467 + 1
plot(f6467(6467))
f6468(a6468) => a6468 + 1
plot(f6468(6468))
f6469(a6469) => a6469 + 1
plot(f6469(6469))
f6470(a6470) => a6470 + 1
plot(f6470(6470))
f6471(a6471) => a6471 + 1
plot(f6471(6471))
f6472(a6472) => a6472 + 1
plot(f6472(6472))
f6473(a6473) => a6473 + 1
plot(f6473(6473))
f6474(a6474) => a6474 + 1
plot(f6474(6474))
f6475(a6475) => a6475 + 1
plot(f6475(6475))
f6476(a6476) => a6476 + 1
plot(f6476(6476))
f6477(a6477) => a6477 + 1
plot(f6477(6477))
f6478(a6478) => a6478 + 1
plot(f6478(6478))
f6479(a6479) => a6479 + 1
plot(f6479(6479))
f6480(a6480) => a6480 + 1
plot(f6480(6480))
f6481(a6481) => a6481 + 1
plot(f6481(6481))
f6482(a6482) => a6482 + 1
plot(f6482(6482))
f6483(a6483) => a6483 + 1
plot(f6483(6483))
f6484(a6484) => a6484 + 1
plot(f6484(6484))
f6485(a6485) => a6485 + 1
plot(f6485(6485))
f6486(a6486) => a6486 + 1
plot(f6486(6486))
f6487(a6487) => a6487 + 1
plot(f6487(6487))
f6488(a6488) => a6488 + 1
plot(f6488(6488))
f6489(a6489) => a6489 + 1
plot(f6489(6489))
f6490(a6490) => a6490 + 1
plot(f6490(6490))
f6491(a6491) => a6491 + 1
plot(f6491(6491))
f6492(a6492) => a6492 + 1
plot(f6492(6492))
f6493(a6493) => a6493 + 1
plot(f6493(6493))
f6494(a6494) => a6494 + 1
plot(f6494(6494))
f6495(a6495) => a6495 + 1
plot(f6495(6495))
f6496(a6496) => a6496 + 1
plot(f6496(6496))
f6497(a6497) => a6497 + 1
plot(f6497(6497))
f6498(a6498) => a6498 + 1
plot(f6498(6498))
f6499(a6499) => a6499 + 1
plot(f6499(6499))
f6500(a6500) => a6500 + 1
plot(f6500(6500))
f6501(a6501) => a6501 + 1
plot(f6501(6501))
f6502(a6502) => a6502 + 1
plot(f6502(6502))
f6503(a6503) => a6503 + 1
plot(f6503(6503))
f6504(a6504) => a6504 + 1
plot(f6504(6504))
f6505(a6505) => a6505 + 1
plot(f6505(6505))
f6506(a6506) => a6506 + 1
plot(f6506(6506))
f6507(a6507) => a6507 + 1
plot(f6507(6507))
f6508(a6508) => a6508 + 1
plot(f6508(6508))
f6509(a6509) => a6509 + 1
plot(f6509(6509))
f6510(a6510) => a6510 + 1
plot(f6510(6510))
f6511(a6511) => a6511 + 1
plot(f6511(6511))
f6512(a6512) => a6512 + 1
plot(f6512(6512))
f6513(a6513) => a6513 + 1
plot(f6513(6513))
f6514(a6514) => a6514 + 1
plot(f6514(6514))
f6515(a6515) => a6515 + 1
plot(f6515(6515))
f6516(a6516) => a6516 + 1
plot(f6516(6516))
f6517(a6517) => a6517 + 1
plot(f6517(6517))
f6518(a6518) => a6518 + 1
plot(f6518(6518))
f6519(a6519) => a6519 + 1
plot(f6519(6519))
f6520(a6520) => a6520 + 1
plot(f6520(6520))
f6521(a6521) => a6521 + 1
plot(f6521(6521))
f6522(a6522) => a6522 + 1
plot(f6522(6522))
f6523(a6523) => a6523 + 1
plot(f6523(6523))
f6524(a6524) => a6524 + 1
plot(f6524(6524))
f6525(a6525) => a6525 + 1
plot(f6525(6525))
f6526(a6526) => a6526 + 1
plot(f6526(6526))
f6527(a6527) => a6527 + 1
plot(f6527(6527))
f6528(a6528) => a6528 + 1
plot(f6528(6528))
f6529(a6529) => a6529 + 1
plot(f6529(6529))
f6530(a6530) => a6530 + 1
plot(f6530(6530))
f6531(a6531) => a6531 + 1
plot(f6531(6531))
f6532(a6532) => a6532 + 1
plot(f6532(6532))
f6533(a6533) => a6533 + 1
plot(f6533(6533))
f6534(a6534) => a6534 + 1
plot(f6534(6534))
f6535(a6535) => a6535 + 1
plot(f6535(6535))
f6536(a6536) => a6536 + 1
plot(f6536(6536))
f6537(a6537) => a6537 + 1
plot(f6537(6537))
f6538(a6538) => a6538 + 1
plot(f6538(6538))
f6539(a6539) => a6539 + 1
plot(f6539(6539))
f6540(a6540) => a6540 + 1
plot(f6540(6540))
f6541(a6541) => a6541 + 1
plot(f6541(6541))
f6542(a6542) => a6542 + 1
plot(f6542(6542))
f6543(a6543) => a6543 + 1
plot(f6543(6543))
f6544(a6544) => a6544 + 1
plot(f6544(6544))
f6545(a6545) => a6545 + 1
plot(f6545(6545))
f6546(a6546) => a6546 + 1
plot(f6546(6546))
f6547(a6547) => a6547 + 1
plot(f6547(6547))
f6548(a6548) => a6548 + 1
plot(f6548(6548))
f6549(a6549) => a6549 + 1
plot(f6549(6549))
f6550(a6550) => a6550 + 1
plot(f6550(6550))
f6551(a6551) => a6551 + 1
plot(f6551(6551))
f6552(a6552) => a6552 + 1
plot(f6552(6552))
f6553(a6553) => a6553 + 1
plot(f6553(6553))
f6554(a6554) => a6554 + 1
plot(f6554(6554))
f6555(a6555) => a6555 + 1
plot(f6555(6555))
f6556(a6556) => a6556 + 1
plot(f6556(6556))
f6557(a6557) => a6557 + 1
plot(f6557(6557))
f6558(a6558) => a6558 + 1
plot(f6558(6558))
f6559(a6559) => a6559 + 1
plot(f6559(6559))
f6560(a6560) => a6560 + 1
plot(f6560(6560))
f6561(a6561) => a6561 + 1
plot(f6561(6561))
f6562(a6562) => a6562 + 1
plot(f6562(6562))
f6563(a6563) => a6563 + 1
plot(f6563(6563))
f6564(a6564) => a6564 + 1
plot(f6564(6564))
f6565(a6565) => a6565 + 1
plot(f6565(6565))
f6566(a6566) => a6566 + 1
plot(f6566(6566))
f6567(a6567) => a6567 + 1
plot(f6567(6567))
f6568(a6568) => a6568 + 1
plot(f6568(6568))
f6569(a6569) => a6569 + 1
plot(f6569(6569))
f6570(a6570) => a6570 + 1
plot(f6570(6570))
f6571(a6571) => a6571 + 1
plot(f6571(6571))
f6572(a6572) => a6572 + 1
plot(f6572(6572))
f6573(a6573) => a6573 + 1
plot(f6573(6573))
f6574(a6574) => a6574 + 1
plot(f6574(6574))
f6575(a6575) => a6575 + 1
plot(f6575(6575))
f6576(a6576) => a6576 + 1
plot(f6576(6576))
f6577(a6577) => a6577 + 1
plot(f6577(6577))
f6578(a6578) => a6578 + 1
plot(f6578(6578))
f6579(a6579) => a6579 + 1
plot(f6579(6579))
f6580(a6580) => a6580 + 1
plot(f6580(6580))
f6581(a6581) => a6581 + 1
plot(f6581(6581))
f6582(a6582) => a6582 + 1
plot(f6582(6582))
f6583(a6583) => a6583 + 1
plot(f6583(6583))
f6584(a6584) => a6584 + 1
plot(f6584(6584))
f6585(a6585) => a6585 + 1
plot(f6585(6585))
f6586(a6586) => a6586 + 1
plot(f6586(6586))
f6587(a6587) => a6587 + 1
plot(f6587(6587))
f6588(a6588) => a6588 + 1
plot(f6588(6588))
f6589(a6589) => a6589 + 1
plot(f6589(6589))
f6590(a6590) => a6590 + 1
plot(f6590(6590))
f6591(a6591) => a6591 + 1
plot(f6591(6591))
f6592(a6592) => a6592 + 1
plot(f6592(6592))
f6593(a6593) => a6593 + 1
plot(f6593(6593))
f6594(a6594) => a6594 + 1
plot(f6594(6594))
f6595(a6595) => a6595 + 1
plot(f6595(6595))
f6596(a6596) => a6596 + 1
plot(f6596(6596))
f6597(a6597) => a6597 + 1
plot(f6597(6597))
f6598(a6598) => a6598 + 1
plot(f6598(6598))
f6599(a6599) => a6599 + 1
plot(f6599(6599))
f6600(a6600) => a6600 + 1
plot(f6600(6600))
f6601(a6601) => a6601 + 1
plot(f6601(6601))
f6602(a6602) => a6602 + 1
plot(f6602(6602))
f6603(a6603) => a6603 + 1
plot(f6603(6603))
f6604(a6604) => a6604 + 1
plot(f6604(6604))
f6605(a6605) => a6605 + 1
plot(f6605(6605))
f6606(a6606) => a6606 + 1
plot(f6606(6606))
f6607(a6607) => a6607 + 1
plot(f6607(6607))
f6608(a6608) => a6608 + 1
plot(f6608(6608))
f6609(a6609) => a6609 + 1
plot(f6609(6609))
f6610(a6610) => a6610 + 1
plot(f6610(6610))
f6611(a6611) => a6611 + 1
plot(f6611(6611))
f6612(a6612) => a6612 + 1
plot(f6612(6612))
f6613(a6613) => a6613 + 1
plot(f6613(6613))
f6614(a6614) => a6614 + 1
plot(f6614(6614))
f6615(a6615) => a6615 + 1
plot(f6615(6615))
f6616(a6616) => a6616 + 1
plot(f6616(6616))
f6617(a6617) => a6617 + 1
plot(f6617(6617))
f6618(a6618) => a6618 + 1
plot(f6618(6618))
f6619(a6619) => a6619 + 1
plot(f6619(6619))
f6620(a6620) => a6620 + 1
plot(f6620(6620))
f6621(a6621) => a6621 + 1
plot(f6621(6621))
f6622(a6622) => a6622 + 1
plot(f6622(6622))
f6623(a6623) => a6623 + 1
plot(f6623(6623))
f6624(a6624) => a6624 + 1
plot(f6624(6624))
f6625(a6625) => a6625 + 1
plot(f6625(6625))
f6626(a6626) => a6626 + 1
plot(f6626(6626))
f6627(a6627) => a6627 + 1
plot(f6627(6627))
f6628(a6628) => a6628 + 1
plot(f6628(6628))
f6629(a6629) => a6629 + 1
plot(f6629(6629))
f6630(a6630) => a6630 + 1
plot(f6630(6630))
f6631(a6631) => a6631 + 1
plot(f6631(6631))
f6632(a6632) => a6632 + 1
plot(f6632(6632))
f6633(a6633) => a6633 + 1
plot(f6633(6633))
f6634(a6634) => a6634 + 1
plot(f6634(6634))
f6635(a6635) => a6635 + 1
plot(f6635(6635))
f6636(a6636) => a6636 + 1
plot(f6636(6636))
f6637(a6637) => a6637 + 1
plot(f6637(6637))
f6638(a6638) => a6638 + 1
plot(f6638(6638))
f6639(a6639) => a6639 + 1
plot(f6639(6639))
f6640(a6640) => a6640 + 1
plot(f6640(6640))
f6641(a6641) => a6641 + 1
plot(f6641(6641))
f6642(a6642) => a6642 + 1
plot(f6642(6642))
f6643(a6643) => a6643 + 1
plot(f6643(6643))
f6644(a6644) => a6644 + 1
plot(f6644(6644))
f6645(a6645) => a6645 + 1
plot(f6645(6645))
f6646(a6646) => a6646 + 1
plot(f6646(6646))
f6647(a6647) => a6647 + 1
plot(f6647(6647))
f6648(a6648) => a6648 + 1
plot(f6648(6648))
f6649(a6649) => a6649 + 1
plot(f6649(6649))
f6650(a6650) => a6650 + 1
plot(f6650(6650))
f6651(a6651) => a6651 + 1
plot(f6651(6651))
f6652(a6652) => a6652 + 1
plot(f6652(6652))
f6653(a6653) => a6653 + 1
plot(f6653(6653))
f6654(a6654) => a6654 + 1
plot(f6654(6654))
f6655(a6655) => a6655 + 1
plot(f6655(6655))
f6656(a6656) => a6656 + 1
plot(f6656(6656))
f6657(a6657) => a6657 + 1
plot(f6657(6657))
f6658(a6658) => a6658 + 1
plot(f6658(6658))
f6659(a6659) => a6659 + 1
plot(f6659(6659))
f6660(a6660) => a6660 + 1
plot(f6660(6660))
f6661(a6661) => a6661 + 1
plot(f6661(6661))
f6662(a6662) => a6662 + 1
plot(f6662(6662))
f6663(a6663) => a6663 + 1
plot(f6663(6663))
f6664(a6664) => a6664 + 1
plot(f6664(6664))
f6665(a6665) => a6665 + 1
plot(f6665(6665))
f6666(a6666) => a6666 + 1
plot(f6666(6666))
f6667(a6667) => a6667 + 1
plot(f6667(6667))
f6668(a6668) => a6668 + 1
plot(f6668(6668))
f6669(a6669) => a6669 + 1
plot(f6669(6669))
f6670(a6670) => a6670 + 1
plot(f6670(6670))
f6671(a6671) => a6671 + 1
plot(f6671(6671))
f6672(a6672) => a6672 + 1
plot(f6672(6672))
f6673(a6673) => a6673 + 1
plot(f6673(6673))
f6674(a6674) => a6674 + 1
plot(f6674(6674))
f6675(a6675) => a6675 + 1
plot(f6675(6675))
f6676(a6676) => a6676 + 1
plot(f6676(6676))
f6677(a6677) => a6677 + 1
plot(f6677(6677))
f6678(a6678) => a6678 + 1
plot(f6678(6678))
f6679(a6679) => a6679 + 1
plot(f6679(6679))
f6680(a6680) => a6680 + 1
plot(f6680(6680))
f6681(a6681) => a6681 + 1
plot(f6681(6681))
f6682(a6682) => a6682 + 1
plot(f6682(6682))
f6683(a6683) => a6683 + 1
plot(f6683(6683))
f6684(a6684) => a6684 + 1
plot(f6684(6684))
f6685(a6685) => a6685 + 1
plot(f6685(6685))
f6686(a6686) => a6686 + 1
plot(f6686(6686))
f6687(a6687) => a6687 + 1
plot(f6687(6687))
f6688(a6688) => a6688 + 1
plot(f6688(6688))
f6689(a6689) => a6689 + 1
plot(f6689(6689))
f6690(a6690) => a6690 + 1
plot(f6690(6690))
f6691(a6691) => a6691 + 1
plot(f6691(6691))
f6692(a6692) => a6692 + 1
plot(f6692(6692))
f6693(a6693) => a6693 + 1
plot(f6693(6693))
f6694(a6694) => a6694 + 1
plot(f6694(6694))
f6695(a6695) => a6695 + 1
plot(f6695(6695))
f6696(a6696) => a6696 + 1
plot(f6696(6696))
f6697(a6697) => a6697 + 1
plot(f6697(6697))
f6698(a6698) => a6698 + 1
plot(f6698(6698))
f6699(a6699) => a6699 + 1
plot(f6699(6699))
f6700(a6700) => a6700 + 1
plot(f6700(6700))
f6701(a6701) => a6701 + 1
plot(f6701(6701))
f6702(a6702) => a6702 + 1
plot(f6702(6702))
f6703(a6703) => a6703 + 1
plot(f6703(6703))
f6704(a6704) => a6704 + 1
plot(f6704(6704))
f6705(a6705) => a6705 + 1
plot(f6705(6705))
f6706(a6706) => a6706 + 1
plot(f6706(6706))
f6707(a6707) => a6707 + 1
plot(f6707(6707))
f6708(a6708) => a6708 + 1
plot(f6708(6708))
f6709(a6709) => a6709 + 1
plot(f6709(6709))
f6710(a6710) => a6710 + 1
plot(f6710(6710))
f6711(a6711) => a6711 + 1
plot(f6711(6711))
f6712(a6712) => a6712 + 1
plot(f6712(6712))
f6713(a6713) => a6713 + 1
plot(f6713(6713))
f6714(a6714) => a6714 + 1
plot(f6714(6714))
f6715(a6715) => a6715 + 1
plot(f6715(6715))
f6716(a6716) => a6716 + 1
plot(f6716(6716))
f6717(a6717) => a6717 + 1
plot(f6717(6717))
f6718(a6718) => a6718 + 1
plot(f6718(6718))
f6719(a6719) => a6719 + 1
plot(f6719(6719))
f6720(a6720) => a6720 + 1
plot(f6720(6720))
f6721(a6721) => a6721 + 1
plot(f6721(6721))
f6722(a6722) => a6722 + 1
plot(f6722(6722))
f6723(a6723) => a6723 + 1
plot(f6723(6723))
f6724(a6724) => a6724 + 1
plot(f6724(6724))
f6725(a6725) => a6725 + 1
plot(f6725(6725))
f6726(a6726) => a6726 + 1
plot(f6726(6726))
f6727(a6727) => a6727 + 1
plot(f6727(6727))
f6728(a6728) => a6728 + 1
plot(f6728(6728))
f6729(a6729) => a6729 + 1
plot(f6729(6729))
f6730(a6730) => a6730 + 1
plot(f6730(6730))
f6731(a6731) => a6731 + 1
plot(f6731(6731))
f6732(a6732) => a6732 + 1
plot(f6732(6732))
f6733(a6733) => a6733 + 1
plot(f6733(6733))
f6734(a6734) => a6734 + 1
plot(f6734(6734))
f6735(a6735) => a6735 + 1
plot(f6735(6735))
f6736(a6736) => a6736 + 1
plot(f6736(6736))
f6737(a6737) => a6737 + 1
plot(f6737(6737))
f6738(a6738) => a6738 + 1
plot(f6738(6738))
f6739(a6739) => a6739 + 1
plot(f6739(6739))
f6740(a6740) => a6740 + 1
plot(f6740(6740))
f6741(a6741) => a6741 + 1
plot(f6741(6741))
f6742(a6742) => a6742 + 1
plot(f6742(6742))
f6743(a6743) => a6743 + 1
plot(f6743(6743))
f6744(a6744) => a6744 + 1
plot(f6744(6744))
f6745(a6745) => a6745 + 1
plot(f6745(6745))
f6746(a6746) => a6746 + 1
plot(f6746(6746))
f6747(a6747) => a6747 + 1
plot(f6747(6747))
f6748(a6748) => a6748 + 1
plot(f6748(6748))
f6749(a6749) => a6749 + 1
plot(f6749(6749))
f6750(a6750) => a6750 + 1
plot(f6750(6750))
f6751(a6751) => a6751 + 1
plot(f6751(6751))
f6752(a6752) => a6752 + 1
plot(f6752(6752))
f6753(a6753) => a6753 + 1
plot(f6753(6753))
f6754(a6754) => a6754 + 1
plot(f6754(6754))
f6755(a6755) => a6755 + 1
plot(f6755(6755))
f6756(a6756) => a6756 + 1
plot(f6756(6756))
f6757(a6757) => a6757 + 1
plot(f6757(6757))
f6758(a6758) => a6758 + 1
plot(f6758(6758))
f6759(a6759) => a6759 + 1
plot(f6759(6759))
f6760(a6760) => a6760 + 1
plot(f6760(6760))
f6761(a6761) => a6761 + 1
plot(f6761(6761))
f6762(a6762) => a6762 + 1
plot(f6762(6762))
f6763(a6763) => a6763 + 1
plot(f6763(6763))
f6764(a6764) => a6764 + 1
plot(f6764(6764))
f6765(a6765) => a6765 + 1
plot(f6765(6765))
f6766(a6766) => a6766 + 1
plot(f6766(6766))
f6767(a6767) => a6767 + 1
plot(f6767(6767))
f6768(a6768) => a6768 + 1
plot(f6768(6768))
f6769(a6769) => a6769 + 1
plot(f6769(6769))
f6770(a6770) => a6770 + 1
plot(f6770(6770))
f6771(a6771) => a6771 + 1
plot(f6771(6771))
f6772(a6772) => a6772 + 1
plot(f6772(6772))
f6773(a6773) => a6773 + 1
plot(f6773(6773))
f6774(a6774) => a6774 + 1
plot(f6774(6774))
f6775(a6775) => a6775 + 1
plot(f6775(6775))
f6776(a6776) => a6776 + 1
plot(f6776(6776))
f6777(a6777) => a6777 + 1
plot(f6777(6777))
f6778(a6778) => a6778 + 1
plot(f6778(6778))
f6779(a6779) => a6779 + 1
plot(f6779(6779))
f6780(a6780) => a6780 + 1
plot(f6780(6780))
f6781(a6781) => a6781 + 1
plot(f6781(6781))
f6782(a6782) => a6782 + 1
plot(f6782(6782))
f6783(a6783) => a6783 + 1
plot(f6783(6783))
f6784(a6784) => a6784 + 1
plot(f6784(6784))
f6785(a6785) => a6785 + 1
plot(f6785(6785))
f6786(a6786) => a6786 + 1
plot(f6786(6786))
f6787(a6787) => a6787 + 1
plot(f6787(6787))
f6788(a6788) => a6788 + 1
plot(f6788(6788))
f6789(a6789) => a6789 + 1
plot(f6789(6789))
f6790(a6790) => a6790 + 1
plot(f6790(6790))
f6791(a6791) => a6791 + 1
plot(f6791(6791))
f6792(a6792) => a6792 + 1
plot(f6792(6792))
f6793(a6793) => a6793 + 1
plot(f6793(6793))
f6794(a6794) => a6794 + 1
plot(f6794(6794))
f6795(a6795) => a6795 + 1
plot(f6795(6795))
f6796(a6796) => a6796 + 1
plot(f6796(6796))
f6797(a6797) => a6797 + 1
plot(f6797(6797))
f6798(a6798) => a6798 + 1
plot(f6798(6798))
f6799(a6799) => a6799 + 1
plot(f6799(6799))
f6800(a6800) => a6800 + 1
plot(f6800(6800))
f6801(a6801) => a6801 + 1
plot(f6801(6801))
f6802(a6802) => a6802 + 1
plot(f6802(6802))
f6803(a6803) => a6803 + 1
plot(f6803(6803))
f6804(a6804) => a6804 + 1
plot(f6804(6804))
f6805(a6805) => a6805 + 1
plot(f6805(6805))
f6806(a6806) => a6806 + 1
plot(f6806(6806))
f6807(a6807) => a6807 + 1
plot(f6807(6807))
f6808(a6808) => a6808 + 1
plot(f6808(6808))
f6809(a6809) => a6809 + 1
plot(f6809(6809))
f6810(a6810) => a6810 + 1
plot(f6810(6810))
f6811(a6811) => a6811 + 1
plot(f6811(6811))
f6812(a6812) => a6812 + 1
plot(f6812(6812))
f6813(a6813) => a6813 + 1
plot(f6813(6813))
f6814(a6814) => a6814 + 1
plot(f6814(6814))
f6815(a6815) => a6815 + 1
plot(f6815(6815))
f6816(a6816) => a6816 + 1
plot(f6816(6816))
f6817(a6817) => a6817 + 1
plot(f6817(6817))
f6818(a6818) => a6818 + 1
plot(f6818(6818))
f6819(a6819) => a6819 + 1
plot(f6819(6819))
f6820(a6820) => a6820 + 1
plot(f6820(6820))
f6821(a6821) => a6821 + 1
plot(f6821(6821))
f6822(a6822) => a6822 + 1
plot(f6822(6822))
f6823(a6823) => a6823 + 1
plot(f6823(6823))
f6824(a6824) => a6824 + 1
plot(f6824(6824))
f6825(a6825) => a6825 + 1
plot(f6825(6825))
f6826(a6826) => a6826 + 1
plot(f6826(6826))
f6827(a6827) => a6827 + 1
plot(f6827(6827))
f6828(a6828) => a6828 + 1
plot(f6828(6828))
f6829(a6829) => a6829 + 1
plot(f6829(6829))
f6830(a6830) => a6830 + 1
plot(f6830(6830))
f6831(a6831) => a6831 + 1
plot(f6831(6831))
f6832(a6832) => a6832 + 1
plot(f6832(6832))
f6833(a6833) => a6833 + 1
plot(f6833(6833))
f6834(a6834) => a6834 + 1
plot(f6834(6834))
f6835(a6835) => a6835 + 1
plot(f6835(6835))
f6836(a6836) => a6836 + 1
plot(f6836(6836))
f6837(a6837) => a6837 + 1
plot(f6837(6837))
f6838(a6838) => a6838 + 1
plot(f6838(6838))
f6839(a6839) => a6839 + 1
plot(f6839(6839))
f6840(a6840) => a6840 + 1
plot(f6840(6840))
f6841(a6841) => a6841 + 1
plot(f6841(6841))
f6842(a6842) => a6842 + 1
plot(f6842(6842))
f6843(a6843) => a6843 + 1
plot(f6843(6843))
f6844(a6844) => a6844 + 1
plot(f6844(6844))
f6845(a6845) => a6845 + 1
plot(f6845(6845))
f6846(a6846) => a6846 + 1
plot(f6846(6846))
f6847(a6847) => a6847 + 1
plot(f6847(6847))
f6848(a6848) => a6848 + 1
plot(f6848(6848))
f6849(a6849) => a6849 + 1
plot(f6849(6849))
f6850(a6850) => a6850 + 1
plot(f6850(6850))
f6851(a6851) => a6851 + 1
plot(f6851(6851))
f6852(a6852) => a6852 + 1
plot(f6852(6852))
f6853(a6853) => a6853 + 1
plot(f6853(6853))
f6854(a6854) => a6854 + 1
plot(f6854(6854))
f6855(a6855) => a6855 + 1
plot(f6855(6855))
f6856(a6856) => a6856 + 1
plot(f6856(6856))
f6857(a6857) => a6857 + 1
plot(f6857(6857))
f6858(a6858) => a6858 + 1
plot(f6858(6858))
f6859(a6859) => a6859 + 1
plot(f6859(6859))
f6860(a6860) => a6860 + 1
plot(f6860(6860))
f6861(a6861) => a6861 + 1
plot(f6861(6861))
f6862(a6862) => a6862 + 1
plot(f6862(6862))
f6863(a6863) => a6863 + 1
plot(f6863(6863))
f6864(a6864) => a6864 + 1
plot(f6864(6864))
f6865(a6865) => a6865 + 1
plot(f6865(6865))
f6866(a6866) => a6866 + 1
plot(f6866(6866))
f6867(a6867) => a6867 + 1
plot(f6867(6867))
f6868(a6868) => a6868 + 1
plot(f6868(6868))
f6869(a6869) => a6869 + 1
plot(f6869(6869))
f6870(a6870) => a6870 + 1
plot(f6870(6870))
f6871(a6871) => a6871 + 1
plot(f6871(6871))
f6872(a6872) => a6872 + 1
plot(f6872(6872))
f6873(a6873) => a6873 + 1
plot(f6873(6873))
f6874(a6874) => a6874 + 1
plot(f6874(6874))
f6875(a6875) => a6875 + 1
plot(f6875(6875))
f6876(a6876) => a6876 + 1
plot(f6876(6876))
f6877(a6877) => a6877 + 1
plot(f6877(6877))
f6878(a6878) => a6878 + 1
plot(f6878(6878))
f6879(a6879) => a6879 + 1
plot(f6879(6879))
f6880(a6880) => a6880 + 1
plot(f6880(6880))
f6881(a6881) => a6881 + 1
plot(f6881(6881))
f6882(a6882) => a6882 + 1
plot(f6882(6882))
f6883(a6883) => a6883 + 1
plot(f6883(6883))
f6884(a6884) => a6884 + 1
plot(f6884(6884))
f6885(a6885) => a6885 + 1
plot(f6885(6885))
f6886(a6886) => a6886 + 1
plot(f6886(6886))
f6887(a6887) => a6887 + 1
plot(f6887(6887))
f6888(a6888) => a6888 + 1
plot(f6888(6888))
f6889(a6889) => a6889 + 1
plot(f6889(6889))
f6890(a6890) => a6890 + 1
plot(f6890(6890))
f6891(a6891) => a6891 + 1
plot(f6891(6891))
f6892(a6892) => a6892 + 1
plot(f6892(6892))
f6893(a6893) => a6893 + 1
plot(f6893(6893))
f6894(a6894) => a6894 + 1
plot(f6894(6894))
f6895(a6895) => a6895 + 1
plot(f6895(6895))
f6896(a6896) => a6896 + 1
plot(f6896(6896))
f6897(a6897) => a6897 + 1
plot(f6897(6897))
f6898(a6898) => a6898 + 1
plot(f6898(6898))
f6899(a6899) => a6899 + 1
plot(f6899(6899))
f6900(a6900) => a6900 + 1
plot(f6900(6900))
f6901(a6901) => a6901 + 1
plot(f6901(6901))
f6902(a6902) => a6902 + 1
plot(f6902(6902))
f6903(a6903) => a6903 + 1
plot(f6903(6903))
f6904(a6904) => a6904 + 1
plot(f6904(6904))
f6905(a6905) => a6905 + 1
plot(f6905(6905))
f6906(a6906) => a6906 + 1
plot(f6906(6906))
f6907(a6907) => a6907 + 1
plot(f6907(6907))
f6908(a6908) => a6908 + 1
plot(f6908(6908))
f6909(a6909) => a6909 + 1
plot(f6909(6909))
f6910(a6910) => a6910 + 1
plot(f6910(6910))
f6911(a6911) => a6911 + 1
plot(f6911(6911))
f6912(a6912) => a6912 + 1
plot(f6912(6912))
f6913(a6913) => a6913 + 1
plot(f6913(6913))
f6914(a6914) => a6914 + 1
plot(f6914(6914))
f6915(a6915) => a6915 + 1
plot(f6915(6915))
f6916(a6916) => a6916 + 1
plot(f6916(6916))
f6917(a6917) => a6917 + 1
plot(f6917(6917))
f6918(a6918) => a6918 + 1
plot(f6918(6918))
f6919(a6919) => a6919 + 1
plot(f6919(6919))
f6920(a6920) => a6920 + 1
plot(f6920(6920))
f6921(a6921) => a6921 + 1
plot(f6921(6921))
f6922(a6922) => a6922 + 1
plot(f6922(6922))
f6923(a6923) => a6923 + 1
plot(f6923(6923))
f6924(a6924) => a6924 + 1
plot(f6924(6924))
f6925(a6925) => a6925 + 1
plot(f6925(6925))
f6926(a6926) => a6926 + 1
plot(f6926(6926))
f6927(a6927) => a6927 + 1
plot(f6927(6927))
f6928(a6928) => a6928 + 1
plot(f6928(6928))
f6929(a6929) => a6929 + 1
plot(f6929(6929))
f6930(a6930) => a6930 + 1
plot(f6930(6930))
f6931(a6931) => a6931 + 1
plot(f6931(6931))
f6932(a6932) => a6932 + 1
plot(f6932(6932))
f6933(a6933) => a6933 + 1
plot(f6933(6933))
f6934(a6934) => a6934 + 1
plot(f6934(6934))
f6935(a6935) => a6935 + 1
plot(f6935(6935))
f6936(a6936) => a6936 + 1
plot(f6936(6936))
f6937(a6937) => a6937 + 1
plot(f6937(6937))
f6938(a6938) => a6938 + 1
plot(f6938(6938))
f6939(a6939) => a6939 + 1
plot(f6939(6939))
f6940(a6940) => a6940 + 1
plot(f6940(6940))
f6941(a6941) => a6941 + 1
plot(f6941(6941))
f6942(a6942) => a6942 + 1
plot(f6942(6942))
f6943(a6943) => a6943 + 1
plot(f6943(6943))
f6944(a6944) => a6944 + 1
plot(f6944(6944))
f6945(a6945) => a6945 + 1
plot(f6945(6945))
f6946(a6946) => a6946 + 1
plot(f6946(6946))
f6947(a6947) => a6947 + 1
plot(f6947(6947))
f6948(a6948) => a6948 + 1
plot(f6948(6948))
f6949(a6949) => a6949 + 1
plot(f6949(6949))
f6950(a6950) => a6950 + 1
plot(f6950(6950))
f6951(a6951) => a6951 + 1
plot(f6951(6951))
f6952(a6952) => a6952 + 1
plot(f6952(6952))
f6953(a6953) => a6953 + 1
plot(f6953(6953))
f6954(a6954) => a6954 + 1
plot(f6954(6954))
f6955(a6955) => a6955 + 1
plot(f6955(6955))
f6956(a6956) => a6956 + 1
plot(f6956(6956))
f6957(a6957) => a6957 + 1
plot(f6957(6957))
f6958(a6958) => a6958 + 1
plot(f6958(6958))
f6959(a6959) => a6959 + 1
plot(f6959(6959))
f6960(a6960) => a6960 + 1
plot(f6960(6960))
f6961(a6961) => a6961 + 1
plot(f6961(6961))
f6962(a6962) => a6962 + 1
plot(f6962(6962))
f6963(a6963) => a6963 + 1
plot(f6963(6963))
f6964(a6964) => a6964 + 1
plot(f6964(6964))
f6965(a6965) => a6965 + 1
plot(f6965(6965))
f6966(a6966) => a6966 + 1
plot(f6966(6966))
f6967(a6967) => a6967 + 1
plot(f6967(6967))
f6968(a6968) => a6968 + 1
plot(f6968(6968))
f6969(a6969) => a6969 + 1
plot(f6969(6969))
f6970(a6970) => a6970 + 1
plot(f6970(6970))
f6971(a6971) => a6971 + 1
plot(f6971(6971))
f6972(a6972) => a6972 + 1
plot(f6972(6972))
f6973(a6973) => a6973 + 1
plot(f6973(6973))
f6974(a6974) => a6974 + 1
plot(f6974(6974))
f6975(a6975) => a6975 + 1
plot(f6975(6975))
f6976(a6976) => a6976 + 1
plot(f6976(6976))
f6977(a6977) => a6977 + 1
plot(f6977(6977))
f6978(a6978) => a6978 + 1
plot(f6978(6978))
f6979(a6979) => a6979 + 1
plot(f6979(6979))
f6980(a6980) => a6980 + 1
plot(f6980(6980))
f6981(a6981) => a6981 + 1
plot(f6981(6981))
f6982(a6982) => a6982 + 1
plot(f6982(6982))
f6983(a6983) => a6983 + 1
plot(f6983(6983))
f6984(a6984) => a6984 + 1
plot(f6984(6984))
f6985(a6985) => a6985 + 1
plot(f6985(6985))
f6986(a6986) => a6986 + 1
plot(f6986(6986))
f6987(a6987) => a6987 + 1
plot(f6987(6987))
f6988(a6988) => a6988 + 1
plot(f6988(6988))
f6989(a6989) => a6989 + 1
plot(f6989(6989))
f6990(a6990) => a6990 + 1
plot(f6990(6990))
f6991(a6991) => a6991 + 1
plot(f6991(6991))
f6992(a6992) => a6992 + 1
plot(f6992(6992))
f6993(a6993) => a6993 + 1
plot(f6993(6993))
f6994(a6994) => a6994 + 1
plot(f6994(6994))
f6995(a6995) => a6995 + 1
plot(f6995(6995))
f6996(a6996) => a6996 + 1
plot(f6996(6996))
f6997(a6997) => a6997 + 1
plot(f6997(6997))
f6998(a6998) => a6998 + 1
plot(f6998(6998))
f6999(a6999) => a6999 + 1
plot(f6999(6999))
f7000(a7000) => a7000 + 1
plot(f7000(7000))
f7001(a7001) => a7001 + 1
plot(f7001(7001))
f7002(a7002) => a7002 + 1
plot(f7002(7002))
f7003(a7003) => a7003 + 1
plot(f7003(7003))
f7004(a7004) => a7004 + 1
plot(f7004(7004))
f7005(a7005) => a7005 + 1
plot(f7005(7005))
f7006(a7006) => a7006 + 1
plot(f7006(7006))
f7007(a7007) => a7007 + 1
plot(f7007(7007))
f7008(a7008) => a7008 + 1
plot(f7008(7008))
f7009(a7009) => a7009 + 1
plot(f7009(7009))
f7010(a7010) => a7010 + 1
plot(f7010(7010))
f7011(a7011) => a7011 + 1
plot(f7011(7011))
f7012(a7012) => a7012 + 1
plot(f7012(7012))
f7013(a7013) => a7013 + 1
plot(f7013(7013))
f7014(a7014) => a7014 + 1
plot(f7014(7014))
f7015(a7015) => a7015 + 1
plot(f7015(7015))
f7016(a7016) => a7016 + 1
plot(f7016(7016))
f7017(a7017) => a7017 + 1
plot(f7017(7017))
f7018(a7018) => a7018 + 1
plot(f7018(7018))
f7019(a7019) => a7019 + 1
plot(f7019(7019))
f7020(a7020) => a7020 + 1
plot(f7020(7020))
f7021(a7021) => a7021 + 1
plot(f7021(7021))
f7022(a7022) => a7022 + 1
plot(f7022(7022))
f7023(a7023) => a7023 + 1
plot(f7023(7023))
f7024(a7024) => a7024 + 1
plot(f7024(7024))
f7025(a7025) => a7025 + 1
plot(f7025(7025))
f7026(a7026) => a7026 + 1
plot(f7026(7026))
f7027(a7027) => a7027 + 1
plot(f7027(7027))
f7028(a7028) => a7028 + 1
plot(f7028(7028))
f7029(a7029) => a7029 + 1
plot(f7029(7029))
f7030(a7030) => a7030 + 1
plot(f7030(7030))
f7031(a7031) => a7031 + 1
plot(f7031(7031))
f7032(a7032) => a7032 + 1
plot(f7032(7032))
f7033(a7033) => a7033 + 1
plot(f7033(7033))
f7034(a7034) => a7034 + 1
plot(f7034(7034))
f7035(a7035) => a7035 + 1
plot(f7035(7035))
f7036(a7036) => a7036 + 1
plot(f7036(7036))
f7037(a7037) => a7037 + 1
plot(f7037(7037))
f7038(a7038) => a7038 + 1
plot(f7038(7038))
f7039(a7039) => a7039 + 1
plot(f7039(7039))
f7040(a7040) => a7040 + 1
plot(f7040(7040))
f7041(a7041) => a7041 + 1
plot(f7041(7041))
f7042(a7042) => a7042 + 1
plot(f7042(7042))
f7043(a7043) => a7043 + 1
plot(f7043(7043))
f7044(a7044) => a7044 + 1
plot(f7044(7044))
f7045(a7045) => a7045 + 1
plot(f7045(7045))
f7046(a7046) => a7046 + 1
plot(f7046(7046))
f7047(a7047) => a7047 + 1
plot(f7047(7047))
f7048(a7048) => a7048 + 1
plot(f7048(7048))
f7049(a7049) => a7049 + 1
plot(f7049(7049))
f7050(a7050) => a7050 + 1
plot(f7050(7050))
f7051(a7051) => a7051 + 1
plot(f7051(7051))
f7052(a7052) => a7052 + 1
plot(f7052(7052))
f7053(a7053) => a7053 + 1
plot(f7053(7053))
f7054(a7054) => a7054 + 1
plot(f7054(7054))
f7055(a7055) => a7055 + 1
plot(f7055(7055))
f7056(a7056) => a7056 + 1
plot(f7056(7056))
f7057(a7057) => a7057 + 1
plot(f7057(7057))
f7058(a7058) => a7058 + 1
plot(f7058(7058))
f7059(a7059) => a7059 + 1
plot(f7059(7059))
f7060(a7060) => a7060 + 1
plot(f7060(7060))
f7061(a7061) => a7061 + 1
plot(f7061(7061))
f7062(a7062) => a7062 + 1
plot(f7062(7062))
f7063(a7063) => a7063 + 1
plot(f7063(7063))
f7064(a7064) => a7064 + 1
plot(f7064(7064))
f7065(a7065) => a7065 + 1
plot(f7065(7065))
f7066(a7066) => a7066 + 1
plot(f7066(7066))
f7067(a7067) => a7067 + 1
plot(f7067(7067))
f7068(a7068) => a7068 + 1
plot(f7068(7068))
f7069(a7069) => a7069 + 1
plot(f7069(7069))
f7070(a7070) => a7070 + 1
plot(f7070(7070))
f7071(a7071) => a7071 + 1
plot(f7071(7071))
f7072(a7072) => a7072 + 1
plot(f7072(7072))
f7073(a7073) => a7073 + 1
plot(f7073(7073))
f7074(a7074) => a7074 + 1
plot(f7074(7074))
f7075(a7075) => a7075 + 1
plot(f7075(7075))
f7076(a7076) => a7076 + 1
plot(f7076(7076))
f7077(a7077) => a7077 + 1
plot(f7077(7077))
f7078(a7078) => a7078 + 1
plot(f7078(7078))
f7079(a7079) => a7079 + 1
plot(f7079(7079))
f7080(a7080) => a7080 + 1
plot(f7080(7080))
f7081(a7081) => a7081 + 1
plot(f7081(7081))
f7082(a7082) => a7082 + 1
plot(f7082(7082))
f7083(a7083) => a7083 + 1
plot(f7083(7083))
f7084(a7084) => a7084 + 1
plot(f7084(7084))
f7085(a7085) => a7085 + 1
plot(f7085(7085))
f7086(a7086) => a7086 + 1
plot(f7086(7086))
f7087(a7087) => a7087 + 1
plot(f7087(7087))
f7088(a7088) => a7088 + 1
plot(f7088(7088))
f7089(a7089) => a7089 + 1
plot(f7089(7089))
f7090(a7090) => a7090 + 1
plot(f7090(7090))
f7091(a7091) => a7091 + 1
plot(f7091(7091))
f7092(a7092) => a7092 + 1
plot(f7092(7092))
f7093(a7093) => a7093 + 1
plot(f7093(7093))
f7094(a7094) => a7094 + 1
plot(f7094(7094))
f7095(a7095) => a7095 + 1
plot(f7095(7095))
f7096(a7096) => a7096 + 1
plot(f7096(7096))
f7097(a7097) => a7097 + 1
plot(f7097(7097))
f7098(a7098) => a7098 + 1
plot(f7098(7098))
f7099(a7099) => a7099 + 1
plot(f7099(7099))
f7100(a7100) => a7100 + 1
plot(f7100(7100))
f7101(a7101) => a7101 + 1
plot(f7101(7101))
f7102(a7102) => a7102 + 1
plot(f7102(7102))
f7103(a7103) => a7103 + 1
plot(f7103(7103))
f7104(a7104) => a7104 + 1
plot(f7104(7104))
f7105(a7105) => a7105 + 1
plot(f7105(7105))
f7106(a7106) => a7106 + 1
plot(f7106(7106))
f7107(a7107) => a7107 + 1
plot(f7107(7107))
f7108(a7108) => a7108 + 1
plot(f7108(7108))
f7109(a7109) => a7109 + 1
plot(f7109(7109))
f7110(a7110) => a7110 + 1
plot(f7110(7110))
f7111(a7111) => a7111 + 1
plot(f7111(7111))
f7112(a7112) => a7112 + 1
plot(f7112(7112))
f7113(a7113) => a7113 + 1
plot(f7113(7113))
f7114(a7114) => a7114 + 1
plot(f7114(7114))
f7115(a7115) => a7115 + 1
plot(f7115(7115))
f7116(a7116) => a7116 + 1
plot(f7116(7116))
f7117(a7117) => a7117 + 1
plot(f7117(7117))
f7118(a7118) => a7118 + 1
plot(f7118(7118))
f7119(a7119) => a7119 + 1
plot(f7119(7119))
f7120(a7120) => a7120 + 1
plot(f7120(7120))
f7121(a7121) => a7121 + 1
plot(f7121(7121))
f7122(a7122) => a7122 + 1
plot(f7122(7122))
f7123(a7123) => a7123 + 1
plot(f7123(7123))
f7124(a7124) => a7124 + 1
plot(f7124(7124))
f7125(a7125) => a7125 + 1
plot(f7125(7125))
f7126(a7126) => a7126 + 1
plot(f7126(7126))
f7127(a7127) => a7127 + 1
plot(f7127(7127))
f7128(a7128) => a7128 + 1
plot(f7128(7128))
f7129(a7129) => a7129 + 1
plot(f7129(7129))
f7130(a7130) => a7130 + 1
plot(f7130(7130))
f7131(a7131) => a7131 + 1
plot(f7131(7131))
f7132(a7132) => a7132 + 1
plot(f7132(7132))
f7133(a7133) => a7133 + 1
plot(f7133(7133))
f7134(a7134) => a7134 + 1
plot(f7134(7134))
f7135(a7135) => a7135 + 1
plot(f7135(7135))
f7136(a7136) => a7136 + 1
plot(f7136(7136))
f7137(a7137) => a7137 + 1
plot(f7137(7137))
f7138(a7138) => a7138 + 1
plot(f7138(7138))
f7139(a7139) => a7139 + 1
plot(f7139(7139))
f7140(a7140) => a7140 + 1
plot(f7140(7140))
f7141(a7141) => a7141 + 1
plot(f7141(7141))
f7142(a7142) => a7142 + 1
plot(f7142(7142))
f7143(a7143) => a7143 + 1
plot(f7143(7143))
f7144(a7144) => a7144 + 1
plot(f7144(7144))
f7145(a7145) => a7145 + 1
plot(f7145(7145))
f7146(a7146) => a7146 + 1
plot(f7146(7146))
f7147(a7147) => a7147 + 1
plot(f7147(7147))
f7148(a7148) => a7148 + 1
plot(f7148(7148))
f7149(a7149) => a7149 + 1
plot(f7149(7149))
f7150(a7150) => a7150 + 1
plot(f7150(7150))
f7151(a7151) => a7151 + 1
plot(f7151(7151))
f7152(a7152) => a7152 + 1
plot(f7152(7152))
f7153(a7153) => a7153 + 1
plot(f7153(7153))
f7154(a7154) => a7154 + 1
plot(f7154(7154))
f7155(a7155) => a7155 + 1
plot(f7155(7155))
f7156(a7156) => a7156 + 1
plot(f7156(7156))
f7157(a7157) => a7157 + 1
plot(f7157(7157))
f7158(a7158) => a7158 + 1
plot(f7158(7158))
f7159(a7159) => a7159 + 1
plot(f7159(7159))
f7160(a7160) => a7160 + 1
plot(f7160(7160))
f7161(a7161) => a7161 + 1
plot(f7161(7161))
f7162(a7162) => a7162 + 1
plot(f7162(7162))
f7163(a7163) => a7163 + 1
plot(f7163(7163))
f7164(a7164) => a7164 + 1
plot(f7164(7164))
f7165(a7165) => a7165 + 1
plot(f7165(7165))
f7166(a7166) => a7166 + 1
plot(f7166(7166))
f7167(a7167) => a7167 + 1
plot(f7167(7167))
f7168(a7168) => a7168 + 1
plot(f7168(7168))
f7169(a7169) => a7169 + 1
plot(f7169(7169))
f7170(a7170) => a7170 + 1
plot(f7170(7170))
f7171(a7171) => a7171 + 1
plot(f7171(7171))
f7172(a7172) => a7172 + 1
plot(f7172(7172))
f7173(a7173) => a7173 + 1
plot(f7173(7173))
f7174(a7174) => a7174 + 1
plot(f7174(7174))
f7175(a7175) => a7175 + 1
plot(f7175(7175))
f7176(a7176) => a7176 + 1
plot(f7176(7176))
f7177(a7177) => a7177 + 1
plot(f7177(7177))
f7178(a7178) => a7178 + 1
plot(f7178(7178))
f7179(a7179) => a7179 + 1
plot(f7179(7179))
f7180(a7180) => a7180 + 1
plot(f7180(7180))
f7181(a7181) => a7181 + 1
plot(f7181(7181))
f7182(a7182) => a7182 + 1
plot(f7182(7182))
f7183(a7183) => a7183 + 1
plot(f7183(7183))
f7184(a7184) => a7184 + 1
plot(f7184(7184))
f7185(a7185) => a7185 + 1
plot(f7185(7185))
f7186(a7186) => a7186 + 1
plot(f7186(7186))
f7187(a7187) => a7187 + 1
plot(f7187(7187))
f7188(a7188) => a7188 + 1
plot(f7188(7188))
f7189(a7189) => a7189 + 1
plot(f7189(7189))
f7190(a7190) => a7190 + 1
plot(f7190(7190))
f7191(a7191) => a7191 + 1
plot(f7191(7191))
f7192(a7192) => a7192 + 1
plot(f7192(7192))
f7193(a7193) => a7193 + 1
plot(f7193(7193))
f7194(a7194) => a7194 + 1
plot(f7194(7194))
f7195(a7195) => a7195 + 1
plot(f7195(7195))
f7196(a7196) => a7196 + 1
plot(f7196(7196))
f7197(a7197) => a7197 + 1
plot(f7197(7197))
f7198(a7198) => a7198 + 1
plot(f7198(7198))
f7199(a7199) => a7199 + 1
plot(f7199(7199))
f7200(a7200) => a7200 + 1
plot(f7200(7200))
f7201(a7201) => a7201 + 1
plot(f7201(7201))
f7202(a7202) => a7202 + 1
plot(f7202(7202))
f7203(a7203) => a7203 + 1
plot(f7203(7203))
f7204(a7204) => a7204 + 1
plot(f7204(7204))
f7205(a7205) => a7205 + 1
plot(f7205(7205))
f7206(a7206) => a7206 + 1
plot(f7206(7206))
f7207(a7207) => a7207 + 1
plot(f7207(7207))
f7208(a7208) => a7208 + 1
plot(f7208(7208))
f7209(a7209) => a7209 + 1
plot(f7209(7209))
f7210(a7210) => a7210 + 1
plot(f7210(7210))
f7211(a7211) => a7211 + 1
plot(f7211(7211))
f7212(a7212) => a7212 + 1
plot(f7212(7212))
f7213(a7213) => a7213 + 1
plot(f7213(7213))
f7214(a7214) => a7214 + 1
plot(f7214(7214))
f7215(a7215) => a7215 + 1
plot(f7215(7215))
f7216(a7216) => a7216 + 1
plot(f7216(7216))
f7217(a7217) => a7217 + 1
plot(f7217(7217))
f7218(a7218) => a7218 + 1
plot(f7218(7218))
f7219(a7219) => a7219 + 1
plot(f7219(7219))
f7220(a7220) => a7220 + 1
plot(f7220(7220))
f7221(a7221) => a7221 + 1
plot(f7221(7221))
f7222(a7222) => a7222 + 1
plot(f7222(7222))
f7223(a7223) => a7223 + 1
plot(f7223(7223))
f7224(a7224) => a7224 + 1
plot(f7224(7224))
f7225(a7225) => a7225 + 1
plot(f7225(7225))
f7226(a7226) => a7226 + 1
plot(f7226(7226))
f7227(a7227) => a7227 + 1
plot(f7227(7227))
f7228(a7228) => a7228 + 1
plot(f7228(7228))
f7229(a7229) => a7229 + 1
plot(f7229(7229))
f7230(a7230) => a7230 + 1
plot(f7230(7230))
f7231(a7231) => a7231 + 1
plot(f7231(7231))
f7232(a7232) => a7232 + 1
plot(f7232(7232))
f7233(a7233) => a7233 + 1
plot(f7233(7233))
f7234(a7234) => a7234 + 1
plot(f7234(7234))
f7235(a7235) => a7235 + 1
plot(f7235(7235))
f7236(a7236) => a7236 + 1
plot(f7236(7236))
f7237(a7237) => a7237 + 1
plot(f7237(7237))
f7238(a7238) => a7238 + 1
plot(f7238(7238))
f7239(a7239) => a7239 + 1
plot(f7239(7239))
f7240(a7240) => a7240 + 1
plot(f7240(7240))
f7241(a7241) => a7241 + 1
plot(f7241(7241))
f7242(a7242) => a7242 + 1
plot(f7242(7242))
f7243(a7243) => a7243 + 1
plot(f7243(7243))
f7244(a7244) => a7244 + 1
plot(f7244(7244))
f7245(a7245) => a7245 + 1
plot(f7245(7245))
f7246(a7246) => a7246 + 1
plot(f7246(7246))
f7247(a7247) => a7247 + 1
plot(f7247(7247))
f7248(a7248) => a7248 + 1
plot(f7248(7248))
f7249(a7249) => a7249 + 1
plot(f7249(7249))
f7250(a7250) => a7250 + 1
plot(f7250(7250))
f7251(a7251) => a7251 + 1
plot(f7251(7251))
f7252(a7252) => a7252 + 1
plot(f7252(7252))
f7253(a7253) => a7253 + 1
plot(f7253(7253))
f7254(a7254) => a7254 + 1
plot(f7254(7254))
f7255(a7255) => a7255 + 1
plot(f7255(7255))
f7256(a7256) => a7256 + 1
plot(f7256(7256))
f7257(a7257) => a7257 + 1
plot(f7257(7257))
f7258(a7258) => a7258 + 1
plot(f7258(7258))
f7259(a7259) => a7259 + 1
plot(f7259(7259))
f7260(a7260) => a7260 + 1
plot(f7260(7260))
f7261(a7261) => a7261 + 1
plot(f7261(7261))
f7262(a7262) => a7262 + 1
plot(f7262(7262))
f7263(a7263) => a7263 + 1
plot(f7263(7263))
f7264(a7264) => a7264 + 1
plot(f7264(7264))
f7265(a7265) => a7265 + 1
plot(f7265(7265))
f7266(a7266) => a7266 + 1
plot(f7266(7266))
f7267(a7267) => a7267 + 1
plot(f7267(7267))
f7268(a7268) => a7268 + 1
plot(f7268(7268))
f7269(a7269) => a7269 + 1
plot(f7269(7269))
f7270(a7270) => a7270 + 1
plot(f7270(7270))
f7271(a7271) => a7271 + 1
plot(f7271(7271))
f7272(a7272) => a7272 + 1
plot(f7272(7272))
f7273(a7273) => a7273 + 1
plot(f7273(7273))
f7274(a7274) => a7274 + 1
plot(f7274(7274))
f7275(a7275) => a7275 + 1
plot(f7275(7275))
f7276(a7276) => a7276 + 1
plot(f7276(7276))
f7277(a7277) => a7277 + 1
plot(f7277(7277))
f7278(a7278) => a7278 + 1
plot(f7278(7278))
f7279(a7279) => a7279 + 1
plot(f7279(7279))
f7280(a7280) => a7280 + 1
plot(f7280(7280))
f7281(a7281) => a7281 + 1
plot(f7281(7281))
f7282(a7282) => a7282 + 1
plot(f7282(7282))
f7283(a7283) => a7283 + 1
plot(f7283(7283))
f7284(a7284) => a7284 + 1
plot(f7284(7284))
f7285(a7285) => a7285 + 1
plot(f7285(7285))
f7286(a7286) => a7286 + 1
plot(f7286(7286))
f7287(a7287) => a7287 + 1
plot(f7287(7287))
f7288(a7288) => a7288 + 1
plot(f7288(7288))
f7289(a7289) => a7289 + 1
plot(f7289(7289))
f7290(a7290) => a7290 + 1
plot(f7290(7290))
f7291(a7291) => a7291 + 1
plot(f7291(7291))
f7292(a7292) => a7292 + 1
plot(f7292(7292))
f7293(a7293) => a7293 + 1
plot(f7293(7293))
f7294(a7294) => a7294 + 1
plot(f7294(7294))
f7295(a7295) => a7295 + 1
plot(f7295(7295))
f7296(a7296) => a7296 + 1
plot(f7296(7296))
f7297(a7297) => a7297 + 1
plot(f7297(7297))
f7298(a7298) => a7298 + 1
plot(f7298(7298))
f7299(a7299) => a7299 + 1
plot(f7299(7299))
f7300(a7300) => a7300 + 1
plot(f7300(7300))
f7301(a7301) => a7301 + 1
plot(f7301(7301))
f7302(a7302) => a7302 + 1
plot(f7302(7302))
f7303(a7303) => a7303 + 1
plot(f7303(7303))
f7304(a7304) => a7304 + 1
plot(f7304(7304))
f7305(a7305) => a7305 + 1
plot(f7305(7305))
f7306(a7306) => a7306 + 1
plot(f7306(7306))
f7307(a7307) => a7307 + 1
plot(f7307(7307))
f7308(a7308) => a7308 + 1
plot(f7308(7308))
f7309(a7309) => a7309 + 1
plot(f7309(7309))
f7310(a7310) => a7310 + 1
plot(f7310(7310))
f7311(a7311) => a7311 + 1
plot(f7311(7311))
f7312(a7312) => a7312 + 1
plot(f7312(7312))
f7313(a7313) => a7313 + 1
plot(f7313(7313))
f7314(a7314) => a7314 + 1
plot(f7314(7314))
f7315(a7315) => a7315 + 1
plot(f7315(7315))
f7316(a7316) => a7316 + 1
plot(f7316(7316))
f7317(a7317) => a7317 + 1
plot(f7317(7317))
f7318(a7318) => a7318 + 1
plot(f7318(7318))
f7319(a7319) => a7319 + 1
plot(f7319(7319))
f7320(a7320) => a7320 + 1
plot(f7320(7320))
f7321(a7321) => a7321 + 1
plot(f7321(7321))
f7322(a7322) => a7322 + 1
plot(f7322(7322))
f7323(a7323) => a7323 + 1
plot(f7323(7323))
f7324(a7324) => a7324 + 1
plot(f7324(7324))
f7325(a7325) => a7325 + 1
plot(f7325(7325))
f7326(a7326) => a7326 + 1
plot(f7326(7326))
f7327(a7327) => a7327 + 1
plot(f7327(7327))
f7328(a7328) => a7328 + 1
plot(f7328(7328))
f7329(a7329) => a7329 + 1
plot(f7329(7329))
f7330(a7330) => a7330 + 1
plot(f7330(7330))
f7331(a7331) => a7331 + 1
plot(f7331(7331))
f7332(a7332) => a7332 + 1
plot(f7332(7332))
f7333(a7333) => a7333 + 1
plot(f7333(7333))
f7334(a7334) => a7334 + 1
plot(f7334(7334))
f7335(a7335) => a7335 + 1
plot(f7335(7335))
f7336(a7336) => a7336 + 1
plot(f7336(7336))
f7337(a7337) => a7337 + 1
plot(f7337(7337))
f7338(a7338) => a7338 + 1
plot(f7338(7338))
f7339(a7339) => a7339 + 1
plot(f7339(7339))
f7340(a7340) => a7340 + 1
plot(f7340(7340))
f7341(a7341) => a7341 + 1
plot(f7341(7341))
f7342(a7342) => a7342 + 1
plot(f7342(7342))
f7343(a7343) => a7343 + 1
plot(f7343(7343))
f7344(a7344) => a7344 + 1
plot(f7344(7344))
f7345(a7345) => a7345 + 1
plot(f7345(7345))
f7346(a7346) => a7346 + 1
plot(f7346(7346))
f7347(a7347) => a7347 + 1
plot(f7347(7347))
f7348(a7348) => a7348 + 1
plot(f7348(7348))
f7349(a7349) => a7349 + 1
plot(f7349(7349))
f7350(a7350) => a7350 + 1
plot(f7350(7350))
f7351(a7351) => a7351 + 1
plot(f7351(7351))
f7352(a7352) => a7352 + 1
plot(f7352(7352))
f7353(a7353) => a7353 + 1
plot(f7353(7353))
f7354(a7354) => a7354 + 1
plot(f7354(7354))
f7355(a7355) => a7355 + 1
plot(f7355(7355))
f7356(a7356) => a7356 + 1
plot(f7356(7356))
f7357(a7357) => a7357 + 1
plot(f7357(7357))
f7358(a7358) => a7358 + 1
plot(f7358(7358))
f7359(a7359) => a7359 + 1
plot(f7359(7359))
f7360(a7360) => a7360 + 1
plot(f7360(7360))
f7361(a7361) => a7361 + 1
plot(f7361(7361))
f7362(a7362) => a7362 + 1
plot(f7362(7362))
f7363(a7363) => a7363 + 1
plot(f7363(7363))
f7364(a7364) => a7364 + 1
plot(f7364(7364))
f7365(a7365) => a7365 + 1
plot(f7365(7365))
f7366(a7366) => a7366 + 1
plot(f7366(7366))
f7367(a7367) => a7367 + 1
plot(f7367(7367))
f7368(a7368) => a7368 + 1
plot(f7368(7368))
f7369(a7369) => a7369 + 1
plot(f7369(7369))
f7370(a7370) => a7370 + 1
plot(f7370(7370))
f7371(a7371) => a7371 + 1
plot(f7371(7371))
f7372(a7372) => a7372 + 1
plot(f7372(7372))
f7373(a7373) => a7373 + 1
plot(f7373(7373))
f7374(a7374) => a7374 + 1
plot(f7374(7374))
f7375(a7375) => a7375 + 1
plot(f7375(7375))
f7376(a7376) => a7376 + 1
plot(f7376(7376))
f7377(a7377) => a7377 + 1
plot(f7377(7377))
f7378(a7378) => a7378 + 1
plot(f7378(7378))
f7379(a7379) => a7379 + 1
plot(f7379(7379))
f7380(a7380) => a7380 + 1
plot(f7380(7380))
f7381(a7381) => a7381 + 1
plot(f7381(7381))
f7382(a7382) => a7382 + 1
plot(f7382(7382))
f7383(a7383) => a7383 + 1
plot(f7383(7383))
f7384(a7384) => a7384 + 1
plot(f7384(7384))
f7385(a7385) => a7385 + 1
plot(f7385(7385))
f7386(a7386) => a7386 + 1
plot(f7386(7386))
f7387(a7387) => a7387 + 1
plot(f7387(7387))
f7388(a7388) => a7388 + 1
plot(f7388(7388))
f7389(a7389) => a7389 + 1
plot(f7389(7389))
f7390(a7390) => a7390 + 1
plot(f7390(7390))
f7391(a7391) => a7391 + 1
plot(f7391(7391))
f7392(a7392) => a7392 + 1
plot(f7392(7392))
f7393(a7393) => a7393 + 1
plot(f7393(7393))
f7394(a7394) => a7394 + 1
plot(f7394(7394))
f7395(a7395) => a7395 + 1
plot(f7395(7395))
f7396(a7396) => a7396 + 1
plot(f7396(7396))
f7397(a7397) => a7397 + 1
plot(f7397(7397))
f7398(a7398) => a7398 + 1
plot(f7398(7398))
f7399(a7399) => a7399 + 1
plot(f7399(7399))
f7400(a7400) => a7400 + 1
plot(f7400(7400))
f7401(a7401) => a7401 + 1
plot(f7401(7401))
f7402(a7402) => a7402 + 1
plot(f7402(7402))
f7403(a7403) => a7403 + 1
plot(f7403(7403))
f7404(a7404) => a7404 + 1
plot(f7404(7404))
f7405(a7405) => a7405 + 1
plot(f7405(7405))
f7406(a7406) => a7406 + 1
plot(f7406(7406))
f7407(a7407) => a7407 + 1
plot(f7407(7407))
f7408(a7408) => a7408 + 1
plot(f7408(7408))
f7409(a7409) => a7409 + 1
plot(f7409(7409))
f7410(a7410) => a7410 + 1
plot(f7410(7410))
f7411(a7411) => a7411 + 1
plot(f7411(7411))
f7412(a7412) => a7412 + 1
plot(f7412(7412))
f7413(a7413) => a7413 + 1
plot(f7413(7413))
f7414(a7414) => a7414 + 1
plot(f7414(7414))
f7415(a7415) => a7415 + 1
plot(f7415(7415))
f7416(a7416) => a7416 + 1
plot(f7416(7416))
f7417(a7417) => a7417 + 1
plot(f7417(7417))
f7418(a7418) => a7418 + 1
plot(f7418(7418))
f7419(a7419) => a7419 + 1
plot(f7419(7419))
f7420(a7420) => a7420 + 1
plot(f7420(7420))
f7421(a7421) => a7421 + 1
plot(f7421(7421))
f7422(a7422) => a7422 + 1
plot(f7422(7422))
f7423(a7423) => a7423 + 1
plot(f7423(7423))
f7424(a7424) => a7424 + 1
plot(f7424(7424))
f7425(a7425) => a7425 + 1
plot(f7425(7425))
f7426(a7426) => a7426 + 1
plot(f7426(7426))
f7427(a7427) => a7427 + 1
plot(f7427(7427))
f7428(a7428) => a7428 + 1
plot(f7428(7428))
f7429(a7429) => a7429 + 1
plot(f7429(7429))
f7430(a7430) => a7430 + 1
plot(f7430(7430))
f7431(a7431) => a7431 + 1
plot(f7431(7431))
f7432(a7432) => a7432 + 1
plot(f7432(7432))
f7433(a7433) => a7433 + 1
plot(f7433(7433))
f7434(a7434) => a7434 + 1
plot(f7434(7434))
f7435(a7435) => a7435 + 1
plot(f7435(7435))
f7436(a7436) => a7436 + 1
plot(f7436(7436))
f7437(a7437) => a7437 + 1
plot(f7437(7437))
f7438(a7438) => a7438 + 1
plot(f7438(7438))
f7439(a7439) => a7439 + 1
plot(f7439(7439))
f7440(a7440) => a7440 + 1
plot(f7440(7440))
f7441(a7441) => a7441 + 1
plot(f7441(7441))
f7442(a7442) => a7442 + 1
plot(f7442(7442))
f7443(a7443) => a7443 + 1
plot(f7443(7443))
f7444(a7444) => a7444 + 1
plot(f7444(7444))
f7445(a7445) => a7445 + 1
plot(f7445(7445))
f7446(a7446) => a7446 + 1
plot(f7446(7446))
f7447(a7447) => a7447 + 1
plot(f7447(7447))
f7448(a7448) => a7448 + 1
plot(f7448(7448))
f7449(a7449) => a7449 + 1
plot(f7449(7449))
f7450(a7450) => a7450 + 1
plot(f7450(7450))
f7451(a7451) => a7451 + 1
plot(f7451(7451))
f7452(a7452) => a7452 + 1
plot(f7452(7452))
f7453(a7453) => a7453 + 1
plot(f7453(7453))
f7454(a7454) => a7454 + 1
plot(f7454(7454))
f7455(a7455) => a7455 + 1
plot(f7455(7455))
f7456(a7456) => a7456 + 1
plot(f7456(7456))
f7457(a7457) => a7457 + 1
plot(f7457(7457))
f7458(a7458) => a7458 + 1
plot(f7458(7458))
f7459(a7459) => a7459 + 1
plot(f7459(7459))
f7460(a7460) => a7460 + 1
plot(f7460(7460))
f7461(a7461) => a7461 + 1
plot(f7461(7461))
f7462(a7462) => a7462 + 1
plot(f7462(7462))
f7463(a7463) => a7463 + 1
plot(f7463(7463))
f7464(a7464) => a7464 + 1
plot(f7464(7464))
f7465(a7465) => a7465 + 1
plot(f7465(7465))
f7466(a7466) => a7466 + 1
plot(f7466(7466))
f7467(a7467) => a7467 + 1
plot(f7467(7467))
f7468(a7468) => a7468 + 1
plot(f7468(7468))
f7469(a7469) => a7469 + 1
plot(f7469(7469))
f7470(a7470) => a7470 + 1
plot(f7470(7470))
f7471(a7471) => a7471 + 1
plot(f7471(7471))
f7472(a7472) => a7472 + 1
plot(f7472(7472))
f7473(a7473) => a7473 + 1
plot(f7473(7473))
f7474(a7474) => a7474 + 1
plot(f7474(7474))
f7475(a7475) => a7475 + 1
plot(f7475(7475))
f7476(a7476) => a7476 + 1
plot(f7476(7476))
f7477(a7477) => a7477 + 1
plot(f7477(7477))
f7478(a7478) => a7478 + 1
plot(f7478(7478))
f7479(a7479) => a7479 + 1
plot(f7479(7479))
f7480(a7480) => a7480 + 1
plot(f7480(7480))
f7481(a7481) => a7481 + 1
plot(f7481(7481))
f7482(a7482) => a7482 + 1
plot(f7482(7482))
f7483(a7483) => a7483 + 1
plot(f7483(7483))
f7484(a7484) => a7484 + 1
plot(f7484(7484))
f7485(a7485) => a7485 + 1
plot(f7485(7485))
f7486(a7486) => a7486 + 1
plot(f7486(7486))
f7487(a7487) => a7487 + 1
plot(f7487(7487))
f7488(a7488) => a7488 + 1
plot(f7488(7488))
f7489(a7489) => a7489 + 1
plot(f7489(7489))
f7490(a7490) => a7490 + 1
plot(f7490(7490))
f7491(a7491) => a7491 + 1
plot(f7491(7491))
f7492(a7492) => a7492 + 1
plot(f7492(7492))
f7493(a7493) => a7493 + 1
plot(f7493(7493))
f7494(a7494) => a7494 + 1
plot(f7494(7494))
f7495(a7495) => a7495 + 1
plot(f7495(7495))
f7496(a7496) => a7496 + 1
plot(f7496(7496))
f7497(a7497) => a7497 + 1
plot(f7497(7497))
f7498(a7498) => a7498 + 1
plot(f7498(7498))
f7499(a7499) => a7499 + 1
plot(f7499(7499))
f7500(a7500) => a7500 + 1
plot(f7500(7500))
f7501(a7501) => a7501 + 1
plot(f7501(7501))
f7502(a7502) => a7502 + 1
plot(f7502(7502))
f7503(a7503) => a7503 + 1
plot(f7503(7503))
f7504(a7504) => a7504 + 1
plot(f7504(7504))
f7505(a7505) => a7505 + 1
plot(f7505(7505))
f7506(a7506) => a7506 + 1
plot(f7506(7506))
f7507(a7507) => a7507 + 1
plot(f7507(7507))
f7508(a7508) => a7508 + 1
plot(f7508(7508))
f7509(a7509) => a7509 + 1
plot(f7509(7509))
f7510(a7510) => a7510 + 1
plot(f7510(7510))
f7511(a7511) => a7511 + 1
plot(f7511(7511))
f7512(a7512) => a7512 + 1
plot(f7512(7512))
f7513(a7513) => a7513 + 1
plot(f7513(7513))
f7514(a7514) => a7514 + 1
plot(f7514(7514))
f7515(a7515) => a7515 + 1
plot(f7515(7515))
f7516(a7516) => a7516 + 1
plot(f7516(7516))
f7517(a7517) => a7517 + 1
plot(f7517(7517))
f7518(a7518) => a7518 + 1
plot(f7518(7518))
f7519(a7519) => a7519 + 1
plot(f7519(7519))
f7520(a7520) => a7520 + 1
plot(f7520(7520))
f7521(a7521) => a7521 + 1
plot(f7521(7521))
f7522(a7522) => a7522 + 1
plot(f7522(7522))
f7523(a7523) => a7523 + 1
plot(f7523(7523))
f7524(a7524) => a7524 + 1
plot(f7524(7524))
f7525(a7525) => a7525 + 1
plot(f7525(7525))
f7526(a7526) => a7526 + 1
plot(f7526(7526))
f7527(a7527) => a7527 + 1
plot(f7527(7527))
f7528(a7528) => a7528 + 1
plot(f7528(7528))
f7529(a7529) => a7529 + 1
plot(f7529(7529))
f7530(a7530) => a7530 + 1
plot(f7530(7530))
f7531(a7531) => a7531 + 1
plot(f7531(7531))
f7532(a7532) => a7532 + 1
plot(f7532(7532))
f7533(a7533) => a7533 + 1
plot(f7533(7533))
f7534(a7534) => a7534 + 1
plot(f7534(7534))
f7535(a7535) => a7535 + 1
plot(f7535(7535))
f7536(a7536) => a7536 + 1
plot(f7536(7536))
f7537(a7537) => a7537 + 1
plot(f7537(7537))
f7538(a7538) => a7538 + 1
plot(f7538(7538))
f7539(a7539) => a7539 + 1
plot(f7539(7539))
f7540(a7540) => a7540 + 1
plot(f7540(7540))
f7541(a7541) => a7541 + 1
plot(f7541(7541))
f7542(a7542) => a7542 + 1
plot(f7542(7542))
f7543(a7543) => a7543 + 1
plot(f7543(7543))
f7544(a7544) => a7544 + 1
plot(f7544(7544))
f7545(a7545) => a7545 + 1
plot(f7545(7545))
f7546(a7546) => a7546 + 1
plot(f7546(7546))
f7547(a7547) => a7547 + 1
plot(f7547(7547))
f7548(a7548) => a7548 + 1
plot(f7548(7548))
f7549(a7549) => a7549 + 1
plot(f7549(7549))
f7550(a7550) => a7550 + 1
plot(f7550(7550))
f7551(a7551) => a7551 + 1
plot(f7551(7551))
f7552(a7552) => a7552 + 1
plot(f7552(7552))
f7553(a7553) => a7553 + 1
plot(f7553(7553))
f7554(a7554) => a7554 + 1
plot(f7554(7554))
f7555(a7555) => a7555 + 1
plot(f7555(7555))
f7556(a7556) => a7556 + 1
plot(f7556(7556))
f7557(a7557) => a7557 + 1
plot(f7557(7557))
f7558(a7558) => a7558 + 1
plot(f7558(7558))
f7559(a7559) => a7559 + 1
plot(f7559(7559))
f7560(a7560) => a7560 + 1
plot(f7560(7560))
f7561(a7561) => a7561 + 1
plot(f7561(7561))
f7562(a7562) => a7562 + 1
plot(f7562(7562))
f7563(a7563) => a7563 + 1
plot(f7563(7563))
f7564(a7564) => a7564 + 1
plot(f7564(7564))
f7565(a7565) => a7565 + 1
plot(f7565(7565))
f7566(a7566) => a7566 + 1
plot(f7566(7566))
f7567(a7567) => a7567 + 1
plot(f7567(7567))
f7568(a7568) => a7568 + 1
plot(f7568(7568))
f7569(a7569) => a7569 + 1
plot(f7569(7569))
f7570(a7570) => a7570 + 1
plot(f7570(7570))
f7571(a7571) => a7571 + 1
plot(f7571(7571))
f7572(a7572) => a7572 + 1
plot(f7572(7572))
f7573(a7573) => a7573 + 1
plot(f7573(7573))
f7574(a7574) => a7574 + 1
plot(f7574(7574))
f7575(a7575) => a7575 + 1
plot(f7575(7575))
f7576(a7576) => a7576 + 1
plot(f7576(7576))
f7577(a7577) => a7577 + 1
plot(f7577(7577))
f7578(a7578) => a7578 + 1
plot(f7578(7578))
f7579(a7579) => a7579 + 1
plot(f7579(7579))
f7580(a7580) => a7580 + 1
plot(f7580(7580))
f7581(a7581) => a7581 + 1
plot(f7581(7581))
f7582(a7582) => a7582 + 1
plot(f7582(7582))
f7583(a7583) => a7583 + 1
plot(f7583(7583))
f7584(a7584) => a7584 + 1
plot(f7584(7584))
f7585(a7585) => a7585 + 1
plot(f7585(7585))
f7586(a7586) => a7586 + 1
plot(f7586(7586))
f7587(a7587) => a7587 + 1
plot(f7587(7587))
f7588(a7588) => a7588 + 1
plot(f7588(7588))
f7589(a7589) => a7589 + 1
plot(f7589(7589))
f7590(a7590) => a7590 + 1
plot(f7590(7590))
f7591(a7591) => a7591 + 1
plot(f7591(7591))
f7592(a7592) => a7592 + 1
plot(f7592(7592))
f7593(a7593) => a7593 + 1
plot(f7593(7593))
f7594(a7594) => a7594 + 1
plot(f7594(7594))
f7595(a7595) => a7595 + 1
plot(f7595(7595))
f7596(a7596) => a7596 + 1
plot(f7596(7596))
f7597(a7597) => a7597 + 1
plot(f7597(7597))
f7598(a7598) => a7598 + 1
plot(f7598(7598))
f7599(a7599) => a7599 + 1
plot(f7599(7599))
f7600(a7600) => a7600 + 1
plot(f7600(7600))
f7601(a7601) => a7601 + 1
plot(f7601(7601))
f7602(a7602) => a7602 + 1
plot(f7602(7602))
f7603(a7603) => a7603 + 1
plot(f7603(7603))
f7604(a7604) => a7604 + 1
plot(f7604(7604))
f7605(a7605) => a7605 + 1
plot(f7605(7605))
f7606(a7606) => a7606 + 1
plot(f7606(7606))
f7607(a7607) => a7607 + 1
plot(f7607(7607))
f7608(a7608) => a7608 + 1
plot(f7608(7608))
f7609(a7609) => a7609 + 1
plot(f7609(7609))
f7610(a7610) => a7610 + 1
plot(f7610(7610))
f7611(a7611) => a7611 + 1
plot(f7611(7611))
f7612(a7612) => a7612 + 1
plot(f7612(7612))
f7613(a7613) => a7613 + 1
plot(f7613(7613))
f7614(a7614) => a7614 + 1
plot(f7614(7614))
f7615(a7615) => a7615 + 1
plot(f7615(7615))
f7616(a7616) => a7616 + 1
plot(f7616(7616))
f7617(a7617) => a7617 + 1
plot(f7617(7617))
f7618(a7618) => a7618 + 1
plot(f7618(7618))
f7619(a7619) => a7619 + 1
plot(f7619(7619))
f7620(a7620) => a7620 + 1
plot(f7620(7620))
f7621(a7621) => a7621 + 1
plot(f7621(7621))
f7622(a7622) => a7622 + 1
plot(f7622(7622))
f7623(a7623) => a7623 + 1
plot(f7623(7623))
f7624(a7624) => a7624 + 1
plot(f7624(7624))
f7625(a7625) => a7625 + 1
plot(f7625(7625))
f7626(a7626) => a7626 + 1
plot(f7626(7626))
f7627(a7627) => a7627 + 1
plot(f7627(7627))
f7628(a7628) => a7628 + 1
plot(f7628(7628))
f7629(a7629) => a7629 + 1
plot(f7629(7629))
f7630(a7630) => a7630 + 1
plot(f7630(7630))
f7631(a7631) => a7631 + 1
plot(f7631(7631))
f7632(a7632) => a7632 + 1
plot(f7632(7632))
f7633(a7633) => a7633 + 1
plot(f7633(7633))
f7634(a7634) => a7634 + 1
plot(f7634(7634))
f7635(a7635) => a7635 + 1
plot(f7635(7635))
f7636(a7636) => a7636 + 1
plot(f7636(7636))
f7637(a7637) => a7637 + 1
plot(f7637(7637))
f7638(a7638) => a7638 + 1
plot(f7638(7638))
f7639(a7639) => a7639 + 1
plot(f7639(7639))
f7640(a7640) => a7640 + 1
plot(f7640(7640))
f7641(a7641) => a7641 + 1
plot(f7641(7641))
f7642(a7642) => a7642 + 1
plot(f7642(7642))
f7643(a7643) => a7643 + 1
plot(f7643(7643))
f7644(a7644) => a7644 + 1
plot(f7644(7644))
f7645(a7645) => a7645 + 1
plot(f7645(7645))
f7646(a7646) => a7646 + 1
plot(f7646(7646))
f7647(a7647) => a7647 + 1
plot(f7647(7647))
f7648(a7648) => a7648 + 1
plot(f7648(7648))
f7649(a7649) => a7649 + 1
plot(f7649(7649))
f7650(a7650) => a7650 + 1
plot(f7650(7650))
f7651(a7651) => a7651 + 1
plot(f7651(7651))
f7652(a7652) => a7652 + 1
plot(f7652(7652))
f7653(a7653) => a7653 + 1
plot(f7653(7653))
f7654(a7654) => a7654 + 1
plot(f7654(7654))
f7655(a7655) => a7655 + 1
plot(f7655(7655))
f7656(a7656) => a7656 + 1
plot(f7656(7656))
f7657(a7657) => a7657 + 1
plot(f7657(7657))
f7658(a7658) => a7658 + 1
plot(f7658(7658))
f7659(a7659) => a7659 + 1
plot(f7659(7659))
f7660(a7660) => a7660 + 1
plot(f7660(7660))
f7661(a7661) => a7661 + 1
plot(f7661(7661))
f7662(a7662) => a7662 + 1
plot(f7662(7662))
f7663(a7663) => a7663 + 1
plot(f7663(7663))
f7664(a7664) => a7664 + 1
plot(f7664(7664))
f7665(a7665) => a7665 + 1
plot(f7665(7665))
f7666(a7666) => a7666 + 1
plot(f7666(7666))
f7667(a7667) => a7667 + 1
plot(f7667(7667))
f7668(a7668) => a7668 + 1
plot(f7668(7668))
f7669(a7669) => a7669 + 1
plot(f7669(7669))
f7670(a7670) => a7670 + 1
plot(f7670(7670))
f7671(a7671) => a7671 + 1
plot(f7671(7671))
f7672(a7672) => a7672 + 1
plot(f7672(7672))
f7673(a7673) => a7673 + 1
plot(f7673(7673))
f7674(a7674) => a7674 + 1
plot(f7674(7674))
f7675(a7675) => a7675 + 1
plot(f7675(7675))
f7676(a7676) => a7676 + 1
plot(f7676(7676))
f7677(a7677) => a7677 + 1
plot(f7677(7677))
f7678(a7678) => a7678 + 1
plot(f7678(7678))
f7679(a7679) => a7679 + 1
plot(f7679(7679))
f7680(a7680) => a7680 + 1
plot(f7680(7680))
f7681(a7681) => a7681 + 1
plot(f7681(7681))
f7682(a7682) => a7682 + 1
plot(f7682(7682))
f7683(a7683) => a7683 + 1
plot(f7683(7683))
f7684(a7684) => a7684 + 1
plot(f7684(7684))
f7685(a7685) => a7685 + 1
plot(f7685(7685))
f7686(a7686) => a7686 + 1
plot(f7686(7686))
f7687(a7687) => a7687 + 1
plot(f7687(7687))
f7688(a7688) => a7688 + 1
plot(f7688(7688))
f7689(a7689) => a7689 + 1
plot(f7689(7689))
f7690(a7690) => a7690 + 1
plot(f7690(7690))
f7691(a7691) => a7691 + 1
plot(f7691(7691))
f7692(a7692) => a7692 + 1
plot(f7692(7692))
f7693(a7693) => a7693 + 1
plot(f7693(7693))
f7694(a7694) => a7694 + 1
plot(f7694(7694))
f7695(a7695) => a7695 + 1
plot(f7695(7695))
f7696(a7696) => a7696 + 1
plot(f7696(7696))
f7697(a7697) => a7697 + 1
plot(f7697(7697))
f7698(a7698) => a7698 + 1
plot(f7698(7698))
f7699(a7699) => a7699 + 1
plot(f7699(7699))
f7700(a7700) => a7700 + 1
plot(f7700(7700))
f7701(a7701) => a7701 + 1
plot(f7701(7701))
f7702(a7702) => a7702 + 1
plot(f7702(7702))
f7703(a7703) => a7703 + 1
plot(f7703(7703))
f7704(a7704) => a7704 + 1
plot(f7704(7704))
f7705(a7705) => a7705 + 1
plot(f7705(7705))
f7706(a7706) => a7706 + 1
plot(f7706(7706))
f7707(a7707) => a7707 + 1
plot(f7707(7707))
f7708(a7708) => a7708 + 1
plot(f7708(7708))
f7709(a7709) => a7709 + 1
plot(f7709(7709))
f7710(a7710) => a7710 + 1
plot(f7710(7710))
f7711(a7711) => a7711 + 1
plot(f7711(7711))
f7712(a7712) => a7712 + 1
plot(f7712(7712))
f7713(a7713) => a7713 + 1
plot(f7713(7713))
f7714(a7714) => a7714 + 1
plot(f7714(7714))
f7715(a7715) => a7715 + 1
plot(f7715(7715))
f7716(a7716) => a7716 + 1
plot(f7716(7716))
f7717(a7717) => a7717 + 1
plot(f7717(7717))
f7718(a7718) => a7718 + 1
plot(f7718(7718))
f7719(a7719) => a7719 + 1
plot(f7719(7719))
f7720(a7720) => a7720 + 1
plot(f7720(7720))
f7721(a7721) => a7721 + 1
plot(f7721(7721))
f7722(a7722) => a7722 + 1
plot(f7722(7722))
f7723(a7723) => a7723 + 1
plot(f7723(7723))
f7724(a7724) => a7724 + 1
plot(f7724(7724))
f7725(a7725) => a7725 + 1
plot(f7725(7725))
f7726(a7726) => a7726 + 1
plot(f7726(7726))
f7727(a7727) => a7727 + 1
plot(f7727(7727))
f7728(a7728) => a7728 + 1
plot(f7728(7728))
f7729(a7729) => a7729 + 1
plot(f7729(7729))
f7730(a7730) => a7730 + 1
plot(f7730(7730))
f7731(a7731) => a7731 + 1
plot(f7731(7731))
f7732(a7732) => a7732 + 1
plot(f7732(7732))
f7733(a7733) => a7733 + 1
plot(f7733(7733))
f7734(a7734) => a7734 + 1
plot(f7734(7734))
f7735(a7735) => a7735 + 1
plot(f7735(7735))
f7736(a7736) => a7736 + 1
plot(f7736(7736))
f7737(a7737) => a7737 + 1
plot(f7737(7737))
f7738(a7738) => a7738 + 1
plot(f7738(7738))
f7739(a7739) => a7739 + 1
plot(f7739(7739))
f7740(a7740) => a7740 + 1
plot(f7740(7740))
f7741(a7741) => a7741 + 1
plot(f7741(7741))
f7742(a7742) => a7742 + 1
plot(f7742(7742))
f7743(a7743) => a7743 + 1
plot(f7743(7743))
f7744(a7744) => a7744 + 1
plot(f7744(7744))
f7745(a7745) => a7745 + 1
plot(f7745(7745))
f7746(a7746) => a7746 + 1
plot(f7746(7746))
f7747(a7747) => a7747 + 1
plot(f7747(7747))
f7748(a7748) => a7748 + 1
plot(f7748(7748))
f7749(a7749) => a7749 + 1
plot(f7749(7749))
f7750(a7750) => a7750 + 1
plot(f7750(7750))
f7751(a7751) => a7751 + 1
plot(f7751(7751))
f7752(a7752) => a7752 + 1
plot(f7752(7752))
f7753(a7753) => a7753 + 1
plot(f7753(7753))
f7754(a7754) => a7754 + 1
plot(f7754(7754))
f7755(a7755) => a7755 + 1
plot(f7755(7755))
f7756(a7756) => a7756 + 1
plot(f7756(7756))
f7757(a7757) => a7757 + 1
plot(f7757(7757))
f7758(a7758) => a7758 + 1
plot(f7758(7758))
f7759(a7759) => a7759 + 1
plot(f7759(7759))
f7760(a7760) => a7760 + 1
plot(f7760(7760))
f7761(a7761) => a7761 + 1
plot(f7761(7761))
f7762(a7762) => a7762 + 1
plot(f7762(7762))
f7763(a7763) => a7763 + 1
plot(f7763(7763))
f7764(a7764) => a7764 + 1
plot(f7764(7764))
f7765(a7765) => a7765 + 1
plot(f7765(7765))
f7766(a7766) => a7766 + 1
plot(f7766(7766))
f7767(a7767) => a7767 + 1
plot(f7767(7767))
f7768(a7768) => a7768 + 1
plot(f7768(7768))
f7769(a7769) => a7769 + 1
plot(f7769(7769))
f7770(a7770) => a7770 + 1
plot(f7770(7770))
f7771(a7771) => a7771 + 1
plot(f7771(7771))
f7772(a7772) => a7772 + 1
plot(f7772(7772))
f7773(a7773) => a7773 + 1
plot(f7773(7773))
f7774(a7774) => a7774 + 1
plot(f7774(7774))
f7775(a7775) => a7775 + 1
plot(f7775(7775))
f7776(a7776) => a7776 + 1
plot(f7776(7776))
f7777(a7777) => a7777 + 1
plot(f7777(7777))
f7778(a7778) => a7778 + 1
plot(f7778(7778))
f7779(a7779) => a7779 + 1
plot(f7779(7779))
f7780(a7780) => a7780 + 1
plot(f7780(7780))
f7781(a7781) => a7781 + 1
plot(f7781(7781))
f7782(a7782) => a7782 + 1
plot(f7782(7782))
f7783(a7783) => a7783 + 1
plot(f7783(7783))
f7784(a7784) => a7784 + 1
plot(f7784(7784))
f7785(a7785) => a7785 + 1
plot(f7785(7785))
f7786(a7786) => a7786 + 1
plot(f7786(7786))
f7787(a7787) => a7787 + 1
plot(f7787(7787))
f7788(a7788) => a7788 + 1
plot(f7788(7788))
f7789(a7789) => a7789 + 1
plot(f7789(7789))
f7790(a7790) => a7790 + 1
plot(f7790(7790))
f7791(a7791) => a7791 + 1
plot(f7791(7791))
f7792(a7792) => a7792 + 1
plot(f7792(7792))
f7793(a7793) => a7793 + 1
plot(f7793(7793))
f7794(a7794) => a7794 + 1
plot(f7794(7794))
f7795(a7795) => a7795 + 1
plot(f7795(7795))
f7796(a7796) => a7796 + 1
plot(f7796(7796))
f7797(a7797) => a7797 + 1
plot(f7797(7797))
f7798(a7798) => a7798 + 1
plot(f7798(7798))
f7799(a7799) => a7799 + 1
plot(f7799(7799))
f7800(a7800) => a7800 + 1
plot(f7800(7800))
f7801(a7801) => a7801 + 1
plot(f7801(7801))
f7802(a7802) => a7802 + 1
plot(f7802(7802))
f7803(a7803) => a7803 + 1
plot(f7803(7803))
f7804(a7804) => a7804 + 1
plot(f7804(7804))
f7805(a7805) => a7805 + 1
plot(f7805(7805))
f7806(a7806) => a7806 + 1
plot(f7806(7806))
f7807(a7807) => a7807 + 1
plot(f7807(7807))
f7808(a7808) => a7808 + 1
plot(f7808(7808))
f7809(a7809) => a7809 + 1
plot(f7809(7809))
f7810(a7810) => a7810 + 1
plot(f7810(7810))
f7811(a7811) => a7811 + 1
plot(f7811(7811))
f7812(a7812) => a7812 + 1
plot(f7812(7812))
f7813(a7813) => a7813 + 1
plot(f7813(7813))
f7814(a7814) => a7814 + 1
plot(f7814(7814))
f7815(a7815) => a7815 + 1
plot(f7815(7815))
f7816(a7816) => a7816 + 1
plot(f7816(7816))
f7817(a7817) => a7817 + 1
plot(f7817(7817))
f7818(a7818) => a7818 + 1
plot(f7818(7818))
f7819(a7819) => a7819 + 1
plot(f7819(7819))
f7820(a7820) => a7820 + 1
plot(f7820(7820))
f7821(a7821) => a7821 + 1
plot(f7821(7821))
f7822(a7822) => a7822 + 1
plot(f7822(7822))
f7823(a7823) => a7823 + 1
plot(f7823(7823))
f7824(a7824) => a7824 + 1
plot(f7824(7824))
f7825(a7825) => a7825 + 1
plot(f7825(7825))
f7826(a7826) => a7826 + 1
plot(f7826(7826))
f7827(a7827) => a7827 + 1
plot(f7827(7827))
f7828(a7828) => a7828 + 1
plot(f7828(7828))
f7829(a7829) => a7829 + 1
plot(f7829(7829))
f7830(a7830) => a7830 + 1
plot(f7830(7830))
f7831(a7831) => a7831 + 1
plot(f7831(7831))
f7832(a7832) => a7832 + 1
plot(f7832(7832))
f7833(a7833) => a7833 + 1
plot(f7833(7833))
f7834(a7834) => a7834 + 1
plot(f7834(7834))
f7835(a7835) => a7835 + 1
plot(f7835(7835))
f7836(a7836) => a7836 + 1
plot(f7836(7836))
f7837(a7837) => a7837 + 1
plot(f7837(7837))
f7838(a7838) => a7838 + 1
plot(f7838(7838))
f7839(a7839) => a7839 + 1
plot(f7839(7839))
f7840(a7840) => a7840 + 1
plot(f7840(7840))
f7841(a7841) => a7841 + 1
plot(f7841(7841))
f7842(a7842) => a7842 + 1
plot(f7842(7842))
f7843(a7843) => a7843 + 1
plot(f7843(7843))
f7844(a7844) => a7844 + 1
plot(f7844(7844))
f7845(a7845) => a7845 + 1
plot(f7845(7845))
f7846(a7846) => a7846 + 1
plot(f7846(7846))
f7847(a7847) => a7847 + 1
plot(f7847(7847))
f7848(a7848) => a7848 + 1
plot(f7848(7848))
f7849(a7849) => a7849 + 1
plot(f7849(7849))
f7850(a7850) => a7850 + 1
plot(f7850(7850))
f7851(a7851) => a7851 + 1
plot(f7851(7851))
f7852(a7852) => a7852 + 1
plot(f7852(7852))
f7853(a7853) => a7853 + 1
plot(f7853(7853))
f7854(a7854) => a7854 + 1
plot(f7854(7854))
f7855(a7855) => a7855 + 1
plot(f7855(7855))
f7856(a7856) => a7856 + 1
plot(f7856(7856))
f7857(a7857) => a7857 + 1
plot(f7857(7857))
f7858(a7858) => a7858 + 1
plot(f7858(7858))
f7859(a7859) => a7859 + 1
plot(f7859(7859))
f7860(a7860) => a7860 + 1
plot(f7860(7860))
f7861(a7861) => a7861 + 1
plot(f7861(7861))
f7862(a7862) => a7862 + 1
plot(f7862(7862))
f7863(a7863) => a7863 + 1
plot(f7863(7863))
f7864(a7864) => a7864 + 1
plot(f7864(7864))
f7865(a7865) => a7865 + 1
plot(f7865(7865))
f7866(a7866) => a7866 + 1
plot(f7866(7866))
f7867(a7867) => a7867 + 1
plot(f7867(7867))
f7868(a7868) => a7868 + 1
plot(f7868(7868))
f7869(a7869) => a7869 + 1
plot(f7869(7869))
f7870(a7870) => a7870 + 1
plot(f7870(7870))
f7871(a7871) => a7871 + 1
plot(f7871(7871))
f7872(a7872) => a7872 + 1
plot(f7872(7872))
f7873(a7873) => a7873 + 1
plot(f7873(7873))
f7874(a7874) => a7874 + 1
plot(f7874(7874))
f7875(a7875) => a7875 + 1
plot(f7875(7875))
f7876(a7876) => a7876 + 1
plot(f7876(7876))
f7877(a7877) => a7877 + 1
plot(f7877(7877))
f7878(a7878) => a7878 + 1
plot(f7878(7878))
f7879(a7879) => a7879 + 1
plot(f7879(7879))
f7880(a7880) => a7880 + 1
plot(f7880(7880))
f7881(a7881) => a7881 + 1
plot(f7881(7881))
f7882(a7882) => a7882 + 1
plot(f7882(7882))
f7883(a7883) => a7883 + 1
plot(f7883(7883))
f7884(a7884) => a7884 + 1
plot(f7884(7884))
f7885(a7885) => a7885 + 1
plot(f7885(7885))
f7886(a7886) => a7886 + 1
plot(f7886(7886))
f7887(a7887) => a7887 + 1
plot(f7887(7887))
f7888(a7888) => a7888 + 1
plot(f7888(7888))
f7889(a7889) => a7889 + 1
plot(f7889(7889))
f7890(a7890) => a7890 + 1
plot(f7890(7890))
f7891(a7891) => a7891 + 1
plot(f7891(7891))
f7892(a7892) => a7892 + 1
plot(f7892(7892))
f7893(a7893) => a7893 + 1
plot(f7893(7893))
f7894(a7894) => a7894 + 1
plot(f7894(7894))
f7895(a7895) => a7895 + 1
plot(f7895(7895))
f7896(a7896) => a7896 + 1
plot(f7896(7896))
f7897(a7897) => a7897 + 1
plot(f7897(7897))
f7898(a7898) => a7898 + 1
plot(f7898(7898))
f7899(a7899) => a7899 + 1
plot(f7899(7899))
f7900(a7900) => a7900 + 1
plot(f7900(7900))
f7901(a7901) => a7901 + 1
plot(f7901(7901))
f7902(a7902) => a7902 + 1
plot(f7902(7902))
f7903(a7903) => a7903 + 1
plot(f7903(7903))
f7904(a7904) => a7904 + 1
plot(f7904(7904))
f7905(a7905) => a7905 + 1
plot(f7905(7905))
f7906(a7906) => a7906 + 1
plot(f7906(7906))
f7907(a7907) => a7907 + 1
plot(f7907(7907))
f7908(a7908) => a7908 + 1
plot(f7908(7908))
f7909(a7909) => a7909 + 1
plot(f7909(7909))
f7910(a7910) => a7910 + 1
plot(f7910(7910))
f7911(a7911) => a7911 + 1
plot(f7911(7911))
f7912(a7912) => a7912 + 1
plot(f7912(7912))
f7913(a7913) => a7913 + 1
plot(f7913(7913))
f7914(a7914) => a7914 + 1
plot(f7914(7914))
f7915(a7915) => a7915 + 1
plot(f7915(7915))
f7916(a7916) => a7916 + 1
plot(f7916(7916))
f7917(a7917) => a7917 + 1
plot(f7917(7917))
f7918(a7918) => a7918 + 1
plot(f7918(7918))
f7919(a7919) => a7919 + 1
plot(f7919(7919))
f7920(a7920) => a7920 + 1
plot(f7920(7920))
f7921(a7921) => a7921 + 1
plot(f7921(7921))
f7922(a7922) => a7922 + 1
plot(f7922(7922))
f7923(a7923) => a7923 + 1
plot(f7923(7923))
f7924(a7924) => a7924 + 1
plot(f7924(7924))
f7925(a7925) => a7925 + 1
plot(f7925(7925))
f7926(a7926) => a7926 + 1
plot(f7926(7926))
f7927(a7927) => a7927 + 1
plot(f7927(7927))
f7928(a7928) => a7928 + 1
plot(f7928(7928))
f7929(a7929) => a7929 + 1
plot(f7929(7929))
f7930(a7930) => a7930 + 1
plot(f7930(7930))
f7931(a7931) => a7931 + 1
plot(f7931(7931))
f7932(a7932) => a7932 + 1
plot(f7932(7932))
f7933(a7933) => a7933 + 1
plot(f7933(7933))
f7934(a7934) => a7934 + 1
plot(f7934(7934))
f7935(a7935) => a7935 + 1
plot(f7935(7935))
f7936(a7936) => a7936 + 1
plot(f7936(7936))
f7937(a7937) => a7937 + 1
plot(f7937(7937))
f7938(a7938) => a7938 + 1
plot(f7938(7938))
f7939(a7939) => a7939 + 1
plot(f7939(7939))
f7940(a7940) => a7940 + 1
plot(f7940(7940))
f7941(a7941) => a7941 + 1
plot(f7941(7941))
f7942(a7942) => a7942 + 1
plot(f7942(7942))
f7943(a7943) => a7943 + 1
plot(f7943(7943))
f7944(a7944) => a7944 + 1
plot(f7944(7944))
f7945(a7945) => a7945 + 1
plot(f7945(7945))
f7946(a7946) => a7946 + 1
plot(f7946(7946))
f7947(a7947) => a7947 + 1
plot(f7947(7947))
f7948(a7948) => a7948 + 1
plot(f7948(7948))
f7949(a7949) => a7949 + 1
plot(f7949(7949))
f7950(a7950) => a7950 + 1
plot(f7950(7950))
f7951(a7951) => a7951 + 1
plot(f7951(7951))
f7952(a7952) => a7952 + 1
plot(f7952(7952))
f7953(a7953) => a7953 + 1
plot(f7953(7953))
f7954(a7954) => a7954 + 1
plot(f7954(7954))
f7955(a7955) => a7955 + 1
plot(f7955(7955))
f7956(a7956) => a7956 + 1
plot(f7956(7956))
f7957(a7957) => a7957 + 1
plot(f7957(7957))
f7958(a7958) => a7958 + 1
plot(f7958(7958))
f7959(a7959) => a7959 + 1
plot(f7959(7959))
f7960(a7960) => a7960 + 1
plot(f7960(7960))
f7961(a7961) => a7961 + 1
plot(f7961(7961))
f7962(a7962) => a7962 + 1
plot(f7962(7962))
f7963(a7963) => a7963 + 1
plot(f7963(7963))
f7964(a7964) => a7964 + 1
plot(f7964(7964))
f7965(a7965) => a7965 + 1
plot(f7965(7965))
f7966(a7966) => a7966 + 1
plot(f7966(7966))
f7967(a7967) => a7967 + 1
plot(f7967(7967))
f7968(a7968) => a7968 + 1
plot(f7968(7968))
f7969(a7969) => a7969 + 1
plot(f7969(7969))
f7970(a7970) => a7970 + 1
plot(f7970(7970))
f7971(a7971) => a7971 + 1
plot(f7971(7971))
f7972(a7972) => a7972 + 1
plot(f7972(7972))
f7973(a7973) => a7973 + 1
plot(f7973(7973))
f7974(a7974) => a7974 + 1
plot(f7974(7974))
f7975(a7975) => a7975 + 1
plot(f7975(7975))
f7976(a7976) => a7976 + 1
plot(f7976(7976))
f7977(a7977) => a7977 + 1
plot(f7977(7977))
f7978(a7978) => a7978 + 1
plot(f7978(7978))
f7979(a7979) => a7979 + 1
plot(f7979(7979))
f7980(a7980) => a7980 + 1
plot(f7980(7980))
f7981(a7981) => a7981 + 1
plot(f7981(7981))
f7982(a7982) => a7982 + 1
plot(f7982(7982))
f7983(a7983) => a7983 + 1
plot(f7983(7983))
f7984(a7984) => a7984 + 1
plot(f7984(7984))
f7985(a7985) => a7985 + 1
plot(f7985(7985))
f7986(a7986) => a7986 + 1
plot(f7986(7986))
f7987(a7987) => a7987 + 1
plot(f7987(7987))
f7988(a7988) => a7988 + 1
plot(f7988(7988))
f7989(a7989) => a7989 + 1
plot(f7989(7989))
f7990(a7990) => a7990 + 1
plot(f7990(7990))
f7991(a7991) => a7991 + 1
plot(f7991(7991))
f7992(a7992) => a7992 + 1
plot(f7992(7992))
f7993(a7993) => a7993 + 1
plot(f7993(7993))
f7994(a7994) => a7994 + 1
plot(f7994(7994))
f7995(a7995) => a7995 + 1
plot(f7995(7995))
f7996(a7996) => a7996 + 1
plot(f7996(7996))
f7997(a7997) => a7997 + 1
plot(f7997(7997))
f7998(a7998) => a7998 + 1
plot(f7998(7998))
f7999(a7999) => a7999 + 1
plot(f7999(7999))
f8000(a8000) => a8000 + 1
plot(f8000(8000))
f8001(a8001) => a8001 + 1
plot(f8001(8001))
f8002(a8002) => a8002 + 1
plot(f8002(8002))
f8003(a8003) => a8003 + 1
plot(f8003(8003))
f8004(a8004) => a8004 + 1
plot(f8004(8004))
f8005(a8005) => a8005 + 1
plot(f8005(8005))
f8006(a8006) => a8006 + 1
plot(f8006(8006))
f8007(a8007) => a8007 + 1
plot(f8007(8007))
f8008(a8008) => a8008 + 1
plot(f8008(8008))
f8009(a8009) => a8009 + 1
plot(f8009(8009))
f8010(a8010) => a8010 + 1
plot(f8010(8010))
f8011(a8011) => a8011 + 1
plot(f8011(8011))
f8012(a8012) => a8012 + 1
plot(f8012(8012))
f8013(a8013) => a8013 + 1
plot(f8013(8013))
f8014(a8014) => a8014 + 1
plot(f8014(8014))
f8015(a8015) => a8015 + 1
plot(f8015(8015))
f8016(a8016) => a8016 + 1
plot(f8016(8016))
f8017(a8017) => a8017 + 1
plot(f8017(8017))
f8018(a8018) => a8018 + 1
plot(f8018(8018))
f8019(a8019) => a8019 + 1
plot(f8019(8019))
f8020(a8020) => a8020 + 1
plot(f8020(8020))
f8021(a8021) => a8021 + 1
plot(f8021(8021))
f8022(a8022) => a8022 + 1
plot(f8022(8022))
f8023(a8023) => a8023 + 1
plot(f8023(8023))
f8024(a8024) => a8024 + 1
plot(f8024(8024))
f8025(a8025) => a8025 + 1
plot(f8025(8025))
f8026(a8026) => a8026 + 1
plot(f8026(8026))
f8027(a8027) => a8027 + 1
plot(f8027(8027))
f8028(a8028) => a8028 + 1
plot(f8028(8028))
f8029(a8029) => a8029 + 1
plot(f8029(8029))
f8030(a8030) => a8030 + 1
plot(f8030(8030))
f8031(a8031) => a8031 + 1
plot(f8031(8031))
f8032(a8032) => a8032 + 1
plot(f8032(8032))
f8033(a8033) => a8033 + 1
plot(f8033(8033))
f8034(a8034) => a8034 + 1
plot(f8034(8034))
f8035(a8035) => a8035 + 1
plot(f8035(8035))
f8036(a8036) => a8036 + 1
plot(f8036(8036))
f8037(a8037) => a8037 + 1
plot(f8037(8037))
f8038(a8038) => a8038 + 1
plot(f8038(8038))
f8039(a8039) => a8039 + 1
plot(f8039(8039))
f8040(a8040) => a8040 + 1
plot(f8040(8040))
f8041(a8041) => a8041 + 1
plot(f8041(8041))
f8042(a8042) => a8042 + 1
plot(f8042(8042))
f8043(a8043) => a8043 + 1
plot(f8043(8043))
f8044(a8044) => a8044 + 1
plot(f8044(8044))
f8045(a8045) => a8045 + 1
plot(f8045(8045))
f8046(a8046) => a8046 + 1
plot(f8046(8046))
f8047(a8047) => a8047 + 1
plot(f8047(8047))
f8048(a8048) => a8048 + 1
plot(f8048(8048))
f8049(a8049) => a8049 + 1
plot(f8049(8049))
f8050(a8050) => a8050 + 1
plot(f8050(8050))
f8051(a8051) => a8051 + 1
plot(f8051(8051))
f8052(a8052) => a8052 + 1
plot(f8052(8052))
f8053(a8053) => a8053 + 1
plot(f8053(8053))
f8054(a8054) => a8054 + 1
plot(f8054(8054))
f8055(a8055) => a8055 + 1
plot(f8055(8055))
f8056(a8056) => a8056 + 1
plot(f8056(8056))
f8057(a8057) => a8057 + 1
plot(f8057(8057))
f8058(a8058) => a8058 + 1
plot(f8058(8058))
f8059(a8059) => a8059 + 1
plot(f8059(8059))
f8060(a8060) => a8060 + 1
plot(f8060(8060))
f8061(a8061) => a8061 + 1
plot(f8061(8061))
f8062(a8062) => a8062 + 1
plot(f8062(8062))
f8063(a8063) => a8063 + 1
plot(f8063(8063))
f8064(a8064) => a8064 + 1
plot(f8064(8064))
f8065(a8065) => a8065 + 1
plot(f8065(8065))
f8066(a8066) => a8066 + 1
plot(f8066(8066))
f8067(a8067) => a8067 + 1
plot(f8067(8067))
f8068(a8068) => a8068 + 1
plot(f8068(8068))
f8069(a8069) => a8069 + 1
plot(f8069(8069))
f8070(a8070) => a8070 + 1
plot(f8070(8070))
f8071(a8071) => a8071 + 1
plot(f8071(8071))
f8072(a8072) => a8072 + 1
plot(f8072(8072))
f8073(a8073) => a8073 + 1
plot(f8073(8073))
f8074(a8074) => a8074 + 1
plot(f8074(8074))
f8075(a8075) => a8075 + 1
plot(f8075(8075))
f8076(a8076) => a8076 + 1
plot(f8076(8076))
f8077(a8077) => a8077 + 1
plot(f8077(8077))
f8078(a8078) => a8078 + 1
plot(f8078(8078))
f8079(a8079) => a8079 + 1
plot(f8079(8079))
f8080(a8080) => a8080 + 1
plot(f8080(8080))
f8081(a8081) => a8081 + 1
plot(f8081(8081))
f8082(a8082) => a8082 + 1
plot(f8082(8082))
f8083(a8083) => a8083 + 1
plot(f8083(8083))
f8084(a8084) => a8084 + 1
plot(f8084(8084))
f8085(a8085) => a8085 + 1
plot(f8085(8085))
f8086(a8086) => a8086 + 1
plot(f8086(8086))
f8087(a8087) => a8087 + 1
plot(f8087(8087))
f8088(a8088) => a8088 + 1
plot(f8088(8088))
f8089(a8089) => a8089 + 1
plot(f8089(8089))
f8090(a8090) => a8090 + 1
plot(f8090(8090))
f8091(a8091) => a8091 + 1
plot(f8091(8091))
f8092(a8092) => a8092 + 1
plot(f8092(8092))
f8093(a8093) => a8093 + 1
plot(f8093(8093))
f8094(a8094) => a8094 + 1
plot(f8094(8094))
f8095(a8095) => a8095 + 1
plot(f8095(8095))
f8096(a8096) => a8096 + 1
plot(f8096(8096))
f8097(a8097) => a8097 + 1
plot(f8097(8097))
f8098(a8098) => a8098 + 1
plot(f8098(8098))
f8099(a8099) => a8099 + 1
plot(f8099(8099))
f8100(a8100) => a8100 + 1
plot(f8100(8100))
f8101(a8101) => a8101 + 1
plot(f8101(8101))
f8102(a8102) => a8102 + 1
plot(f8102(8102))
f8103(a8103) => a8103 + 1
plot(f8103(8103))
f8104(a8104) => a8104 + 1
plot(f8104(8104))
f8105(a8105) => a8105 + 1
plot(f8105(8105))
f8106(a8106) => a8106 + 1
plot(f8106(8106))
f8107(a8107) => a8107 + 1
plot(f8107(8107))
f8108(a8108) => a8108 + 1
plot(f8108(8108))
f8109(a8109) => a8109 + 1
plot(f8109(8109))
f8110(a8110) => a8110 + 1
plot(f8110(8110))
f8111(a8111) => a8111 + 1
plot(f8111(8111))
f8112(a8112) => a8112 + 1
plot(f8112(8112))
f8113(a8113) => a8113 + 1
plot(f8113(8113))
f8114(a8114) => a8114 + 1
plot(f8114(8114))
f8115(a8115) => a8115 + 1
plot(f8115(8115))
f8116(a8116) => a8116 + 1
plot(f8116(8116))
f8117(a8117) => a8117 + 1
plot(f8117(8117))
f8118(a8118) => a8118 + 1
plot(f8118(8118))
f8119(a8119) => a8119 + 1
plot(f8119(8119))
f8120(a8120) => a8120 + 1
plot(f8120(8120))
f8121(a8121) => a8121 + 1
plot(f8121(8121))
f8122(a8122) => a8122 + 1
plot(f8122(8122))
f8123(a8123) => a8123 + 1
plot(f8123(8123))
f8124(a8124) => a8124 + 1
plot(f8124(8124))
f8125(a8125) => a8125 + 1
plot(f8125(8125))
f8126(a8126) => a8126 + 1
plot(f8126(8126))
f8127(a8127) => a8127 + 1
plot(f8127(8127))
f8128(a8128) => a8128 + 1
plot(f8128(8128))
f8129(a8129) => a8129 + 1
plot(f8129(8129))
f8130(a8130) => a8130 + 1
plot(f8130(8130))
f8131(a8131) => a8131 + 1
plot(f8131(8131))
f8132(a8132) => a8132 + 1
plot(f8132(8132))
f8133(a8133) => a8133 + 1
plot(f8133(8133))
f8134(a8134) => a8134 + 1
plot(f8134(8134))
f8135(a8135) => a8135 + 1
plot(f8135(8135))
f8136(a8136) => a8136 + 1
plot(f8136(8136))
f8137(a8137) => a8137 + 1
plot(f8137(8137))
f8138(a8138) => a8138 + 1
plot(f8138(8138))
f8139(a8139) => a8139 + 1
plot(f8139(8139))
f8140(a8140) => a8140 + 1
plot(f8140(8140))
f8141(a8141) => a8141 + 1
plot(f8141(8141))
f8142(a8142) => a8142 + 1
plot(f8142(8142))
f8143(a8143) => a8143 + 1
plot(f8143(8143))
f8144(a8144) => a8144 + 1
plot(f8144(8144))
f8145(a8145) => a8145 + 1
plot(f8145(8145))
f8146(a8146) => a8146 + 1
plot(f8146(8146))
f8147(a8147) => a8147 + 1
plot(f8147(8147))
f8148(a8148) => a8148 + 1
plot(f8148(8148))
f8149(a8149) => a8149 + 1
plot(f8149(8149))
f8150(a8150) => a8150 + 1
plot(f8150(8150))
f8151(a8151) => a8151 + 1
plot(f8151(8151))
f8152(a8152) => a8152 + 1
plot(f8152(8152))
f8153(a8153) => a8153 + 1
plot(f8153(8153))
f8154(a8154) => a8154 + 1
plot(f8154(8154))
f8155(a8155) => a8155 + 1
plot(f8155(8155))
f8156(a8156) => a8156 + 1
plot(f8156(8156))
f8157(a8157) => a8157 + 1
plot(f8157(8157))
f8158(a8158) => a8158 + 1
plot(f8158(8158))
f8159(a8159) => a8159 + 1
plot(f8159(8159))
f8160(a8160) => a8160 + 1
plot(f8160(8160))
f8161(a8161) => a8161 + 1
plot(f8161(8161))
f8162(a8162) => a8162 + 1
plot(f8162(8162))
f8163(a8163) => a8163 + 1
plot(f8163(8163))
f8164(a8164) => a8164 + 1
plot(f8164(8164))
f8165(a8165) => a8165 + 1
plot(f8165(8165))
f8166(a8166) => a8166 + 1
plot(f8166(8166))
f8167(a8167) => a8167 + 1
plot(f8167(8167))
f8168(a8168) => a8168 + 1
plot(f8168(8168))
f8169(a8169) => a8169 + 1
plot(f8169(8169))
f8170(a8170) => a8170 + 1
plot(f8170(8170))
f8171(a8171) => a8171 + 1
plot(f8171(8171))
f8172(a8172) => a8172 + 1
plot(f8172(8172))
f8173(a8173) => a8173 + 1
plot(f8173(8173))
f8174(a8174) => a8174 + 1
plot(f8174(8174))
f8175(a8175) => a8175 + 1
plot(f8175(8175))
f8176(a8176) => a8176 + 1
plot(f8176(8176))
f8177(a8177) => a8177 + 1
plot(f8177(8177))
f8178(a8178) => a8178 + 1
plot(f8178(8178))
f8179(a8179) => a8179 + 1
plot(f8179(8179))
f8180(a8180) => a8180 + 1
plot(f8180(8180))
f8181(a8181) => a8181 + 1
plot(f8181(8181))
f8182(a8182) => a8182 + 1
plot(f8182(8182))
f8183(a8183) => a8183 + 1
plot(f8183(8183))
f8184(a8184) => a8184 + 1
plot(f8184(8184))
f8185(a8185) => a8185 + 1
plot(f8185(8185))
f8186(a8186) => a8186 + 1
plot(f8186(8186))
f8187(a8187) => a8187 + 1
plot(f8187(8187))
f8188(a8188) => a8188 + 1
plot(f8188(8188))
f8189(a8189) => a8189 + 1
plot(f8189(8189))
f8190(a8190) => a8190 + 1
plot(f8190(8190))
f8191(a8191) => a8191 + 1
plot(f8191(8191))
f8192(a8192) => a8192 + 1
plot(f8192(8192))
f8193(a8193) => a8193 + 1
plot(f8193(8193))
f8194(a8194) => a8194 + 1
plot(f8194(8194))
f8195(a8195) => a8195 + 1
plot(f8195(8195))
f8196(a8196) => a8196 + 1
plot(f8196(8196))
f8197(a8197) => a8197 + 1
plot(f8197(8197))
f8198(a8198) => a8198 + 1
plot(f8198(8198))
f8199(a8199) => a8199 + 1
plot(f8199(8199))
f8200(a8200) => a8200 + 1
plot(f8200(8200))
f8201(a8201) => a8201 + 1
plot(f8201(8201))
f8202(a8202) => a8202 + 1
plot(f8202(8202))
f8203(a8203) => a8203 + 1
plot(f8203(8203))
f8204(a8204) => a8204 + 1
plot(f8204(8204))
f8205(a8205) => a8205 + 1
plot(f8205(8205))
f8206(a8206) => a8206 + 1
plot(f8206(8206))
f8207(a8207) => a8207 + 1
plot(f8207(8207))
f8208(a8208) => a8208 + 1
plot(f8208(8208))
f8209(a8209) => a8209 + 1
plot(f8209(8209))
f8210(a8210) => a8210 + 1
plot(f8210(8210))
f8211(a8211) => a8211 + 1
plot(f8211(8211))
f8212(a8212) => a8212 + 1
plot(f8212(8212))
f8213(a8213) => a8213 + 1
plot(f8213(8213))
f8214(a8214) => a8214 + 1
plot(f8214(8214))
f8215(a8215) => a8215 + 1
plot(f8215(8215))
f8216(a8216) => a8216 + 1
plot(f8216(8216))
f8217(a8217) => a8217 + 1
plot(f8217(8217))
f8218(a8218) => a8218 + 1
plot(f8218(8218))
f8219(a8219) => a8219 + 1
plot(f8219(8219))
f8220(a8220) => a8220 + 1
plot(f8220(8220))
f8221(a8221) => a8221 + 1
plot(f8221(8221))
f8222(a8222) => a8222 + 1
plot(f8222(8222))
f8223(a8223) => a8223 + 1
plot(f8223(8223))
f8224(a8224) => a8224 + 1
plot(f8224(8224))
f8225(a8225) => a8225 + 1
plot(f8225(8225))
f8226(a8226) => a8226 + 1
plot(f8226(8226))
f8227(a8227) => a8227 + 1
plot(f8227(8227))
f8228(a8228) => a8228 + 1
plot(f8228(8228))
f8229(a8229) => a8229 + 1
plot(f8229(8229))
f8230(a8230) => a8230 + 1
plot(f8230(8230))
f8231(a8231) => a8231 + 1
plot(f8231(8231))
f8232(a8232) => a8232 + 1
plot(f8232(8232))
f8233(a8233) => a8233 + 1
plot(f8233(8233))
f8234(a8234) => a8234 + 1
plot(f8234(8234))
f8235(a8235) => a8235 + 1
plot(f8235(8235))
f8236(a8236) => a8236 + 1
plot(f8236(8236))
f8237(a8237) => a8237 + 1
plot(f8237(8237))
f8238(a8238) => a8238 + 1
plot(f8238(8238))
f8239(a8239) => a8239 + 1
plot(f8239(8239))
f8240(a8240) => a8240 + 1
plot(f8240(8240))
f8241(a8241) => a8241 + 1
plot(f8241(8241))
f8242(a8242) => a8242 + 1
plot(f8242(8242))
f8243(a8243) => a8243 + 1
plot(f8243(8243))
f8244(a8244) => a8244 + 1
plot(f8244(8244))
f8245(a8245) => a8245 + 1
plot(f8245(8245))
f8246(a8246) => a8246 + 1
plot(f8246(8246))
f8247(a8247) => a8247 + 1
plot(f8247(8247))
f8248(a8248) => a8248 + 1
plot(f8248(8248))
f8249(a8249) => a8249 + 1
plot(f8249(8249))
f8250(a8250) => a8250 + 1
plot(f8250(8250))
f8251(a8251) => a8251 + 1
plot(f8251(8251))
f8252(a8252) => a8252 + 1
plot(f8252(8252))
f8253(a8253) => a8253 + 1
plot(f8253(8253))
f8254(a8254) => a8254 + 1
plot(f8254(8254))
f8255(a8255) => a8255 + 1
plot(f8255(8255))
f8256(a8256) => a8256 + 1
plot(f8256(8256))
f8257(a8257) => a8257 + 1
plot(f8257(8257))
f8258(a8258) => a8258 + 1
plot(f8258(8258))
f8259(a8259) => a8259 + 1
plot(f8259(8259))
f8260(a8260) => a8260 + 1
plot(f8260(8260))
f8261(a8261) => a8261 + 1
plot(f8261(8261))
f8262(a8262) => a8262 + 1
plot(f8262(8262))
f8263(a8263) => a8263 + 1
plot(f8263(8263))
f8264(a8264) => a8264 + 1
plot(f8264(8264))
f8265(a8265) => a8265 + 1
plot(f8265(8265))
f8266(a8266) => a8266 + 1
plot(f8266(8266))
f8267(a8267) => a8267 + 1
plot(f8267(8267))
f8268(a8268) => a8268 + 1
plot(f8268(8268))
f8269(a8269) => a8269 + 1
plot(f8269(8269))
f8270(a8270) => a8270 + 1
plot(f8270(8270))
f8271(a8271) => a8271 + 1
plot(f8271(8271))
f8272(a8272) => a8272 + 1
plot(f8272(8272))
f8273(a8273) => a8273 + 1
plot(f8273(8273))
f8274(a8274) => a8274 + 1
plot(f8274(8274))
f8275(a8275) => a8275 + 1
plot(f8275(8275))
f8276(a8276) => a8276 + 1
plot(f8276(8276))
f8277(a8277) => a8277 + 1
plot(f8277(8277))
f8278(a8278) => a8278 + 1
plot(f8278(8278))
f8279(a8279) => a8279 + 1
plot(f8279(8279))
f8280(a8280) => a8280 + 1
plot(f8280(8280))
f8281(a8281) => a8281 + 1
plot(f8281(8281))
f8282(a8282) => a8282 + 1
plot(f8282(8282))
f8283(a8283) => a8283 + 1
plot(f8283(8283))
f8284(a8284) => a8284 + 1
plot(f8284(8284))
f8285(a8285) => a8285 + 1
plot(f8285(8285))
f8286(a8286) => a8286 + 1
plot(f8286(8286))
f8287(a8287) => a8287 + 1
plot(f8287(8287))
f8288(a8288) => a8288 + 1
plot(f8288(8288))
f8289(a8289) => a8289 + 1
plot(f8289(8289))
f8290(a8290) => a8290 + 1
plot(f8290(8290))
f8291(a8291) => a8291 + 1
plot(f8291(8291))
f8292(a8292) => a8292 + 1
plot(f8292(8292))
f8293(a8293) => a8293 + 1
plot(f8293(8293))
f8294(a8294) => a8294 + 1
plot(f8294(8294))
f8295(a8295) => a8295 + 1
plot(f8295(8295))
f8296(a8296) => a8296 + 1
plot(f8296(8296))
f8297(a8297) => a8297 + 1
plot(f8297(8297))
f8298(a8298) => a8298 + 1
plot(f8298(8298))
f8299(a8299) => a8299 + 1
plot(f8299(8299))
f8300(a8300) => a8300 + 1
plot(f8300(8300))
f8301(a8301) => a8301 + 1
plot(f8301(8301))
f8302(a8302) => a8302 + 1
plot(f8302(8302))
f8303(a8303) => a8303 + 1
plot(f8303(8303))
f8304(a8304) => a8304 + 1
plot(f8304(8304))
f8305(a8305) => a8305 + 1
plot(f8305(8305))
f8306(a8306) => a8306 + 1
plot(f8306(8306))
f8307(a8307) => a8307 + 1
plot(f8307(8307))
f8308(a8308) => a8308 + 1
plot(f8308(8308))
f8309(a8309) => a8309 + 1
plot(f8309(8309))
f8310(a8310) => a8310 + 1
plot(f8310(8310))
f8311(a8311) => a8311 + 1
plot(f8311(8311))
f8312(a8312) => a8312 + 1
plot(f8312(8312))
f8313(a8313) => a8313 + 1
plot(f8313(8313))
f8314(a8314) => a8314 + 1
plot(f8314(8314))
f8315(a8315) => a8315 + 1
plot(f8315(8315))
f8316(a8316) => a8316 + 1
plot(f8316(8316))
f8317(a8317) => a8317 + 1
plot(f8317(8317))
f8318(a8318) => a8318 + 1
plot(f8318(8318))
f8319(a8319) => a8319 + 1
plot(f8319(8319))
f8320(a8320) => a8320 + 1
plot(f8320(8320))
f8321(a8321) => a8321 + 1
plot(f8321(8321))
f8322(a8322) => a8322 + 1
plot(f8322(8322))
f8323(a8323) => a8323 + 1
plot(f8323(8323))
f8324(a8324) => a8324 + 1
plot(f8324(8324))
f8325(a8325) => a8325 + 1
plot(f8325(8325))
f8326(a8326) => a8326 + 1
plot(f8326(8326))
f8327(a8327) => a8327 + 1
plot(f8327(8327))
f8328(a8328) => a8328 + 1
plot(f8328(8328))
f8329(a8329) => a8329 + 1
plot(f8329(8329))
f8330(a8330) => a8330 + 1
plot(f8330(8330))
f8331(a8331) => a8331 + 1
plot(f8331(8331))
f8332(a8332) => a8332 + 1
plot(f8332(8332))
f8333(a8333) => a8333 + 1
plot(f8333(8333))
f8334(a8334) => a8334 + 1
plot(f8334(8334))
f8335(a8335) => a8335 + 1
plot(f8335(8335))
f8336(a8336) => a8336 + 1
plot(f8336(8336))
f8337(a8337) => a8337 + 1
plot(f8337(8337))
f8338(a8338) => a8338 + 1
plot(f8338(8338))
f8339(a8339) => a8339 + 1
plot(f8339(8339))
f8340(a8340) => a8340 + 1
plot(f8340(8340))
f8341(a8341) => a8341 + 1
plot(f8341(8341))
f8342(a8342) => a8342 + 1
plot(f8342(8342))
f8343(a8343) => a8343 + 1
plot(f8343(8343))
f8344(a8344) => a8344 + 1
plot(f8344(8344))
f8345(a8345) => a8345 + 1
plot(f8345(8345))
f8346(a8346) => a8346 + 1
plot(f8346(8346))
f8347(a8347) => a8347 + 1
plot(f8347(8347))
f8348(a8348) => a8348 + 1
plot(f8348(8348))
f8349(a8349) => a8349 + 1
plot(f8349(8349))
f8350(a8350) => a8350 + 1
plot(f8350(8350))
f8351(a8351) => a8351 + 1
plot(f8351(8351))
f8352(a8352) => a8352 + 1
plot(f8352(8352))
f8353(a8353) => a8353 + 1
plot(f8353(8353))
f8354(a8354) => a8354 + 1
plot(f8354(8354))
f8355(a8355) => a8355 + 1
plot(f8355(8355))
f8356(a8356) => a8356 + 1
plot(f8356(8356))
f8357(a8357) => a8357 + 1
plot(f8357(8357))
f8358(a8358) => a8358 + 1
plot(f8358(8358))
f8359(a8359) => a8359 + 1
plot(f8359(8359))
f8360(a8360) => a8360 + 1
plot(f8360(8360))
f8361(a8361) => a8361 + 1
plot(f8361(8361))
f8362(a8362) => a8362 + 1
plot(f8362(8362))
f8363(a8363) => a8363 + 1
plot(f8363(8363))
f8364(a8364) => a8364 + 1
plot(f8364(8364))
f8365(a8365) => a8365 + 1
plot(f8365(8365))
f8366(a8366) => a8366 + 1
plot(f8366(8366))
f8367(a8367) => a8367 + 1
plot(f8367(8367))
f8368(a8368) => a8368 + 1
plot(f8368(8368))
f8369(a8369) => a8369 + 1
plot(f8369(8369))
f8370(a8370) => a8370 + 1
plot(f8370(8370))
f8371(a8371) => a8371 + 1
plot(f8371(8371))
f8372(a8372) => a8372 + 1
plot(f8372(8372))
f8373(a8373) => a8373 + 1
plot(f8373(8373))
f8374(a8374) => a8374 + 1
plot(f8374(8374))
f8375(a8375) => a8375 + 1
plot(f8375(8375))
f8376(a8376) => a8376 + 1
plot(f8376(8376))
f8377(a8377) => a8377 + 1
plot(f8377(8377))
f8378(a8378) => a8378 + 1
plot(f8378(8378))
f8379(a8379) => a8379 + 1
plot(f8379(8379))
f8380(a8380) => a8380 + 1
plot(f8380(8380))
f8381(a8381) => a8381 + 1
plot(f8381(8381))
f8382(a8382) => a8382 + 1
plot(f8382(8382))
f8383(a8383) => a8383 + 1
plot(f8383(8383))
f8384(a8384) => a8384 + 1
plot(f8384(8384))
f8385(a8385) => a8385 + 1
plot(f8385(8385))
f8386(a8386) => a8386 + 1
plot(f8386(8386))
f8387(a8387) => a8387 + 1
plot(f8387(8387))
f8388(a8388) => a8388 + 1
plot(f8388(8388))
f8389(a8389) => a8389 + 1
plot(f8389(8389))
f8390(a8390) => a8390 + 1
plot(f8390(8390))
f8391(a8391) => a8391 + 1
plot(f8391(8391))
f8392(a8392) => a8392 + 1
plot(f8392(8392))
f8393(a8393) => a8393 + 1
plot(f8393(8393))
f8394(a8394) => a8394 + 1
plot(f8394(8394))
f8395(a8395) => a8395 + 1
plot(f8395(8395))
f8396(a8396) => a8396 + 1
plot(f8396(8396))
f8397(a8397) => a8397 + 1
plot(f8397(8397))
f8398(a8398) => a8398 + 1
plot(f8398(8398))
f8399(a8399) => a8399 + 1
plot(f8399(8399))
f8400(a8400) => a8400 + 1
plot(f8400(8400))
f8401(a8401) => a8401 + 1
plot(f8401(8401))
f8402(a8402) => a8402 + 1
plot(f8402(8402))
f8403(a8403) => a8403 + 1
plot(f8403(8403))
f8404(a8404) => a8404 + 1
plot(f8404(8404))
f8405(a8405) => a8405 + 1
plot(f8405(8405))
f8406(a8406) => a8406 + 1
plot(f8406(8406))
f8407(a8407) => a8407 + 1
plot(f8407(8407))
f8408(a8408) => a8408 + 1
plot(f8408(8408))
f8409(a8409) => a8409 + 1
plot(f8409(8409))
f8410(a8410) => a8410 + 1
plot(f8410(8410))
f8411(a8411) => a8411 + 1
plot(f8411(8411))
f8412(a8412) => a8412 + 1
plot(f8412(8412))
f8413(a8413) => a8413 + 1
plot(f8413(8413))
f8414(a8414) => a8414 + 1
plot(f8414(8414))
f8415(a8415) => a8415 + 1
plot(f8415(8415))
f8416(a8416) => a8416 + 1
plot(f8416(8416))
f8417(a8417) => a8417 + 1
plot(f8417(8417))
f8418(a8418) => a8418 + 1
plot(f8418(8418))
f8419(a8419) => a8419 + 1
plot(f8419(8419))
f8420(a8420) => a8420 + 1
plot(f8420(8420))
f8421(a8421) => a8421 + 1
plot(f8421(8421))
f8422(a8422) => a8422 + 1
plot(f8422(8422))
f8423(a8423) => a8423 + 1
plot(f8423(8423))
f8424(a8424) => a8424 + 1
plot(f8424(8424))
f8425(a8425) => a8425 + 1
plot(f8425(8425))
f8426(a8426) => a8426 + 1
plot(f8426(8426))
f8427(a8427) => a8427 + 1
plot(f8427(8427))
f8428(a8428) => a8428 + 1
plot(f8428(8428))
f8429(a8429) => a8429 + 1
plot(f8429(8429))
f8430(a8430) => a8430 + 1
plot(f8430(8430))
f8431(a8431) => a8431 + 1
plot(f8431(8431))
f8432(a8432) => a8432 + 1
plot(f8432(8432))
f8433(a8433) => a8433 + 1
plot(f8433(8433))
f8434(a8434) => a8434 + 1
plot(f8434(8434))
f8435(a8435) => a8435 + 1
plot(f8435(8435))
f8436(a8436) => a8436 + 1
plot(f8436(8436))
f8437(a8437) => a8437 + 1
plot(f8437(8437))
f8438(a8438) => a8438 + 1
plot(f8438(8438))
f8439(a8439) => a8439 + 1
plot(f8439(8439))
f8440(a8440) => a8440 + 1
plot(f8440(8440))
f8441(a8441) => a8441 + 1
plot(f8441(8441))
f8442(a8442) => a8442 + 1
plot(f8442(8442))
f8443(a8443) => a8443 + 1
plot(f8443(8443))
f8444(a8444) => a8444 + 1
plot(f8444(8444))
f8445(a8445) => a8445 + 1
plot(f8445(8445))
f8446(a8446) => a8446 + 1
plot(f8446(8446))
f8447(a8447) => a8447 + 1
plot(f8447(8447))
f8448(a8448) => a8448 + 1
plot(f8448(8448))
f8449(a8449) => a8449 + 1
plot(f8449(8449))
f8450(a8450) => a8450 + 1
plot(f8450(8450))
f8451(a8451) => a8451 + 1
plot(f8451(8451))
f8452(a8452) => a8452 + 1
plot(f8452(8452))
f8453(a8453) => a8453 + 1
plot(f8453(8453))
f8454(a8454) => a8454 + 1
plot(f8454(8454))
f8455(a8455) => a8455 + 1
plot(f8455(8455))
f8456(a8456) => a8456 + 1
plot(f8456(8456))
f8457(a8457) => a8457 + 1
plot(f8457(8457))
f8458(a8458) => a8458 + 1
plot(f8458(8458))
f8459(a8459) => a8459 + 1
plot(f8459(8459))
f8460(a8460) => a8460 + 1
plot(f8460(8460))
f8461(a8461) => a8461 + 1
plot(f8461(8461))
f8462(a8462) => a8462 + 1
plot(f8462(8462))
f8463(a8463) => a8463 + 1
plot(f8463(8463))
f8464(a8464) => a8464 + 1
plot(f8464(8464))
f8465(a8465) => a8465 + 1
plot(f8465(8465))
f8466(a8466) => a8466 + 1
plot(f8466(8466))
f8467(a8467) => a8467 + 1
plot(f8467(8467))
f8468(a8468) => a8468 + 1
plot(f8468(8468))
f8469(a8469) => a8469 + 1
plot(f8469(8469))
f8470(a8470) => a8470 + 1
plot(f8470(8470))
f8471(a8471) => a8471 + 1
plot(f8471(8471))
f8472(a8472) => a8472 + 1
plot(f8472(8472))
f8473(a8473) => a8473 + 1
plot(f8473(8473))
f8474(a8474) => a8474 + 1
plot(f8474(8474))
f8475(a8475) => a8475 + 1
plot(f8475(8475))
f8476(a8476) => a8476 + 1
plot(f8476(8476))
f8477(a8477) => a8477 + 1
plot(f8477(8477))
f8478(a8478) => a8478 + 1
plot(f8478(8478))
f8479(a8479) => a8479 + 1
plot(f8479(8479))
f8480(a8480) => a8480 + 1
plot(f8480(8480))
f8481(a8481) => a8481 + 1
plot(f8481(8481))
f8482(a8482) => a8482 + 1
plot(f8482(8482))
f8483(a8483) => a8483 + 1
plot(f8483(8483))
f8484(a8484) => a8484 + 1
plot(f8484(8484))
f8485(a8485) => a8485 + 1
plot(f8485(8485))
f8486(a8486) => a8486 + 1
plot(f8486(8486))
f8487(a8487) => a8487 + 1
plot(f8487(8487))
f8488(a8488) => a8488 + 1
plot(f8488(8488))
f8489(a8489) => a8489 + 1
plot(f8489(8489))
f8490(a8490) => a8490 + 1
plot(f8490(8490))
f8491(a8491) => a8491 + 1
plot(f8491(8491))
f8492(a8492) => a8492 + 1
plot(f8492(8492))
f8493(a8493) => a8493 + 1
plot(f8493(8493))
f8494(a8494) => a8494 + 1
plot(f8494(8494))
f8495(a8495) => a8495 + 1
plot(f8495(8495))
f8496(a8496) => a8496 + 1
plot(f8496(8496))
f8497(a8497) => a8497 + 1
plot(f8497(8497))
f8498(a8498) => a8498 + 1
plot(f8498(8498))
f8499(a8499) => a8499 + 1
plot(f8499(8499))
f8500(a8500) => a8500 + 1
plot(f8500(8500))
f8501(a8501) => a8501 + 1
plot(f8501(8501))
f8502(a8502) => a8502 + 1
plot(f8502(8502))
f8503(a8503) => a8503 + 1
plot(f8503(8503))
f8504(a8504) => a8504 + 1
plot(f8504(8504))
f8505(a8505) => a8505 + 1
plot(f8505(8505))
f8506(a8506) => a8506 + 1
plot(f8506(8506))
f8507(a8507) => a8507 + 1
plot(f8507(8507))
f8508(a8508) => a8508 + 1
plot(f8508(8508))
f8509(a8509) => a8509 + 1
plot(f8509(8509))
f8510(a8510) => a8510 + 1
plot(f8510(8510))
f8511(a8511) => a8511 + 1
plot(f8511(8511))
f8512(a8512) => a8512 + 1
plot(f8512(8512))
f8513(a8513) => a8513 + 1
plot(f8513(8513))
f8514(a8514) => a8514 + 1
plot(f8514(8514))
f8515(a8515) => a8515 + 1
plot(f8515(8515))
f8516(a8516) => a8516 + 1
plot(f8516(8516))
f8517(a8517) => a8517 + 1
plot(f8517(8517))
f8518(a8518) => a8518 + 1
plot(f8518(8518))
f8519(a8519) => a8519 + 1
plot(f8519(8519))
f8520(a8520) => a8520 + 1
plot(f8520(8520))
f8521(a8521) => a8521 + 1
plot(f8521(8521))
f8522(a8522) => a8522 + 1
plot(f8522(8522))
f8523(a8523) => a8523 + 1
plot(f8523(8523))
f8524(a8524) => a8524 + 1
plot(f8524(8524))
f8525(a8525) => a8525 + 1
plot(f8525(8525))
f8526(a8526) => a8526 + 1
plot(f8526(8526))
f8527(a8527) => a8527 + 1
plot(f8527(8527))
f8528(a8528) => a8528 + 1
plot(f8528(8528))
f8529(a8529) => a8529 + 1
plot(f8529(8529))
f8530(a8530) => a8530 + 1
plot(f8530(8530))
f8531(a8531) => a8531 + 1
plot(f8531(8531))
f8532(a8532) => a8532 + 1
plot(f8532(8532))
f8533(a8533) => a8533 + 1
plot(f8533(8533))
f8534(a8534) => a8534 + 1
plot(f8534(8534))
f8535(a8535) => a8535 + 1
plot(f8535(8535))
f8536(a8536) => a8536 + 1
plot(f8536(8536))
f8537(a8537) => a8537 + 1
plot(f8537(8537))
f8538(a8538) => a8538 + 1
plot(f8538(8538))
f8539(a8539) => a8539 + 1
plot(f8539(8539))
f8540(a8540) => a8540 + 1
plot(f8540(8540))
f8541(a8541) => a8541 + 1
plot(f8541(8541))
f8542(a8542) => a8542 + 1
plot(f8542(8542))
f8543(a8543) => a8543 + 1
plot(f8543(8543))
f8544(a8544) => a8544 + 1
plot(f8544(8544))
f8545(a8545) => a8545 + 1
plot(f8545(8545))
f8546(a8546) => a8546 + 1
plot(f8546(8546))
f8547(a8547) => a8547 + 1
plot(f8547(8547))
f8548(a8548) => a8548 + 1
plot(f8548(8548))
f8549(a8549) => a8549 + 1
plot(f8549(8549))
f8550(a8550) => a8550 + 1
plot(f8550(8550))
f8551(a8551) => a8551 + 1
plot(f8551(8551))
f8552(a8552) => a8552 + 1
plot(f8552(8552))
f8553(a8553) => a8553 + 1
plot(f8553(8553))
f8554(a8554) => a8554 + 1
plot(f8554(8554))
f8555(a8555) => a8555 + 1
plot(f8555(8555))
f8556(a8556) => a8556 + 1
plot(f8556(8556))
f8557(a8557) => a8557 + 1
plot(f8557(8557))
f8558(a8558) => a8558 + 1
plot(f8558(8558))
f8559(a8559) => a8559 + 1
plot(f8559(8559))
f8560(a8560) => a8560 + 1
plot(f8560(8560))
f8561(a8561) => a8561 + 1
plot(f8561(8561))
f8562(a8562) => a8562 + 1
plot(f8562(8562))
f8563(a8563) => a8563 + 1
plot(f8563(8563))
f8564(a8564) => a8564 + 1
plot(f8564(8564))
f8565(a8565) => a8565 + 1
plot(f8565(8565))
f8566(a8566) => a8566 + 1
plot(f8566(8566))
f8567(a8567) => a8567 + 1
plot(f8567(8567))
f8568(a8568) => a8568 + 1
plot(f8568(8568))
f8569(a8569) => a8569 + 1
plot(f8569(8569))
f8570(a8570) => a8570 + 1
plot(f8570(8570))
f8571(a8571) => a8571 + 1
plot(f8571(8571))
f8572(a8572) => a8572 + 1
plot(f8572(8572))
f8573(a8573) => a8573 + 1
plot(f8573(8573))
f8574(a8574) => a8574 + 1
plot(f8574(8574))
f8575(a8575) => a8575 + 1
plot(f8575(8575))
f8576(a8576) => a8576 + 1
plot(f8576(8576))
f8577(a8577) => a8577 + 1
plot(f8577(8577))
f8578(a8578) => a8578 + 1
plot(f8578(8578))
f8579(a8579) => a8579 + 1
plot(f8579(8579))
f8580(a8580) => a8580 + 1
plot(f8580(8580))
f8581(a8581) => a8581 + 1
plot(f8581(8581))
f8582(a8582) => a8582 + 1
plot(f8582(8582))
f8583(a8583) => a8583 + 1
plot(f8583(8583))
f8584(a8584) => a8584 + 1
plot(f8584(8584))
f8585(a8585) => a8585 + 1
plot(f8585(8585))
f8586(a8586) => a8586 + 1
plot(f8586(8586))
f8587(a8587) => a8587 + 1
plot(f8587(8587))
f8588(a8588) => a8588 + 1
plot(f8588(8588))
f8589(a8589) => a8589 + 1
plot(f8589(8589))
f8590(a8590) => a8590 + 1
plot(f8590(8590))
f8591(a8591) => a8591 + 1
plot(f8591(8591))
f8592(a8592) => a8592 + 1
plot(f8592(8592))
f8593(a8593) => a8593 + 1
plot(f8593(8593))
f8594(a8594) => a8594 + 1
plot(f8594(8594))
f8595(a8595) => a8595 + 1
plot(f8595(8595))
f8596(a8596) => a8596 + 1
plot(f8596(8596))
f8597(a8597) => a8597 + 1
plot(f8597(8597))
f8598(a8598) => a8598 + 1
plot(f8598(8598))
f8599(a8599) => a8599 + 1
plot(f8599(8599))
f8600(a8600) => a8600 + 1
plot(f8600(8600))
f8601(a8601) => a8601 + 1
plot(f8601(8601))
f8602(a8602) => a8602 + 1
plot(f8602(8602))
f8603(a8603) => a8603 + 1
plot(f8603(8603))
f8604(a8604) => a8604 + 1
plot(f8604(8604))
f8605(a8605) => a8605 + 1
plot(f8605(8605))
f8606(a8606) => a8606 + 1
plot(f8606(8606))
f8607(a8607) => a8607 + 1
plot(f8607(8607))
f8608(a8608) => a8608 + 1
plot(f8608(8608))
f8609(a8609) => a8609 + 1
plot(f8609(8609))
f8610(a8610) => a8610 + 1
plot(f8610(8610))
f8611(a8611) => a8611 + 1
plot(f8611(8611))
f8612(a8612) => a8612 + 1
plot(f8612(8612))
f8613(a8613) => a8613 + 1
plot(f8613(8613))
f8614(a8614) => a8614 + 1
plot(f8614(8614))
f8615(a8615) => a8615 + 1
plot(f8615(8615))
f8616(a8616) => a8616 + 1
plot(f8616(8616))
f8617(a8617) => a8617 + 1
plot(f8617(8617))
f8618(a8618) => a8618 + 1
plot(f8618(8618))
f8619(a8619) => a8619 + 1
plot(f8619(8619))
f8620(a8620) => a8620 + 1
plot(f8620(8620))
f8621(a8621) => a8621 + 1
plot(f8621(8621))
f8622(a8622) => a8622 + 1
plot(f8622(8622))
f8623(a8623) => a8623 + 1
plot(f8623(8623))
f8624(a8624) => a8624 + 1
plot(f8624(8624))
f8625(a8625) => a8625 + 1
plot(f8625(8625))
f8626(a8626) => a8626 + 1
plot(f8626(8626))
f8627(a8627) => a8627 + 1
plot(f8627(8627))
f8628(a8628) => a8628 + 1
plot(f8628(8628))
f8629(a8629) => a8629 + 1
plot(f8629(8629))
f8630(a8630) => a8630 + 1
plot(f8630(8630))
f8631(a8631) => a8631 + 1
plot(f8631(8631))
f8632(a8632) => a8632 + 1
plot(f8632(8632))
f8633(a8633) => a8633 + 1
plot(f8633(8633))
f8634(a8634) => a8634 + 1
plot(f8634(8634))
f8635(a8635) => a8635 + 1
plot(f8635(8635))
f8636(a8636) => a8636 + 1
plot(f8636(8636))
f8637(a8637) => a8637 + 1
plot(f8637(8637))
f8638(a8638) => a8638 + 1
plot(f8638(8638))
f8639(a8639) => a8639 + 1
plot(f8639(8639))
f8640(a8640) => a8640 + 1
plot(f8640(8640))
f8641(a8641) => a8641 + 1
plot(f8641(8641))
f8642(a8642) => a8642 + 1
plot(f8642(8642))
f8643(a8643) => a8643 + 1
plot(f8643(8643))
f8644(a8644) => a8644 + 1
plot(f8644(8644))
f8645(a8645) => a8645 + 1
plot(f8645(8645))
f8646(a8646) => a8646 + 1
plot(f8646(8646))
f8647(a8647) => a8647 + 1
plot(f8647(8647))
f8648(a8648) => a8648 + 1
plot(f8648(8648))
f8649(a8649) => a8649 + 1
plot(f8649(8649))
f8650(a8650) => a8650 + 1
plot(f8650(8650))
f8651(a8651) => a8651 + 1
plot(f8651(8651))
f8652(a8652) => a8652 + 1
plot(f8652(8652))
f8653(a8653) => a8653 + 1
plot(f8653(8653))
f8654(a8654) => a8654 + 1
plot(f8654(8654))
f8655(a8655) => a8655 + 1
plot(f8655(8655))
f8656(a8656) => a8656 + 1
plot(f8656(8656))
f8657(a8657) => a8657 + 1
plot(f8657(8657))
f8658(a8658) => a8658 + 1
plot(f8658(8658))
f8659(a8659) => a8659 + 1
plot(f8659(8659))
f8660(a8660) => a8660 + 1
plot(f8660(8660))
f8661(a8661) => a8661 + 1
plot(f8661(8661))
f8662(a8662) => a8662 + 1
plot(f8662(8662))
f8663(a8663) => a8663 + 1
plot(f8663(8663))
f8664(a8664) => a8664 + 1
plot(f8664(8664))
f8665(a8665) => a8665 + 1
plot(f8665(8665))
f8666(a8666) => a8666 + 1
plot(f8666(8666))
f8667(a8667) => a8667 + 1
plot(f8667(8667))
f8668(a8668) => a8668 + 1
plot(f8668(8668))
f8669(a8669) => a8669 + 1
plot(f8669(8669))
f8670(a8670) => a8670 + 1
plot(f8670(8670))
f8671(a8671) => a8671 + 1
plot(f8671(8671))
f8672(a8672) => a8672 + 1
plot(f8672(8672))
f8673(a8673) => a8673 + 1
plot(f8673(8673))
f8674(a8674) => a8674 + 1
plot(f8674(8674))
f8675(a8675) => a8675 + 1
plot(f8675(8675))
f8676(a8676) => a8676 + 1
plot(f8676(8676))
f8677(a8677) => a8677 + 1
plot(f8677(8677))
f8678(a8678) => a8678 + 1
plot(f8678(8678))
f8679(a8679) => a8679 + 1
plot(f8679(8679))
f8680(a8680) => a8680 + 1
plot(f8680(8680))
f8681(a8681) => a8681 + 1
plot(f8681(8681))
f8682(a8682) => a8682 + 1
plot(f8682(8682))
f8683(a8683) => a8683 + 1
plot(f8683(8683))
f8684(a8684) => a8684 + 1
plot(f8684(8684))
f8685(a8685) => a8685 + 1
plot(f8685(8685))
f8686(a8686) => a8686 + 1
plot(f8686(8686))
f8687(a8687) => a8687 + 1
plot(f8687(8687))
f8688(a8688) => a8688 + 1
plot(f8688(8688))
f8689(a8689) => a8689 + 1
plot(f8689(8689))
f8690(a8690) => a8690 + 1
plot(f8690(8690))
f8691(a8691) => a8691 + 1
plot(f8691(8691))
f8692(a8692) => a8692 + 1
plot(f8692(8692))
f8693(a8693) => a8693 + 1
plot(f8693(8693))
f8694(a8694) => a8694 + 1
plot(f8694(8694))
f8695(a8695) => a8695 + 1
plot(f8695(8695))
f8696(a8696) => a8696 + 1
plot(f8696(8696))
f8697(a8697) => a8697 + 1
plot(f8697(8697))
f8698(a8698) => a8698 + 1
plot(f8698(8698))
f8699(a8699) => a8699 + 1
plot(f8699(8699))
f8700(a8700) => a8700 + 1
plot(f8700(8700))
f8701(a8701) => a8701 + 1
plot(f8701(8701))
f8702(a8702) => a8702 + 1
plot(f8702(8702))
f8703(a8703) => a8703 + 1
plot(f8703(8703))
f8704(a8704) => a8704 + 1
plot(f8704(8704))
f8705(a8705) => a8705 + 1
plot(f8705(8705))
f8706(a8706) => a8706 + 1
plot(f8706(8706))
f8707(a8707) => a8707 + 1
plot(f8707(8707))
f8708(a8708) => a8708 + 1
plot(f8708(8708))
f8709(a8709) => a8709 + 1
plot(f8709(8709))
f8710(a8710) => a8710 + 1
plot(f8710(8710))
f8711(a8711) => a8711 + 1
plot(f8711(8711))
f8712(a8712) => a8712 + 1
plot(f8712(8712))
f8713(a8713) => a8713 + 1
plot(f8713(8713))
f8714(a8714) => a8714 + 1
plot(f8714(8714))
f8715(a8715) => a8715 + 1
plot(f8715(8715))
f8716(a8716) => a8716 + 1
plot(f8716(8716))
f8717(a8717) => a8717 + 1
plot(f8717(8717))
f8718(a8718) => a8718 + 1
plot(f8718(8718))
f8719(a8719) => a8719 + 1
plot(f8719(8719))
f8720(a8720) => a8720 + 1
plot(f8720(8720))
f8721(a8721) => a8721 + 1
plot(f8721(8721))
f8722(a8722) => a8722 + 1
plot(f8722(8722))
f8723(a8723) => a8723 + 1
plot(f8723(8723))
f8724(a8724) => a8724 + 1
plot(f8724(8724))
f8725(a8725) => a8725 + 1
plot(f8725(8725))
f8726(a8726) => a8726 + 1
plot(f8726(8726))
f8727(a8727) => a8727 + 1
plot(f8727(8727))
f8728(a8728) => a8728 + 1
plot(f8728(8728))
f8729(a8729) => a8729 + 1
plot(f8729(8729))
f8730(a8730) => a8730 + 1
plot(f8730(8730))
f8731(a8731) => a8731 + 1
plot(f8731(8731))
f8732(a8732) => a8732 + 1
plot(f8732(8732))
f8733(a8733) => a8733 + 1
plot(f8733(8733))
f8734(a8734) => a8734 + 1
plot(f8734(8734))
f8735(a8735) => a8735 + 1
plot(f8735(8735))
f8736(a8736) => a8736 + 1
plot(f8736(8736))
f8737(a8737) => a8737 + 1
plot(f8737(8737))
f8738(a8738) => a8738 + 1
plot(f8738(8738))
f8739(a8739) => a8739 + 1
plot(f8739(8739))
f8740(a8740) => a8740 + 1
plot(f8740(8740))
f8741(a8741) => a8741 + 1
plot(f8741(8741))
f8742(a8742) => a8742 + 1
plot(f8742(8742))
f8743(a8743) => a8743 + 1
plot(f8743(8743))
f8744(a8744) => a8744 + 1
plot(f8744(8744))
f8745(a8745) => a8745 + 1
plot(f8745(8745))
f8746(a8746) => a8746 + 1
plot(f8746(8746))
f8747(a8747) => a8747 + 1
plot(f8747(8747))
f8748(a8748) => a8748 + 1
plot(f8748(8748))
f8749(a8749) => a8749 + 1
plot(f8749(8749))
f8750(a8750) => a8750 + 1
plot(f8750(8750))
f8751(a8751) => a8751 + 1
plot(f8751(8751))
f8752(a8752) => a8752 + 1
plot(f8752(8752))
f8753(a8753) => a8753 + 1
plot(f8753(8753))
f8754(a8754) => a8754 + 1
plot(f8754(8754))
f8755(a8755) => a8755 + 1
plot(f8755(8755))
f8756(a8756) => a8756 + 1
plot(f8756(8756))
f8757(a8757) => a8757 + 1
plot(f8757(8757))
f8758(a8758) => a8758 + 1
plot(f8758(8758))
f8759(a8759) => a8759 + 1
plot(f8759(8759))
f8760(a8760) => a8760 + 1
plot(f8760(8760))
f8761(a8761) => a8761 + 1
plot(f8761(8761))
f8762(a8762) => a8762 + 1
plot(f8762(8762))
f8763(a8763) => a8763 + 1
plot(f8763(8763))
f8764(a8764) => a8764 + 1
plot(f8764(8764))
f8765(a8765) => a8765 + 1
plot(f8765(8765))
f8766(a8766) => a8766 + 1
plot(f8766(8766))
f8767(a8767) => a8767 + 1
plot(f8767(8767))
f8768(a8768) => a8768 + 1
plot(f8768(8768))
f8769(a8769) => a8769 + 1
plot(f8769(8769))
f8770(a8770) => a8770 + 1
plot(f8770(8770))
f8771(a8771) => a8771 + 1
plot(f8771(8771))
f8772(a8772) => a8772 + 1
plot(f8772(8772))
f8773(a8773) => a8773 + 1
plot(f8773(8773))
f8774(a8774) => a8774 + 1
plot(f8774(8774))
f8775(a8775) => a8775 + 1
plot(f8775(8775))
f8776(a8776) => a8776 + 1
plot(f8776(8776))
f8777(a8777) => a8777 + 1
plot(f8777(8777))
f8778(a8778) => a8778 + 1
plot(f8778(8778))
f8779(a8779) => a8779 + 1
plot(f8779(8779))
f8780(a8780) => a8780 + 1
plot(f8780(8780))
f8781(a8781) => a8781 + 1
plot(f8781(8781))
f8782(a8782) => a8782 + 1
plot(f8782(8782))
f8783(a8783) => a8783 + 1
plot(f8783(8783))
f8784(a8784) => a8784 + 1
plot(f8784(8784))
f8785(a8785) => a8785 + 1
plot(f8785(8785))
f8786(a8786) => a8786 + 1
plot(f8786(8786))
f8787(a8787) => a8787 + 1
plot(f8787(8787))
f8788(a8788) => a8788 + 1
plot(f8788(8788))
f8789(a8789) => a8789 + 1
plot(f8789(8789))
f8790(a8790) => a8790 + 1
plot(f8790(8790))
f8791(a8791) => a8791 + 1
plot(f8791(8791))
f8792(a8792) => a8792 + 1
plot(f8792(8792))
f8793(a8793) => a8793 + 1
plot(f8793(8793))
f8794(a8794) => a8794 + 1
plot(f8794(8794))
f8795(a8795) => a8795 + 1
plot(f8795(8795))
f8796(a8796) => a8796 + 1
plot(f8796(8796))
f8797(a8797) => a8797 + 1
plot(f8797(8797))
f8798(a8798) => a8798 + 1
plot(f8798(8798))
f8799(a8799) => a8799 + 1
plot(f8799(8799))
f8800(a8800) => a8800 + 1
plot(f8800(8800))
f8801(a8801) => a8801 + 1
plot(f8801(8801))
f8802(a8802) => a8802 + 1
plot(f8802(8802))
f8803(a8803) => a8803 + 1
plot(f8803(8803))
f8804(a8804) => a8804 + 1
plot(f8804(8804))
f8805(a8805) => a8805 + 1
plot(f8805(8805))
f8806(a8806) => a8806 + 1
plot(f8806(8806))
f8807(a8807) => a8807 + 1
plot(f8807(8807))
f8808(a8808) => a8808 + 1
plot(f8808(8808))
f8809(a8809) => a8809 + 1
plot(f8809(8809))
f8810(a8810) => a8810 + 1
plot(f8810(8810))
f8811(a8811) => a8811 + 1
plot(f8811(8811))
f8812(a8812) => a8812 + 1
plot(f8812(8812))
f8813(a8813) => a8813 + 1
plot(f8813(8813))
f8814(a8814) => a8814 + 1
plot(f8814(8814))
f8815(a8815) => a8815 + 1
plot(f8815(8815))
f8816(a8816) => a8816 + 1
plot(f8816(8816))
f8817(a8817) => a8817 + 1
plot(f8817(8817))
f8818(a8818) => a8818 + 1
plot(f8818(8818))
f8819(a8819) => a8819 + 1
plot(f8819(8819))
f8820(a8820) => a8820 + 1
plot(f8820(8820))
f8821(a8821) => a8821 + 1
plot(f8821(8821))
f8822(a8822) => a8822 + 1
plot(f8822(8822))
f8823(a8823) => a8823 + 1
plot(f8823(8823))
f8824(a8824) => a8824 + 1
plot(f8824(8824))
f8825(a8825) => a8825 + 1
plot(f8825(8825))
f8826(a8826) => a8826 + 1
plot(f8826(8826))
f8827(a8827) => a8827 + 1
plot(f8827(8827))
f8828(a8828) => a8828 + 1
plot(f8828(8828))
f8829(a8829) => a8829 + 1
plot(f8829(8829))
f8830(a8830) => a8830 + 1
plot(f8830(8830))
f8831(a8831) => a8831 + 1
plot(f8831(8831))
f8832(a8832) => a8832 + 1
plot(f8832(8832))
f8833(a8833) => a8833 + 1
plot(f8833(8833))
f8834(a8834) => a8834 + 1
plot(f8834(8834))
f8835(a8835) => a8835 + 1
plot(f8835(8835))
f8836(a8836) => a8836 + 1
plot(f8836(8836))
f8837(a8837) => a8837 + 1
plot(f8837(8837))
f8838(a8838) => a8838 + 1
plot(f8838(8838))
f8839(a8839) => a8839 + 1
plot(f8839(8839))
f8840(a8840) => a8840 + 1
plot(f8840(8840))
f8841(a8841) => a8841 + 1
plot(f8841(8841))
f8842(a8842) => a8842 + 1
plot(f8842(8842))
f8843(a8843) => a8843 + 1
plot(f8843(8843))
f8844(a8844) => a8844 + 1
plot(f8844(8844))
f8845(a8845) => a8845 + 1
plot(f8845(8845))
f8846(a8846) => a8846 + 1
plot(f8846(8846))
f8847(a8847) => a8847 + 1
plot(f8847(8847))
f8848(a8848) => a8848 + 1
plot(f8848(8848))
f8849(a8849) => a8849 + 1
plot(f8849(8849))
f8850(a8850) => a8850 + 1
plot(f8850(8850))
f8851(a8851) => a8851 + 1
plot(f8851(8851))
f8852(a8852) => a8852 + 1
plot(f8852(8852))
f8853(a8853) => a8853 + 1
plot(f8853(8853))
f8854(a8854) => a8854 + 1
plot(f8854(8854))
f8855(a8855) => a8855 + 1
plot(f8855(8855))
f8856(a8856) => a8856 + 1
plot(f8856(8856))
f8857(a8857) => a8857 + 1
plot(f8857(8857))
f8858(a8858) => a8858 + 1
plot(f8858(8858))
f8859(a8859) => a8859 + 1
plot(f8859(8859))
f8860(a8860) => a8860 + 1
plot(f8860(8860))
f8861(a8861) => a8861 + 1
plot(f8861(8861))
f8862(a8862) => a8862 + 1
plot(f8862(8862))
f8863(a8863) => a8863 + 1
plot(f8863(8863))
f8864(a8864) => a8864 + 1
plot(f8864(8864))
f8865(a8865) => a8865 + 1
plot(f8865(8865))
f8866(a8866) => a8866 + 1
plot(f8866(8866))
f8867(a8867) => a8867 + 1
plot(f8867(8867))
f8868(a8868) => a8868 + 1
plot(f8868(8868))
f8869(a8869) => a8869 + 1
plot(f8869(8869))
f8870(a8870) => a8870 + 1
plot(f8870(8870))
f8871(a8871) => a8871 + 1
plot(f8871(8871))
f8872(a8872) => a8872 + 1
plot(f8872(8872))
f8873(a8873) => a8873 + 1
plot(f8873(8873))
f8874(a8874) => a8874 + 1
plot(f8874(8874))
f8875(a8875) => a8875 + 1
plot(f8875(8875))
f8876(a8876) => a8876 + 1
plot(f8876(8876))
f8877(a8877) => a8877 + 1
plot(f8877(8877))
f8878(a8878) => a8878 + 1
plot(f8878(8878))
f8879(a8879) => a8879 + 1
plot(f8879(8879))
f8880(a8880) => a8880 + 1
plot(f8880(8880))
f8881(a8881) => a8881 + 1
plot(f8881(8881))
f8882(a8882) => a8882 + 1
plot(f8882(8882))
f8883(a8883) => a8883 + 1
plot(f8883(8883))
f8884(a8884) => a8884 + 1
plot(f8884(8884))
f8885(a8885) => a8885 + 1
plot(f8885(8885))
f8886(a8886) => a8886 + 1
plot(f8886(8886))
f8887(a8887) => a8887 + 1
plot(f8887(8887))
f8888(a8888) => a8888 + 1
plot(f8888(8888))
f8889(a8889) => a8889 + 1
plot(f8889(8889))
f8890(a8890) => a8890 + 1
plot(f8890(8890))
f8891(a8891) => a8891 + 1
plot(f8891(8891))
f8892(a8892) => a8892 + 1
plot(f8892(8892))
f8893(a8893) => a8893 + 1
plot(f8893(8893))
f8894(a8894) => a8894 + 1
plot(f8894(8894))
f8895(a8895) => a8895 + 1
plot(f8895(8895))
f8896(a8896) => a8896 + 1
plot(f8896(8896))
f8897(a8897) => a8897 + 1
plot(f8897(8897))
f8898(a8898) => a8898 + 1
plot(f8898(8898))
f8899(a8899) => a8899 + 1
plot(f8899(8899))
f8900(a8900) => a8900 + 1
plot(f8900(8900))
f8901(a8901) => a8901 + 1
plot(f8901(8901))
f8902(a8902) => a8902 + 1
plot(f8902(8902))
f8903(a8903) => a8903 + 1
plot(f8903(8903))
f8904(a8904) => a8904 + 1
plot(f8904(8904))
f8905(a8905) => a8905 + 1
plot(f8905(8905))
f8906(a8906) => a8906 + 1
plot(f8906(8906))
f8907(a8907) => a8907 + 1
plot(f8907(8907))
f8908(a8908) => a8908 + 1
plot(f8908(8908))
f8909(a8909) => a8909 + 1
plot(f8909(8909))
f8910(a8910) => a8910 + 1
plot(f8910(8910))
f8911(a8911) => a8911 + 1
plot(f8911(8911))
f8912(a8912) => a8912 + 1
plot(f8912(8912))
f8913(a8913) => a8913 + 1
plot(f8913(8913))
f8914(a8914) => a8914 + 1
plot(f8914(8914))
f8915(a8915) => a8915 + 1
plot(f8915(8915))
f8916(a8916) => a8916 + 1
plot(f8916(8916))
f8917(a8917) => a8917 + 1
plot(f8917(8917))
f8918(a8918) => a8918 + 1
plot(f8918(8918))
f8919(a8919) => a8919 + 1
plot(f8919(8919))
f8920(a8920) => a8920 + 1
plot(f8920(8920))
f8921(a8921) => a8921 + 1
plot(f8921(8921))
f8922(a8922) => a8922 + 1
plot(f8922(8922))
f8923(a8923) => a8923 + 1
plot(f8923(8923))
f8924(a8924) => a8924 + 1
plot(f8924(8924))
f8925(a8925) => a8925 + 1
plot(f8925(8925))
f8926(a8926) => a8926 + 1
plot(f8926(8926))
f8927(a8927) => a8927 + 1
plot(f8927(8927))
f8928(a8928) => a8928 + 1
plot(f8928(8928))
f8929(a8929) => a8929 + 1
plot(f8929(8929))
f8930(a8930) => a8930 + 1
plot(f8930(8930))
f8931(a8931) => a8931 + 1
plot(f8931(8931))
f8932(a8932) => a8932 + 1
plot(f8932(8932))
f8933(a8933) => a8933 + 1
plot(f8933(8933))
f8934(a8934) => a8934 + 1
plot(f8934(8934))
f8935(a8935) => a8935 + 1
plot(f8935(8935))
f8936(a8936) => a8936 + 1
plot(f8936(8936))
f8937(a8937) => a8937 + 1
plot(f8937(8937))
f8938(a8938) => a8938 + 1
plot(f8938(8938))
f8939(a8939) => a8939 + 1
plot(f8939(8939))
f8940(a8940) => a8940 + 1
plot(f8940(8940))
f8941(a8941) => a8941 + 1
plot(f8941(8941))
f8942(a8942) => a8942 + 1
plot(f8942(8942))
f8943(a8943) => a8943 + 1
plot(f8943(8943))
f8944(a8944) => a8944 + 1
plot(f8944(8944))
f8945(a8945) => a8945 + 1
plot(f8945(8945))
f8946(a8946) => a8946 + 1
plot(f8946(8946))
f8947(a8947) => a8947 + 1
plot(f8947(8947))
f8948(a8948) => a8948 + 1
plot(f8948(8948))
f8949(a8949) => a8949 + 1
plot(f8949(8949))
f8950(a8950) => a8950 + 1
plot(f8950(8950))
f8951(a8951) => a8951 + 1
plot(f8951(8951))
f8952(a8952) => a8952 + 1
plot(f8952(8952))
f8953(a8953) => a8953 + 1
plot(f8953(8953))
f8954(a8954) => a8954 + 1
plot(f8954(8954))
f8955(a8955) => a8955 + 1
plot(f8955(8955))
f8956(a8956) => a8956 + 1
plot(f8956(8956))
f8957(a8957) => a8957 + 1
plot(f8957(8957))
f8958(a8958) => a8958 + 1
plot(f8958(8958))
f8959(a8959) => a8959 + 1
plot(f8959(8959))
f8960(a8960) => a8960 + 1
plot(f8960(8960))
f8961(a8961) => a8961 + 1
plot(f8961(8961))
f8962(a8962) => a8962 + 1
plot(f8962(8962))
f8963(a8963) => a8963 + 1
plot(f8963(8963))
f8964(a8964) => a8964 + 1
plot(f8964(8964))
f8965(a8965) => a8965 + 1
plot(f8965(8965))
f8966(a8966) => a8966 + 1
plot(f8966(8966))
f8967(a8967) => a8967 + 1
plot(f8967(8967))
f8968(a8968) => a8968 + 1
plot(f8968(8968))
f8969(a8969) => a8969 + 1
plot(f8969(8969))
f8970(a8970) => a8970 + 1
plot(f8970(8970))
f8971(a8971) => a8971 + 1
plot(f8971(8971))
f8972(a8972) => a8972 + 1
plot(f8972(8972))
f8973(a8973) => a8973 + 1
plot(f8973(8973))
f8974(a8974) => a8974 + 1
plot(f8974(8974))
f8975(a8975) => a8975 + 1
plot(f8975(8975))
f8976(a8976) => a8976 + 1
plot(f8976(8976))
f8977(a8977) => a8977 + 1
plot(f8977(8977))
f8978(a8978) => a8978 + 1
plot(f8978(8978))
f8979(a8979) => a8979 + 1
plot(f8979(8979))
f8980(a8980) => a8980 + 1
plot(f8980(8980))
f8981(a8981) => a8981 + 1
plot(f8981(8981))
f8982(a8982) => a8982 + 1
plot(f8982(8982))
f8983(a8983) => a8983 + 1
plot(f8983(8983))
f8984(a8984) => a8984 + 1
plot(f8984(8984))
f8985(a8985) => a8985 + 1
plot(f8985(8985))
f8986(a8986) => a8986 + 1
plot(f8986(8986))
f8987(a8987) => a8987 + 1
plot(f8987(8987))
f8988(a8988) => a8988 + 1
plot(f8988(8988))
f8989(a8989) => a8989 + 1
plot(f8989(8989))
f8990(a8990) => a8990 + 1
plot(f8990(8990))
f8991(a8991) => a8991 + 1
plot(f8991(8991))
f8992(a8992) => a8992 + 1
plot(f8992(8992))
f8993(a8993) => a8993 + 1
plot(f8993(8993))
f8994(a8994) => a8994 + 1
plot(f8994(8994))
f8995(a8995) => a8995 + 1
plot(f8995(8995))
f8996(a8996) => a8996 + 1
plot(f8996(8996))
f8997(a8997) => a8997 + 1
plot(f8997(8997))
f8998(a8998) => a8998 + 1
plot(f8998(8998))
f8999(a8999) => a8999 + 1
plot(f8999(8999))
f9000(a9000) => a9000 + 1
plot(f9000(9000))
f9001(a9001) => a9001 + 1
plot(f9001(9001))
f9002(a9002) => a9002 + 1
plot(f9002(9002))
f9003(a9003) => a9003 + 1
plot(f9003(9003))
f9004(a9004) => a9004 + 1
plot(f9004(9004))
f9005(a9005) => a9005 + 1
plot(f9005(9005))
f9006(a9006) => a9006 + 1
plot(f9006(9006))
f9007(a9007) => a9007 + 1
plot(f9007(9007))
f9008(a9008) => a9008 + 1
plot(f9008(9008))
f9009(a9009) => a9009 + 1
plot(f9009(9009))
f9010(a9010) => a9010 + 1
plot(f9010(9010))
f9011(a9011) => a9011 + 1
plot(f9011(9011))
f9012(a9012) => a9012 + 1
plot(f9012(9012))
f9013(a9013) => a9013 + 1
plot(f9013(9013))
f9014(a9014) => a9014 + 1
plot(f9014(9014))
f9015(a9015) => a9015 + 1
plot(f9015(9015))
f9016(a9016) => a9016 + 1
plot(f9016(9016))
f9017(a9017) => a9017 + 1
plot(f9017(9017))
f9018(a9018) => a9018 + 1
plot(f9018(9018))
f9019(a9019) => a9019 + 1
plot(f9019(9019))
f9020(a9020) => a9020 + 1
plot(f9020(9020))
f9021(a9021) => a9021 + 1
plot(f9021(9021))
f9022(a9022) => a9022 + 1
plot(f9022(9022))
f9023(a9023) => a9023 + 1
plot(f9023(9023))
f9024(a9024) => a9024 + 1
plot(f9024(9024))
f9025(a9025) => a9025 + 1
plot(f9025(9025))
f9026(a9026) => a9026 + 1
plot(f9026(9026))
f9027(a9027) => a9027 + 1
plot(f9027(9027))
f9028(a9028) => a9028 + 1
plot(f9028(9028))
f9029(a9029) => a9029 + 1
plot(f9029(9029))
f9030(a9030) => a9030 + 1
plot(f9030(9030))
f9031(a9031) => a9031 + 1
plot(f9031(9031))
f9032(a9032) => a9032 + 1
plot(f9032(9032))
f9033(a9033) => a9033 + 1
plot(f9033(9033))
f9034(a9034) => a9034 + 1
plot(f9034(9034))
f9035(a9035) => a9035 + 1
plot(f9035(9035))
f9036(a9036) => a9036 + 1
plot(f9036(9036))
f9037(a9037) => a9037 + 1
plot(f9037(9037))
f9038(a9038) => a9038 + 1
plot(f9038(9038))
f9039(a9039) => a9039 + 1
plot(f9039(9039))
f9040(a9040) => a9040 + 1
plot(f9040(9040))
f9041(a9041) => a9041 + 1
plot(f9041(9041))
f9042(a9042) => a9042 + 1
plot(f9042(9042))
f9043(a9043) => a9043 + 1
plot(f9043(9043))
f9044(a9044) => a9044 + 1
plot(f9044(9044))
f9045(a9045) => a9045 + 1
plot(f9045(9045))
f9046(a9046) => a9046 + 1
plot(f9046(9046))
f9047(a9047) => a9047 + 1
plot(f9047(9047))
f9048(a9048) => a9048 + 1
plot(f9048(9048))
f9049(a9049) => a9049 + 1
plot(f9049(9049))
f9050(a9050) => a9050 + 1
plot(f9050(9050))
f9051(a9051) => a9051 + 1
plot(f9051(9051))
f9052(a9052) => a9052 + 1
plot(f9052(9052))
f9053(a9053) => a9053 + 1
plot(f9053(9053))
f9054(a9054) => a9054 + 1
plot(f9054(9054))
f9055(a9055) => a9055 + 1
plot(f9055(9055))
f9056(a9056) => a9056 + 1
plot(f9056(9056))
f9057(a9057) => a9057 + 1
plot(f9057(9057))
f9058(a9058) => a9058 + 1
plot(f9058(9058))
f9059(a9059) => a9059 + 1
plot(f9059(9059))
f9060(a9060) => a9060 + 1
plot(f9060(9060))
f9061(a9061) => a9061 + 1
plot(f9061(9061))
f9062(a9062) => a9062 + 1
plot(f9062(9062))
f9063(a9063) => a9063 + 1
plot(f9063(9063))
f9064(a9064) => a9064 + 1
plot(f9064(9064))
f9065(a9065) => a9065 + 1
plot(f9065(9065))
f9066(a9066) => a9066 + 1
plot(f9066(9066))
f9067(a9067) => a9067 + 1
plot(f9067(9067))
f9068(a9068) => a9068 + 1
plot(f9068(9068))
f9069(a9069) => a9069 + 1
plot(f9069(9069))
f9070(a9070) => a9070 + 1
plot(f9070(9070))
f9071(a9071) => a9071 + 1
plot(f9071(9071))
f9072(a9072) => a9072 + 1
plot(f9072(9072))
f9073(a9073) => a9073 + 1
plot(f9073(9073))
f9074(a9074) => a9074 + 1
plot(f9074(9074))
f9075(a9075) => a9075 + 1
plot(f9075(9075))
f9076(a9076) => a9076 + 1
plot(f9076(9076))
f9077(a9077) => a9077 + 1
plot(f9077(9077))
f9078(a9078) => a9078 + 1
plot(f9078(9078))
f9079(a9079) => a9079 + 1
plot(f9079(9079))
f9080(a9080) => a9080 + 1
plot(f9080(9080))
f9081(a9081) => a9081 + 1
plot(f9081(9081))
f9082(a9082) => a9082 + 1
plot(f9082(9082))
f9083(a9083) => a9083 + 1
plot(f9083(9083))
f9084(a9084) => a9084 + 1
plot(f9084(9084))
f9085(a9085) => a9085 + 1
plot(f9085(9085))
f9086(a9086) => a9086 + 1
plot(f9086(9086))
f9087(a9087) => a9087 + 1
plot(f9087(9087))
f9088(a9088) => a9088 + 1
plot(f9088(9088))
f9089(a9089) => a9089 + 1
plot(f9089(9089))
f9090(a9090) => a9090 + 1
plot(f9090(9090))
f9091(a9091) => a9091 + 1
plot(f9091(9091))
f9092(a9092) => a9092 + 1
plot(f9092(9092))
f9093(a9093) => a9093 + 1
plot(f9093(9093))
f9094(a9094) => a9094 + 1
plot(f9094(9094))
f9095(a9095) => a9095 + 1
plot(f9095(9095))
f9096(a9096) => a9096 + 1
plot(f9096(9096))
f9097(a9097) => a9097 + 1
plot(f9097(9097))
f9098(a9098) => a9098 + 1
plot(f9098(9098))
f9099(a9099) => a9099 + 1
plot(f9099(9099))
f9100(a9100) => a9100 + 1
plot(f9100(9100))
f9101(a9101) => a9101 + 1
plot(f9101(9101))
f9102(a9102) => a9102 + 1
plot(f9102(9102))
f9103(a9103) => a9103 + 1
plot(f9103(9103))
f9104(a9104) => a9104 + 1
plot(f9104(9104))
f9105(a9105) => a9105 + 1
plot(f9105(9105))
f9106(a9106) => a9106 + 1
plot(f9106(9106))
f9107(a9107) => a9107 + 1
plot(f9107(9107))
f9108(a9108) => a9108 + 1
plot(f9108(9108))
f9109(a9109) => a9109 + 1
plot(f9109(9109))
f9110(a9110) => a9110 + 1
plot(f9110(9110))
f9111(a9111) => a9111 + 1
plot(f9111(9111))
f9112(a9112) => a9112 + 1
plot(f9112(9112))
f9113(a9113) => a9113 + 1
plot(f9113(9113))
f9114(a9114) => a9114 + 1
plot(f9114(9114))
f9115(a9115) => a9115 + 1
plot(f9115(9115))
f9116(a9116) => a9116 + 1
plot(f9116(9116))
f9117(a9117) => a9117 + 1
plot(f9117(9117))
f9118(a9118) => a9118 + 1
plot(f9118(9118))
f9119(a9119) => a9119 + 1
plot(f9119(9119))
f9120(a9120) => a9120 + 1
plot(f9120(9120))
f9121(a9121) => a9121 + 1
plot(f9121(9121))
f9122(a9122) => a9122 + 1
plot(f9122(9122))
f9123(a9123) => a9123 + 1
plot(f9123(9123))
f9124(a9124) => a9124 + 1
plot(f9124(9124))
f9125(a9125) => a9125 + 1
plot(f9125(9125))
f9126(a9126) => a9126 + 1
plot(f9126(9126))
f9127(a9127) => a9127 + 1
plot(f9127(9127))
f9128(a9128) => a9128 + 1
plot(f9128(9128))
f9129(a9129) => a9129 + 1
plot(f9129(9129))
f9130(a9130) => a9130 + 1
plot(f9130(9130))
f9131(a9131) => a9131 + 1
plot(f9131(9131))
f9132(a9132) => a9132 + 1
plot(f9132(9132))
f9133(a9133) => a9133 + 1
plot(f9133(9133))
f9134(a9134) => a9134 + 1
plot(f9134(9134))
f9135(a9135) => a9135 + 1
plot(f9135(9135))
f9136(a9136) => a9136 + 1
plot(f9136(9136))
f9137(a9137) => a9137 + 1
plot(f9137(9137))
f9138(a9138) => a9138 + 1
plot(f9138(9138))
f9139(a9139) => a9139 + 1
plot(f9139(9139))
f9140(a9140) => a9140 + 1
plot(f9140(9140))
f9141(a9141) => a9141 + 1
plot(f9141(9141))
f9142(a9142) => a9142 + 1
plot(f9142(9142))
f9143(a9143) => a9143 + 1
plot(f9143(9143))
f9144(a9144) => a9144 + 1
plot(f9144(9144))
f9145(a9145) => a9145 + 1
plot(f9145(9145))
f9146(a9146) => a9146 + 1
plot(f9146(9146))
f9147(a9147) => a9147 + 1
plot(f9147(9147))
f9148(a9148) => a9148 + 1
plot(f9148(9148))
f9149(a9149) => a9149 + 1
plot(f9149(9149))
f9150(a9150) => a9150 + 1
plot(f9150(9150))
f9151(a9151) => a9151 + 1
plot(f9151(9151))
f9152(a9152) => a9152 + 1
plot(f9152(9152))
f9153(a9153) => a9153 + 1
plot(f9153(9153))
f9154(a9154) => a9154 + 1
plot(f9154(9154))
f9155(a9155) => a9155 + 1
plot(f9155(9155))
f9156(a9156) => a9156 + 1
plot(f9156(9156))
f9157(a9157) => a9157 + 1
plot(f9157(9157))
f9158(a9158) => a9158 + 1
plot(f9158(9158))
f9159(a9159) => a9159 + 1
plot(f9159(9159))
f9160(a9160) => a9160 + 1
plot(f9160(9160))
f9161(a9161) => a9161 + 1
plot(f9161(9161))
f9162(a9162) => a9162 + 1
plot(f9162(9162))
f9163(a9163) => a9163 + 1
plot(f9163(9163))
f9164(a9164) => a9164 + 1
plot(f9164(9164))
f9165(a9165) => a9165 + 1
plot(f9165(9165))
f9166(a9166) => a9166 + 1
plot(f9166(9166))
f9167(a9167) => a9167 + 1
plot(f9167(9167))
f9168(a9168) => a9168 + 1
plot(f9168(9168))
f9169(a9169) => a9169 + 1
plot(f9169(9169))
f9170(a9170) => a9170 + 1
plot(f9170(9170))
f9171(a9171) => a9171 + 1
plot(f9171(9171))
f9172(a9172) => a9172 + 1
plot(f9172(9172))
f9173(a9173) => a9173 + 1
plot(f9173(9173))
f9174(a9174) => a9174 + 1
plot(f9174(9174))
f9175(a9175) => a9175 + 1
plot(f9175(9175))
f9176(a9176) => a9176 + 1
plot(f9176(9176))
f9177(a9177) => a9177 + 1
plot(f9177(9177))
f9178(a9178) => a9178 + 1
plot(f9178(9178))
f9179(a9179) => a9179 + 1
plot(f9179(9179))
f9180(a9180) => a9180 + 1
plot(f9180(9180))
f9181(a9181) => a9181 + 1
plot(f9181(9181))
f9182(a9182) => a9182 + 1
plot(f9182(9182))
f9183(a9183) => a9183 + 1
plot(f9183(9183))
f9184(a9184) => a9184 + 1
plot(f9184(9184))
f9185(a9185) => a9185 + 1
plot(f9185(9185))
f9186(a9186) => a9186 + 1
plot(f9186(9186))
f9187(a9187) => a9187 + 1
plot(f9187(9187))
f9188(a9188) => a9188 + 1
plot(f9188(9188))
f9189(a9189) => a9189 + 1
plot(f9189(9189))
f9190(a9190) => a9190 + 1
plot(f9190(9190))
f9191(a9191) => a9191 + 1
plot(f9191(9191))
f9192(a9192) => a9192 + 1
plot(f9192(9192))
f9193(a9193) => a9193 + 1
plot(f9193(9193))
f9194(a9194) => a9194 + 1
plot(f9194(9194))
f9195(a9195) => a9195 + 1
plot(f9195(9195))
f9196(a9196) => a9196 + 1
plot(f9196(9196))
f9197(a9197) => a9197 + 1
plot(f9197(9197))
f9198(a9198) => a9198 + 1
plot(f9198(9198))
f9199(a9199) => a9199 + 1
plot(f9199(9199))
f9200(a9200) => a9200 + 1
plot(f9200(9200))
f9201(a9201) => a9201 + 1
plot(f9201(9201))
f9202(a9202) => a9202 + 1
plot(f9202(9202))
f9203(a9203) => a9203 + 1
plot(f9203(9203))
f9204(a9204) => a9204 + 1
plot(f9204(9204))
f9205(a9205) => a9205 + 1
plot(f9205(9205))
f9206(a9206) => a9206 + 1
plot(f9206(9206))
f9207(a9207) => a9207 + 1
plot(f9207(9207))
f9208(a9208) => a9208 + 1
plot(f9208(9208))
f9209(a9209) => a9209 + 1
plot(f9209(9209))
f9210(a9210) => a9210 + 1
plot(f9210(9210))
f9211(a9211) => a9211 + 1
plot(f9211(9211))
f9212(a9212) => a9212 + 1
plot(f9212(9212))
f9213(a9213) => a9213 + 1
plot(f9213(9213))
f9214(a9214) => a9214 + 1
plot(f9214(9214))
f9215(a9215) => a9215 + 1
plot(f9215(9215))
f9216(a9216) => a9216 + 1
plot(f9216(9216))
f9217(a9217) => a9217 + 1
plot(f9217(9217))
f9218(a9218) => a9218 + 1
plot(f9218(9218))
f9219(a9219) => a9219 + 1
plot(f9219(9219))
f9220(a9220) => a9220 + 1
plot(f9220(9220))
f9221(a9221) => a9221 + 1
plot(f9221(9221))
f9222(a9222) => a9222 + 1
plot(f9222(9222))
f9223(a9223) => a9223 + 1
plot(f9223(9223))
f9224(a9224) => a9224 + 1
plot(f9224(9224))
f9225(a9225) => a9225 + 1
plot(f9225(9225))
f9226(a9226) => a9226 + 1
plot(f9226(9226))
f9227(a9227) => a9227 + 1
plot(f9227(9227))
f9228(a9228) => a9228 + 1
plot(f9228(9228))
f9229(a9229) => a9229 + 1
plot(f9229(9229))
f9230(a9230) => a9230 + 1
plot(f9230(9230))
f9231(a9231) => a9231 + 1
plot(f9231(9231))
f9232(a9232) => a9232 + 1
plot(f9232(9232))
f9233(a9233) => a9233 + 1
plot(f9233(9233))
f9234(a9234) => a9234 + 1
plot(f9234(9234))
f9235(a9235) => a9235 + 1
plot(f9235(9235))
f9236(a9236) => a9236 + 1
plot(f9236(9236))
f9237(a9237) => a9237 + 1
plot(f9237(9237))
f9238(a9238) => a9238 + 1
plot(f9238(9238))
f9239(a9239) => a9239 + 1
plot(f9239(9239))
f9240(a9240) => a9240 + 1
plot(f9240(9240))
f9241(a9241) => a9241 + 1
plot(f9241(9241))
f9242(a9242) => a9242 + 1
plot(f9242(9242))
f9243(a9243) => a9243 + 1
plot(f9243(9243))
f9244(a9244) => a9244 + 1
plot(f9244(9244))
f9245(a9245) => a9245 + 1
plot(f9245(9245))
f9246(a9246) => a9246 + 1
plot(f9246(9246))
f9247(a9247) => a9247 + 1
plot(f9247(9247))
f9248(a9248) => a9248 + 1
plot(f9248(9248))
f9249(a9249) => a9249 + 1
plot(f9249(9249))
f9250(a9250) => a9250 + 1
plot(f9250(9250))
f9251(a9251) => a9251 + 1
plot(f9251(9251))
f9252(a9252) => a9252 + 1
plot(f9252(9252))
f9253(a9253) => a9253 + 1
plot(f9253(9253))
f9254(a9254) => a9254 + 1
plot(f9254(9254))
f9255(a9255) => a9255 + 1
plot(f9255(9255))
f9256(a9256) => a9256 + 1
plot(f9256(9256))
f9257(a9257) => a9257 + 1
plot(f9257(9257))
f9258(a9258) => a9258 + 1
plot(f9258(9258))
f9259(a9259) => a9259 + 1
plot(f9259(9259))
f9260(a9260) => a9260 + 1
plot(f9260(9260))
f9261(a9261) => a9261 + 1
plot(f9261(9261))
f9262(a9262) => a9262 + 1
plot(f9262(9262))
f9263(a9263) => a9263 + 1
plot(f9263(9263))
f9264(a9264) => a9264 + 1
plot(f9264(9264))
f9265(a9265) => a9265 + 1
plot(f9265(9265))
f9266(a9266) => a9266 + 1
plot(f9266(9266))
f9267(a9267) => a9267 + 1
plot(f9267(9267))
f9268(a9268) => a9268 + 1
plot(f9268(9268))
f9269(a9269) => a9269 + 1
plot(f9269(9269))
f9270(a9270) => a9270 + 1
plot(f9270(9270))
f9271(a9271) => a9271 + 1
plot(f9271(9271))
f9272(a9272) => a9272 + 1
plot(f9272(9272))
f9273(a9273) => a9273 + 1
plot(f9273(9273))
f9274(a9274) => a9274 + 1
plot(f9274(9274))
f9275(a9275) => a9275 + 1
plot(f9275(9275))
f9276(a9276) => a9276 + 1
plot(f9276(9276))
f9277(a9277) => a9277 + 1
plot(f9277(9277))
f9278(a9278) => a9278 + 1
plot(f9278(9278))
f9279(a9279) => a9279 + 1
plot(f9279(9279))
f9280(a9280) => a9280 + 1
plot(f9280(9280))
f9281(a9281) => a9281 + 1
plot(f9281(9281))
f9282(a9282) => a9282 + 1
plot(f9282(9282))
f9283(a9283) => a9283 + 1
plot(f9283(9283))
f9284(a9284) => a9284 + 1
plot(f9284(9284))
f9285(a9285) => a9285 + 1
plot(f9285(9285))
f9286(a9286) => a9286 + 1
plot(f9286(9286))
f9287(a9287) => a9287 + 1
plot(f9287(9287))
f9288(a9288) => a9288 + 1
plot(f9288(9288))
f9289(a9289) => a9289 + 1
plot(f9289(9289))
f9290(a9290) => a9290 + 1
plot(f9290(9290))
f9291(a9291) => a9291 + 1
plot(f9291(9291))
f9292(a9292) => a9292 + 1
plot(f9292(9292))
f9293(a9293) => a9293 + 1
plot(f9293(9293))
f9294(a9294) => a9294 + 1
plot(f9294(9294))
f9295(a9295) => a9295 + 1
plot(f9295(9295))
f9296(a9296) => a9296 + 1
plot(f9296(9296))
f9297(a9297) => a9297 + 1
plot(f9297(9297))
f9298(a9298) => a9298 + 1
plot(f9298(9298))
f9299(a9299) => a9299 + 1
plot(f9299(9299))
f9300(a9300) => a9300 + 1
plot(f9300(9300))
f9301(a9301) => a9301 + 1
plot(f9301(9301))
f9302(a9302) => a9302 + 1
plot(f9302(9302))
f9303(a9303) => a9303 + 1
plot(f9303(9303))
f9304(a9304) => a9304 + 1
plot(f9304(9304))
f9305(a9305) => a9305 + 1
plot(f9305(9305))
f9306(a9306) => a9306 + 1
plot(f9306(9306))
f9307(a9307) => a9307 + 1
plot(f9307(9307))
f9308(a9308) => a9308 + 1
plot(f9308(9308))
f9309(a9309) => a9309 + 1
plot(f9309(9309))
f9310(a9310) => a9310 + 1
plot(f9310(9310))
f9311(a9311) => a9311 + 1
plot(f9311(9311))
f9312(a9312) => a9312 + 1
plot(f9312(9312))
f9313(a9313) => a9313 + 1
plot(f9313(9313))
f9314(a9314) => a9314 + 1
plot(f9314(9314))
f9315(a9315) => a9315 + 1
plot(f9315(9315))
f9316(a9316) => a9316 + 1
plot(f9316(9316))
f9317(a9317) => a9317 + 1
plot(f9317(9317))
f9318(a9318) => a9318 + 1
plot(f9318(9318))
f9319(a9319) => a9319 + 1
plot(f9319(9319))
f9320(a9320) => a9320 + 1
plot(f9320(9320))
f9321(a9321) => a9321 + 1
plot(f9321(9321))
f9322(a9322) => a9322 + 1
plot(f9322(9322))
f9323(a9323) => a9323 + 1
plot(f9323(9323))
f9324(a9324) => a9324 + 1
plot(f9324(9324))
f9325(a9325) => a9325 + 1
plot(f9325(9325))
f9326(a9326) => a9326 + 1
plot(f9326(9326))
f9327(a9327) => a9327 + 1
plot(f9327(9327))
f9328(a9328) => a9328 + 1
plot(f9328(9328))
f9329(a9329) => a9329 + 1
plot(f9329(9329))
f9330(a9330) => a9330 + 1
plot(f9330(9330))
f9331(a9331) => a9331 + 1
plot(f9331(9331))
f9332(a9332) => a9332 + 1
plot(f9332(9332))
f9333(a9333) => a9333 + 1
plot(f9333(9333))
f9334(a9334) => a9334 + 1
plot(f9334(9334))
f9335(a9335) => a9335 + 1
plot(f9335(9335))
f9336(a9336) => a9336 + 1
plot(f9336(9336))
f9337(a9337) => a9337 + 1
plot(f9337(9337))
f9338(a9338) => a9338 + 1
plot(f9338(9338))
f9339(a9339) => a9339 + 1
plot(f9339(9339))
f9340(a9340) => a9340 + 1
plot(f9340(9340))
f9341(a9341) => a9341 + 1
plot(f9341(9341))
f9342(a9342) => a9342 + 1
plot(f9342(9342))
f9343(a9343) => a9343 + 1
plot(f9343(9343))
f9344(a9344) => a9344 + 1
plot(f9344(9344))
f9345(a9345) => a9345 + 1
plot(f9345(9345))
f9346(a9346) => a9346 + 1
plot(f9346(9346))
f9347(a9347) => a9347 + 1
plot(f9347(9347))
f9348(a9348) => a9348 + 1
plot(f9348(9348))
f9349(a9349) => a9349 + 1
plot(f9349(9349))
f9350(a9350) => a9350 + 1
plot(f9350(9350))
f9351(a9351) => a9351 + 1
plot(f9351(9351))
f9352(a9352) => a9352 + 1
plot(f9352(9352))
f9353(a9353) => a9353 + 1
plot(f9353(9353))
f9354(a9354) => a9354 + 1
plot(f9354(9354))
f9355(a9355) => a9355 + 1
plot(f9355(9355))
f9356(a9356) => a9356 + 1
plot(f9356(9356))
f9357(a9357) => a9357 + 1
plot(f9357(9357))
f9358(a9358) => a9358 + 1
plot(f9358(9358))
f9359(a9359) => a9359 + 1
plot(f9359(9359))
f9360(a9360) => a9360 + 1
plot(f9360(9360))
f9361(a9361) => a9361 + 1
plot(f9361(9361))
f9362(a9362) => a9362 + 1
plot(f9362(9362))
f9363(a9363) => a9363 + 1
plot(f9363(9363))
f9364(a9364) => a9364 + 1
plot(f9364(9364))
f9365(a9365) => a9365 + 1
plot(f9365(9365))
f9366(a9366) => a9366 + 1
plot(f9366(9366))
f9367(a9367) => a9367 + 1
plot(f9367(9367))
f9368(a9368) => a9368 + 1
plot(f9368(9368))
f9369(a9369) => a9369 + 1
plot(f9369(9369))
f9370(a9370) => a9370 + 1
plot(f9370(9370))
f9371(a9371) => a9371 + 1
plot(f9371(9371))
f9372(a9372) => a9372 + 1
plot(f9372(9372))
f9373(a9373) => a9373 + 1
plot(f9373(9373))
f9374(a9374) => a9374 + 1
plot(f9374(9374))
f9375(a9375) => a9375 + 1
plot(f9375(9375))
f9376(a9376) => a9376 + 1
plot(f9376(9376))
f9377(a9377) => a9377 + 1
plot(f9377(9377))
f9378(a9378) => a9378 + 1
plot(f9378(9378))
f9379(a9379) => a9379 + 1
plot(f9379(9379))
f9380(a9380) => a9380 + 1
plot(f9380(9380))
f9381(a9381) => a9381 + 1
plot(f9381(9381))
f9382(a9382) => a9382 + 1
plot(f9382(9382))
f9383(a9383) => a9383 + 1
plot(f9383(9383))
f9384(a9384) => a9384 + 1
plot(f9384(9384))
f9385(a9385) => a9385 + 1
plot(f9385(9385))
f9386(a9386) => a9386 + 1
plot(f9386(9386))
f9387(a9387) => a9387 + 1
plot(f9387(9387))
f9388(a9388) => a9388 + 1
plot(f9388(9388))
f9389(a9389) => a9389 + 1
plot(f9389(9389))
f9390(a9390) => a9390 + 1
plot(f9390(9390))
f9391(a9391) => a9391 + 1
plot(f9391(9391))
f9392(a9392) => a9392 + 1
plot(f9392(9392))
f9393(a9393) => a9393 + 1
plot(f9393(9393))
f9394(a9394) => a9394 + 1
plot(f9394(9394))
f9395(a9395) => a9395 + 1
plot(f9395(9395))
f9396(a9396) => a9396 + 1
plot(f9396(9396))
f9397(a9397) => a9397 + 1
plot(f9397(9397))
f9398(a9398) => a9398 + 1
plot(f9398(9398))
f9399(a9399) => a9399 + 1
plot(f9399(9399))
f9400(a9400) => a9400 + 1
plot(f9400(9400))
f9401(a9401) => a9401 + 1
plot(f9401(9401))
f9402(a9402) => a9402 + 1
plot(f9402(9402))
f9403(a9403) => a9403 + 1
plot(f9403(9403))
f9404(a9404) => a9404 + 1
plot(f9404(9404))
f9405(a9405) => a9405 + 1
plot(f9405(9405))
f9406(a9406) => a9406 + 1
plot(f9406(9406))
f9407(a9407) => a9407 + 1
plot(f9407(9407))
f9408(a9408) => a9408 + 1
plot(f9408(9408))
f9409(a9409) => a9409 + 1
plot(f9409(9409))
f9410(a9410) => a9410 + 1
plot(f9410(9410))
f9411(a9411) => a9411 + 1
plot(f9411(9411))
f9412(a9412) => a9412 + 1
plot(f9412(9412))
f9413(a9413) => a9413 + 1
plot(f9413(9413))
f9414(a9414) => a9414 + 1
plot(f9414(9414))
f9415(a9415) => a9415 + 1
plot(f9415(9415))
f9416(a9416) => a9416 + 1
plot(f9416(9416))
f9417(a9417) => a9417 + 1
plot(f9417(9417))
f9418(a9418) => a9418 + 1
plot(f9418(9418))
f9419(a9419) => a9419 + 1
plot(f9419(9419))
f9420(a9420) => a9420 + 1
plot(f9420(9420))
f9421(a9421) => a9421 + 1
plot(f9421(9421))
f9422(a9422) => a9422 + 1
plot(f9422(9422))
f9423(a9423) => a9423 + 1
plot(f9423(9423))
f9424(a9424) => a9424 + 1
plot(f9424(9424))
f9425(a9425) => a9425 + 1
plot(f9425(9425))
f9426(a9426) => a9426 + 1
plot(f9426(9426))
f9427(a9427) => a9427 + 1
plot(f9427(9427))
f9428(a9428) => a9428 + 1
plot(f9428(9428))
f9429(a9429) => a9429 + 1
plot(f9429(9429))
f9430(a9430) => a9430 + 1
plot(f9430(9430))
f9431(a9431) => a9431 + 1
plot(f9431(9431))
f9432(a9432) => a9432 + 1
plot(f9432(9432))
f9433(a9433) => a9433 + 1
plot(f9433(9433))
f9434(a9434) => a9434 + 1
plot(f9434(9434))
f9435(a9435) => a9435 + 1
plot(f9435(9435))
f9436(a9436) => a9436 + 1
plot(f9436(9436))
f9437(a9437) => a9437 + 1
plot(f9437(9437))
f9438(a9438) => a9438 + 1
plot(f9438(9438))
f9439(a9439) => a9439 + 1
plot(f9439(9439))
f9440(a9440) => a9440 + 1
plot(f9440(9440))
f9441(a9441) => a9441 + 1
plot(f9441(9441))
f9442(a9442) => a9442 + 1
plot(f9442(9442))
f9443(a9443) => a9443 + 1
plot(f9443(9443))
f9444(a9444) => a9444 + 1
plot(f9444(9444))
f9445(a9445) => a9445 + 1
plot(f9445(9445))
f9446(a9446) => a9446 + 1
plot(f9446(9446))
f9447(a9447) => a9447 + 1
plot(f9447(9447))
f9448(a9448) => a9448 + 1
plot(f9448(9448))
f9449(a9449) => a9449 + 1
plot(f9449(9449))
f9450(a9450) => a9450 + 1
plot(f9450(9450))
f9451(a9451) => a9451 + 1
plot(f9451(9451))
f9452(a9452) => a9452 + 1
plot(f9452(9452))
f9453(a9453) => a9453 + 1
plot(f9453(9453))
f9454(a9454) => a9454 + 1
plot(f9454(9454))
f9455(a9455) => a9455 + 1
plot(f9455(9455))
f9456(a9456) => a9456 + 1
plot(f9456(9456))
f9457(a9457) => a9457 + 1
plot(f9457(9457))
f9458(a9458) => a9458 + 1
plot(f9458(9458))
f9459(a9459) => a9459 + 1
plot(f9459(9459))
f9460(a9460) => a9460 + 1
plot(f9460(9460))
f9461(a9461) => a9461 + 1
plot(f9461(9461))
f9462(a9462) => a9462 + 1
plot(f9462(9462))
f9463(a9463) => a9463 + 1
plot(f9463(9463))
f9464(a9464) => a9464 + 1
plot(f9464(9464))
f9465(a9465) => a9465 + 1
plot(f9465(9465))
f9466(a9466) => a9466 + 1
plot(f9466(9466))
f9467(a9467) => a9467 + 1
plot(f9467(9467))
f9468(a9468) => a9468 + 1
plot(f9468(9468))
f9469(a9469) => a9469 + 1
plot(f9469(9469))
f9470(a9470) => a9470 + 1
plot(f9470(9470))
f9471(a9471) => a9471 + 1
plot(f9471(9471))
f9472(a9472) => a9472 + 1
plot(f9472(9472))
f9473(a9473) => a9473 + 1
plot(f9473(9473))
f9474(a9474) => a9474 + 1
plot(f9474(9474))
f9475(a9475) => a9475 + 1
plot(f9475(9475))
f9476(a9476) => a9476 + 1
plot(f9476(9476))
f9477(a9477) => a9477 + 1
plot(f9477(9477))
f9478(a9478) => a9478 + 1
plot(f9478(9478))
f9479(a9479) => a9479 + 1
plot(f9479(9479))
f9480(a9480) => a9480 + 1
plot(f9480(9480))
f9481(a9481) => a9481 + 1
plot(f9481(9481))
f9482(a9482) => a9482 + 1
plot(f9482(9482))
f9483(a9483) => a9483 + 1
plot(f9483(9483))
f9484(a9484) => a9484 + 1
plot(f9484(9484))
f9485(a9485) => a9485 + 1
plot(f9485(9485))
f9486(a9486) => a9486 + 1
plot(f9486(9486))
f9487(a9487) => a9487 + 1
plot(f9487(9487))
f9488(a9488) => a9488 + 1
plot(f9488(9488))
f9489(a9489) => a9489 + 1
plot(f9489(9489))
f9490(a9490) => a9490 + 1
plot(f9490(9490))
f9491(a9491) => a9491 + 1
plot(f9491(9491))
f9492(a9492) => a9492 + 1
plot(f9492(9492))
f9493(a9493) => a9493 + 1
plot(f9493(9493))
f9494(a9494) => a9494 + 1
plot(f9494(9494))
f9495(a9495) => a9495 + 1
plot(f9495(9495))
f9496(a9496) => a9496 + 1
plot(f9496(9496))
f9497(a9497) => a9497 + 1
plot(f9497(9497))
f9498(a9498) => a9498 + 1
plot(f9498(9498))
f9499(a9499) => a9499 + 1
plot(f9499(9499))
f9500(a9500) => a9500 + 1
plot(f9500(9500))
f9501(a9501) => a9501 + 1
plot(f9501(9501))
f9502(a9502) => a9502 + 1
plot(f9502(9502))
f9503(a9503) => a9503 + 1
plot(f9503(9503))
f9504(a9504) => a9504 + 1
plot(f9504(9504))
f9505(a9505) => a9505 + 1
plot(f9505(9505))
f9506(a9506) => a9506 + 1
plot(f9506(9506))
f9507(a9507) => a9507 + 1
plot(f9507(9507))
f9508(a9508) => a9508 + 1
plot(f9508(9508))
f9509(a9509) => a9509 + 1
plot(f9509(9509))
f9510(a9510) => a9510 + 1
plot(f9510(9510))
f9511(a9511) => a9511 + 1
plot(f9511(9511))
f9512(a9512) => a9512 + 1
plot(f9512(9512))
f9513(a9513) => a9513 + 1
plot(f9513(9513))
f9514(a9514) => a9514 + 1
plot(f9514(9514))
f9515(a9515) => a9515 + 1
plot(f9515(9515))
f9516(a9516) => a9516 + 1
plot(f9516(9516))
f9517(a9517) => a9517 + 1
plot(f9517(9517))
f9518(a9518) => a9518 + 1
plot(f9518(9518))
f9519(a9519) => a9519 + 1
plot(f9519(9519))
f9520(a9520) => a9520 + 1
plot(f9520(9520))
f9521(a9521) => a9521 + 1
plot(f9521(9521))
f9522(a9522) => a9522 + 1
plot(f9522(9522))
f9523(a9523) => a9523 + 1
plot(f9523(9523))
f9524(a9524) => a9524 + 1
plot(f9524(9524))
f9525(a9525) => a9525 + 1
plot(f9525(9525))
f9526(a9526) => a9526 + 1
plot(f9526(9526))
f9527(a9527) => a9527 + 1
plot(f9527(9527))
f9528(a9528) => a9528 + 1
plot(f9528(9528))
f9529(a9529) => a9529 + 1
plot(f9529(9529))
f9530(a9530) => a9530 + 1
plot(f9530(9530))
f9531(a9531) => a9531 + 1
plot(f9531(9531))
f9532(a9532) => a9532 + 1
plot(f9532(9532))
f9533(a9533) => a9533 + 1
plot(f9533(9533))
f9534(a9534) => a9534 + 1
plot(f9534(9534))
f9535(a9535) => a9535 + 1
plot(f9535(9535))
f9536(a9536) => a9536 + 1
plot(f9536(9536))
f9537(a9537) => a9537 + 1
plot(f9537(9537))
f9538(a9538) => a9538 + 1
plot(f9538(9538))
f9539(a9539) => a9539 + 1
plot(f9539(9539))
f9540(a9540) => a9540 + 1
plot(f9540(9540))
f9541(a9541) => a9541 + 1
plot(f9541(9541))
f9542(a9542) => a9542 + 1
plot(f9542(9542))
f9543(a9543) => a9543 + 1
plot(f9543(9543))
f9544(a9544) => a9544 + 1
plot(f9544(9544))
f9545(a9545) => a9545 + 1
plot(f9545(9545))
f9546(a9546) => a9546 + 1
plot(f9546(9546))
f9547(a9547) => a9547 + 1
plot(f9547(9547))
f9548(a9548) => a9548 + 1
plot(f9548(9548))
f9549(a9549) => a9549 + 1
plot(f9549(9549))
f9550(a9550) => a9550 + 1
plot(f9550(9550))
f9551(a9551) => a9551 + 1
plot(f9551(9551))
f9552(a9552) => a9552 + 1
plot(f9552(9552))
f9553(a9553) => a9553 + 1
plot(f9553(9553))
f9554(a9554) => a9554 + 1
plot(f9554(9554))
f9555(a9555) => a9555 + 1
plot(f9555(9555))
f9556(a9556) => a9556 + 1
plot(f9556(9556))
f9557(a9557) => a9557 + 1
plot(f9557(9557))
f9558(a9558) => a9558 + 1
plot(f9558(9558))
f9559(a9559) => a9559 + 1
plot(f9559(9559))
f9560(a9560) => a9560 + 1
plot(f9560(9560))
f9561(a9561) => a9561 + 1
plot(f9561(9561))
f9562(a9562) => a9562 + 1
plot(f9562(9562))
f9563(a9563) => a9563 + 1
plot(f9563(9563))
f9564(a9564) => a9564 + 1
plot(f9564(9564))
f9565(a9565) => a9565 + 1
plot(f9565(9565))
f9566(a9566) => a9566 + 1
plot(f9566(9566))
f9567(a9567) => a9567 + 1
plot(f9567(9567))
f9568(a9568) => a9568 + 1
plot(f9568(9568))
f9569(a9569) => a9569 + 1
plot(f9569(9569))
f9570(a9570) => a9570 + 1
plot(f9570(9570))
f9571(a9571) => a9571 + 1
plot(f9571(9571))
f9572(a9572) => a9572 + 1
plot(f9572(9572))
f9573(a9573) => a9573 + 1
plot(f9573(9573))
f9574(a9574) => a9574 + 1
plot(f9574(9574))
f9575(a9575) => a9575 + 1
plot(f9575(9575))
f9576(a9576) => a9576 + 1
plot(f9576(9576))
f9577(a9577) => a9577 + 1
plot(f9577(9577))
f9578(a9578) => a9578 + 1
plot(f9578(9578))
f9579(a9579) => a9579 + 1
plot(f9579(9579))
f9580(a9580) => a9580 + 1
plot(f9580(9580))
f9581(a9581) => a9581 + 1
plot(f9581(9581))
f9582(a9582) => a9582 + 1
plot(f9582(9582))
f9583(a9583) => a9583 + 1
plot(f9583(9583))
f9584(a9584) => a9584 + 1
plot(f9584(9584))
f9585(a9585) => a9585 + 1
plot(f9585(9585))
f9586(a9586) => a9586 + 1
plot(f9586(9586))
f9587(a9587) => a9587 + 1
plot(f9587(9587))
f9588(a9588) => a9588 + 1
plot(f9588(9588))
f9589(a9589) => a9589 + 1
plot(f9589(9589))
f9590(a9590) => a9590 + 1
plot(f9590(9590))
f9591(a9591) => a9591 + 1
plot(f9591(9591))
f9592(a9592) => a9592 + 1
plot(f9592(9592))
f9593(a9593) => a9593 + 1
plot(f9593(9593))
f9594(a9594) => a9594 + 1
plot(f9594(9594))
f9595(a9595) => a9595 + 1
plot(f9595(9595))
f9596(a9596) => a9596 + 1
plot(f9596(9596))
f9597(a9597) => a9597 + 1
plot(f9597(9597))
f9598(a9598) => a9598 + 1
plot(f9598(9598))
f9599(a9599) => a9599 + 1
plot(f9599(9599))
f9600(a9600) => a9600 + 1
plot(f9600(9600))
f9601(a9601) => a9601 + 1
plot(f9601(9601))
f9602(a9602) => a9602 + 1
plot(f9602(9602))
f9603(a9603) => a9603 + 1
plot(f9603(9603))
f9604(a9604) => a9604 + 1
plot(f9604(9604))
f9605(a9605) => a9605 + 1
plot(f9605(9605))
f9606(a9606) => a9606 + 1
plot(f9606(9606))
f9607(a9607) => a9607 + 1
plot(f9607(9607))
f9608(a9608) => a9608 + 1
plot(f9608(9608))
f9609(a9609) => a9609 + 1
plot(f9609(9609))
f9610(a9610) => a9610 + 1
plot(f9610(9610))
f9611(a9611) => a9611 + 1
plot(f9611(9611))
f9612(a9612) => a9612 + 1
plot(f9612(9612))
f9613(a9613) => a9613 + 1
plot(f9613(9613))
f9614(a9614) => a9614 + 1
plot(f9614(9614))
f9615(a9615) => a9615 + 1
plot(f9615(9615))
f9616(a9616) => a9616 + 1
plot(f9616(9616))
f9617(a9617) => a9617 + 1
plot(f9617(9617))
f9618(a9618) => a9618 + 1
plot(f9618(9618))
f9619(a9619) => a9619 + 1
plot(f9619(9619))
f9620(a9620) => a9620 + 1
plot(f9620(9620))
f9621(a9621) => a9621 + 1
plot(f9621(9621))
f9622(a9622) => a9622 + 1
plot(f9622(9622))
f9623(a9623) => a9623 + 1
plot(f9623(9623))
f9624(a9624) => a9624 + 1
plot(f9624(9624))
f9625(a9625) => a9625 + 1
plot(f9625(9625))
f9626(a9626) => a9626 + 1
plot(f9626(9626))
f9627(a9627) => a9627 + 1
plot(f9627(9627))
f9628(a9628) => a9628 + 1
plot(f9628(9628))
f9629(a9629) => a9629 + 1
plot(f9629(9629))
f9630(a9630) => a9630 + 1
plot(f9630(9630))
f9631(a9631) => a9631 + 1
plot(f9631(9631))
f9632(a9632) => a9632 + 1
plot(f9632(9632))
f9633(a9633) => a9633 + 1
plot(f9633(9633))
f9634(a9634) => a9634 + 1
plot(f9634(9634))
f9635(a9635) => a9635 + 1
plot(f9635(9635))
f9636(a9636) => a9636 + 1
plot(f9636(9636))
f9637(a9637) => a9637 + 1
plot(f9637(9637))
f9638(a9638) => a9638 + 1
plot(f9638(9638))
f9639(a9639) => a9639 + 1
plot(f9639(9639))
f9640(a9640) => a9640 + 1
plot(f9640(9640))
f9641(a9641) => a9641 + 1
plot(f9641(9641))
f9642(a9642) => a9642 + 1
plot(f9642(9642))
f9643(a9643) => a9643 + 1
plot(f9643(9643))
f9644(a9644) => a9644 + 1
plot(f9644(9644))
f9645(a9645) => a9645 + 1
plot(f9645(9645))
f9646(a9646) => a9646 + 1
plot(f9646(9646))
f9647(a9647) => a9647 + 1
plot(f9647(9647))
f9648(a9648) => a9648 + 1
plot(f9648(9648))
f9649(a9649) => a9649 + 1
plot(f9649(9649))
f9650(a9650) => a9650 + 1
plot(f9650(9650))
f9651(a9651) => a9651 + 1
plot(f9651(9651))
f9652(a9652) => a9652 + 1
plot(f9652(9652))
f9653(a9653) => a9653 + 1
plot(f9653(9653))
f9654(a9654) => a9654 + 1
plot(f9654(9654))
f9655(a9655) => a9655 + 1
plot(f9655(9655))
f9656(a9656) => a9656 + 1
plot(f9656(9656))
f9657(a9657) => a9657 + 1
plot(f9657(9657))
f9658(a9658) => a9658 + 1
plot(f9658(9658))
f9659(a9659) => a9659 + 1
plot(f9659(9659))
f9660(a9660) => a9660 + 1
plot(f9660(9660))
f9661(a9661) => a9661 + 1
plot(f9661(9661))
f9662(a9662) => a9662 + 1
plot(f9662(9662))
f9663(a9663) => a9663 + 1
plot(f9663(9663))
f9664(a9664) => a9664 + 1
plot(f9664(9664))
f9665(a9665) => a9665 + 1
plot(f9665(9665))
f9666(a9666) => a9666 + 1
plot(f9666(9666))
f9667(a9667) => a9667 + 1
plot(f9667(9667))
f9668(a9668) => a9668 + 1
plot(f9668(9668))
f9669(a9669) => a9669 + 1
plot(f9669(9669))
f9670(a9670) => a9670 + 1
plot(f9670(9670))
f9671(a9671) => a9671 + 1
plot(f9671(9671))
f9672(a9672) => a9672 + 1
plot(f9672(9672))
f9673(a9673) => a9673 + 1
plot(f9673(9673))
f9674(a9674) => a9674 + 1
plot(f9674(9674))
f9675(a9675) => a9675 + 1
plot(f9675(9675))
f9676(a9676) => a9676 + 1
plot(f9676(9676))
f9677(a9677) => a9677 + 1
plot(f9677(9677))
f9678(a9678) => a9678 + 1
plot(f9678(9678))
f9679(a9679) => a9679 + 1
plot(f9679(9679))
f9680(a9680) => a9680 + 1
plot(f9680(9680))
f9681(a9681) => a9681 + 1
plot(f9681(9681))
f9682(a9682) => a9682 + 1
plot(f9682(9682))
f9683(a9683) => a9683 + 1
plot(f9683(9683))
f9684(a9684) => a9684 + 1
plot(f9684(9684))
f9685(a9685) => a9685 + 1
plot(f9685(9685))
f9686(a9686) => a9686 + 1
plot(f9686(9686))
f9687(a9687) => a9687 + 1
plot(f9687(9687))
f9688(a9688) => a9688 + 1
plot(f9688(9688))
f9689(a9689) => a9689 + 1
plot(f9689(9689))
f9690(a9690) => a9690 + 1
plot(f9690(9690))
f9691(a9691) => a9691 + 1
plot(f9691(9691))
f9692(a9692) => a9692 + 1
plot(f9692(9692))
f9693(a9693) => a9693 + 1
plot(f9693(9693))
f9694(a9694) => a9694 + 1
plot(f9694(9694))
f9695(a9695) => a9695 + 1
plot(f9695(9695))
f9696(a9696) => a9696 + 1
plot(f9696(9696))
f9697(a9697) => a9697 + 1
plot(f9697(9697))
f9698(a9698) => a9698 + 1
plot(f9698(9698))
f9699(a9699) => a9699 + 1
plot(f9699(9699))
f9700(a9700) => a9700 + 1
plot(f9700(9700))
f9701(a9701) => a9701 + 1
plot(f9701(9701))
f9702(a9702) => a9702 + 1
plot(f9702(9702))
f9703(a9703) => a9703 + 1
plot(f9703(9703))
f9704(a9704) => a9704 + 1
plot(f9704(9704))
f9705(a9705) => a9705 + 1
plot(f9705(9705))
f9706(a9706) => a9706 + 1
plot(f9706(9706))
f9707(a9707) => a9707 + 1
plot(f9707(9707))
f9708(a9708) => a9708 + 1
plot(f9708(9708))
f9709(a9709) => a9709 + 1
plot(f9709(9709))
f9710(a9710) => a9710 + 1
plot(f9710(9710))
f9711(a9711) => a9711 + 1
plot(f9711(9711))
f9712(a9712) => a9712 + 1
plot(f9712(9712))
f9713(a9713) => a9713 + 1
plot(f9713(9713))
f9714(a9714) => a9714 + 1
plot(f9714(9714))
f9715(a9715) => a9715 + 1
plot(f9715(9715))
f9716(a9716) => a9716 + 1
plot(f9716(9716))
f9717(a9717) => a9717 + 1
plot(f9717(9717))
f9718(a9718) => a9718 + 1
plot(f9718(9718))
f9719(a9719) => a9719 + 1
plot(f9719(9719))
f9720(a9720) => a9720 + 1
plot(f9720(9720))
f9721(a9721) => a9721 + 1
plot(f9721(9721))
f9722(a9722) => a9722 + 1
plot(f9722(9722))
f9723(a9723) => a9723 + 1
plot(f9723(9723))
f9724(a9724) => a9724 + 1
plot(f9724(9724))
f9725(a9725) => a9725 + 1
plot(f9725(9725))
f9726(a9726) => a9726 + 1
plot(f9726(9726))
f9727(a9727) => a9727 + 1
plot(f9727(9727))
f9728(a9728) => a9728 + 1
plot(f9728(9728))
f9729(a9729) => a9729 + 1
plot(f9729(9729))
f9730(a9730) => a9730 + 1
plot(f9730(9730))
f9731(a9731) => a9731 + 1
plot(f9731(9731))
f9732(a9732) => a9732 + 1
plot(f9732(9732))
f9733(a9733) => a9733 + 1
plot(f9733(9733))
f9734(a9734) => a9734 + 1
plot(f9734(9734))
f9735(a9735) => a9735 + 1
plot(f9735(9735))
f9736(a9736) => a9736 + 1
plot(f9736(9736))
f9737(a9737) => a9737 + 1
plot(f9737(9737))
f9738(a9738) => a9738 + 1
plot(f9738(9738))
f9739(a9739) => a9739 + 1
plot(f9739(9739))
f9740(a9740) => a9740 + 1
plot(f9740(9740))
f9741(a9741) => a9741 + 1
plot(f9741(9741))
f9742(a9742) => a9742 + 1
plot(f9742(9742))
f9743(a9743) => a9743 + 1
plot(f9743(9743))
f9744(a9744) => a9744 + 1
plot(f9744(9744))
f9745(a9745) => a9745 + 1
plot(f9745(9745))
f9746(a9746) => a9746 + 1
plot(f9746(9746))
f9747(a9747) => a9747 + 1
plot(f9747(9747))
f9748(a9748) => a9748 + 1
plot(f9748(9748))
f9749(a9749) => a9749 + 1
plot(f9749(9749))
f9750(a9750) => a9750 + 1
plot(f9750(9750))
f9751(a9751) => a9751 + 1
plot(f9751(9751))
f9752(a9752) => a9752 + 1
plot(f9752(9752))
f9753(a9753) => a9753 + 1
plot(f9753(9753))
f9754(a9754) => a9754 + 1
plot(f9754(9754))
f9755(a9755) => a9755 + 1
plot(f9755(9755))
f9756(a9756) => a9756 + 1
plot(f9756(9756))
f9757(a9757) => a9757 + 1
plot(f9757(9757))
f9758(a9758) => a9758 + 1
plot(f9758(9758))
f9759(a9759) => a9759 + 1
plot(f9759(9759))
f9760(a9760) => a9760 + 1
plot(f9760(9760))
f9761(a9761) => a9761 + 1
plot(f9761(9761))
f9762(a9762) => a9762 + 1
plot(f9762(9762))
f9763(a9763) => a9763 + 1
plot(f9763(9763))
f9764(a9764) => a9764 + 1
plot(f9764(9764))
f9765(a9765) => a9765 + 1
plot(f9765(9765))
f9766(a9766) => a9766 + 1
plot(f9766(9766))
f9767(a9767) => a9767 + 1
plot(f9767(9767))
f9768(a9768) => a9768 + 1
plot(f9768(9768))
f9769(a9769) => a9769 + 1
plot(f9769(9769))
f9770(a9770) => a9770 + 1
plot(f9770(9770))
f9771(a9771) => a9771 + 1
plot(f9771(9771))
f9772(a9772) => a9772 + 1
plot(f9772(9772))
f9773(a9773) => a9773 + 1
plot(f9773(9773))
f9774(a9774) => a9774 + 1
plot(f9774(9774))
f9775(a9775) => a9775 + 1
plot(f9775(9775))
f9776(a9776) => a9776 + 1
plot(f9776(9776))
f9777(a9777) => a9777 + 1
plot(f9777(9777))
f9778(a9778) => a9778 + 1
plot(f9778(9778))
f9779(a9779) => a9779 + 1
plot(f9779(9779))
f9780(a9780) => a9780 + 1
plot(f9780(9780))
f9781(a9781) => a9781 + 1
plot(f9781(9781))
f9782(a9782) => a9782 + 1
plot(f9782(9782))
f9783(a9783) => a9783 + 1
plot(f9783(9783))
f9784(a9784) => a9784 + 1
plot(f9784(9784))
f9785(a9785) => a9785 + 1
plot(f9785(9785))
f9786(a9786) => a9786 + 1
plot(f9786(9786))
f9787(a9787) => a9787 + 1
plot(f9787(9787))
f9788(a9788) => a9788 + 1
plot(f9788(9788))
f9789(a9789) => a9789 + 1
plot(f9789(9789))
f9790(a9790) => a9790 + 1
plot(f9790(9790))
f9791(a9791) => a9791 + 1
plot(f9791(9791))
f9792(a9792) => a9792 + 1
plot(f9792(9792))
f9793(a9793) => a9793 + 1
plot(f9793(9793))
f9794(a9794) => a9794 + 1
plot(f9794(9794))
f9795(a9795) => a9795 + 1
plot(f9795(9795))
f9796(a9796) => a9796 + 1
plot(f9796(9796))
f9797(a9797) => a9797 + 1
plot(f9797(9797))
f9798(a9798) => a9798 + 1
plot(f9798(9798))
f9799(a9799) => a9799 + 1
plot(f9799(9799))
f9800(a9800) => a9800 + 1
plot(f9800(9800))
f9801(a9801) => a9801 + 1
plot(f9801(9801))
f9802(a9802) => a9802 + 1
plot(f9802(9802))
f9803(a9803) => a9803 + 1
plot(f9803(9803))
f9804(a9804) => a9804 + 1
plot(f9804(9804))
f9805(a9805) => a9805 + 1
plot(f9805(9805))
f9806(a9806) => a9806 + 1
plot(f9806(9806))
f9807(a9807) => a9807 + 1
plot(f9807(9807))
f9808(a9808) => a9808 + 1
plot(f9808(9808))
f9809(a9809) => a9809 + 1
plot(f9809(9809))
f9810(a9810) => a9810 + 1
plot(f9810(9810))
f9811(a9811) => a9811 + 1
plot(f9811(9811))
f9812(a9812) => a9812 + 1
plot(f9812(9812))
f9813(a9813) => a9813 + 1
plot(f9813(9813))
f9814(a9814) => a9814 + 1
plot(f9814(9814))
f9815(a9815) => a9815 + 1
plot(f9815(9815))
f9816(a9816) => a9816 + 1
plot(f9816(9816))
f9817(a9817) => a9817 + 1
plot(f9817(9817))
f9818(a9818) => a9818 + 1
plot(f9818(9818))
f9819(a9819) => a9819 + 1
plot(f9819(9819))
f9820(a9820) => a9820 + 1
plot(f9820(9820))
f9821(a9821) => a9821 + 1
plot(f9821(9821))
f9822(a9822) => a9822 + 1
plot(f9822(9822))
f9823(a9823) => a9823 + 1
plot(f9823(9823))
f9824(a9824) => a9824 + 1
plot(f9824(9824))
f9825(a9825) => a9825 + 1
plot(f9825(9825))
f9826(a9826) => a9826 + 1
plot(f9826(9826))
f9827(a9827) => a9827 + 1
plot(f9827(9827))
f9828(a9828) => a9828 + 1
plot(f9828(9828))
f9829(a9829) => a9829 + 1
plot(f9829(9829))
f9830(a9830) => a9830 + 1
plot(f9830(9830))
f9831(a9831) => a9831 + 1
plot(f9831(9831))
f9832(a9832) => a9832 + 1
plot(f9832(9832))
f9833(a9833) => a9833 + 1
plot(f9833(9833))
f9834(a9834) => a9834 + 1
plot(f9834(9834))
f9835(a9835) => a9835 + 1
plot(f9835(9835))
f9836(a9836) => a9836 + 1
plot(f9836(9836))
f9837(a9837) => a9837 + 1
plot(f9837(9837))
f9838(a9838) => a9838 + 1
plot(f9838(9838))
f9839(a9839) => a9839 + 1
plot(f9839(9839))
f9840(a9840) => a9840 + 1
plot(f9840(9840))
f9841(a9841) => a9841 + 1
plot(f9841(9841))
f9842(a9842) => a9842 + 1
plot(f9842(9842))
f9843(a9843) => a9843 + 1
plot(f9843(9843))
f9844(a9844) => a9844 + 1
plot(f9844(9844))
f9845(a9845) => a9845 + 1
plot(f9845(9845))
f9846(a9846) => a9846 + 1
plot(f9846(9846))
f9847(a9847) => a9847 + 1
plot(f9847(9847))
f9848(a9848) => a9848 + 1
plot(f9848(9848))
f9849(a9849) => a9849 + 1
plot(f9849(9849))
f9850(a9850) => a9850 + 1
plot(f9850(9850))
f9851(a9851) => a9851 + 1
plot(f9851(9851))
f9852(a9852) => a9852 + 1
plot(f9852(9852))
f9853(a9853) => a9853 + 1
plot(f9853(9853))
f9854(a9854) => a9854 + 1
plot(f9854(9854))
f9855(a9855) => a9855 + 1
plot(f9855(9855))
f9856(a9856) => a9856 + 1
plot(f9856(9856))
f9857(a9857) => a9857 + 1
plot(f9857(9857))
f9858(a9858) => a9858 + 1
plot(f9858(9858))
f9859(a9859) => a9859 + 1
plot(f9859(9859))
f9860(a9860) => a9860 + 1
plot(f9860(9860))
f9861(a9861) => a9861 + 1
plot(f9861(9861))
f9862(a9862) => a9862 + 1
plot(f9862(9862))
f9863(a9863) => a9863 + 1
plot(f9863(9863))
f9864(a9864) => a9864 + 1
plot(f9864(9864))
f9865(a9865) => a9865 + 1
plot(f9865(9865))
f9866(a9866) => a9866 + 1
plot(f9866(9866))
f9867(a9867) => a9867 + 1
plot(f9867(9867))
f9868(a9868) => a9868 + 1
plot(f9868(9868))
f9869(a9869) => a9869 + 1
plot(f9869(9869))
f9870(a9870) => a9870 + 1
plot(f9870(9870))
f9871(a9871) => a9871 + 1
plot(f9871(9871))
f9872(a9872) => a9872 + 1
plot(f9872(9872))
f9873(a9873) => a9873 + 1
plot(f9873(9873))
f9874(a9874) => a9874 + 1
plot(f9874(9874))
f9875(a9875) => a9875 + 1
plot(f9875(9875))
f9876(a9876) => a9876 + 1
plot(f9876(9876))
f9877(a9877) => a9877 + 1
plot(f9877(9877))
f9878(a9878) => a9878 + 1
plot(f9878(9878))
f9879(a9879) => a9879 + 1
plot(f9879(9879))
f9880(a9880) => a9880 + 1
plot(f9880(9880))
f9881(a9881) => a9881 + 1
plot(f9881(9881))
f9882(a9882) => a9882 + 1
plot(f9882(9882))
f9883(a9883) => a9883 + 1
plot(f9883(9883))
f9884(a9884) => a9884 + 1
plot(f9884(9884))
f9885(a9885) => a9885 + 1
plot(f9885(9885))
f9886(a9886) => a9886 + 1
plot(f9886(9886))
f9887(a9887) => a9887 + 1
plot(f9887(9887))
f9888(a9888) => a9888 + 1
plot(f9888(9888))
f9889(a9889) => a9889 + 1
plot(f9889(9889))
f9890(a9890) => a9890 + 1
plot(f9890(9890))
f9891(a9891) => a9891 + 1
plot(f9891(9891))
f9892(a9892) => a9892 + 1
plot(f9892(9892))
f9893(a9893) => a9893 + 1
plot(f9893(9893))
f9894(a9894) => a9894 + 1
plot(f9894(9894))
f9895(a9895) => a9895 + 1
plot(f9895(9895))
f9896(a9896) => a9896 + 1
plot(f9896(9896))
f9897(a9897) => a9897 + 1
plot(f9897(9897))
f9898(a9898) => a9898 + 1
plot(f9898(9898))
f9899(a9899) => a9899 + 1
plot(f9899(9899))
f9900(a9900) => a9900 + 1
plot(f9900(9900))
f9901(a9901) => a9901 + 1
plot(f9901(9901))
f9902(a9902) => a9902 + 1
plot(f9902(9902))
f9903(a9903) => a9903 + 1
plot(f9903(9903))
f9904(a9904) => a9904 + 1
plot(f9904(9904))
f9905(a9905) => a9905 + 1
plot(f9905(9905))
f9906(a9906) => a9906 + 1
plot(f9906(9906))
f9907(a9907) => a9907 + 1
plot(f9907(9907))
f9908(a9908) => a9908 + 1
plot(f9908(9908))
f9909(a9909) => a9909 + 1
plot(f9909(9909))
f9910(a9910) => a9910 + 1
plot(f9910(9910))
f9911(a9911) => a9911 + 1
plot(f9911(9911))
f9912(a9912) => a9912 + 1
plot(f9912(9912))
f9913(a9913) => a9913 + 1
plot(f9913(9913))
f9914(a9914) => a9914 + 1
plot(f9914(9914))
f9915(a9915) => a9915 + 1
plot(f9915(9915))
f9916(a9916) => a9916 + 1
plot(f9916(9916))
f9917(a9917) => a9917 + 1
plot(f9917(9917))
f9918(a9918) => a9918 + 1
plot(f9918(9918))
f9919(a9919) => a9919 + 1
plot(f9919(9919))
f9920(a9920) => a9920 + 1
plot(f9920(9920))
f9921(a9921) => a9921 + 1
plot(f9921(9921))
f9922(a9922) => a9922 + 1
plot(f9922(9922))
f9923(a9923) => a9923 + 1
plot(f9923(9923))
f9924(a9924) => a9924 + 1
plot(f9924(9924))
f9925(a9925) => a9925 + 1
plot(f9925(9925))
f9926(a9926) => a9926 + 1
plot(f9926(9926))
f9927(a9927) => a9927 + 1
plot(f9927(9927))
f9928(a9928) => a9928 + 1
plot(f9928(9928))
f9929(a9929) => a9929 + 1
plot(f9929(9929))
f9930(a9930) => a9930 + 1
plot(f9930(9930))
f9931(a9931) => a9931 + 1
plot(f9931(9931))
f9932(a9932) => a9932 + 1
plot(f9932(9932))
f9933(a9933) => a9933 + 1
plot(f9933(9933))
f9934(a9934) => a9934 + 1
plot(f9934(9934))
f9935(a9935) => a9935 + 1
plot(f9935(9935))
f9936(a9936) => a9936 + 1
plot(f9936(9936))
f9937(a9937) => a9937 + 1
plot(f9937(9937))
f9938(a9938) => a9938 + 1
plot(f9938(9938))
f9939(a9939) => a9939 + 1
plot(f9939(9939))
f9940(a9940) => a9940 + 1
plot(f9940(9940))
f9941(a9941) => a9941 + 1
plot(f9941(9941))
f9942(a9942) => a9942 + 1
plot(f9942(9942))
f9943(a9943) => a9943 + 1
plot(f9943(9943))
f9944(a9944) => a9944 + 1
plot(f9944(9944))
f9945(a9945) => a9945 + 1
plot(f9945(9945))
f9946(a9946) => a9946 + 1
plot(f9946(9946))
f9947(a9947) => a9947 + 1
plot(f9947(9947))
f9948(a9948) => a9948 + 1
plot(f9948(9948))
f9949(a9949) => a9949 + 1
plot(f9949(9949))
f9950(a9950) => a9950 + 1
plot(f9950(9950))
f9951(a9951) => a9951 + 1
plot(f9951(9951))
f9952(a9952) => a9952 + 1
plot(f9952(9952))
f9953(a9953) => a9953 + 1
plot(f9953(9953))
f9954(a9954) => a9954 + 1
plot(f9954(9954))
f9955(a9955) => a9955 + 1
plot(f9955(9955))
f9956(a9956) => a9956 + 1
plot(f9956(9956))
f9957(a9957) => a9957 + 1
plot(f9957(9957))
f9958(a9958) => a9958 + 1
plot(f9958(9958))
f9959(a9959) => a9959 + 1
plot(f9959(9959))
f9960(a9960) => a9960 + 1
plot(f9960(9960))
f9961(a9961) => a9961 + 1
plot(f9961(9961))
f9962(a9962) => a9962 + 1
plot(f9962(9962))
f9963(a9963) => a9963 + 1
plot(f9963(9963))
f9964(a9964) => a9964 + 1
plot(f9964(9964))
f9965(a9965) => a9965 + 1
plot(f9965(9965))
f9966(a9966) => a9966 + 1
plot(f9966(9966))
f9967(a9967) => a9967 + 1
plot(f9967(9967))
f9968(a9968) => a9968 + 1
plot(f9968(9968))
f9969(a9969) => a9969 + 1
plot(f9969(9969))
f9970(a9970) => a9970 + 1
plot(f9970(9970))
f9971(a9971) => a9971 + 1
plot(f9971(9971))
f9972(a9972) => a9972 + 1
plot(f9972(9972))
f9973(a9973) => a9973 + 1
plot(f9973(9973))
f9974(a9974) => a9974 + 1
plot(f9974(9974))
f9975(a9975) => a9975 + 1
plot(f9975(9975))
f9976(a9976) => a9976 + 1
plot(f9976(9976))
f9977(a9977) => a9977 + 1
plot(f9977(9977))
f9978(a9978) => a9978 + 1
plot(f9978(9978))
f9979(a9979) => a9979 + 1
plot(f9979(9979))
f9980(a9980) => a9980 + 1
plot(f9980(9980))
f9981(a9981) => a9981 + 1
plot(f9981(9981))
f9982(a9982) => a9982 + 1
plot(f9982(9982))
f9983(a9983) => a9983 + 1
plot(f9983(9983))
f9984(a9984) => a9984 + 1
plot(f9984(9984))
f9985(a9985) => a9985 + 1
plot(f9985(9985))
f9986(a9986) => a9986 + 1
plot(f9986(9986))
f9987(a9987) => a9987 + 1
plot(f9987(9987))
f9988(a9988) => a9988 + 1
plot(f9988(9988))
f9989(a9989) => a9989 + 1
plot(f9989(9989))
f9990(a9990) => a9990 + 1
plot(f9990(9990))
f9991(a9991) => a9991 + 1
plot(f9991(9991))
f9992(a9992) => a9992 + 1
plot(f9992(9992))
f9993(a9993) => a9993 + 1
plot(f9993(9993))
f9994(a9994) => a9994 + 1
plot(f9994(9994))
f9995(a9995) => a9995 + 1
plot(f9995(9995))
f9996(a9996) => a9996 + 1
plot(f9996(9996))
f9997(a9997) => a9997 + 1
plot(f9997(9997))
f9998(a9998) => a9998 + 1
plot(f9998(9998))
f9999(a9999) => a9999 + 1
plot(f9999(9999))
f10000(a10000) => a10000 + 1
plot(f10000(10000))
f10001(a10001) => a10001 + 1
plot(f10001(10001))
f10002(a10002) => a10002 + 1
plot(f10002(10002))
f10003(a10003) => a10003 + 1
plot(f10003(10003))
f10004(a10004) => a10004 + 1
plot(f10004(10004))
f10005(a10005) => a10005 + 1
plot(f10005(10005))
f10006(a10006) => a10006 + 1
plot(f10006(10006))
f10007(a10007) => a10007 + 1
plot(f10007(10007))
f10008(a10008) => a10008 + 1
plot(f10008(10008))
f10009(a10009) => a10009 + 1
plot(f10009(10009))
f10010(a10010) => a10010 + 1
plot(f10010(10010))
f10011(a10011) => a10011 + 1
plot(f10011(10011))
f10012(a10012) => a10012 + 1
plot(f10012(10012))
f10013(a10013) => a10013 + 1
plot(f10013(10013))
f10014(a10014) => a10014 + 1
plot(f10014(10014))
f10015(a10015) => a10015 + 1
plot(f10015(10015))
f10016(a10016) => a10016 + 1
plot(f10016(10016))
f10017(a10017) => a10017 + 1
plot(f10017(10017))
f10018(a10018) => a10018 + 1
plot(f10018(10018))
f10019(a10019) => a10019 + 1
plot(f10019(10019))
f10020(a10020) => a10020 + 1
plot(f10020(10020))
f10021(a10021) => a10021 + 1
plot(f10021(10021))
f10022(a10022) => a10022 + 1
plot(f10022(10022))
f10023(a10023) => a10023 + 1
plot(f10023(10023))
f10024(a10024) => a10024 + 1
plot(f10024(10024))
f10025(a10025) => a10025 + 1
plot(f10025(10025))
f10026(a10026) => a10026 + 1
plot(f10026(10026))
f10027(a10027) => a10027 + 1
plot(f10027(10027))
f10028(a10028) => a10028 + 1
plot(f10028(10028))
f10029(a10029) => a10029 + 1
plot(f10029(10029))
f10030(a10030) => a10030 + 1
plot(f10030(10030))
f10031(a10031) => a10031 + 1
plot(f10031(10031))
f10032(a10032) => a10032 + 1
plot(f10032(10032))
f10033(a10033) => a10033 + 1
plot(f10033(10033))
f10034(a10034) => a10034 + 1
plot(f10034(10034))
f10035(a10035) => a10035 + 1
plot(f10035(10035))
f10036(a10036) => a10036 + 1
plot(f10036(10036))
f10037(a10037) => a10037 + 1
plot(f10037(10037))
f10038(a10038) => a10038 + 1
plot(f10038(10038))
f10039(a10039) => a10039 + 1
plot(f10039(10039))
f10040(a10040) => a10040 + 1
plot(f10040(10040))
f10041(a10041) => a10041 + 1
plot(f10041(10041))
f10042(a10042) => a10042 + 1
plot(f10042(10042))
f10043(a10043) => a10043 + 1
plot(f10043(10043))
f10044(a10044) => a10044 + 1
plot(f10044(10044))
f10045(a10045) => a10045 + 1
plot(f10045(10045))
f10046(a10046) => a10046 + 1
plot(f10046(10046))
f10047(a10047) => a10047 + 1
plot(f10047(10047))
f10048(a10048) => a10048 + 1
plot(f10048(10048))
f10049(a10049) => a10049 + 1
plot(f10049(10049))
f10050(a10050) => a10050 + 1
plot(f10050(10050))
f10051(a10051) => a10051 + 1
plot(f10051(10051))
f10052(a10052) => a10052 + 1
plot(f10052(10052))
f10053(a10053) => a10053 + 1
plot(f10053(10053))
f10054(a10054) => a10054 + 1
plot(f10054(10054))
f10055(a10055) => a10055 + 1
plot(f10055(10055))
f10056(a10056) => a10056 + 1
plot(f10056(10056))
f10057(a10057) => a10057 + 1
plot(f10057(10057))
f10058(a10058) => a10058 + 1
plot(f10058(10058))
f10059(a10059) => a10059 + 1
plot(f10059(10059))
f10060(a10060) => a10060 + 1
plot(f10060(10060))
f10061(a10061) => a10061 + 1
plot(f10061(10061))
f10062(a10062) => a10062 + 1
plot(f10062(10062))
f10063(a10063) => a10063 + 1
plot(f10063(10063))
f10064(a10064) => a10064 + 1
plot(f10064(10064))
f10065(a10065) => a10065 + 1
plot(f10065(10065))
f10066(a10066) => a10066 + 1
plot(f10066(10066))
f10067(a10067) => a10067 + 1
plot(f10067(10067))
f10068(a10068) => a10068 + 1
plot(f10068(10068))
f10069(a10069) => a10069 + 1
plot(f10069(10069))
f10070(a10070) => a10070 + 1
plot(f10070(10070))
f10071(a10071) => a10071 + 1
plot(f10071(10071))
f10072(a10072) => a10072 + 1
plot(f10072(10072))
f10073(a10073) => a10073 + 1
plot(f10073(10073))
f10074(a10074) => a10074 + 1
plot(f10074(10074))
f10075(a10075) => a10075 + 1
plot(f10075(10075))
f10076(a10076) => a10076 + 1
plot(f10076(10076))
f10077(a10077) => a10077 + 1
plot(f10077(10077))
f10078(a10078) => a10078 + 1
plot(f10078(10078))
f10079(a10079) => a10079 + 1
plot(f10079(10079))
f10080(a10080) => a10080 + 1
plot(f10080(10080))
f10081(a10081) => a10081 + 1
plot(f10081(10081))
f10082(a10082) => a10082 + 1
plot(f10082(10082))
f10083(a10083) => a10083 + 1
plot(f10083(10083))
f10084(a10084) => a10084 + 1
plot(f10084(10084))
f10085(a10085) => a10085 + 1
plot(f10085(10085))
f10086(a10086) => a10086 + 1
plot(f10086(10086))
f10087(a10087) => a10087 + 1
plot(f10087(10087))
f10088(a10088) => a10088 + 1
plot(f10088(10088))
f10089(a10089) => a10089 + 1
plot(f10089(10089))
f10090(a10090) => a10090 + 1
plot(f10090(10090))
f10091(a10091) => a10091 + 1
plot(f10091(10091))
f10092(a10092) => a10092 + 1
plot(f10092(10092))
f10093(a10093) => a10093 + 1
plot(f10093(10093))
f10094(a10094) => a10094 + 1
plot(f10094(10094))
f10095(a10095) => a10095 + 1
plot(f10095(10095))
f10096(a10096) => a10096 + 1
plot(f10096(10096))
f10097(a10097) => a10097 + 1
plot(f10097(10097))
f10098(a10098) => a10098 + 1
plot(f10098(10098))
f10099(a10099) => a10099 + 1
plot(f10099(10099))
f10100(a10100) => a10100 + 1
plot(f10100(10100))
f10101(a10101) => a10101 + 1
plot(f10101(10101))
f10102(a10102) => a10102 + 1
plot(f10102(10102))
f10103(a10103) => a10103 + 1
plot(f10103(10103))
f10104(a10104) => a10104 + 1
plot(f10104(10104))
f10105(a10105) => a10105 + 1
plot(f10105(10105))
f10106(a10106) => a10106 + 1
plot(f10106(10106))
f10107(a10107) => a10107 + 1
plot(f10107(10107))
f10108(a10108) => a10108 + 1
plot(f10108(10108))
f10109(a10109) => a10109 + 1
plot(f10109(10109))
f10110(a10110) => a10110 + 1
plot(f10110(10110))
f10111(a10111) => a10111 + 1
plot(f10111(10111))
f10112(a10112) => a10112 + 1
plot(f10112(10112))
f10113(a10113) => a10113 + 1
plot(f10113(10113))
f10114(a10114) => a10114 + 1
plot(f10114(10114))
f10115(a10115) => a10115 + 1
plot(f10115(10115))
f10116(a10116) => a10116 + 1
plot(f10116(10116))
f10117(a10117) => a10117 + 1
plot(f10117(10117))
f10118(a10118) => a10118 + 1
plot(f10118(10118))
f10119(a10119) => a10119 + 1
plot(f10119(10119))
f10120(a10120) => a10120 + 1
plot(f10120(10120))
f10121(a10121) => a10121 + 1
plot(f10121(10121))
f10122(a10122) => a10122 + 1
plot(f10122(10122))
f10123(a10123) => a10123 + 1
plot(f10123(10123))
f10124(a10124) => a10124 + 1
plot(f10124(10124))
f10125(a10125) => a10125 + 1
plot(f10125(10125))
f10126(a10126) => a10126 + 1
plot(f10126(10126))
f10127(a10127) => a10127 + 1
plot(f10127(10127))
f10128(a10128) => a10128 + 1
plot(f10128(10128))
f10129(a10129) => a10129 + 1
plot(f10129(10129))
f10130(a10130) => a10130 + 1
plot(f10130(10130))
f10131(a10131) => a10131 + 1
plot(f10131(10131))
f10132(a10132) => a10132 + 1
plot(f10132(10132))
f10133(a10133) => a10133 + 1
plot(f10133(10133))
f10134(a10134) => a10134 + 1
plot(f10134(10134))
f10135(a10135) => a10135 + 1
plot(f10135(10135))
f10136(a10136) => a10136 + 1
plot(f10136(10136))
f10137(a10137) => a10137 + 1
plot(f10137(10137))
f10138(a10138) => a10138 + 1
plot(f10138(10138))
f10139(a10139) => a10139 + 1
plot(f10139(10139))
f10140(a10140) => a10140 + 1
plot(f10140(10140))
f10141(a10141) => a10141 + 1
plot(f10141(10141))
f10142(a10142) => a10142 + 1
plot(f10142(10142))
f10143(a10143) => a10143 + 1
plot(f10143(10143))
f10144(a10144) => a10144 + 1
plot(f10144(10144))
f10145(a10145) => a10145 + 1
plot(f10145(10145))
f10146(a10146) => a10146 + 1
plot(f10146(10146))
f10147(a10147) => a10147 + 1
plot(f10147(10147))
f10148(a10148) => a10148 + 1
plot(f10148(10148))
f10149(a10149) => a10149 + 1
plot(f10149(10149))
f10150(a10150) => a10150 + 1
plot(f10150(10150))
f10151(a10151) => a10151 + 1
plot(f10151(10151))
f10152(a10152) => a10152 + 1
plot(f10152(10152))
f10153(a10153) => a10153 + 1
plot(f10153(10153))
f10154(a10154) => a10154 + 1
plot(f10154(10154))
f10155(a10155) => a10155 + 1
plot(f10155(10155))
f10156(a10156) => a10156 + 1
plot(f10156(10156))
f10157(a10157) => a10157 + 1
plot(f10157(10157))
f10158(a10158) => a10158 + 1
plot(f10158(10158))
f10159(a10159) => a10159 + 1
plot(f10159(10159))
f10160(a10160) => a10160 + 1
plot(f10160(10160))
f10161(a10161) => a10161 + 1
plot(f10161(10161))
f10162(a10162) => a10162 + 1
plot(f10162(10162))
f10163(a10163) => a10163 + 1
plot(f10163(10163))
f10164(a10164) => a10164 + 1
plot(f10164(10164))
f10165(a10165) => a10165 + 1
plot(f10165(10165))
f10166(a10166) => a10166 + 1
plot(f10166(10166))
f10167(a10167) => a10167 + 1
plot(f10167(10167))
f10168(a10168) => a10168 + 1
plot(f10168(10168))
f10169(a10169) => a10169 + 1
plot(f10169(10169))
f10170(a10170) => a10170 + 1
plot(f10170(10170))
f10171(a10171) => a10171 + 1
plot(f10171(10171))
f10172(a10172) => a10172 + 1
plot(f10172(10172))
f10173(a10173) => a10173 + 1
plot(f10173(10173))
f10174(a10174) => a10174 + 1
plot(f10174(10174))
f10175(a10175) => a10175 + 1
plot(f10175(10175))
f10176(a10176) => a10176 + 1
plot(f10176(10176))
f10177(a10177) => a10177 + 1
plot(f10177(10177))
f10178(a10178) => a10178 + 1
plot(f10178(10178))
f10179(a10179) => a10179 + 1
plot(f10179(10179))
f10180(a10180) => a10180 + 1
plot(f10180(10180))
f10181(a10181) => a10181 + 1
plot(f10181(10181))
f10182(a10182) => a10182 + 1
plot(f10182(10182))
f10183(a10183) => a10183 + 1
plot(f10183(10183))
f10184(a10184) => a10184 + 1
plot(f10184(10184))
f10185(a10185) => a10185 + 1
plot(f10185(10185))
f10186(a10186) => a10186 + 1
plot(f10186(10186))
f10187(a10187) => a10187 + 1
plot(f10187(10187))
f10188(a10188) => a10188 + 1
plot(f10188(10188))
f10189(a10189) => a10189 + 1
plot(f10189(10189))
f10190(a10190) => a10190 + 1
plot(f10190(10190))
f10191(a10191) => a10191 + 1
plot(f10191(10191))
f10192(a10192) => a10192 + 1
plot(f10192(10192))
f10193(a10193) => a10193 + 1
plot(f10193(10193))
f10194(a10194) => a10194 + 1
plot(f10194(10194))
f10195(a10195) => a10195 + 1
plot(f10195(10195))
f10196(a10196) => a10196 + 1
plot(f10196(10196))
f10197(a10197) => a10197 + 1
plot(f10197(10197))
f10198(a10198) => a10198 + 1
plot(f10198(10198))
f10199(a10199) => a10199 + 1
plot(f10199(10199))
f10200(a10200) => a10200 + 1
plot(f10200(10200))
f10201(a10201) => a10201 + 1
plot(f10201(10201))
f10202(a10202) => a10202 + 1
plot(f10202(10202))
f10203(a10203) => a10203 + 1
plot(f10203(10203))
f10204(a10204) => a10204 + 1
plot(f10204(10204))
f10205(a10205) => a10205 + 1
plot(f10205(10205))
f10206(a10206) => a10206 + 1
plot(f10206(10206))
f10207(a10207) => a10207 + 1
plot(f10207(10207))
f10208(a10208) => a10208 + 1
plot(f10208(10208))
f10209(a10209) => a10209 + 1
plot(f10209(10209))
f10210(a10210) => a10210 + 1
plot(f10210(10210))
f10211(a10211) => a10211 + 1
plot(f10211(10211))
f10212(a10212) => a10212 + 1
plot(f10212(10212))
f10213(a10213) => a10213 + 1
plot(f10213(10213))
f10214(a10214) => a10214 + 1
plot(f10214(10214))
f10215(a10215) => a10215 + 1
plot(f10215(10215))
f10216(a10216) => a10216 + 1
plot(f10216(10216))
f10217(a10217) => a10217 + 1
plot(f10217(10217))
f10218(a10218) => a10218 + 1
plot(f10218(10218))
f10219(a10219) => a10219 + 1
plot(f10219(10219))
f10220(a10220) => a10220 + 1
plot(f10220(10220))
f10221(a10221) => a10221 + 1
plot(f10221(10221))
f10222(a10222) => a10222 + 1
plot(f10222(10222))
f10223(a10223) => a10223 + 1
plot(f10223(10223))
f10224(a10224) => a10224 + 1
plot(f10224(10224))
f10225(a10225) => a10225 + 1
plot(f10225(10225))
f10226(a10226) => a10226 + 1
plot(f10226(10226))
f10227(a10227) => a10227 + 1
plot(f10227(10227))
f10228(a10228) => a10228 + 1
plot(f10228(10228))
f10229(a10229) => a10229 + 1
plot(f10229(10229))
f10230(a10230) => a10230 + 1
plot(f10230(10230))
f10231(a10231) => a10231 + 1
plot(f10231(10231))
f10232(a10232) => a10232 + 1
plot(f10232(10232))
f10233(a10233) => a10233 + 1
plot(f10233(10233))
f10234(a10234) => a10234 + 1
plot(f10234(10234))
f10235(a10235) => a10235 + 1
plot(f10235(10235))
f10236(a10236) => a10236 + 1
plot(f10236(10236))
f10237(a10237) => a10237 + 1
plot(f10237(10237))
f10238(a10238) => a10238 + 1
plot(f10238(10238))
f10239(a10239) => a10239 + 1
plot(f10239(10239))
f10240(a10240) => a10240 + 1
plot(f10240(10240))
f10241(a10241) => a10241 + 1
plot(f10241(10241))
f10242(a10242) => a10242 + 1
plot(f10242(10242))
f10243(a10243) => a10243 + 1
plot(f10243(10243))
f10244(a10244) => a10244 + 1
plot(f10244(10244))
f10245(a10245) => a10245 + 1
plot(f10245(10245))
f10246(a10246) => a10246 + 1
plot(f10246(10246))
f10247(a10247) => a10247 + 1
plot(f10247(10247))
f10248(a10248) => a10248 + 1
plot(f10248(10248))
f10249(a10249) => a10249 + 1
plot(f10249(10249))
f10250(a10250) => a10250 + 1
plot(f10250(10250))
f10251(a10251) => a10251 + 1
plot(f10251(10251))
f10252(a10252) => a10252 + 1
plot(f10252(10252))
f10253(a10253) => a10253 + 1
plot(f10253(10253))
f10254(a10254) => a10254 + 1
plot(f10254(10254))
f10255(a10255) => a10255 + 1
plot(f10255(10255))
f10256(a10256) => a10256 + 1
plot(f10256(10256))
f10257(a10257) => a10257 + 1
plot(f10257(10257))
f10258(a10258) => a10258 + 1
plot(f10258(10258))
f10259(a10259) => a10259 + 1
plot(f10259(10259))
f10260(a10260) => a10260 + 1
plot(f10260(10260))
f10261(a10261) => a10261 + 1
plot(f10261(10261))
f10262(a10262) => a10262 + 1
plot(f10262(10262))
f10263(a10263) => a10263 + 1
plot(f10263(10263))
f10264(a10264) => a10264 + 1
plot(f10264(10264))
f10265(a10265) => a10265 + 1
plot(f10265(10265))
f10266(a10266) => a10266 + 1
plot(f10266(10266))
f10267(a10267) => a10267 + 1
plot(f10267(10267))
f10268(a10268) => a10268 + 1
plot(f10268(10268))
f10269(a10269) => a10269 + 1
plot(f10269(10269))
f10270(a10270) => a10270 + 1
plot(f10270(10270))
f10271(a10271) => a10271 + 1
plot(f10271(10271))
f10272(a10272) => a10272 + 1
plot(f10272(10272))
f10273(a10273) => a10273 + 1
plot(f10273(10273))
f10274(a10274) => a10274 + 1
plot(f10274(10274))
f10275(a10275) => a10275 + 1
plot(f10275(10275))
f10276(a10276) => a10276 + 1
plot(f10276(10276))
f10277(a10277) => a10277 + 1
plot(f10277(10277))
f10278(a10278) => a10278 + 1
plot(f10278(10278))
f10279(a10279) => a10279 + 1
plot(f10279(10279))
f10280(a10280) => a10280 + 1
plot(f10280(10280))
f10281(a10281) => a10281 + 1
plot(f10281(10281))
f10282(a10282) => a10282 + 1
plot(f10282(10282))
f10283(a10283) => a10283 + 1
plot(f10283(10283))
f10284(a10284) => a10284 + 1
plot(f10284(10284))
f10285(a10285) => a10285 + 1
plot(f10285(10285))
f10286(a10286) => a10286 + 1
plot(f10286(10286))
f10287(a10287) => a10287 + 1
plot(f10287(10287))
f10288(a10288) => a10288 + 1
plot(f10288(10288))
f10289(a10289) => a10289 + 1
plot(f10289(10289))
f10290(a10290) => a10290 + 1
plot(f10290(10290))
f10291(a10291) => a10291 + 1
plot(f10291(10291))
f10292(a10292) => a10292 + 1
plot(f10292(10292))
f10293(a10293) => a10293 + 1
plot(f10293(10293))
f10294(a10294) => a10294 + 1
plot(f10294(10294))
f10295(a10295) => a10295 + 1
plot(f10295(10295))
f10296(a10296) => a10296 + 1
plot(f10296(10296))
f10297(a10297) => a10297 + 1
plot(f10297(10297))
f10298(a10298) => a10298 + 1
plot(f10298(10298))
f10299(a10299) => a10299 + 1
plot(f10299(10299))
f10300(a10300) => a10300 + 1
plot(f10300(10300))
f10301(a10301) => a10301 + 1
plot(f10301(10301))
f10302(a10302) => a10302 + 1
plot(f10302(10302))
f10303(a10303) => a10303 + 1
plot(f10303(10303))
f10304(a10304) => a10304 + 1
plot(f10304(10304))
f10305(a10305) => a10305 + 1
plot(f10305(10305))
f10306(a10306) => a10306 + 1
plot(f10306(10306))
f10307(a10307) => a10307 + 1
plot(f10307(10307))
f10308(a10308) => a10308 + 1
plot(f10308(10308))
f10309(a10309) => a10309 + 1
plot(f10309(10309))
f10310(a10310) => a10310 + 1
plot(f10310(10310))
f10311(a10311) => a10311 + 1
plot(f10311(10311))
f10312(a10312) => a10312 + 1
plot(f10312(10312))
f10313(a10313) => a10313 + 1
plot(f10313(10313))
f10314(a10314) => a10314 + 1
plot(f10314(10314))
f10315(a10315) => a10315 + 1
plot(f10315(10315))
f10316(a10316) => a10316 + 1
plot(f10316(10316))
f10317(a10317) => a10317 + 1
plot(f10317(10317))
f10318(a10318) => a10318 + 1
plot(f10318(10318))
f10319(a10319) => a10319 + 1
plot(f10319(10319))
f10320(a10320) => a10320 + 1
plot(f10320(10320))
f10321(a10321) => a10321 + 1
plot(f10321(10321))
f10322(a10322) => a10322 + 1
plot(f10322(10322))
f10323(a10323) => a10323 + 1
plot(f10323(10323))
f10324(a10324) => a10324 + 1
plot(f10324(10324))
f10325(a10325) => a10325 + 1
plot(f10325(10325))
f10326(a10326) => a10326 + 1
plot(f10326(10326))
f10327(a10327) => a10327 + 1
plot(f10327(10327))
f10328(a10328) => a10328 + 1
plot(f10328(10328))
f10329(a10329) => a10329 + 1
plot(f10329(10329))
f10330(a10330) => a10330 + 1
plot(f10330(10330))
f10331(a10331) => a10331 + 1
plot(f10331(10331))
f10332(a10332) => a10332 + 1
plot(f10332(10332))
f10333(a10333) => a10333 + 1
plot(f10333(10333))
f10334(a10334) => a10334 + 1
plot(f10334(10334))
f10335(a10335) => a10335 + 1
plot(f10335(10335))
f10336(a10336) => a10336 + 1
plot(f10336(10336))
f10337(a10337) => a10337 + 1
plot(f10337(10337))
f10338(a10338) => a10338 + 1
plot(f10338(10338))
f10339(a10339) => a10339 + 1
plot(f10339(10339))
f10340(a10340) => a10340 + 1
plot(f10340(10340))
f10341(a10341) => a10341 + 1
plot(f10341(10341))
f10342(a10342) => a10342 + 1
plot(f10342(10342))
f10343(a10343) => a10343 + 1
plot(f10343(10343))
f10344(a10344) => a10344 + 1
plot(f10344(10344))
f10345(a10345) => a10345 + 1
plot(f10345(10345))
f10346(a10346) => a10346 + 1
plot(f10346(10346))
f10347(a10347) => a10347 + 1
plot(f10347(10347))
f10348(a10348) => a10348 + 1
plot(f10348(10348))
f10349(a10349) => a10349 + 1
plot(f10349(10349))
f10350(a10350) => a10350 + 1
plot(f10350(10350))
f10351(a10351) => a10351 + 1
plot(f10351(10351))
f10352(a10352) => a10352 + 1
plot(f10352(10352))
f10353(a10353) => a10353 + 1
plot(f10353(10353))
f10354(a10354) => a10354 + 1
plot(f10354(10354))
f10355(a10355) => a10355 + 1
plot(f10355(10355))
f10356(a10356) => a10356 + 1
plot(f10356(10356))
f10357(a10357) => a10357 + 1
plot(f10357(10357))
f10358(a10358) => a10358 + 1
plot(f10358(10358))
f10359(a10359) => a10359 + 1
plot(f10359(10359))
f10360(a10360) => a10360 + 1
plot(f10360(10360))
f10361(a10361) => a10361 + 1
plot(f10361(10361))
f10362(a10362) => a10362 + 1
plot(f10362(10362))
f10363(a10363) => a10363 + 1
plot(f10363(10363))
f10364(a10364) => a10364 + 1
plot(f10364(10364))
f10365(a10365) => a10365 + 1
plot(f10365(10365))
f10366(a10366) => a10366 + 1
plot(f10366(10366))
f10367(a10367) => a10367 + 1
plot(f10367(10367))
f10368(a10368) => a10368 + 1
plot(f10368(10368))
f10369(a10369) => a10369 + 1
plot(f10369(10369))
f10370(a10370) => a10370 + 1
plot(f10370(10370))
f10371(a10371) => a10371 + 1
plot(f10371(10371))
f10372(a10372) => a10372 + 1
plot(f10372(10372))
f10373(a10373) => a10373 + 1
plot(f10373(10373))
f10374(a10374) => a10374 + 1
plot(f10374(10374))
f10375(a10375) => a10375 + 1
plot(f10375(10375))
f10376(a10376) => a10376 + 1
plot(f10376(10376))
f10377(a10377) => a10377 + 1
plot(f10377(10377))
f10378(a10378) => a10378 + 1
plot(f10378(10378))
f10379(a10379) => a10379 + 1
plot(f10379(10379))
f10380(a10380) => a10380 + 1
plot(f10380(10380))
f10381(a10381) => a10381 + 1
plot(f10381(10381))
f10382(a10382) => a10382 + 1
plot(f10382(10382))
f10383(a10383) => a10383 + 1
plot(f10383(10383))
f10384(a10384) => a10384 + 1
plot(f10384(10384))
f10385(a10385) => a10385 + 1
plot(f10385(10385))
f10386(a10386) => a10386 + 1
plot(f10386(10386))
f10387(a10387) => a10387 + 1
plot(f10387(10387))
f10388(a10388) => a10388 + 1
plot(f10388(10388))
f10389(a10389) => a10389 + 1
plot(f10389(10389))
f10390(a10390) => a10390 + 1
plot(f10390(10390))
f10391(a10391) => a10391 + 1
plot(f10391(10391))
f10392(a10392) => a10392 + 1
plot(f10392(10392))
f10393(a10393) => a10393 + 1
plot(f10393(10393))
f10394(a10394) => a10394 + 1
plot(f10394(10394))
f10395(a10395) => a10395 + 1
plot(f10395(10395))
f10396(a10396) => a10396 + 1
plot(f10396(10396))
f10397(a10397) => a10397 + 1
plot(f10397(10397))
f10398(a10398) => a10398 + 1
plot(f10398(10398))
f10399(a10399) => a10399 + 1
plot(f10399(10399))
f10400(a10400) => a10400 + 1
plot(f10400(10400))
f10401(a10401) => a10401 + 1
plot(f10401(10401))
f10402(a10402) => a10402 + 1
plot(f10402(10402))
f10403(a10403) => a10403 + 1
plot(f10403(10403))
f10404(a10404) => a10404 + 1
plot(f10404(10404))
f10405(a10405) => a10405 + 1
plot(f10405(10405))
f10406(a10406) => a10406 + 1
plot(f10406(10406))
f10407(a10407) => a10407 + 1
plot(f10407(10407))
f10408(a10408) => a10408 + 1
plot(f10408(10408))
f10409(a10409) => a10409 + 1
plot(f10409(10409))
f10410(a10410) => a10410 + 1
plot(f10410(10410))
f10411(a10411) => a10411 + 1
plot(f10411(10411))
f10412(a10412) => a10412 + 1
plot(f10412(10412))
f10413(a10413) => a10413 + 1
plot(f10413(10413))
f10414(a10414) => a10414 + 1
plot(f10414(10414))
f10415(a10415) => a10415 + 1
plot(f10415(10415))
f10416(a10416) => a10416 + 1
plot(f10416(10416))
f10417(a10417) => a10417 + 1
plot(f10417(10417))
f10418(a10418) => a10418 + 1
plot(f10418(10418))
f10419(a10419) => a10419 + 1
plot(f10419(10419))
f10420(a10420) => a10420 + 1
plot(f10420(10420))
f10421(a10421) => a10421 + 1
plot(f10421(10421))
f10422(a10422) => a10422 + 1
plot(f10422(10422))
f10423(a10423) => a10423 + 1
plot(f10423(10423))
f10424(a10424) => a10424 + 1
plot(f10424(10424))
f10425(a10425) => a10425 + 1
plot(f10425(10425))
f10426(a10426) => a10426 + 1
plot(f10426(10426))
f10427(a10427) => a10427 + 1
plot(f10427(10427))
f10428(a10428) => a10428 + 1
plot(f10428(10428))
f10429(a10429) => a10429 + 1
plot(f10429(10429))
f10430(a10430) => a10430 + 1
plot(f10430(10430))
f10431(a10431) => a10431 + 1
plot(f10431(10431))
f10432(a10432) => a10432 + 1
plot(f10432(10432))
f10433(a10433) => a10433 + 1
plot(f10433(10433))
f10434(a10434) => a10434 + 1
plot(f10434(10434))
f10435(a10435) => a10435 + 1
plot(f10435(10435))
f10436(a10436) => a10436 + 1
plot(f10436(10436))
f10437(a10437) => a10437 + 1
plot(f10437(10437))
f10438(a10438) => a10438 + 1
plot(f10438(10438))
f10439(a10439) => a10439 + 1
plot(f10439(10439))
f10440(a10440) => a10440 + 1
plot(f10440(10440))
f10441(a10441) => a10441 + 1
plot(f10441(10441))
f10442(a10442) => a10442 + 1
plot(f10442(10442))
f10443(a10443) => a10443 + 1
plot(f10443(10443))
f10444(a10444) => a10444 + 1
plot(f10444(10444))
f10445(a10445) => a10445 + 1
plot(f10445(10445))
f10446(a10446) => a10446 + 1
plot(f10446(10446))
f10447(a10447) => a10447 + 1
plot(f10447(10447))
f10448(a10448) => a10448 + 1
plot(f10448(10448))
f10449(a10449) => a10449 + 1
plot(f10449(10449))
f10450(a10450) => a10450 + 1
plot(f10450(10450))
f10451(a10451) => a10451 + 1
plot(f10451(10451))
f10452(a10452) => a10452 + 1
plot(f10452(10452))
f10453(a10453) => a10453 + 1
plot(f10453(10453))
f10454(a10454) => a10454 + 1
plot(f10454(10454))
f10455(a10455) => a10455 + 1
plot(f10455(10455))
f10456(a10456) => a10456 + 1
plot(f10456(10456))
f10457(a10457) => a10457 + 1
plot(f10457(10457))
f10458(a10458) => a10458 + 1
plot(f10458(10458))
f10459(a10459) => a10459 + 1
plot(f10459(10459))
f10460(a10460) => a10460 + 1
plot(f10460(10460))
f10461(a10461) => a10461 + 1
plot(f10461(10461))
f10462(a10462) => a10462 + 1
plot(f10462(10462))
f10463(a10463) => a10463 + 1
plot(f10463(10463))
f10464(a10464) => a10464 + 1
plot(f10464(10464))
f10465(a10465) => a10465 + 1
plot(f10465(10465))
f10466(a10466) => a10466 + 1
plot(f10466(10466))
f10467(a10467) => a10467 + 1
plot(f10467(10467))
f10468(a10468) => a10468 + 1
plot(f10468(10468))
f10469(a10469) => a10469 + 1
plot(f10469(10469))
f10470(a10470) => a10470 + 1
plot(f10470(10470))
f10471(a10471) => a10471 + 1
plot(f10471(10471))
f10472(a10472) => a10472 + 1
plot(f10472(10472))
f10473(a10473) => a10473 + 1
plot(f10473(10473))
f10474(a10474) => a10474 + 1
plot(f10474(10474))
f10475(a10475) => a10475 + 1
plot(f10475(10475))
f10476(a10476) => a10476 + 1
plot(f10476(10476))
f10477(a10477) => a10477 + 1
plot(f10477(10477))
f10478(a10478) => a10478 + 1
plot(f10478(10478))
f10479(a10479) => a10479 + 1
plot(f10479(10479))
f10480(a10480) => a10480 + 1
plot(f10480(10480))
f10481(a10481) => a10481 + 1
plot(f10481(10481))
f10482(a10482) => a10482 + 1
plot(f10482(10482))
f10483(a10483) => a10483 + 1
plot(f10483(10483))
f10484(a10484) => a10484 + 1
plot(f10484(10484))
f10485(a10485) => a10485 + 1
plot(f10485(10485))
f10486(a10486) => a10486 + 1
plot(f10486(10486))
f10487(a10487) => a10487 + 1
plot(f10487(10487))
f10488(a10488) => a10488 + 1
plot(f10488(10488))
f10489(a10489) => a10489 + 1
plot(f10489(10489))
f10490(a10490) => a10490 + 1
plot(f10490(10490))
f10491(a10491) => a10491 + 1
plot(f10491(10491))
f10492(a10492) => a10492 + 1
plot(f10492(10492))
f10493(a10493) => a10493 + 1
plot(f10493(10493))
f10494(a10494) => a10494 + 1
plot(f10494(10494))
f10495(a10495) => a10495 + 1
plot(f10495(10495))
f10496(a10496) => a10496 + 1
plot(f10496(10496))
f10497(a10497) => a10497 + 1
plot(f10497(10497))
f10498(a10498) => a10498 + 1
plot(f10498(10498))
f10499(a10499) => a10499 + 1
plot(f10499(10499))
f10500(a10500) => a10500 + 1
plot(f10500(10500))
f10501(a10501) => a10501 + 1
plot(f10501(10501))
f10502(a10502) => a10502 + 1
plot(f10502(10502))
f10503(a10503) => a10503 + 1
plot(f10503(10503))
f10504(a10504) => a10504 + 1
plot(f10504(10504))
f10505(a10505) => a10505 + 1
plot(f10505(10505))
f10506(a10506) => a10506 + 1
plot(f10506(10506))
f10507(a10507) => a10507 + 1
plot(f10507(10507))
f10508(a10508) => a10508 + 1
plot(f10508(10508))
f10509(a10509) => a10509 + 1
plot(f10509(10509))
f10510(a10510) => a10510 + 1
plot(f10510(10510))
f10511(a10511) => a10511 + 1
plot(f10511(10511))
f10512(a10512) => a10512 + 1
plot(f10512(10512))
f10513(a10513) => a10513 + 1
plot(f10513(10513))
f10514(a10514) => a10514 + 1
plot(f10514(10514))
f10515(a10515) => a10515 + 1
plot(f10515(10515))
f10516(a10516) => a10516 + 1
plot(f10516(10516))
f10517(a10517) => a10517 + 1
plot(f10517(10517))
f10518(a10518) => a10518 + 1
plot(f10518(10518))
f10519(a10519) => a10519 + 1
plot(f10519(10519))
f10520(a10520) => a10520 + 1
plot(f10520(10520))
f10521(a10521) => a10521 + 1
plot(f10521(10521))
f10522(a10522) => a10522 + 1
plot(f10522(10522))
f10523(a10523) => a10523 + 1
plot(f10523(10523))
f10524(a10524) => a10524 + 1
plot(f10524(10524))
f10525(a10525) => a10525 + 1
plot(f10525(10525))
f10526(a10526) => a10526 + 1
plot(f10526(10526))
f10527(a10527) => a10527 + 1
plot(f10527(10527))
f10528(a10528) => a10528 + 1
plot(f10528(10528))
f10529(a10529) => a10529 + 1
plot(f10529(10529))
f10530(a10530) => a10530 + 1
plot(f10530(10530))
f10531(a10531) => a10531 + 1
plot(f10531(10531))
f10532(a10532) => a10532 + 1
plot(f10532(10532))
f10533(a10533) => a10533 + 1
plot(f10533(10533))
f10534(a10534) => a10534 + 1
plot(f10534(10534))
f10535(a10535) => a10535 + 1
plot(f10535(10535))
f10536(a10536) => a10536 + 1
plot(f10536(10536))
f10537(a10537) => a10537 + 1
plot(f10537(10537))
f10538(a10538) => a10538 + 1
plot(f10538(10538))
f10539(a10539) => a10539 + 1
plot(f10539(10539))
f10540(a10540) => a10540 + 1
plot(f10540(10540))
f10541(a10541) => a10541 + 1
plot(f10541(10541))
f10542(a10542) => a10542 + 1
plot(f10542(10542))
f10543(a10543) => a10543 + 1
plot(f10543(10543))
f10544(a10544) => a10544 + 1
plot(f10544(10544))
f10545(a10545) => a10545 + 1
plot(f10545(10545))
f10546(a10546) => a10546 + 1
plot(f10546(10546))
f10547(a10547) => a10547 + 1
plot(f10547(10547))
f10548(a10548) => a10548 + 1
plot(f10548(10548))
f10549(a10549) => a10549 + 1
plot(f10549(10549))
f10550(a10550) => a10550 + 1
plot(f10550(10550))
f10551(a10551) => a10551 + 1
plot(f10551(10551))
f10552(a10552) => a10552 + 1
plot(f10552(10552))
f10553(a10553) => a10553 + 1
plot(f10553(10553))
f10554(a10554) => a10554 + 1
plot(f10554(10554))
f10555(a10555) => a10555 + 1
plot(f10555(10555))
f10556(a10556) => a10556 + 1
plot(f10556(10556))
f10557(a10557) => a10557 + 1
plot(f10557(10557))
f10558(a10558) => a10558 + 1
plot(f10558(10558))
f10559(a10559) => a10559 + 1
plot(f10559(10559))
f10560(a10560) => a10560 + 1
plot(f10560(10560))
f10561(a10561) => a10561 + 1
plot(f10561(10561))
f10562(a10562) => a10562 + 1
plot(f10562(10562))
f10563(a10563) => a10563 + 1
plot(f10563(10563))
f10564(a10564) => a10564 + 1
plot(f10564(10564))
f10565(a10565) => a10565 + 1
plot(f10565(10565))
f10566(a10566) => a10566 + 1
plot(f10566(10566))
f10567(a10567) => a10567 + 1
plot(f10567(10567))
f10568(a10568) => a10568 + 1
plot(f10568(10568))
f10569(a10569) => a10569 + 1
plot(f10569(10569))
f10570(a10570) => a10570 + 1
plot(f10570(10570))
f10571(a10571) => a10571 + 1
plot(f10571(10571))
f10572(a10572) => a10572 + 1
plot(f10572(10572))
f10573(a10573) => a10573 + 1
plot(f10573(10573))
f10574(a10574) => a10574 + 1
plot(f10574(10574))
f10575(a10575) => a10575 + 1
plot(f10575(10575))
f10576(a10576) => a10576 + 1
plot(f10576(10576))
f10577(a10577) => a10577 + 1
plot(f10577(10577))
f10578(a10578) => a10578 + 1
plot(f10578(10578))
f10579(a10579) => a10579 + 1
plot(f10579(10579))
f10580(a10580) => a10580 + 1
plot(f10580(10580))
f10581(a10581) => a10581 + 1
plot(f10581(10581))
f10582(a10582) => a10582 + 1
plot(f10582(10582))
f10583(a10583) => a10583 + 1
plot(f10583(10583))
f10584(a10584) => a10584 + 1
plot(f10584(10584))
f10585(a10585) => a10585 + 1
plot(f10585(10585))
f10586(a10586) => a10586 + 1
plot(f10586(10586))
f10587(a10587) => a10587 + 1
plot(f10587(10587))
f10588(a10588) => a10588 + 1
plot(f10588(10588))
f10589(a10589) => a10589 + 1
plot(f10589(10589))
f10590(a10590) => a10590 + 1
plot(f10590(10590))
f10591(a10591) => a10591 + 1
plot(f10591(10591))
f10592(a10592) => a10592 + 1
plot(f10592(10592))
f10593(a10593) => a10593 + 1
plot(f10593(10593))
f10594(a10594) => a10594 + 1
plot(f10594(10594))
f10595(a10595) => a10595 + 1
plot(f10595(10595))
f10596(a10596) => a10596 + 1
plot(f10596(10596))
f10597(a10597) => a10597 + 1
plot(f10597(10597))
f10598(a10598) => a10598 + 1
plot(f10598(10598))
f10599(a10599) => a10599 + 1
plot(f10599(10599))
f10600(a10600) => a10600 + 1
plot(f10600(10600))
f10601(a10601) => a10601 + 1
plot(f10601(10601))
f10602(a10602) => a10602 + 1
plot(f10602(10602))
f10603(a10603) => a10603 + 1
plot(f10603(10603))
f10604(a10604) => a10604 + 1
plot(f10604(10604))
f10605(a10605) => a10605 + 1
plot(f10605(10605))
f10606(a10606) => a10606 + 1
plot(f10606(10606))
f10607(a10607) => a10607 + 1
plot(f10607(10607))
f10608(a10608) => a10608 + 1
plot(f10608(10608))
f10609(a10609) => a10609 + 1
plot(f10609(10609))
f10610(a10610) => a10610 + 1
plot(f10610(10610))
f10611(a10611) => a10611 + 1
plot(f10611(10611))
f10612(a10612) => a10612 + 1
plot(f10612(10612))
f10613(a10613) => a10613 + 1
plot(f10613(10613))
f10614(a10614) => a10614 + 1
plot(f10614(10614))
f10615(a10615) => a10615 + 1
plot(f10615(10615))
f10616(a10616) => a10616 + 1
plot(f10616(10616))
f10617(a10617) => a10617 + 1
plot(f10617(10617))
f10618(a10618) => a10618 + 1
plot(f10618(10618))
f10619(a10619) => a10619 + 1
plot(f10619(10619))
f10620(a10620) => a10620 + 1
plot(f10620(10620))
f10621(a10621) => a10621 + 1
plot(f10621(10621))
f10622(a10622) => a10622 + 1
plot(f10622(10622))
f10623(a10623) => a10623 + 1
plot(f10623(10623))
f10624(a10624) => a10624 + 1
plot(f10624(10624))
f10625(a10625) => a10625 + 1
plot(f10625(10625))
f10626(a10626) => a10626 + 1
plot(f10626(10626))
f10627(a10627) => a10627 + 1
plot(f10627(10627))
f10628(a10628) => a10628 + 1
plot(f10628(10628))
f10629(a10629) => a10629 + 1
plot(f10629(10629))
f10630(a10630) => a10630 + 1
plot(f10630(10630))
f10631(a10631) => a10631 + 1
plot(f10631(10631))
f10632(a10632) => a10632 + 1
plot(f10632(10632))
f10633(a10633) => a10633 + 1
plot(f10633(10633))
f10634(a10634) => a10634 + 1
plot(f10634(10634))
f10635(a10635) => a10635 + 1
plot(f10635(10635))
f10636(a10636) => a10636 + 1
plot(f10636(10636))
f10637(a10637) => a10637 + 1
plot(f10637(10637))
f10638(a10638) => a10638 + 1
plot(f10638(10638))
f10639(a10639) => a10639 + 1
plot(f10639(10639))
f10640(a10640) => a10640 + 1
plot(f10640(10640))
f10641(a10641) => a10641 + 1
plot(f10641(10641))
f10642(a10642) => a10642 + 1
plot(f10642(10642))
f10643(a10643) => a10643 + 1
plot(f10643(10643))
f10644(a10644) => a10644 + 1
plot(f10644(10644))
f10645(a10645) => a10645 + 1
plot(f10645(10645))
f10646(a10646) => a10646 + 1
plot(f10646(10646))
f10647(a10647) => a10647 + 1
plot(f10647(10647))
f10648(a10648) => a10648 + 1
plot(f10648(10648))
f10649(a10649) => a10649 + 1
plot(f10649(10649))
f10650(a10650) => a10650 + 1
plot(f10650(10650))
f10651(a10651) => a10651 + 1
plot(f10651(10651))
f10652(a10652) => a10652 + 1
plot(f10652(10652))
f10653(a10653) => a10653 + 1
plot(f10653(10653))
f10654(a10654) => a10654 + 1
plot(f10654(10654))
f10655(a10655) => a10655 + 1
plot(f10655(10655))
f10656(a10656) => a10656 + 1
plot(f10656(10656))
f10657(a10657) => a10657 + 1
plot(f10657(10657))
f10658(a10658) => a10658 + 1
plot(f10658(10658))
f10659(a10659) => a10659 + 1
plot(f10659(10659))
f10660(a10660) => a10660 + 1
plot(f10660(10660))
f10661(a10661) => a10661 + 1
plot(f10661(10661))
f10662(a10662) => a10662 + 1
plot(f10662(10662))
f10663(a10663) => a10663 + 1
plot(f10663(10663))
f10664(a10664) => a10664 + 1
plot(f10664(10664))
f10665(a10665) => a10665 + 1
plot(f10665(10665))
f10666(a10666) => a10666 + 1
plot(f10666(10666))
f10667(a10667) => a10667 + 1
plot(f10667(10667))
f10668(a10668) => a10668 + 1
plot(f10668(10668))
f10669(a10669) => a10669 + 1
plot(f10669(10669))
f10670(a10670) => a10670 + 1
plot(f10670(10670))
f10671(a10671) => a10671 + 1
plot(f10671(10671))
f10672(a10672) => a10672 + 1
plot(f10672(10672))
f10673(a10673) => a10673 + 1
plot(f10673(10673))
f10674(a10674) => a10674 + 1
plot(f10674(10674))
f10675(a10675) => a10675 + 1
plot(f10675(10675))
f10676(a10676) => a10676 + 1
plot(f10676(10676))
f10677(a10677) => a10677 + 1
plot(f10677(10677))
f10678(a10678) => a10678 + 1
plot(f10678(10678))
f10679(a10679) => a10679 + 1
plot(f10679(10679))
f10680(a10680) => a10680 + 1
plot(f10680(10680))
f10681(a10681) => a10681 + 1
plot(f10681(10681))
f10682(a10682) => a10682 + 1
plot(f10682(10682))
f10683(a10683) => a10683 + 1
plot(f10683(10683))
f10684(a10684) => a10684 + 1
plot(f10684(10684))
f10685(a10685) => a10685 + 1
plot(f10685(10685))
f10686(a10686) => a10686 + 1
plot(f10686(10686))
f10687(a10687) => a10687 + 1
plot(f10687(10687))
f10688(a10688) => a10688 + 1
plot(f10688(10688))
f10689(a10689) => a10689 + 1
plot(f10689(10689))
f10690(a10690) => a10690 + 1
plot(f10690(10690))
f10691(a10691) => a10691 + 1
plot(f10691(10691))
f10692(a10692) => a10692 + 1
plot(f10692(10692))
f10693(a10693) => a10693 + 1
plot(f10693(10693))
f10694(a10694) => a10694 + 1
plot(f10694(10694))
f10695(a10695) => a10695 + 1
plot(f10695(10695))
f10696(a10696) => a10696 + 1
plot(f10696(10696))
f10697(a10697) => a10697 + 1
plot(f10697(10697))
f10698(a10698) => a10698 + 1
plot(f10698(10698))
f10699(a10699) => a10699 + 1
plot(f10699(10699))
f10700(a10700) => a10700 + 1
plot(f10700(10700))
f10701(a10701) => a10701 + 1
plot(f10701(10701))
f10702(a10702) => a10702 + 1
plot(f10702(10702))
f10703(a10703) => a10703 + 1
plot(f10703(10703))
f10704(a10704) => a10704 + 1
plot(f10704(10704))
f10705(a10705) => a10705 + 1
plot(f10705(10705))
f10706(a10706) => a10706 + 1
plot(f10706(10706))
f10707(a10707) => a10707 + 1
plot(f10707(10707))
f10708(a10708) => a10708 + 1
plot(f10708(10708))
f10709(a10709) => a10709 + 1
plot(f10709(10709))
f10710(a10710) => a10710 + 1
plot(f10710(10710))
f10711(a10711) => a10711 + 1
plot(f10711(10711))
f10712(a10712) => a10712 + 1
plot(f10712(10712))
f10713(a10713) => a10713 + 1
plot(f10713(10713))
f10714(a10714) => a10714 + 1
plot(f10714(10714))
f10715(a10715) => a10715 + 1
plot(f10715(10715))
f10716(a10716) => a10716 + 1
plot(f10716(10716))
f10717(a10717) => a10717 + 1
plot(f10717(10717))
f10718(a10718) => a10718 + 1
plot(f10718(10718))
f10719(a10719) => a10719 + 1
plot(f10719(10719))
f10720(a10720) => a10720 + 1
plot(f10720(10720))
f10721(a10721) => a10721 + 1
plot(f10721(10721))
f10722(a10722) => a10722 + 1
plot(f10722(10722))
f10723(a10723) => a10723 + 1
plot(f10723(10723))
f10724(a10724) => a10724 + 1
plot(f10724(10724))
f10725(a10725) => a10725 + 1
plot(f10725(10725))
f10726(a10726) => a10726 + 1
plot(f10726(10726))
f10727(a10727) => a10727 + 1
plot(f10727(10727))
f10728(a10728) => a10728 + 1
plot(f10728(10728))
f10729(a10729) => a10729 + 1
plot(f10729(10729))
f10730(a10730) => a10730 + 1
plot(f10730(10730))
f10731(a10731) => a10731 + 1
plot(f10731(10731))
f10732(a10732) => a10732 + 1
plot(f10732(10732))
f10733(a10733) => a10733 + 1
plot(f10733(10733))
f10734(a10734) => a10734 + 1
plot(f10734(10734))
f10735(a10735) => a10735 + 1
plot(f10735(10735))
f10736(a10736) => a10736 + 1
plot(f10736(10736))
f10737(a10737) => a10737 + 1
plot(f10737(10737))
f10738(a10738) => a10738 + 1
plot(f10738(10738))
f10739(a10739) => a10739 + 1
plot(f10739(10739))
f10740(a10740) => a10740 + 1
plot(f10740(10740))
f10741(a10741) => a10741 + 1
plot(f10741(10741))
f10742(a10742) => a10742 + 1
plot(f10742(10742))
f10743(a10743) => a10743 + 1
plot(f10743(10743))
f10744(a10744) => a10744 + 1
plot(f10744(10744))
f10745(a10745) => a10745 + 1
plot(f10745(10745))
f10746(a10746) => a10746 + 1
plot(f10746(10746))
f10747(a10747) => a10747 + 1
plot(f10747(10747))
f10748(a10748) => a10748 + 1
plot(f10748(10748))
f10749(a10749) => a10749 + 1
plot(f10749(10749))
f10750(a10750) => a10750 + 1
plot(f10750(10750))
f10751(a10751) => a10751 + 1
plot(f10751(10751))
f10752(a10752) => a10752 + 1
plot(f10752(10752))
f10753(a10753) => a10753 + 1
plot(f10753(10753))
f10754(a10754) => a10754 + 1
plot(f10754(10754))
f10755(a10755) => a10755 + 1
plot(f10755(10755))
f10756(a10756) => a10756 + 1
plot(f10756(10756))
f10757(a10757) => a10757 + 1
plot(f10757(10757))
f10758(a10758) => a10758 + 1
plot(f10758(10758))
f10759(a10759) => a10759 + 1
plot(f10759(10759))
f10760(a10760) => a10760 + 1
plot(f10760(10760))
f10761(a10761) => a10761 + 1
plot(f10761(10761))
f10762(a10762) => a10762 + 1
plot(f10762(10762))
f10763(a10763) => a10763 + 1
plot(f10763(10763))
f10764(a10764) => a10764 + 1
plot(f10764(10764))
f10765(a10765) => a10765 + 1
plot(f10765(10765))
f10766(a10766) => a10766 + 1
plot(f10766(10766))
f10767(a10767) => a10767 + 1
plot(f10767(10767))
f10768(a10768) => a10768 + 1
plot(f10768(10768))
f10769(a10769) => a10769 + 1
plot(f10769(10769))
f10770(a10770) => a10770 + 1
plot(f10770(10770))
f10771(a10771) => a10771 + 1
plot(f10771(10771))
f10772(a10772) => a10772 + 1
plot(f10772(10772))
f10773(a10773) => a10773 + 1
plot(f10773(10773))
f10774(a10774) => a10774 + 1
plot(f10774(10774))
f10775(a10775) => a10775 + 1
plot(f10775(10775))
f10776(a10776) => a10776 + 1
plot(f10776(10776))
f10777(a10777) => a10777 + 1
plot(f10777(10777))
f10778(a10778) => a10778 + 1
plot(f10778(10778))
f10779(a10779) => a10779 + 1
plot(f10779(10779))
f10780(a10780) => a10780 + 1
plot(f10780(10780))
f10781(a10781) => a10781 + 1
plot(f10781(10781))
f10782(a10782) => a10782 + 1
plot(f10782(10782))
f10783(a10783) => a10783 + 1
plot(f10783(10783))
f10784(a10784) => a10784 + 1
plot(f10784(10784))
f10785(a10785) => a10785 + 1
plot(f10785(10785))
f10786(a10786) => a10786 + 1
plot(f10786(10786))
f10787(a10787) => a10787 + 1
plot(f10787(10787))
f10788(a10788) => a10788 + 1
plot(f10788(10788))
f10789(a10789) => a10789 + 1
plot(f10789(10789))
f10790(a10790) => a10790 + 1
plot(f10790(10790))
f10791(a10791) => a10791 + 1
plot(f10791(10791))
f10792(a10792) => a10792 + 1
plot(f10792(10792))
f10793(a10793) => a10793 + 1
plot(f10793(10793))
f10794(a10794) => a10794 + 1
plot(f10794(10794))
f10795(a10795) => a10795 + 1
plot(f10795(10795))
f10796(a10796) => a10796 + 1
plot(f10796(10796))
f10797(a10797) => a10797 + 1
plot(f10797(10797))
f10798(a10798) => a10798 + 1
plot(f10798(10798))
f10799(a10799) => a10799 + 1
plot(f10799(10799))
f10800(a10800) => a10800 + 1
plot(f10800(10800))
f10801(a10801) => a10801 + 1
plot(f10801(10801))
f10802(a10802) => a10802 + 1
plot(f10802(10802))
f10803(a10803) => a10803 + 1
plot(f10803(10803))
f10804(a10804) => a10804 + 1
plot(f10804(10804))
f10805(a10805) => a10805 + 1
plot(f10805(10805))
f10806(a10806) => a10806 + 1
plot(f10806(10806))
f10807(a10807) => a10807 + 1
plot(f10807(10807))
f10808(a10808) => a10808 + 1
plot(f10808(10808))
f10809(a10809) => a10809 + 1
plot(f10809(10809))
f10810(a10810) => a10810 + 1
plot(f10810(10810))
f10811(a10811) => a10811 + 1
plot(f10811(10811))
f10812(a10812) => a10812 + 1
plot(f10812(10812))
f10813(a10813) => a10813 + 1
plot(f10813(10813))
f10814(a10814) => a10814 + 1
plot(f10814(10814))
f10815(a10815) => a10815 + 1
plot(f10815(10815))
f10816(a10816) => a10816 + 1
plot(f10816(10816))
f10817(a10817) => a10817 + 1
plot(f10817(10817))
f10818(a10818) => a10818 + 1
plot(f10818(10818))
f10819(a10819) => a10819 + 1
plot(f10819(10819))
f10820(a10820) => a10820 + 1
plot(f10820(10820))
f10821(a10821) => a10821 + 1
plot(f10821(10821))
f10822(a10822) => a10822 + 1
plot(f10822(10822))
f10823(a10823) => a10823 + 1
plot(f10823(10823))
f10824(a10824) => a10824 + 1
plot(f10824(10824))
f10825(a10825) => a10825 + 1
plot(f10825(10825))
f10826(a10826) => a10826 + 1
plot(f10826(10826))
f10827(a10827) => a10827 + 1
plot(f10827(10827))
f10828(a10828) => a10828 + 1
plot(f10828(10828))
f10829(a10829) => a10829 + 1
plot(f10829(10829))
f10830(a10830) => a10830 + 1
plot(f10830(10830))
f10831(a10831) => a10831 + 1
plot(f10831(10831))
f10832(a10832) => a10832 + 1
plot(f10832(10832))
f10833(a10833) => a10833 + 1
plot(f10833(10833))
f10834(a10834) => a10834 + 1
plot(f10834(10834))
f10835(a10835) => a10835 + 1
plot(f10835(10835))
f10836(a10836) => a10836 + 1
plot(f10836(10836))
f10837(a10837) => a10837 + 1
plot(f10837(10837))
f10838(a10838) => a10838 + 1
plot(f10838(10838))
f10839(a10839) => a10839 + 1
plot(f10839(10839))
f10840(a10840) => a10840 + 1
plot(f10840(10840))
f10841(a10841) => a10841 + 1
plot(f10841(10841))
f10842(a10842) => a10842 + 1
plot(f10842(10842))
f10843(a10843) => a10843 + 1
plot(f10843(10843))
f10844(a10844) => a10844 + 1
plot(f10844(10844))
f10845(a10845) => a10845 + 1
plot(f10845(10845))
f10846(a10846) => a10846 + 1
plot(f10846(10846))
f10847(a10847) => a10847 + 1
plot(f10847(10847))
f10848(a10848) => a10848 + 1
plot(f10848(10848))
f10849(a10849) => a10849 + 1
plot(f10849(10849))
f10850(a10850) => a10850 + 1
plot(f10850(10850))
f10851(a10851) => a10851 + 1
plot(f10851(10851))
f10852(a10852) => a10852 + 1
plot(f10852(10852))
f10853(a10853) => a10853 + 1
plot(f10853(10853))
f10854(a10854) => a10854 + 1
plot(f10854(10854))
f10855(a10855) => a10855 + 1
plot(f10855(10855))
f10856(a10856) => a10856 + 1
plot(f10856(10856))
f10857(a10857) => a10857 + 1
plot(f10857(10857))
f10858(a10858) => a10858 + 1
plot(f10858(10858))
f10859(a10859) => a10859 + 1
plot(f10859(10859))
f10860(a10860) => a10860 + 1
plot(f10860(10860))
f10861(a10861) => a10861 + 1
plot(f10861(10861))
f10862(a10862) => a10862 + 1
plot(f10862(10862))
f10863(a10863) => a10863 + 1
plot(f10863(10863))
f10864(a10864) => a10864 + 1
plot(f10864(10864))
f10865(a10865) => a10865 + 1
plot(f10865(10865))
f10866(a10866) => a10866 + 1
plot(f10866(10866))
f10867(a10867) => a10867 + 1
plot(f10867(10867))
f10868(a10868) => a10868 + 1
plot(f10868(10868))
f10869(a10869) => a10869 + 1
plot(f10869(10869))
f10870(a10870) => a10870 + 1
plot(f10870(10870))
f10871(a10871) => a10871 + 1
plot(f10871(10871))
f10872(a10872) => a10872 + 1
plot(f10872(10872))
f10873(a10873) => a10873 + 1
plot(f10873(10873))
f10874(a10874) => a10874 + 1
plot(f10874(10874))
f10875(a10875) => a10875 + 1
plot(f10875(10875))
f10876(a10876) => a10876 + 1
plot(f10876(10876))
f10877(a10877) => a10877 + 1
plot(f10877(10877))
f10878(a10878) => a10878 + 1
plot(f10878(10878))
f10879(a10879) => a10879 + 1
plot(f10879(10879))
f10880(a10880) => a10880 + 1
plot(f10880(10880))
f10881(a10881) => a10881 + 1
plot(f10881(10881))
f10882(a10882) => a10882 + 1
plot(f10882(10882))
f10883(a10883) => a10883 + 1
plot(f10883(10883))
f10884(a10884) => a10884 + 1
plot(f10884(10884))
f10885(a10885) => a10885 + 1
plot(f10885(10885))
f10886(a10886) => a10886 + 1
plot(f10886(10886))
f10887(a10887) => a10887 + 1
plot(f10887(10887))
f10888(a10888) => a10888 + 1
plot(f10888(10888))
f10889(a10889) => a10889 + 1
plot(f10889(10889))
f10890(a10890) => a10890 + 1
plot(f10890(10890))
f10891(a10891) => a10891 + 1
plot(f10891(10891))
f10892(a10892) => a10892 + 1
plot(f10892(10892))
f10893(a10893) => a10893 + 1
plot(f10893(10893))
f10894(a10894) => a10894 + 1
plot(f10894(10894))
f10895(a10895) => a10895 + 1
plot(f10895(10895))
f10896(a10896) => a10896 + 1
plot(f10896(10896))
f10897(a10897) => a10897 + 1
plot(f10897(10897))
f10898(a10898) => a10898 + 1
plot(f10898(10898))
f10899(a10899) => a10899 + 1
plot(f10899(10899))
f10900(a10900) => a10900 + 1
plot(f10900(10900))
f10901(a10901) => a10901 + 1
plot(f10901(10901))
f10902(a10902) => a10902 + 1
plot(f10902(10902))
f10903(a10903) => a10903 + 1
plot(f10903(10903))
f10904(a10904) => a10904 + 1
plot(f10904(10904))
f10905(a10905) => a10905 + 1
plot(f10905(10905))
f10906(a10906) => a10906 + 1
plot(f10906(10906))
f10907(a10907) => a10907 + 1
plot(f10907(10907))
f10908(a10908) => a10908 + 1
plot(f10908(10908))
f10909(a10909) => a10909 + 1
plot(f10909(10909))
f10910(a10910) => a10910 + 1
plot(f10910(10910))
f10911(a10911) => a10911 + 1
plot(f10911(10911))
f10912(a10912) => a10912 + 1
plot(f10912(10912))
f10913(a10913) => a10913 + 1
plot(f10913(10913))
f10914(a10914) => a10914 + 1
plot(f10914(10914))
f10915(a10915) => a10915 + 1
plot(f10915(10915))
f10916(a10916) => a10916 + 1
plot(f10916(10916))
f10917(a10917) => a10917 + 1
plot(f10917(10917))
f10918(a10918) => a10918 + 1
plot(f10918(10918))
f10919(a10919) => a10919 + 1
plot(f10919(10919))
f10920(a10920) => a10920 + 1
plot(f10920(10920))
f10921(a10921) => a10921 + 1
plot(f10921(10921))
f10922(a10922) => a10922 + 1
plot(f10922(10922))
f10923(a10923) => a10923 + 1
plot(f10923(10923))
f10924(a10924) => a10924 + 1
plot(f10924(10924))
f10925(a10925) => a10925 + 1
plot(f10925(10925))
f10926(a10926) => a10926 + 1
plot(f10926(10926))
f10927(a10927) => a10927 + 1
plot(f10927(10927))
f10928(a10928) => a10928 + 1
plot(f10928(10928))
f10929(a10929) => a10929 + 1
plot(f10929(10929))
f10930(a10930) => a10930 + 1
plot(f10930(10930))
f10931(a10931) => a10931 + 1
plot(f10931(10931))
f10932(a10932) => a10932 + 1
plot(f10932(10932))
f10933(a10933) => a10933 + 1
plot(f10933(10933))
f10934(a10934) => a10934 + 1
plot(f10934(10934))
f10935(a10935) => a10935 + 1
plot(f10935(10935))
f10936(a10936) => a10936 + 1
plot(f10936(10936))
f10937(a10937) => a10937 + 1
plot(f10937(10937))
f10938(a10938) => a10938 + 1
plot(f10938(10938))
f10939(a10939) => a10939 + 1
plot(f10939(10939))
f10940(a10940) => a10940 + 1
plot(f10940(10940))
f10941(a10941) => a10941 + 1
plot(f10941(10941))
f10942(a10942) => a10942 + 1
plot(f10942(10942))
f10943(a10943) => a10943 + 1
plot(f10943(10943))
f10944(a10944) => a10944 + 1
plot(f10944(10944))
f10945(a10945) => a10945 + 1
plot(f10945(10945))
f10946(a10946) => a10946 + 1
plot(f10946(10946))
f10947(a10947) => a10947 + 1
plot(f10947(10947))
f10948(a10948) => a10948 + 1
plot(f10948(10948))
f10949(a10949) => a10949 + 1
plot(f10949(10949))
f10950(a10950) => a10950 + 1
plot(f10950(10950))
f10951(a10951) => a10951 + 1
plot(f10951(10951))
f10952(a10952) => a10952 + 1
plot(f10952(10952))
f10953(a10953) => a10953 + 1
plot(f10953(10953))
f10954(a10954) => a10954 + 1
plot(f10954(10954))
f10955(a10955) => a10955 + 1
plot(f10955(10955))
f10956(a10956) => a10956 + 1
plot(f10956(10956))
f10957(a10957) => a10957 + 1
plot(f10957(10957))
f10958(a10958) => a10958 + 1
plot(f10958(10958))
f10959(a10959) => a10959 + 1
plot(f10959(10959))
f10960(a10960) => a10960 + 1
plot(f10960(10960))
f10961(a10961) => a10961 + 1
plot(f10961(10961))
f10962(a10962) => a10962 + 1
plot(f10962(10962))
f10963(a10963) => a10963 + 1
plot(f10963(10963))
f10964(a10964) => a10964 + 1
plot(f10964(10964))
f10965(a10965) => a10965 + 1
plot(f10965(10965))
f10966(a10966) => a10966 + 1
plot(f10966(10966))
f10967(a10967) => a10967 + 1
plot(f10967(10967))
f10968(a10968) => a10968 + 1
plot(f10968(10968))
f10969(a10969) => a10969 + 1
plot(f10969(10969))
f10970(a10970) => a10970 + 1
plot(f10970(10970))
f10971(a10971) => a10971 + 1
plot(f10971(10971))
f10972(a10972) => a10972 + 1
plot(f10972(10972))
f10973(a10973) => a10973 + 1
plot(f10973(10973))
f10974(a10974) => a10974 + 1
plot(f10974(10974))
f10975(a10975) => a10975 + 1
plot(f10975(10975))
f10976(a10976) => a10976 + 1
plot(f10976(10976))
f10977(a10977) => a10977 + 1
plot(f10977(10977))
f10978(a10978) => a10978 + 1
plot(f10978(10978))
f10979(a10979) => a10979 + 1
plot(f10979(10979))
f10980(a10980) => a10980 + 1
plot(f10980(10980))
f10981(a10981) => a10981 + 1
plot(f10981(10981))
f10982(a10982) => a10982 + 1
plot(f10982(10982))
f10983(a10983) => a10983 + 1
plot(f10983(10983))
f10984(a10984) => a10984 + 1
plot(f10984(10984))
f10985(a10985) => a10985 + 1
plot(f10985(10985))
f10986(a10986) => a10986 + 1
plot(f10986(10986))
f10987(a10987) => a10987 + 1
plot(f10987(10987))
f10988(a10988) => a10988 + 1
plot(f10988(10988))
f10989(a10989) => a10989 + 1
plot(f10989(10989))
f10990(a10990) => a10990 + 1
plot(f10990(10990))
f10991(a10991) => a10991 + 1
plot(f10991(10991))
f10992(a10992) => a10992 + 1
plot(f10992(10992))
f10993(a10993) => a10993 + 1
plot(f10993(10993))
f10994(a10994) => a10994 + 1
plot(f10994(10994))
f10995(a10995) => a10995 + 1
plot(f10995(10995))
f10996(a10996) => a10996 + 1
plot(f10996(10996))
f10997(a10997) => a10997 + 1
plot(f10997(10997))
f10998(a10998) => a10998 + 1
plot(f10998(10998))
f10999(a10999) => a10999 + 1
plot(f10999(10999))
f11000(a11000) => a11000 + 1
plot(f11000(11000))
f11001(a11001) => a11001 + 1
plot(f11001(11001))
f11002(a11002) => a11002 + 1
plot(f11002(11002))
f11003(a11003) => a11003 + 1
plot(f11003(11003))
f11004(a11004) => a11004 + 1
plot(f11004(11004))
f11005(a11005) => a11005 + 1
plot(f11005(11005))
f11006(a11006) => a11006 + 1
plot(f11006(11006))
f11007(a11007) => a11007 + 1
plot(f11007(11007))
f11008(a11008) => a11008 + 1
plot(f11008(11008))
f11009(a11009) => a11009 + 1
plot(f11009(11009))
f11010(a11010) => a11010 + 1
plot(f11010(11010))
f11011(a11011) => a11011 + 1
plot(f11011(11011))
f11012(a11012) => a11012 + 1
plot(f11012(11012))
f11013(a11013) => a11013 + 1
plot(f11013(11013))
f11014(a11014) => a11014 + 1
plot(f11014(11014))
f11015(a11015) => a11015 + 1
plot(f11015(11015))
f11016(a11016) => a11016 + 1
plot(f11016(11016))
f11017(a11017) => a11017 + 1
plot(f11017(11017))
f11018(a11018) => a11018 + 1
plot(f11018(11018))
f11019(a11019) => a11019 + 1
plot(f11019(11019))
f11020(a11020) => a11020 + 1
plot(f11020(11020))
f11021(a11021) => a11021 + 1
plot(f11021(11021))
f11022(a11022) => a11022 + 1
plot(f11022(11022))
f11023(a11023) => a11023 + 1
plot(f11023(11023))
f11024(a11024) => a11024 + 1
plot(f11024(11024))
f11025(a11025) => a11025 + 1
plot(f11025(11025))
f11026(a11026) => a11026 + 1
plot(f11026(11026))
f11027(a11027) => a11027 + 1
plot(f11027(11027))
f11028(a11028) => a11028 + 1
plot(f11028(11028))
f11029(a11029) => a11029 + 1
plot(f11029(11029))
f11030(a11030) => a11030 + 1
plot(f11030(11030))
f11031(a11031) => a11031 + 1
plot(f11031(11031))
f11032(a11032) => a11032 + 1
plot(f11032(11032))
f11033(a11033) => a11033 + 1
plot(f11033(11033))
f11034(a11034) => a11034 + 1
plot(f11034(11034))
f11035(a11035) => a11035 + 1
plot(f11035(11035))
f11036(a11036) => a11036 + 1
plot(f11036(11036))
f11037(a11037) => a11037 + 1
plot(f11037(11037))
f11038(a11038) => a11038 + 1
plot(f11038(11038))
f11039(a11039) => a11039 + 1
plot(f11039(11039))
f11040(a11040) => a11040 + 1
plot(f11040(11040))
f11041(a11041) => a11041 + 1
plot(f11041(11041))
f11042(a11042) => a11042 + 1
plot(f11042(11042))
f11043(a11043) => a11043 + 1
plot(f11043(11043))
f11044(a11044) => a11044 + 1
plot(f11044(11044))
f11045(a11045) => a11045 + 1
plot(f11045(11045))
f11046(a11046) => a11046 + 1
plot(f11046(11046))
f11047(a11047) => a11047 + 1
plot(f11047(11047))
f11048(a11048) => a11048 + 1
plot(f11048(11048))
f11049(a11049) => a11049 + 1
plot(f11049(11049))
f11050(a11050) => a11050 + 1
plot(f11050(11050))
f11051(a11051) => a11051 + 1
plot(f11051(11051))
f11052(a11052) => a11052 + 1
plot(f11052(11052))
f11053(a11053) => a11053 + 1
plot(f11053(11053))
f11054(a11054) => a11054 + 1
plot(f11054(11054))
f11055(a11055) => a11055 + 1
plot(f11055(11055))
f11056(a11056) => a11056 + 1
plot(f11056(11056))
f11057(a11057) => a11057 + 1
plot(f11057(11057))
f11058(a11058) => a11058 + 1
plot(f11058(11058))
f11059(a11059) => a11059 + 1
plot(f11059(11059))
f11060(a11060) => a11060 + 1
plot(f11060(11060))
f11061(a11061) => a11061 + 1
plot(f11061(11061))
f11062(a11062) => a11062 + 1
plot(f11062(11062))
f11063(a11063) => a11063 + 1
plot(f11063(11063))
f11064(a11064) => a11064 + 1
plot(f11064(11064))
f11065(a11065) => a11065 + 1
plot(f11065(11065))
f11066(a11066) => a11066 + 1
plot(f11066(11066))
f11067(a11067) => a11067 + 1
plot(f11067(11067))
f11068(a11068) => a11068 + 1
plot(f11068(11068))
f11069(a11069) => a11069 + 1
plot(f11069(11069))
f11070(a11070) => a11070 + 1
plot(f11070(11070))
f11071(a11071) => a11071 + 1
plot(f11071(11071))
f11072(a11072) => a11072 + 1
plot(f11072(11072))
f11073(a11073) => a11073 + 1
plot(f11073(11073))
f11074(a11074) => a11074 + 1
plot(f11074(11074))
f11075(a11075) => a11075 + 1
plot(f11075(11075))
f11076(a11076) => a11076 + 1
plot(f11076(11076))
f11077(a11077) => a11077 + 1
plot(f11077(11077))
f11078(a11078) => a11078 + 1
plot(f11078(11078))
f11079(a11079) => a11079 + 1
plot(f11079(11079))
f11080(a11080) => a11080 + 1
plot(f11080(11080))
f11081(a11081) => a11081 + 1
plot(f11081(11081))
f11082(a11082) => a11082 + 1
plot(f11082(11082))
f11083(a11083) => a11083 + 1
plot(f11083(11083))
f11084(a11084) => a11084 + 1
plot(f11084(11084))
f11085(a11085) => a11085 + 1
plot(f11085(11085))
f11086(a11086) => a11086 + 1
plot(f11086(11086))
f11087(a11087) => a11087 + 1
plot(f11087(11087))
f11088(a11088) => a11088 + 1
plot(f11088(11088))
f11089(a11089) => a11089 + 1
plot(f11089(11089))
f11090(a11090) => a11090 + 1
plot(f11090(11090))
f11091(a11091) => a11091 + 1
plot(f11091(11091))
f11092(a11092) => a11092 + 1
plot(f11092(11092))
f11093(a11093) => a11093 + 1
plot(f11093(11093))
f11094(a11094) => a11094 + 1
plot(f11094(11094))
f11095(a11095) => a11095 + 1
plot(f11095(11095))
f11096(a11096) => a11096 + 1
plot(f11096(11096))
f11097(a11097) => a11097 + 1
plot(f11097(11097))
f11098(a11098) => a11098 + 1
plot(f11098(11098))
f11099(a11099) => a11099 + 1
plot(f11099(11099))
f11100(a11100) => a11100 + 1
plot(f11100(11100))
f11101(a11101) => a11101 + 1
plot(f11101(11101))
f11102(a11102) => a11102 + 1
plot(f11102(11102))
f11103(a11103) => a11103 + 1
plot(f11103(11103))
f11104(a11104) => a11104 + 1
plot(f11104(11104))
f11105(a11105) => a11105 + 1
plot(f11105(11105))
f11106(a11106) => a11106 + 1
plot(f11106(11106))
f11107(a11107) => a11107 + 1
plot(f11107(11107))
f11108(a11108) => a11108 + 1
plot(f11108(11108))
f11109(a11109) => a11109 + 1
plot(f11109(11109))
f11110(a11110) => a11110 + 1
plot(f11110(11110))
f11111(a11111) => a11111 + 1
plot(f11111(11111))
f11112(a11112) => a11112 + 1
plot(f11112(11112))
f11113(a11113) => a11113 + 1
plot(f11113(11113))
f11114(a11114) => a11114 + 1
plot(f11114(11114))
f11115(a11115) => a11115 + 1
plot(f11115(11115))
f11116(a11116) => a11116 + 1
plot(f11116(11116))
f11117(a11117) => a11117 + 1
plot(f11117(11117))
f11118(a11118) => a11118 + 1
plot(f11118(11118))
f11119(a11119) => a11119 + 1
plot(f11119(11119))
f11120(a11120) => a11120 + 1
plot(f11120(11120))
f11121(a11121) => a11121 + 1
plot(f11121(11121))
f11122(a11122) => a11122 + 1
plot(f11122(11122))
f11123(a11123) => a11123 + 1
plot(f11123(11123))
f11124(a11124) => a11124 + 1
plot(f11124(11124))
f11125(a11125) => a11125 + 1
plot(f11125(11125))
f11126(a11126) => a11126 + 1
plot(f11126(11126))
f11127(a11127) => a11127 + 1
plot(f11127(11127))
f11128(a11128) => a11128 + 1
plot(f11128(11128))
f11129(a11129) => a11129 + 1
plot(f11129(11129))
f11130(a11130) => a11130 + 1
plot(f11130(11130))
f11131(a11131) => a11131 + 1
plot(f11131(11131))
f11132(a11132) => a11132 + 1
plot(f11132(11132))
f11133(a11133) => a11133 + 1
plot(f11133(11133))
f11134(a11134) => a11134 + 1
plot(f11134(11134))
f11135(a11135) => a11135 + 1
plot(f11135(11135))
f11136(a11136) => a11136 + 1
plot(f11136(11136))
f11137(a11137) => a11137 + 1
plot(f11137(11137))
f11138(a11138) => a11138 + 1
plot(f11138(11138))
f11139(a11139) => a11139 + 1
plot(f11139(11139))
f11140(a11140) => a11140 + 1
plot(f11140(11140))
f11141(a11141) => a11141 + 1
plot(f11141(11141))
f11142(a11142) => a11142 + 1
plot(f11142(11142))
f11143(a11143) => a11143 + 1
plot(f11143(11143))
f11144(a11144) => a11144 + 1
plot(f11144(11144))
f11145(a11145) => a11145 + 1
plot(f11145(11145))
f11146(a11146) => a11146 + 1
plot(f11146(11146))
f11147(a11147) => a11147 + 1
plot(f11147(11147))
f11148(a11148) => a11148 + 1
plot(f11148(11148))
f11149(a11149) => a11149 + 1
plot(f11149(11149))
f11150(a11150) => a11150 + 1
plot(f11150(11150))
f11151(a11151) => a11151 + 1
plot(f11151(11151))
f11152(a11152) => a11152 + 1
plot(f11152(11152))
f11153(a11153) => a11153 + 1
plot(f11153(11153))
f11154(a11154) => a11154 + 1
plot(f11154(11154))
f11155(a11155) => a11155 + 1
plot(f11155(11155))
f11156(a11156) => a11156 + 1
plot(f11156(11156))
f11157(a11157) => a11157 + 1
plot(f11157(11157))
f11158(a11158) => a11158 + 1
plot(f11158(11158))
f11159(a11159) => a11159 + 1
plot(f11159(11159))
f11160(a11160) => a11160 + 1
plot(f11160(11160))
f11161(a11161) => a11161 + 1
plot(f11161(11161))
f11162(a11162) => a11162 + 1
plot(f11162(11162))
f11163(a11163) => a11163 + 1
plot(f11163(11163))
f11164(a11164) => a11164 + 1
plot(f11164(11164))
f11165(a11165) => a11165 + 1
plot(f11165(11165))
f11166(a11166) => a11166 + 1
plot(f11166(11166))
f11167(a11167) => a11167 + 1
plot(f11167(11167))
f11168(a11168) => a11168 + 1
plot(f11168(11168))
f11169(a11169) => a11169 + 1
plot(f11169(11169))
f11170(a11170) => a11170 + 1
plot(f11170(11170))
f11171(a11171) => a11171 + 1
plot(f11171(11171))
f11172(a11172) => a11172 + 1
plot(f11172(11172))
f11173(a11173) => a11173 + 1
plot(f11173(11173))
f11174(a11174) => a11174 + 1
plot(f11174(11174))
f11175(a11175) => a11175 + 1
plot(f11175(11175))
f11176(a11176) => a11176 + 1
plot(f11176(11176))
f11177(a11177) => a11177 + 1
plot(f11177(11177))
f11178(a11178) => a11178 + 1
plot(f11178(11178))
f11179(a11179) => a11179 + 1
plot(f11179(11179))
f11180(a11180) => a11180 + 1
plot(f11180(11180))
f11181(a11181) => a11181 + 1
plot(f11181(11181))
f11182(a11182) => a11182 + 1
plot(f11182(11182))
f11183(a11183) => a11183 + 1
plot(f11183(11183))
f11184(a11184) => a11184 + 1
plot(f11184(11184))
f11185(a11185) => a11185 + 1
plot(f11185(11185))
f11186(a11186) => a11186 + 1
plot(f11186(11186))
f11187(a11187) => a11187 + 1
plot(f11187(11187))
f11188(a11188) => a11188 + 1
plot(f11188(11188))
f11189(a11189) => a11189 + 1
plot(f11189(11189))
f11190(a11190) => a11190 + 1
plot(f11190(11190))
f11191(a11191) => a11191 + 1
plot(f11191(11191))
f11192(a11192) => a11192 + 1
plot(f11192(11192))
f11193(a11193) => a11193 + 1
plot(f11193(11193))
f11194(a11194) => a11194 + 1
plot(f11194(11194))
f11195(a11195) => a11195 + 1
plot(f11195(11195))
f11196(a11196) => a11196 + 1
plot(f11196(11196))
f11197(a11197) => a11197 + 1
plot(f11197(11197))
f11198(a11198) => a11198 + 1
plot(f11198(11198))
f11199(a11199) => a11199 + 1
plot(f11199(11199))
f11200(a11200) => a11200 + 1
plot(f11200(11200))
f11201(a11201) => a11201 + 1
plot(f11201(11201))
f11202(a11202) => a11202 + 1
plot(f11202(11202))
f11203(a11203) => a11203 + 1
plot(f11203(11203))
f11204(a11204) => a11204 + 1
plot(f11204(11204))
f11205(a11205) => a11205 + 1
plot(f11205(11205))
f11206(a11206) => a11206 + 1
plot(f11206(11206))
f11207(a11207) => a11207 + 1
plot(f11207(11207))
f11208(a11208) => a11208 + 1
plot(f11208(11208))
f11209(a11209) => a11209 + 1
plot(f11209(11209))
f11210(a11210) => a11210 + 1
plot(f11210(11210))
f11211(a11211) => a11211 + 1
plot(f11211(11211))
f11212(a11212) => a11212 + 1
plot(f11212(11212))
f11213(a11213) => a11213 + 1
plot(f11213(11213))
f11214(a11214) => a11214 + 1
plot(f11214(11214))
f11215(a11215) => a11215 + 1
plot(f11215(11215))
f11216(a11216) => a11216 + 1
plot(f11216(11216))
f11217(a11217) => a11217 + 1
plot(f11217(11217))
f11218(a11218) => a11218 + 1
plot(f11218(11218))
f11219(a11219) => a11219 + 1
plot(f11219(11219))
f11220(a11220) => a11220 + 1
plot(f11220(11220))
f11221(a11221) => a11221 + 1
plot(f11221(11221))
f11222(a11222) => a11222 + 1
plot(f11222(11222))
f11223(a11223) => a11223 + 1
plot(f11223(11223))
f11224(a11224) => a11224 + 1
plot(f11224(11224))
f11225(a11225) => a11225 + 1
plot(f11225(11225))
f11226(a11226) => a11226 + 1
plot(f11226(11226))
f11227(a11227) => a11227 + 1
plot(f11227(11227))
f11228(a11228) => a11228 + 1
plot(f11228(11228))
f11229(a11229) => a11229 + 1
plot(f11229(11229))
f11230(a11230) => a11230 + 1
plot(f11230(11230))
f11231(a11231) => a11231 + 1
plot(f11231(11231))
f11232(a11232) => a11232 + 1
plot(f11232(11232))
f11233(a11233) => a11233 + 1
plot(f11233(11233))
f11234(a11234) => a11234 + 1
plot(f11234(11234))
f11235(a11235) => a11235 + 1
plot(f11235(11235))
f11236(a11236) => a11236 + 1
plot(f11236(11236))
f11237(a11237) => a11237 + 1
plot(f11237(11237))
f11238(a11238) => a11238 + 1
plot(f11238(11238))
f11239(a11239) => a11239 + 1
plot(f11239(11239))
f11240(a11240) => a11240 + 1
plot(f11240(11240))
f11241(a11241) => a11241 + 1
plot(f11241(11241))
f11242(a11242) => a11242 + 1
plot(f11242(11242))
f11243(a11243) => a11243 + 1
plot(f11243(11243))
f11244(a11244) => a11244 + 1
plot(f11244(11244))
f11245(a11245) => a11245 + 1
plot(f11245(11245))
f11246(a11246) => a11246 + 1
plot(f11246(11246))
f11247(a11247) => a11247 + 1
plot(f11247(11247))
f11248(a11248) => a11248 + 1
plot(f11248(11248))
f11249(a11249) => a11249 + 1
plot(f11249(11249))
f11250(a11250) => a11250 + 1
plot(f11250(11250))
f11251(a11251) => a11251 + 1
plot(f11251(11251))
f11252(a11252) => a11252 + 1
plot(f11252(11252))
f11253(a11253) => a11253 + 1
plot(f11253(11253))
f11254(a11254) => a11254 + 1
plot(f11254(11254))
f11255(a11255) => a11255 + 1
plot(f11255(11255))
f11256(a11256) => a11256 + 1
plot(f11256(11256))
f11257(a11257) => a11257 + 1
plot(f11257(11257))
f11258(a11258) => a11258 + 1
plot(f11258(11258))
f11259(a11259) => a11259 + 1
plot(f11259(11259))
f11260(a11260) => a11260 + 1
plot(f11260(11260))
f11261(a11261) => a11261 + 1
plot(f11261(11261))
f11262(a11262) => a11262 + 1
plot(f11262(11262))
f11263(a11263) => a11263 + 1
plot(f11263(11263))
f11264(a11264) => a11264 + 1
plot(f11264(11264))
f11265(a11265) => a11265 + 1
plot(f11265(11265))
f11266(a11266) => a11266 + 1
plot(f11266(11266))
f11267(a11267) => a11267 + 1
plot(f11267(11267))
f11268(a11268) => a11268 + 1
plot(f11268(11268))
f11269(a11269) => a11269 + 1
plot(f11269(11269))
f11270(a11270) => a11270 + 1
plot(f11270(11270))
f11271(a11271) => a11271 + 1
plot(f11271(11271))
f11272(a11272) => a11272 + 1
plot(f11272(11272))
f11273(a11273) => a11273 + 1
plot(f11273(11273))
f11274(a11274) => a11274 + 1
plot(f11274(11274))
f11275(a11275) => a11275 + 1
plot(f11275(11275))
f11276(a11276) => a11276 + 1
plot(f11276(11276))
f11277(a11277) => a11277 + 1
plot(f11277(11277))
f11278(a11278) => a11278 + 1
plot(f11278(11278))
f11279(a11279) => a11279 + 1
plot(f11279(11279))
f11280(a11280) => a11280 + 1
plot(f11280(11280))
f11281(a11281) => a11281 + 1
plot(f11281(11281))
f11282(a11282) => a11282 + 1
plot(f11282(11282))
f11283(a11283) => a11283 + 1
plot(f11283(11283))
f11284(a11284) => a11284 + 1
plot(f11284(11284))
f11285(a11285) => a11285 + 1
plot(f11285(11285))
f11286(a11286) => a11286 + 1
plot(f11286(11286))
f11287(a11287) => a11287 + 1
plot(f11287(11287))
f11288(a11288) => a11288 + 1
plot(f11288(11288))
f11289(a11289) => a11289 + 1
plot(f11289(11289))
f11290(a11290) => a11290 + 1
plot(f11290(11290))
f11291(a11291) => a11291 + 1
plot(f11291(11291))
f11292(a11292) => a11292 + 1
plot(f11292(11292))
f11293(a11293) => a11293 + 1
plot(f11293(11293))
f11294(a11294) => a11294 + 1
plot(f11294(11294))
f11295(a11295) => a11295 + 1
plot(f11295(11295))
f11296(a11296) => a11296 + 1
plot(f11296(11296))
f11297(a11297) => a11297 + 1
plot(f11297(11297))
f11298(a11298) => a11298 + 1
plot(f11298(11298))
f11299(a11299) => a11299 + 1
plot(f11299(11299))
f11300(a11300) => a11300 + 1
plot(f11300(11300))
f11301(a11301) => a11301 + 1
plot(f11301(11301))
f11302(a11302) => a11302 + 1
plot(f11302(11302))
f11303(a11303) => a11303 + 1
plot(f11303(11303))
f11304(a11304) => a11304 + 1
plot(f11304(11304))
f11305(a11305) => a11305 + 1
plot(f11305(11305))
f11306(a11306) => a11306 + 1
plot(f11306(11306))
f11307(a11307) => a11307 + 1
plot(f11307(11307))
f11308(a11308) => a11308 + 1
plot(f11308(11308))
f11309(a11309) => a11309 + 1
plot(f11309(11309))
f11310(a11310) => a11310 + 1
plot(f11310(11310))
f11311(a11311) => a11311 + 1
plot(f11311(11311))
f11312(a11312) => a11312 + 1
plot(f11312(11312))
f11313(a11313) => a11313 + 1
plot(f11313(11313))
f11314(a11314) => a11314 + 1
plot(f11314(11314))
f11315(a11315) => a11315 + 1
plot(f11315(11315))
f11316(a11316) => a11316 + 1
plot(f11316(11316))
f11317(a11317) => a11317 + 1
plot(f11317(11317))
f11318(a11318) => a11318 + 1
plot(f11318(11318))
f11319(a11319) => a11319 + 1
plot(f11319(11319))
f11320(a11320) => a11320 + 1
plot(f11320(11320))
f11321(a11321) => a11321 + 1
plot(f11321(11321))
f11322(a11322) => a11322 + 1
plot(f11322(11322))
f11323(a11323) => a11323 + 1
plot(f11323(11323))
f11324(a11324) => a11324 + 1
plot(f11324(11324))
f11325(a11325) => a11325 + 1
plot(f11325(11325))
f11326(a11326) => a11326 + 1
plot(f11326(11326))
f11327(a11327) => a11327 + 1
plot(f11327(11327))
f11328(a11328) => a11328 + 1
plot(f11328(11328))
f11329(a11329) => a11329 + 1
plot(f11329(11329))
f11330(a11330) => a11330 + 1
plot(f11330(11330))
f11331(a11331) => a11331 + 1
plot(f11331(11331))
f11332(a11332) => a11332 + 1
plot(f11332(11332))
f11333(a11333) => a11333 + 1
plot(f11333(11333))
f11334(a11334) => a11334 + 1
plot(f11334(11334))
f11335(a11335) => a11335 + 1
plot(f11335(11335))
f11336(a11336) => a11336 + 1
plot(f11336(11336))
f11337(a11337) => a11337 + 1
plot(f11337(11337))
f11338(a11338) => a11338 + 1
plot(f11338(11338))
f11339(a11339) => a11339 + 1
plot(f11339(11339))
f11340(a11340) => a11340 + 1
plot(f11340(11340))
f11341(a11341) => a11341 + 1
plot(f11341(11341))
f11342(a11342) => a11342 + 1
plot(f11342(11342))
f11343(a11343) => a11343 + 1
plot(f11343(11343))
f11344(a11344) => a11344 + 1
plot(f11344(11344))
f11345(a11345) => a11345 + 1
plot(f11345(11345))
f11346(a11346) => a11346 + 1
plot(f11346(11346))
f11347(a11347) => a11347 + 1
plot(f11347(11347))
f11348(a11348) => a11348 + 1
plot(f11348(11348))
f11349(a11349) => a11349 + 1
plot(f11349(11349))
f11350(a11350) => a11350 + 1
plot(f11350(11350))
f11351(a11351) => a11351 + 1
plot(f11351(11351))
f11352(a11352) => a11352 + 1
plot(f11352(11352))
f11353(a11353) => a11353 + 1
plot(f11353(11353))
f11354(a11354) => a11354 + 1
plot(f11354(11354))
f11355(a11355) => a11355 + 1
plot(f11355(11355))
f11356(a11356) => a11356 + 1
plot(f11356(11356))
f11357(a11357) => a11357 + 1
plot(f11357(11357))
f11358(a11358) => a11358 + 1
plot(f11358(11358))
f11359(a11359) => a11359 + 1
plot(f11359(11359))
f11360(a11360) => a11360 + 1
plot(f11360(11360))
f11361(a11361) => a11361 + 1
plot(f11361(11361))
f11362(a11362) => a11362 + 1
plot(f11362(11362))
f11363(a11363) => a11363 + 1
plot(f11363(11363))
f11364(a11364) => a11364 + 1
plot(f11364(11364))
f11365(a11365) => a11365 + 1
plot(f11365(11365))
f11366(a11366) => a11366 + 1
plot(f11366(11366))
f11367(a11367) => a11367 + 1
plot(f11367(11367))
f11368(a11368) => a11368 + 1
plot(f11368(11368))
f11369(a11369) => a11369 + 1
plot(f11369(11369))
f11370(a11370) => a11370 + 1
plot(f11370(11370))
f11371(a11371) => a11371 + 1
plot(f11371(11371))
f11372(a11372) => a11372 + 1
plot(f11372(11372))
f11373(a11373) => a11373 + 1
plot(f11373(11373))
f11374(a11374) => a11374 + 1
plot(f11374(11374))
f11375(a11375) => a11375 + 1
plot(f11375(11375))
f11376(a11376) => a11376 + 1
plot(f11376(11376))
f11377(a11377) => a11377 + 1
plot(f11377(11377))
f11378(a11378) => a11378 + 1
plot(f11378(11378))
f11379(a11379) => a11379 + 1
plot(f11379(11379))
f11380(a11380) => a11380 + 1
plot(f11380(11380))
f11381(a11381) => a11381 + 1
plot(f11381(11381))
f11382(a11382) => a11382 + 1
plot(f11382(11382))
f11383(a11383) => a11383 + 1
plot(f11383(11383))
f11384(a11384) => a11384 + 1
plot(f11384(11384))
f11385(a11385) => a11385 + 1
plot(f11385(11385))
f11386(a11386) => a11386 + 1
plot(f11386(11386))
f11387(a11387) => a11387 + 1
plot(f11387(11387))
f11388(a11388) => a11388 + 1
plot(f11388(11388))
f11389(a11389) => a11389 + 1
plot(f11389(11389))
f11390(a11390) => a11390 + 1
plot(f11390(11390))
f11391(a11391) => a11391 + 1
plot(f11391(11391))
f11392(a11392) => a11392 + 1
plot(f11392(11392))
f11393(a11393) => a11393 + 1
plot(f11393(11393))
f11394(a11394) => a11394 + 1
plot(f11394(11394))
f11395(a11395) => a11395 + 1
plot(f11395(11395))
f11396(a11396) => a11396 + 1
plot(f11396(11396))
f11397(a11397) => a11397 + 1
plot(f11397(11397))
f11398(a11398) => a11398 + 1
plot(f11398(11398))
f11399(a11399) => a11399 + 1
plot(f11399(11399))
f11400(a11400) => a11400 + 1
plot(f11400(11400))
f11401(a11401) => a11401 + 1
plot(f11401(11401))
f11402(a11402) => a11402 + 1
plot(f11402(11402))
f11403(a11403) => a11403 + 1
plot(f11403(11403))
f11404(a11404) => a11404 + 1
plot(f11404(11404))
f11405(a11405) => a11405 + 1
plot(f11405(11405))
f11406(a11406) => a11406 + 1
plot(f11406(11406))
f11407(a11407) => a11407 + 1
plot(f11407(11407))
f11408(a11408) => a11408 + 1
plot(f11408(11408))
f11409(a11409) => a11409 + 1
plot(f11409(11409))
f11410(a11410) => a11410 + 1
plot(f11410(11410))
f11411(a11411) => a11411 + 1
plot(f11411(11411))
f11412(a11412) => a11412 + 1
plot(f11412(11412))
f11413(a11413) => a11413 + 1
plot(f11413(11413))
f11414(a11414) => a11414 + 1
plot(f11414(11414))
f11415(a11415) => a11415 + 1
plot(f11415(11415))
f11416(a11416) => a11416 + 1
plot(f11416(11416))
f11417(a11417) => a11417 + 1
plot(f11417(11417))
f11418(a11418) => a11418 + 1
plot(f11418(11418))
f11419(a11419) => a11419 + 1
plot(f11419(11419))
f11420(a11420) => a11420 + 1
plot(f11420(11420))
f11421(a11421) => a11421 + 1
plot(f11421(11421))
f11422(a11422) => a11422 + 1
plot(f11422(11422))
f11423(a11423) => a11423 + 1
plot(f11423(11423))
f11424(a11424) => a11424 + 1
plot(f11424(11424))
f11425(a11425) => a11425 + 1
plot(f11425(11425))
f11426(a11426) => a11426 + 1
plot(f11426(11426))
f11427(a11427) => a11427 + 1
plot(f11427(11427))
f11428(a11428) => a11428 + 1
plot(f11428(11428))
f11429(a11429) => a11429 + 1
plot(f11429(11429))
f11430(a11430) => a11430 + 1
plot(f11430(11430))
f11431(a11431) => a11431 + 1
plot(f11431(11431))
f11432(a11432) => a11432 + 1
plot(f11432(11432))
f11433(a11433) => a11433 + 1
plot(f11433(11433))
f11434(a11434) => a11434 + 1
plot(f11434(11434))
f11435(a11435) => a11435 + 1
plot(f11435(11435))
f11436(a11436) => a11436 + 1
plot(f11436(11436))
f11437(a11437) => a11437 + 1
plot(f11437(11437))
f11438(a11438) => a11438 + 1
plot(f11438(11438))
f11439(a11439) => a11439 + 1
plot(f11439(11439))
f11440(a11440) => a11440 + 1
plot(f11440(11440))
f11441(a11441) => a11441 + 1
plot(f11441(11441))
f11442(a11442) => a11442 + 1
plot(f11442(11442))
f11443(a11443) => a11443 + 1
plot(f11443(11443))
f11444(a11444) => a11444 + 1
plot(f11444(11444))
f11445(a11445) => a11445 + 1
plot(f11445(11445))
f11446(a11446) => a11446 + 1
plot(f11446(11446))
f11447(a11447) => a11447 + 1
plot(f11447(11447))
f11448(a11448) => a11448 + 1
plot(f11448(11448))
f11449(a11449) => a11449 + 1
plot(f11449(11449))
f11450(a11450) => a11450 + 1
plot(f11450(11450))
f11451(a11451) => a11451 + 1
plot(f11451(11451))
f11452(a11452) => a11452 + 1
plot(f11452(11452))
f11453(a11453) => a11453 + 1
plot(f11453(11453))
f11454(a11454) => a11454 + 1
plot(f11454(11454))
f11455(a11455) => a11455 + 1
plot(f11455(11455))
f11456(a11456) => a11456 + 1
plot(f11456(11456))
f11457(a11457) => a11457 + 1
plot(f11457(11457))
f11458(a11458) => a11458 + 1
plot(f11458(11458))
f11459(a11459) => a11459 + 1
plot(f11459(11459))
f11460(a11460) => a11460 + 1
plot(f11460(11460))
f11461(a11461) => a11461 + 1
plot(f11461(11461))
f11462(a11462) => a11462 + 1
plot(f11462(11462))
f11463(a11463) => a11463 + 1
plot(f11463(11463))
f11464(a11464) => a11464 + 1
plot(f11464(11464))
f11465(a11465) => a11465 + 1
plot(f11465(11465))
f11466(a11466) => a11466 + 1
plot(f11466(11466))
f11467(a11467) => a11467 + 1
plot(f11467(11467))
f11468(a11468) => a11468 + 1
plot(f11468(11468))
f11469(a11469) => a11469 + 1
plot(f11469(11469))
f11470(a11470) => a11470 + 1
plot(f11470(11470))
f11471(a11471) => a11471 + 1
plot(f11471(11471))
f11472(a11472) => a11472 + 1
plot(f11472(11472))
f11473(a11473) => a11473 + 1
plot(f11473(11473))
f11474(a11474) => a11474 + 1
plot(f11474(11474))
f11475(a11475) => a11475 + 1
plot(f11475(11475))
f11476(a11476) => a11476 + 1
plot(f11476(11476))
f11477(a11477) => a11477 + 1
plot(f11477(11477))
f11478(a11478) => a11478 + 1
plot(f11478(11478))
f11479(a11479) => a11479 + 1
plot(f11479(11479))
f11480(a11480) => a11480 + 1
plot(f11480(11480))
f11481(a11481) => a11481 + 1
plot(f11481(11481))
f11482(a11482) => a11482 + 1
plot(f11482(11482))
f11483(a11483) => a11483 + 1
plot(f11483(11483))
f11484(a11484) => a11484 + 1
plot(f11484(11484))
f11485(a11485) => a11485 + 1
plot(f11485(11485))
f11486(a11486) => a11486 + 1
plot(f11486(11486))
f11487(a11487) => a11487 + 1
plot(f11487(11487))
f11488(a11488) => a11488 + 1
plot(f11488(11488))
f11489(a11489) => a11489 + 1
plot(f11489(11489))
f11490(a11490) => a11490 + 1
plot(f11490(11490))
f11491(a11491) => a11491 + 1
plot(f11491(11491))
f11492(a11492) => a11492 + 1
plot(f11492(11492))
f11493(a11493) => a11493 + 1
plot(f11493(11493))
f11494(a11494) => a11494 + 1
plot(f11494(11494))
f11495(a11495) => a11495 + 1
plot(f11495(11495))
f11496(a11496) => a11496 + 1
plot(f11496(11496))
f11497(a11497) => a11497 + 1
plot(f11497(11497))
f11498(a11498) => a11498 + 1
plot(f11498(11498))
f11499(a11499) => a11499 + 1
plot(f11499(11499))
f11500(a11500) => a11500 + 1
plot(f11500(11500))
f11501(a11501) => a11501 + 1
plot(f11501(11501))
f11502(a11502) => a11502 + 1
plot(f11502(11502))
f11503(a11503) => a11503 + 1
plot(f11503(11503))
f11504(a11504) => a11504 + 1
plot(f11504(11504))
f11505(a11505) => a11505 + 1
plot(f11505(11505))
f11506(a11506) => a11506 + 1
plot(f11506(11506))
f11507(a11507) => a11507 + 1
plot(f11507(11507))
f11508(a11508) => a11508 + 1
plot(f11508(11508))
f11509(a11509) => a11509 + 1
plot(f11509(11509))
f11510(a11510) => a11510 + 1
plot(f11510(11510))
f11511(a11511) => a11511 + 1
plot(f11511(11511))
f11512(a11512) => a11512 + 1
plot(f11512(11512))
f11513(a11513) => a11513 + 1
plot(f11513(11513))
f11514(a11514) => a11514 + 1
plot(f11514(11514))
f11515(a11515) => a11515 + 1
plot(f11515(11515))
f11516(a11516) => a11516 + 1
plot(f11516(11516))
f11517(a11517) => a11517 + 1
plot(f11517(11517))
f11518(a11518) => a11518 + 1
plot(f11518(11518))
f11519(a11519) => a11519 + 1
plot(f11519(11519))
f11520(a11520) => a11520 + 1
plot(f11520(11520))
f11521(a11521) => a11521 + 1
plot(f11521(11521))
f11522(a11522) => a11522 + 1
plot(f11522(11522))
f11523(a11523) => a11523 + 1
plot(f11523(11523))
f11524(a11524) => a11524 + 1
plot(f11524(11524))
f11525(a11525) => a11525 + 1
plot(f11525(11525))
f11526(a11526) => a11526 + 1
plot(f11526(11526))
f11527(a11527) => a11527 + 1
plot(f11527(11527))
f11528(a11528) => a11528 + 1
plot(f11528(11528))
f11529(a11529) => a11529 + 1
plot(f11529(11529))
f11530(a11530) => a11530 + 1
plot(f11530(11530))
f11531(a11531) => a11531 + 1
plot(f11531(11531))
f11532(a11532) => a11532 + 1
plot(f11532(11532))
f11533(a11533) => a11533 + 1
plot(f11533(11533))
f11534(a11534) => a11534 + 1
plot(f11534(11534))
f11535(a11535) => a11535 + 1
plot(f11535(11535))
f11536(a11536) => a11536 + 1
plot(f11536(11536))
f11537(a11537) => a11537 + 1
plot(f11537(11537))
f11538(a11538) => a11538 + 1
plot(f11538(11538))
f11539(a11539) => a11539 + 1
plot(f11539(11539))
f11540(a11540) => a11540 + 1
plot(f11540(11540))
f11541(a11541) => a11541 + 1
plot(f11541(11541))
f11542(a11542) => a11542 + 1
plot(f11542(11542))
f11543(a11543) => a11543 + 1
plot(f11543(11543))
f11544(a11544) => a11544 + 1
plot(f11544(11544))
f11545(a11545) => a11545 + 1
plot(f11545(11545))
f11546(a11546) => a11546 + 1
plot(f11546(11546))
f11547(a11547) => a11547 + 1
plot(f11547(11547))
f11548(a11548) => a11548 + 1
plot(f11548(11548))
f11549(a11549) => a11549 + 1
plot(f11549(11549))
f11550(a11550) => a11550 + 1
plot(f11550(11550))
f11551(a11551) => a11551 + 1
plot(f11551(11551))
f11552(a11552) => a11552 + 1
plot(f11552(11552))
f11553(a11553) => a11553 + 1
plot(f11553(11553))
f11554(a11554) => a11554 + 1
plot(f11554(11554))
f11555(a11555) => a11555 + 1
plot(f11555(11555))
f11556(a11556) => a11556 + 1
plot(f11556(11556))
f11557(a11557) => a11557 + 1
plot(f11557(11557))
f11558(a11558) => a11558 + 1
plot(f11558(11558))
f11559(a11559) => a11559 + 1
plot(f11559(11559))
f11560(a11560) => a11560 + 1
plot(f11560(11560))
f11561(a11561) => a11561 + 1
plot(f11561(11561))
f11562(a11562) => a11562 + 1
plot(f11562(11562))
f11563(a11563) => a11563 + 1
plot(f11563(11563))
f11564(a11564) => a11564 + 1
plot(f11564(11564))
f11565(a11565) => a11565 + 1
plot(f11565(11565))
f11566(a11566) => a11566 + 1
plot(f11566(11566))
f11567(a11567) => a11567 + 1
plot(f11567(11567))
f11568(a11568) => a11568 + 1
plot(f11568(11568))
f11569(a11569) => a11569 + 1
plot(f11569(11569))
f11570(a11570) => a11570 + 1
plot(f11570(11570))
f11571(a11571) => a11571 + 1
plot(f11571(11571))
f11572(a11572) => a11572 + 1
plot(f11572(11572))
f11573(a11573) => a11573 + 1
plot(f11573(11573))
f11574(a11574) => a11574 + 1
plot(f11574(11574))
f11575(a11575) => a11575 + 1
plot(f11575(11575))
f11576(a11576) => a11576 + 1
plot(f11576(11576))
f11577(a11577) => a11577 + 1
plot(f11577(11577))
f11578(a11578) => a11578 + 1
plot(f11578(11578))
f11579(a11579) => a11579 + 1
plot(f11579(11579))
f11580(a11580) => a11580 + 1
plot(f11580(11580))
f11581(a11581) => a11581 + 1
plot(f11581(11581))
f11582(a11582) => a11582 + 1
plot(f11582(11582))
f11583(a11583) => a11583 + 1
plot(f11583(11583))
f11584(a11584) => a11584 + 1
plot(f11584(11584))
f11585(a11585) => a11585 + 1
plot(f11585(11585))
f11586(a11586) => a11586 + 1
plot(f11586(11586))
f11587(a11587) => a11587 + 1
plot(f11587(11587))
f11588(a11588) => a11588 + 1
plot(f11588(11588))
f11589(a11589) => a11589 + 1
plot(f11589(11589))
f11590(a11590) => a11590 + 1
plot(f11590(11590))
f11591(a11591) => a11591 + 1
plot(f11591(11591))
f11592(a11592) => a11592 + 1
plot(f11592(11592))
f11593(a11593) => a11593 + 1
plot(f11593(11593))
f11594(a11594) => a11594 + 1
plot(f11594(11594))
f11595(a11595) => a11595 + 1
plot(f11595(11595))
f11596(a11596) => a11596 + 1
plot(f11596(11596))
f11597(a11597) => a11597 + 1
plot(f11597(11597))
f11598(a11598) => a11598 + 1
plot(f11598(11598))
f11599(a11599) => a11599 + 1
plot(f11599(11599))
f11600(a11600) => a11600 + 1
plot(f11600(11600))
f11601(a11601) => a11601 + 1
plot(f11601(11601))
f11602(a11602) => a11602 + 1
plot(f11602(11602))
f11603(a11603) => a11603 + 1
plot(f11603(11603))
f11604(a11604) => a11604 + 1
plot(f11604(11604))
f11605(a11605) => a11605 + 1
plot(f11605(11605))
f11606(a11606) => a11606 + 1
plot(f11606(11606))
f11607(a11607) => a11607 + 1
plot(f11607(11607))
f11608(a11608) => a11608 + 1
plot(f11608(11608))
f11609(a11609) => a11609 + 1
plot(f11609(11609))
f11610(a11610) => a11610 + 1
plot(f11610(11610))
f11611(a11611) => a11611 + 1
plot(f11611(11611))
f11612(a11612) => a11612 + 1
plot(f11612(11612))
f11613(a11613) => a11613 + 1
plot(f11613(11613))
f11614(a11614) => a11614 + 1
plot(f11614(11614))
f11615(a11615) => a11615 + 1
plot(f11615(11615))
f11616(a11616) => a11616 + 1
plot(f11616(11616))
f11617(a11617) => a11617 + 1
plot(f11617(11617))
f11618(a11618) => a11618 + 1
plot(f11618(11618))
f11619(a11619) => a11619 + 1
plot(f11619(11619))
f11620(a11620) => a11620 + 1
plot(f11620(11620))
f11621(a11621) => a11621 + 1
plot(f11621(11621))
f11622(a11622) => a11622 + 1
plot(f11622(11622))
f11623(a11623) => a11623 + 1
plot(f11623(11623))
f11624(a11624) => a11624 + 1
plot(f11624(11624))
f11625(a11625) => a11625 + 1
plot(f11625(11625))
f11626(a11626) => a11626 + 1
plot(f11626(11626))
f11627(a11627) => a11627 + 1
plot(f11627(11627))
f11628(a11628) => a11628 + 1
plot(f11628(11628))
f11629(a11629) => a11629 + 1
plot(f11629(11629))
f11630(a11630) => a11630 + 1
plot(f11630(11630))
f11631(a11631) => a11631 + 1
plot(f11631(11631))
f11632(a11632) => a11632 + 1
plot(f11632(11632))
f11633(a11633) => a11633 + 1
plot(f11633(11633))
f11634(a11634) => a11634 + 1
plot(f11634(11634))
f11635(a11635) => a11635 + 1
plot(f11635(11635))
f11636(a11636) => a11636 + 1
plot(f11636(11636))
f11637(a11637) => a11637 + 1
plot(f11637(11637))
f11638(a11638) => a11638 + 1
plot(f11638(11638))
f11639(a11639) => a11639 + 1
plot(f11639(11639))
f11640(a11640) => a11640 + 1
plot(f11640(11640))
f11641(a11641) => a11641 + 1
plot(f11641(11641))
f11642(a11642) => a11642 + 1
plot(f11642(11642))
f11643(a11643) => a11643 + 1
plot(f11643(11643))
f11644(a11644) => a11644 + 1
plot(f11644(11644))
f11645(a11645) => a11645 + 1
plot(f11645(11645))
f11646(a11646) => a11646 + 1
plot(f11646(11646))
f11647(a11647) => a11647 + 1
plot(f11647(11647))
f11648(a11648) => a11648 + 1
plot(f11648(11648))
f11649(a11649) => a11649 + 1
plot(f11649(11649))
f11650(a11650) => a11650 + 1
plot(f11650(11650))
f11651(a11651) => a11651 + 1
plot(f11651(11651))
f11652(a11652) => a11652 + 1
plot(f11652(11652))
f11653(a11653) => a11653 + 1
plot(f11653(11653))
f11654(a11654) => a11654 + 1
plot(f11654(11654))
f11655(a11655) => a11655 + 1
plot(f11655(11655))
f11656(a11656) => a11656 + 1
plot(f11656(11656))
f11657(a11657) => a11657 + 1
plot(f11657(11657))
f11658(a11658) => a11658 + 1
plot(f11658(11658))
f11659(a11659) => a11659 + 1
plot(f11659(11659))
f11660(a11660) => a11660 + 1
plot(f11660(11660))
f11661(a11661) => a11661 + 1
plot(f11661(11661))
f11662(a11662) => a11662 + 1
plot(f11662(11662))
f11663(a11663) => a11663 + 1
plot(f11663(11663))
f11664(a11664) => a11664 + 1
plot(f11664(11664))
f11665(a11665) => a11665 + 1
plot(f11665(11665))
f11666(a11666) => a11666 + 1
plot(f11666(11666))
f11667(a11667) => a11667 + 1
plot(f11667(11667))
f11668(a11668) => a11668 + 1
plot(f11668(11668))
f11669(a11669) => a11669 + 1
plot(f11669(11669))
f11670(a11670) => a11670 + 1
plot(f11670(11670))
f11671(a11671) => a11671 + 1
plot(f11671(11671))
f11672(a11672) => a11672 + 1
plot(f11672(11672))
f11673(a11673) => a11673 + 1
plot(f11673(11673))
f11674(a11674) => a11674 + 1
plot(f11674(11674))
f11675(a11675) => a11675 + 1
plot(f11675(11675))
f11676(a11676) => a11676 + 1
plot(f11676(11676))
f11677(a11677) => a11677 + 1
plot(f11677(11677))
f11678(a11678) => a11678 + 1
plot(f11678(11678))
f11679(a11679) => a11679 + 1
plot(f11679(11679))
f11680(a11680) => a11680 + 1
plot(f11680(11680))
f11681(a11681) => a11681 + 1
plot(f11681(11681))
f11682(a11682) => a11682 + 1
plot(f11682(11682))
f11683(a11683) => a11683 + 1
plot(f11683(11683))
f11684(a11684) => a11684 + 1
plot(f11684(11684))
f11685(a11685) => a11685 + 1
plot(f11685(11685))
f11686(a11686) => a11686 + 1
plot(f11686(11686))
f11687(a11687) => a11687 + 1
plot(f11687(11687))
f11688(a11688) => a11688 + 1
plot(f11688(11688))
f11689(a11689) => a11689 + 1
plot(f11689(11689))
f11690(a11690) => a11690 + 1
plot(f11690(11690))
f11691(a11691) => a11691 + 1
plot(f11691(11691))
f11692(a11692) => a11692 + 1
plot(f11692(11692))
f11693(a11693) => a11693 + 1
plot(f11693(11693))
f11694(a11694) => a11694 + 1
plot(f11694(11694))
f11695(a11695) => a11695 + 1
plot(f11695(11695))
f11696(a11696) => a11696 + 1
plot(f11696(11696))
f11697(a11697) => a11697 + 1
plot(f11697(11697))
f11698(a11698) => a11698 + 1
plot(f11698(11698))
f11699(a11699) => a11699 + 1
plot(f11699(11699))
f11700(a11700) => a11700 + 1
plot(f11700(11700))
f11701(a11701) => a11701 + 1
plot(f11701(11701))
f11702(a11702) => a11702 + 1
plot(f11702(11702))
f11703(a11703) => a11703 + 1
plot(f11703(11703))
f11704(a11704) => a11704 + 1
plot(f11704(11704))
f11705(a11705) => a11705 + 1
plot(f11705(11705))
f11706(a11706) => a11706 + 1
plot(f11706(11706))
f11707(a11707) => a11707 + 1
plot(f11707(11707))
f11708(a11708) => a11708 + 1
plot(f11708(11708))
f11709(a11709) => a11709 + 1
plot(f11709(11709))
f11710(a11710) => a11710 + 1
plot(f11710(11710))
f11711(a11711) => a11711 + 1
plot(f11711(11711))
f11712(a11712) => a11712 + 1
plot(f11712(11712))
f11713(a11713) => a11713 + 1
plot(f11713(11713))
f11714(a11714) => a11714 + 1
plot(f11714(11714))
f11715(a11715) => a11715 + 1
plot(f11715(11715))
f11716(a11716) => a11716 + 1
plot(f11716(11716))
f11717(a11717) => a11717 + 1
plot(f11717(11717))
f11718(a11718) => a11718 + 1
plot(f11718(11718))
f11719(a11719) => a11719 + 1
plot(f11719(11719))
f11720(a11720) => a11720 + 1
plot(f11720(11720))
f11721(a11721) => a11721 + 1
plot(f11721(11721))
f11722(a11722) => a11722 + 1
plot(f11722(11722))
f11723(a11723) => a11723 + 1
plot(f11723(11723))
f11724(a11724) => a11724 + 1
plot(f11724(11724))
f11725(a11725) => a11725 + 1
plot(f11725(11725))
f11726(a11726) => a11726 + 1
plot(f11726(11726))
f11727(a11727) => a11727 + 1
plot(f11727(11727))
f11728(a11728) => a11728 + 1
plot(f11728(11728))
f11729(a11729) => a11729 + 1
plot(f11729(11729))
f11730(a11730) => a11730 + 1
plot(f11730(11730))
f11731(a11731) => a11731 + 1
plot(f11731(11731))
f11732(a11732) => a11732 + 1
plot(f11732(11732))
f11733(a11733) => a11733 + 1
plot(f11733(11733))
f11734(a11734) => a11734 + 1
plot(f11734(11734))
f11735(a11735) => a11735 + 1
plot(f11735(11735))
f11736(a11736) => a11736 + 1
plot(f11736(11736))
f11737(a11737) => a11737 + 1
plot(f11737(11737))
f11738(a11738) => a11738 + 1
plot(f11738(11738))
f11739(a11739) => a11739 + 1
plot(f11739(11739))
f11740(a11740) => a11740 + 1
plot(f11740(11740))
f11741(a11741) => a11741 + 1
plot(f11741(11741))
f11742(a11742) => a11742 + 1
plot(f11742(11742))
f11743(a11743) => a11743 + 1
plot(f11743(11743))
f11744(a11744) => a11744 + 1
plot(f11744(11744))
f11745(a11745) => a11745 + 1
plot(f11745(11745))
f11746(a11746) => a11746 + 1
plot(f11746(11746))
f11747(a11747) => a11747 + 1
plot(f11747(11747))
f11748(a11748) => a11748 + 1
plot(f11748(11748))
f11749(a11749) => a11749 + 1
plot(f11749(11749))
f11750(a11750) => a11750 + 1
plot(f11750(11750))
f11751(a11751) => a11751 + 1
plot(f11751(11751))
f11752(a11752) => a11752 + 1
plot(f11752(11752))
f11753(a11753) => a11753 + 1
plot(f11753(11753))
f11754(a11754) => a11754 + 1
plot(f11754(11754))
f11755(a11755) => a11755 + 1
plot(f11755(11755))
f11756(a11756) => a11756 + 1
plot(f11756(11756))
f11757(a11757) => a11757 + 1
plot(f11757(11757))
f11758(a11758) => a11758 + 1
plot(f11758(11758))
f11759(a11759) => a11759 + 1
plot(f11759(11759))
f11760(a11760) => a11760 + 1
plot(f11760(11760))
f11761(a11761) => a11761 + 1
plot(f11761(11761))
f11762(a11762) => a11762 + 1
plot(f11762(11762))
f11763(a11763) => a11763 + 1
plot(f11763(11763))
f11764(a11764) => a11764 + 1
plot(f11764(11764))
f11765(a11765) => a11765 + 1
plot(f11765(11765))
f11766(a11766) => a11766 + 1
plot(f11766(11766))
f11767(a11767) => a11767 + 1
plot(f11767(11767))
f11768(a11768) => a11768 + 1
plot(f11768(11768))
f11769(a11769) => a11769 + 1
plot(f11769(11769))
f11770(a11770) => a11770 + 1
plot(f11770(11770))
f11771(a11771) => a11771 + 1
plot(f11771(11771))
f11772(a11772) => a11772 + 1
plot(f11772(11772))
f11773(a11773) => a11773 + 1
plot(f11773(11773))
f11774(a11774) => a11774 + 1
plot(f11774(11774))
f11775(a11775) => a11775 + 1
plot(f11775(11775))
f11776(a11776) => a11776 + 1
plot(f11776(11776))
f11777(a11777) => a11777 + 1
plot(f11777(11777))
f11778(a11778) => a11778 + 1
plot(f11778(11778))
f11779(a11779) => a11779 + 1
plot(f11779(11779))
f11780(a11780) => a11780 + 1
plot(f11780(11780))
f11781(a11781) => a11781 + 1
plot(f11781(11781))
f11782(a11782) => a11782 + 1
plot(f11782(11782))
f11783(a11783) => a11783 + 1
plot(f11783(11783))
f11784(a11784) => a11784 + 1
plot(f11784(11784))
f11785(a11785) => a11785 + 1
plot(f11785(11785))
f11786(a11786) => a11786 + 1
plot(f11786(11786))
f11787(a11787) => a11787 + 1
plot(f11787(11787))
f11788(a11788) => a11788 + 1
plot(f11788(11788))
f11789(a11789) => a11789 + 1
plot(f11789(11789))
f11790(a11790) => a11790 + 1
plot(f11790(11790))
f11791(a11791) => a11791 + 1
plot(f11791(11791))
f11792(a11792) => a11792 + 1
plot(f11792(11792))
f11793(a11793) => a11793 + 1
plot(f11793(11793))
f11794(a11794) => a11794 + 1
plot(f11794(11794))
f11795(a11795) => a11795 + 1
plot(f11795(11795))
f11796(a11796) => a11796 + 1
plot(f11796(11796))
f11797(a11797) => a11797 + 1
plot(f11797(11797))
f11798(a11798) => a11798 + 1
plot(f11798(11798))
f11799(a11799) => a11799 + 1
plot(f11799(11799))
f11800(a11800) => a11800 + 1
plot(f11800(11800))
f11801(a11801) => a11801 + 1
plot(f11801(11801))
f11802(a11802) => a11802 + 1
plot(f11802(11802))
f11803(a11803) => a11803 + 1
plot(f11803(11803))
f11804(a11804) => a11804 + 1
plot(f11804(11804))
f11805(a11805) => a11805 + 1
plot(f11805(11805))
f11806(a11806) => a11806 + 1
plot(f11806(11806))
f11807(a11807) => a11807 + 1
plot(f11807(11807))
f11808(a11808) => a11808 + 1
plot(f11808(11808))
f11809(a11809) => a11809 + 1
plot(f11809(11809))
f11810(a11810) => a11810 + 1
plot(f11810(11810))
f11811(a11811) => a11811 + 1
plot(f11811(11811))
f11812(a11812) => a11812 + 1
plot(f11812(11812))
f11813(a11813) => a11813 + 1
plot(f11813(11813))
f11814(a11814) => a11814 + 1
plot(f11814(11814))
f11815(a11815) => a11815 + 1
plot(f11815(11815))
f11816(a11816) => a11816 + 1
plot(f11816(11816))
f11817(a11817) => a11817 + 1
plot(f11817(11817))
f11818(a11818) => a11818 + 1
plot(f11818(11818))
f11819(a11819) => a11819 + 1
plot(f11819(11819))
f11820(a11820) => a11820 + 1
plot(f11820(11820))
f11821(a11821) => a11821 + 1
plot(f11821(11821))
f11822(a11822) => a11822 + 1
plot(f11822(11822))
f11823(a11823) => a11823 + 1
plot(f11823(11823))
f11824(a11824) => a11824 + 1
plot(f11824(11824))
f11825(a11825) => a11825 + 1
plot(f11825(11825))
f11826(a11826) => a11826 + 1
plot(f11826(11826))
f11827(a11827) => a11827 + 1
plot(f11827(11827))
f11828(a11828) => a11828 + 1
plot(f11828(11828))
f11829(a11829) => a11829 + 1
plot(f11829(11829))
f11830(a11830) => a11830 + 1
plot(f11830(11830))
f11831(a11831) => a11831 + 1
plot(f11831(11831))
f11832(a11832) => a11832 + 1
plot(f11832(11832))
f11833(a11833) => a11833 + 1
plot(f11833(11833))
f11834(a11834) => a11834 + 1
plot(f11834(11834))
f11835(a11835) => a11835 + 1
plot(f11835(11835))
f11836(a11836) => a11836 + 1
plot(f11836(11836))
f11837(a11837) => a11837 + 1
plot(f11837(11837))
f11838(a11838) => a11838 + 1
plot(f11838(11838))
f11839(a11839) => a11839 + 1
plot(f11839(11839))
f11840(a11840) => a11840 + 1
plot(f11840(11840))
f11841(a11841) => a11841 + 1
plot(f11841(11841))
f11842(a11842) => a11842 + 1
plot(f11842(11842))
f11843(a11843) => a11843 + 1
plot(f11843(11843))
f11844(a11844) => a11844 + 1
plot(f11844(11844))
f11845(a11845) => a11845 + 1
plot(f11845(11845))
f11846(a11846) => a11846 + 1
plot(f11846(11846))
f11847(a11847) => a11847 + 1
plot(f11847(11847))
f11848(a11848) => a11848 + 1
plot(f11848(11848))
f11849(a11849) => a11849 + 1
plot(f11849(11849))
f11850(a11850) => a11850 + 1
plot(f11850(11850))
f11851(a11851) => a11851 + 1
plot(f11851(11851))
f11852(a11852) => a11852 + 1
plot(f11852(11852))
f11853(a11853) => a11853 + 1
plot(f11853(11853))
f11854(a11854) => a11854 + 1
plot(f11854(11854))
f11855(a11855) => a11855 + 1
plot(f11855(11855))
f11856(a11856) => a11856 + 1
plot(f11856(11856))
f11857(a11857) => a11857 + 1
plot(f11857(11857))
f11858(a11858) => a11858 + 1
plot(f11858(11858))
f11859(a11859) => a11859 + 1
plot(f11859(11859))
f11860(a11860) => a11860 + 1
plot(f11860(11860))
f11861(a11861) => a11861 + 1
plot(f11861(11861))
f11862(a11862) => a11862 + 1
plot(f11862(11862))
f11863(a11863) => a11863 + 1
plot(f11863(11863))
f11864(a11864) => a11864 + 1
plot(f11864(11864))
f11865(a11865) => a11865 + 1
plot(f11865(11865))
f11866(a11866) => a11866 + 1
plot(f11866(11866))
f11867(a11867) => a11867 + 1
plot(f11867(11867))
f11868(a11868) => a11868 + 1
plot(f11868(11868))
f11869(a11869) => a11869 + 1
plot(f11869(11869))
f11870(a11870) => a11870 + 1
plot(f11870(11870))
f11871(a11871) => a11871 + 1
plot(f11871(11871))
f11872(a11872) => a11872 + 1
plot(f11872(11872))
f11873(a11873) => a11873 + 1
plot(f11873(11873))
f11874(a11874) => a11874 + 1
plot(f11874(11874))
f11875(a11875) => a11875 + 1
plot(f11875(11875))
f11876(a11876) => a11876 + 1
plot(f11876(11876))
f11877(a11877) => a11877 + 1
plot(f11877(11877))
f11878(a11878) => a11878 + 1
plot(f11878(11878))
f11879(a11879) => a11879 + 1
plot(f11879(11879))
f11880(a11880) => a11880 + 1
plot(f11880(11880))
f11881(a11881) => a11881 + 1
plot(f11881(11881))
f11882(a11882) => a11882 + 1
plot(f11882(11882))
f11883(a11883) => a11883 + 1
plot(f11883(11883))
f11884(a11884) => a11884 + 1
plot(f11884(11884))
f11885(a11885) => a11885 + 1
plot(f11885(11885))
f11886(a11886) => a11886 + 1
plot(f11886(11886))
f11887(a11887) => a11887 + 1
plot(f11887(11887))
f11888(a11888) => a11888 + 1
plot(f11888(11888))
f11889(a11889) => a11889 + 1
plot(f11889(11889))
f11890(a11890) => a11890 + 1
plot(f11890(11890))
f11891(a11891) => a11891 + 1
plot(f11891(11891))
f11892(a11892) => a11892 + 1
plot(f11892(11892))
f11893(a11893) => a11893 + 1
plot(f11893(11893))
f11894(a11894) => a11894 + 1
plot(f11894(11894))
f11895(a11895) => a11895 + 1
plot(f11895(11895))
f11896(a11896) => a11896 + 1
plot(f11896(11896))
f11897(a11897) => a11897 + 1
plot(f11897(11897))
f11898(a11898) => a11898 + 1
plot(f11898(11898))
f11899(a11899) => a11899 + 1
plot(f11899(11899))
f11900(a11900) => a11900 + 1
plot(f11900(11900))
f11901(a11901) => a11901 + 1
plot(f11901(11901))
f11902(a11902) => a11902 + 1
plot(f11902(11902))
f11903(a11903) => a11903 + 1
plot(f11903(11903))
f11904(a11904) => a11904 + 1
plot(f11904(11904))
f11905(a11905) => a11905 + 1
plot(f11905(11905))
f11906(a11906) => a11906 + 1
plot(f11906(11906))
f11907(a11907) => a11907 + 1
plot(f11907(11907))
f11908(a11908) => a11908 + 1
plot(f11908(11908))
f11909(a11909) => a11909 + 1
plot(f11909(11909))
f11910(a11910) => a11910 + 1
plot(f11910(11910))
f11911(a11911) => a11911 + 1
plot(f11911(11911))
f11912(a11912) => a11912 + 1
plot(f11912(11912))
f11913(a11913) => a11913 + 1
plot(f11913(11913))
f11914(a11914) => a11914 + 1
plot(f11914(11914))
f11915(a11915) => a11915 + 1
plot(f11915(11915))
f11916(a11916) => a11916 + 1
plot(f11916(11916))
f11917(a11917) => a11917 + 1
plot(f11917(11917))
f11918(a11918) => a11918 + 1
plot(f11918(11918))
f11919(a11919) => a11919 + 1
plot(f11919(11919))
f11920(a11920) => a11920 + 1
plot(f11920(11920))
f11921(a11921) => a11921 + 1
plot(f11921(11921))
f11922(a11922) => a11922 + 1
plot(f11922(11922))
f11923(a11923) => a11923 + 1
plot(f11923(11923))
f11924(a11924) => a11924 + 1
plot(f11924(11924))
f11925(a11925) => a11925 + 1
plot(f11925(11925))
f11926(a11926) => a11926 + 1
plot(f11926(11926))
f11927(a11927) => a11927 + 1
plot(f11927(11927))
f11928(a11928) => a11928 + 1
plot(f11928(11928))
f11929(a11929) => a11929 + 1
plot(f11929(11929))
f11930(a11930) => a11930 + 1
plot(f11930(11930))
f11931(a11931) => a11931 + 1
plot(f11931(11931))
f11932(a11932) => a11932 + 1
plot(f11932(11932))
f11933(a11933) => a11933 + 1
plot(f11933(11933))
f11934(a11934) => a11934 + 1
plot(f11934(11934))
f11935(a11935) => a11935 + 1
plot(f11935(11935))
f11936(a11936) => a11936 + 1
plot(f11936(11936))
f11937(a11937) => a11937 + 1
plot(f11937(11937))
f11938(a11938) => a11938 + 1
plot(f11938(11938))
f11939(a11939) => a11939 + 1
plot(f11939(11939))
f11940(a11940) => a11940 + 1
plot(f11940(11940))
f11941(a11941) => a11941 + 1
plot(f11941(11941))
f11942(a11942) => a11942 + 1
plot(f11942(11942))
f11943(a11943) => a11943 + 1
plot(f11943(11943))
f11944(a11944) => a11944 + 1
plot(f11944(11944))
f11945(a11945) => a11945 + 1
plot(f11945(11945))
f11946(a11946) => a11946 + 1
plot(f11946(11946))
f11947(a11947) => a11947 + 1
plot(f11947(11947))
f11948(a11948) => a11948 + 1
plot(f11948(11948))
f11949(a11949) => a11949 + 1
plot(f11949(11949))
f11950(a11950) => a11950 + 1
plot(f11950(11950))
f11951(a11951) => a11951 + 1
plot(f11951(11951))
f11952(a11952) => a11952 + 1
plot(f11952(11952))
f11953(a11953) => a11953 + 1
plot(f11953(11953))
f11954(a11954) => a11954 + 1
plot(f11954(11954))
f11955(a11955) => a11955 + 1
plot(f11955(11955))
f11956(a11956) => a11956 + 1
plot(f11956(11956))
f11957(a11957) => a11957 + 1
plot(f11957(11957))
f11958(a11958) => a11958 + 1
plot(f11958(11958))
f11959(a11959) => a11959 + 1
plot(f11959(11959))
f11960(a11960) => a11960 + 1
plot(f11960(11960))
f11961(a11961) => a11961 + 1
plot(f11961(11961))
f11962(a11962) => a11962 + 1
plot(f11962(11962))
f11963(a11963) => a11963 + 1
plot(f11963(11963))
f11964(a11964) => a11964 + 1
plot(f11964(11964))
f11965(a11965) => a11965 + 1
plot(f11965(11965))
f11966(a11966) => a11966 + 1
plot(f11966(11966))
f11967(a11967) => a11967 + 1
plot(f11967(11967))
f11968(a11968) => a11968 + 1
plot(f11968(11968))
f11969(a11969) => a11969 + 1
plot(f11969(11969))
f11970(a11970) => a11970 + 1
plot(f11970(11970))
f11971(a11971) => a11971 + 1
plot(f11971(11971))
f11972(a11972) => a11972 + 1
plot(f11972(11972))
f11973(a11973) => a11973 + 1
plot(f11973(11973))
f11974(a11974) => a11974 + 1
plot(f11974(11974))
f11975(a11975) => a11975 + 1
plot(f11975(11975))
f11976(a11976) => a11976 + 1
plot(f11976(11976))
f11977(a11977) => a11977 + 1
plot(f11977(11977))
f11978(a11978) => a11978 + 1
plot(f11978(11978))
f11979(a11979) => a11979 + 1
plot(f11979(11979))
f11980(a11980) => a11980 + 1
plot(f11980(11980))
f11981(a11981) => a11981 + 1
plot(f11981(11981))
f11982(a11982) => a11982 + 1
plot(f11982(11982))
f11983(a11983) => a11983 + 1
plot(f11983(11983))
f11984(a11984) => a11984 + 1
plot(f11984(11984))
f11985(a11985) => a11985 + 1
plot(f11985(11985))
f11986(a11986) => a11986 + 1
plot(f11986(11986))
f11987(a11987) => a11987 + 1
plot(f11987(11987))
f11988(a11988) => a11988 + 1
plot(f11988(11988))
f11989(a11989) => a11989 + 1
plot(f11989(11989))
f11990(a11990) => a11990 + 1
plot(f11990(11990))
f11991(a11991) => a11991 + 1
plot(f11991(11991))
f11992(a11992) => a11992 + 1
plot(f11992(11992))
f11993(a11993) => a11993 + 1
plot(f11993(11993))
f11994(a11994) => a11994 + 1
plot(f11994(11994))
f11995(a11995) => a11995 + 1
plot(f11995(11995))
f11996(a11996) => a11996 + 1
plot(f11996(11996))
f11997(a11997) => a11997 + 1
plot(f11997(11997))
f11998(a11998) => a11998 + 1
plot(f11998(11998))
f11999(a11999) => a11999 + 1
plot(f11999(11999))

'''
}